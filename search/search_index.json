{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to CS Cloud","text":"<p>\u516b\u80a1\u6587\u662f\u4e2d\u56fd\u8f6f\u4ef6\u5de5\u7a0b\u5e08\u7684\u798f\u62a5, salute\ud83e\udee1</p> <p>\u5b9e\u5728\u662f\u96be\u4ee5\u5fcd\u53d7 pygment \u7684\u6e32\u67d3, \u7528 shiki \u4e86, \u79fb\u6b65 https://duskbat.github.io/cs-wiki/</p>"},{"location":"static-web/","title":"\u9759\u6001\u7f51\u7ad9\u751f\u6210","text":"<p>https://jamstack.org/generators/ \u663e\u7136\u73b0\u5728\u9759\u6001\u7f51\u7ad9\u751f\u6210\u5668\u7684\u9009\u62e9\u8fd8\u662f\u6bd4\u8f83\u591a\u7684, \u4f5c\u4e3a\u4e00\u4e2a\u7a0b\u5e8f\u5458, \u4e3b\u8981\u7684\u51e0\u4e2a\u5173\u6ce8\u70b9\u4e0d\u5916\u4e4e:</p> <ul> <li>\u4ee3\u7801\u9ad8\u4eae</li> <li>mermaid \u652f\u6301</li> <li>\u516c\u5f0f\u652f\u6301</li> </ul>"},{"location":"static-web/#_2","title":"\u4ee3\u7801\u5757\u5207\u6362","text":"<p>\u8bf4\u5b9e\u8bdd, \u4ee3\u7801\u5757\u5207\u6362\u662f\u9009\u62e9\u9759\u6001\u7f51\u7ad9\u800c\u4e0d\u662f\u7eaf markdown \u6587\u4ef6\u7684\u4e3b\u8981\u539f\u56e0</p>"},{"location":"static-web/#_3","title":"\u4ee3\u7801\u9ad8\u4eae","text":"<p>\u540e\u7aef\u4ee3\u7801\u9ad8\u4eae\u53ef\u4ee5\u9009\u62e9 pygments, \u8bf4\u5b9e\u8bdd pygments \u6548\u679c\u4e00\u822c\u822c \u9884\u89c8: https://swapoff.org/chroma/playground/</p> <p>\u51e0\u4e2a\u4e3b\u6d41\u7684\u524d\u7aef\u4ee3\u7801\u9ad8\u4eae\u9009\u62e9:</p> <ul> <li>highlightjs</li> <li>prismjs</li> <li>shiki</li> </ul> <p>\u4e0d\u8003\u8651\u6e32\u67d3\u901f\u5ea6\u7684\u524d\u63d0\u4e0b, shiki \u7684\u6e32\u67d3\u6548\u679c\u6700\u597d, prism \u6b21\u4e4b, highlight \u6700\u5dee;</p>"},{"location":"static-web/#_4","title":"\u516c\u5f0f","text":"<p>KaTex \u57fa\u672c\u53ef\u4ee5\u6ee1\u8db3\u9700\u6c42</p>"},{"location":"static-web/#mermaid","title":"mermaid \u652f\u6301","text":"<p>\u6709\u7684\u751f\u6210\u5668\u5bf9 mermaid \u652f\u6301\u4e0d\u591f\u597d, \u6bd4\u5982 material of mkdocs</p>"},{"location":"static-web/#_5","title":"\u672c\u7ad9","text":"<p>\u672c\u7ad9\u8fd8\u662f\u9009\u62e9\u4e86 material of mkdocs, \u4e3b\u8981\u662f\u4e0d\u60f3\u8ddf npm \u6253\u4ea4\u9053, python \u7528\u7740\u633a\u8212\u670d\u7684; \u4f46\u662f\u9ad8\u4eae\u6548\u679c\u8ddf mermaid \u6548\u679c\u5dee\u70b9\u610f\u601d</p>"},{"location":"env/WSL2%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/","title":"WSL2 \u7f51\u7edc\u914d\u7f6e","text":""},{"location":"env/WSL2%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/#wsl1-wsl2","title":"WSL1 &amp; WSL2","text":"<ul> <li>WSL1     WSL1 Linux \u5b50\u7cfb\u7edf\u548c Windows \u5171\u4eab\u7f51\u7edc\u7aef\u53e3</li> <li>WSL2     WSL2 \u57fa\u4e8e Hyper-V \u8fd0\u884c, Linux \u5b50\u7cfb\u7edf\u548c Windows \u5728\u7f51\u7edc\u4e0a\u662f\u5404\u81ea\u72ec\u7acb\u7684\uff0c\u4ece Linux \u5b50\u7cfb\u7edf\u8bbf\u95ee Windows \u9996\u5148\u9700\u8981\u627e\u5230 Windows \u7684 IP\u3002  </li> </ul>"},{"location":"env/WSL2%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/#wsl2-windows","title":"\u914d\u7f6e WSL2 \u8bbf\u95eeWindows\u4e0a\u7684\u4ee3\u7406","text":"<p>\u6709\u4e24\u4e2a\u5173\u952e\u6b65\u9aa4: 1. WSL2 \u4e2d\u914d\u7f6e\u7684\u4ee3\u7406\u8981\u6307\u5411 Windows \u7684 IP 2. Windows \u4e0a\u7684\u4ee3\u7406\u5ba2\u6237\u7aef\u9700\u8981\u5141\u8bb8\u6765\u81ea\u672c\u5730\u5c40\u57df\u7f51\u7684\u8bf7\u6c42  </p> <p>Linux \u5b50\u7cfb\u7edf\u662f\u901a\u8fc7 Windows \u8bbf\u95ee\u7f51\u7edc\u7684\uff0c\u6240\u4ee5 Linux \u5b50\u7cfb\u7edf\u4e2d\u7684\u7f51\u5173\u6307\u5411\u7684\u662f Windows\uff0cDNS \u670d\u52a1\u5668\u6307\u5411\u7684\u4e5f\u662f Windows\uff0c\u57fa\u4e8e\u8fd9\u4e24\u4e2a\u7279\u6027\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 Windows \u7684 IP \u8bfb\u53d6\u51fa\u6765\u3002 \u901a\u8fc7 <code>cat /etc/resolv.conf</code> \u67e5\u770b DNS \u670d\u52a1\u5668 IP; \u901a\u8fc7 \u73af\u5883\u53d8\u91cf ALL_PROXY \u914d\u7f6e\u4ee3\u7406: <pre><code>export ALL_PROXY=\"http://127.0.0.1:7890\"\n</code></pre> \u5728 Windows \u4ee3\u7406\u5ba2\u6237\u7aef\u4e0a\u5141\u8bb8\u672c\u5730\u5c40\u57df\u7f51\u8bf7\u6c42: Allow LAN</p>"},{"location":"env/git/","title":"git","text":"<p>\u4e71\u7801 <code>git config --global core.quotepath false</code></p>"},{"location":"java/HashMap/","title":"HashMap  <p>\u6e90\u7801\u7248\u672c: 8u202</p>","text":""},{"location":"java/HashMap/#_1","title":"\u6784\u9020\u51fd\u6570 <p>\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u8d1f\u8f7d\u56e0\u5b50\u548c\u6269\u5bb9\u9608\u503c, \u5e76\u6ca1\u6709\u521d\u59cb\u5316 table, \u4e5f\u6ca1\u6709\u8bbe\u5b9a capacity</p> <ul> <li> <p>4 \u4e2a\u91cd\u8f7d:</p> <pre><code>public HashMap()\npublic HashMap(int initialCapacity)\npublic HashMap(int initialCapacity, float loadFactor)\npublic HashMap(Map&lt;? extends K, ? extends V&gt; m)\n</code></pre> </li> <li> <p><code>HashMap()</code>     \u53ea\u521d\u59cb\u5316\u8d1f\u8f7d\u56e0\u5b50, \u6362\u53e5\u8bdd\u8bf4, thr=0</p> <pre><code>this.loadFactor = 0.75;\n</code></pre> </li> <li> <p><code>HashMap(int initialCapacity)</code>     \u6709\u53c2\u6784\u9020\u51fd\u6570\u628a threshold \u8bbe\u4e3a\u4e86 2 \u7684\u6574\u6570\u500d</p>  <p>\u5982\u679c\u5165\u53c2 cap=0, \u5219 thr=1</p>  <pre><code>this.loadFactor = 0.75;\nthis.threshold = tableSizeFor(initialCapacity);\n\nstatic final int tableSizeFor(int cap) {\n    int n = cap - 1;\n    n |= n &gt;&gt;&gt; 1;\n    n |= n &gt;&gt;&gt; 2;\n    n |= n &gt;&gt;&gt; 4;\n    n |= n &gt;&gt;&gt; 8;\n    n |= n &gt;&gt;&gt; 16;\n    return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n}\n</code></pre> </li> </ul> <p></p>","text":""},{"location":"java/HashMap/#_2","title":"\u5173\u952e\u65b9\u6cd5","text":""},{"location":"java/HashMap/#hash","title":"hash","text":"<p>HashMap \u4e2d\u7684 <code>hash()</code> \u4f1a\u5c06 hashcode \u9ad8 16 \u4f4d\u8ddf\u4f4e 16 \u4f4d\u5f02\u6216\u5728\u4e00\u8d77</p> <pre><code>static final int hash(Object key) {\n    int h;\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);\n}\n</code></pre>"},{"location":"java/HashMap/#get","title":"get","text":"<pre><code>final Node&lt;K, V&gt; getNode(int hash, Object key) {\n    Node&lt;K, V&gt;[] tab;\n    Node&lt;K, V&gt; first, e;\n    int n;\n    K k;\n    if ((tab = table) != null &amp;&amp;\n            (n = tab.length) &gt; 0 &amp;&amp;\n            (first = tab[(n - 1) &amp; hash]) != null) {\n        // \u68c0\u67e5\u7b2c0\u4e2a\n        if (first.hash == hash &amp;&amp; ((k = first.key) == key ||\n                (key != null &amp;&amp; key.equals(k))))\n            return first;\n\n        if ((e = first.next) != null) {\n            // \u6811\u8282\u70b9\n            if (first instanceof TreeNode)\n                return ((TreeNode&lt;K, V&gt;) first).getTreeNode(hash, key);\n            // \u904d\u5386\u94fe\u8868\n            do {\n                if (e.hash == hash &amp;&amp; ((k = e.key) == key ||\n                        (key != null &amp;&amp; key.equals(k))))\n                    return e;\n            } while ((e = e.next) != null);\n        }\n    }\n    return null;\n}\n</code></pre>"},{"location":"java/HashMap/#put","title":"put","text":"<p>\u8fc7\u7a0b\u63cf\u8ff0:</p> <ol> <li>\u9996\u5148\u5224\u5b9a\u662f\u5426\u7a7a\u6570\u7ec4, \u5982\u679c\u662f\u7a7a\u6570\u7ec4 <code>resize()</code></li> <li>\u8ba1\u7b97 key \u5728 table \u4e2d\u7684 <code>idx = (n-1) &amp; hash</code></li> <li> <p>\u653e\u8fdb\u6876\u4e2d</p> <ol> <li>\u5982\u679c\u662f\u7a7a\u6876, <code>new Node()</code></li> <li>\u5982\u679c\u662f\u6811\u8282\u70b9, \u585e\u8fdb\u6811\u91cc</li> <li> <p>\u4ece\u5934\u5230\u5c3e\u641c\u7d22\u94fe\u8868\u8282\u70b9</p> <ol> <li>\u6ca1\u627e\u5230, \u5c3e\u63d2; \u5c3e\u63d2\u540e\u6811\u5f62\u5316\u5224\u5b9a</li> <li>\u627e\u5230\u5219\u6807\u8bb0</li> </ol> <p>\u5982\u679c\u627e\u5230, \u5224\u65ad\u662f\u5426\u66ff\u6362, return;</p> </li> </ol> </li> <li> <p>\u6700\u540e\u8fd8\u6709\u4e00\u6b21\u6269\u5bb9\u5224\u5b9a</p> </li> </ol> <pre><code>static final int TREEIFY_THRESHOLD = 8;\n\n// put\u65b9\u6cd5\u4f1a\u8fd4\u56de\u65e7\u503c\nfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) {\n    Node&lt;K, V&gt;[] tab;\n    Node&lt;K, V&gt; p;\n    int n, i;\n    // \u7a7a table\n    if ((tab = table) == null || (n = tab.length) == 0)\n        n = (tab = resize()).length;\n    // \u7a7a\u6876\n    if ((p = tab[i = (n - 1) &amp; hash]) == null)\n        tab[i] = newNode(hash, key, value, null);\n\n    else {\n        Node&lt;K, V&gt; e;\n        K k;\n        // \u4e0e\u6876\u4e2d\u94fe\u8868\u7b2c0\u4e2a\u76f8\u7b49\n        // hash \u5f88\u91cd\u8981\n        if (p.hash == hash &amp;&amp;\n            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))\n            e = p;\n        // TreeNode\n        else if (p instanceof TreeNode)\n            e = ((TreeNode&lt;K, V&gt;) p).putTreeVal(this, tab, hash, key, value);\n        // \u904d\u5386\u6876\u4e2d\u94fe\u8868\n        else {\n            // binCount \u8ba1\u6570\n            for (int binCount = 0; ; ++binCount) {\n                // \u6700\u540e\u4e00\u4e2a\u5143\u7d20\n                if ((e = p.next) == null) {\n                    p.next = newNode(hash, key, value, null);\n                    // \u94fe\u8868\u6570\u91cf &gt;= 8, \u6811\u5f62\u5316\n                    if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                        treeifyBin(tab, hash);\n                    break;\n                }\n                // \u627e\u5230\u76f8\u540c\u7684key\n                if (e.hash == hash &amp;&amp;\n                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))\n                    break;\n                // next\n                p = e;\n            }\n        }\n\n        if (e != null) { // existing mapping for key\n            V oldValue = e.value;\n            // put() \u4f20\u5165\u7684 onlyIfAbsent=false, \u53ea\u66ff\u6362\u7b49\u4e8enull\u7684Val\n            if (!onlyIfAbsent || oldValue == null)\n                e.value = value;\n            // \u4ec0\u4e48\u90fd\u4e0d\u505a, LinkedHashMap \u91cd\u5199\u6b64\u65b9\u6cd5\n            afterNodeAccess(e);\n            return oldValue;\n        }\n    }\n\n    ++modCount;\n    if (++size &gt; threshold) resize();\n    // \u4ec0\u4e48\u90fd\u4e0d\u505a, LinkedHashMap \u91cd\u5199\u6b64\u65b9\u6cd5\n    afterNodeInsertion(evict);\n    return null;\n}\n</code></pre>"},{"location":"java/HashMap/#remove","title":"remove","text":"<p>\u8fc7\u7a0b\u63cf\u8ff0:</p> <ol> <li>\u9996\u5148\u5224\u65ad\u8868\u548c\u6876\u4e0d\u4e3a\u7a7a</li> <li>\u5982\u679c\u9996\u4f4d\u5c31\u662f\u76ee\u6807\u503c, \u6807\u8bb0</li> <li>\u5982\u679c next!=null<ol> <li>\u662f\u6811\u8282\u70b9, \u6811\u67e5\u627e, \u6807\u8bb0</li> <li>\u662f\u94fe\u8868\u8282\u70b9, \u94fe\u8868\u67e5\u627e, \u6807\u8bb0</li> </ol> </li> <li>\u5982\u679c\u627e\u5230<ol> <li>\u6811\u8282\u70b9, \u5220\u9664</li> <li>\u5934\u8282\u70b9, \u5220\u9664</li> <li>\u94fe\u8868\u8282\u70b9, \u5220\u9664</li> </ol> </li> </ol> <pre><code>final Node&lt;K, V&gt; removeNode(int hash, Object key, Object value, boolean matchValue, boolean movable) {\n    Node&lt;K, V&gt;[] tab;\n    Node&lt;K, V&gt; p; // pos, \u6876\u4f4d\u7b2c0\u4e2aNode\n    int n, index;\n    // \u6876\u4f4d\u4e0d\u4e3a\u7a7a\n    if ((tab = table) != null &amp;&amp;\n        (n = tab.length) &gt; 0 &amp;&amp;\n        (p = tab[index = (n - 1) &amp; hash]) != null) {\n        // node \u6307\u5411\u627e\u5230\u7684Node\n        Node&lt;K, V&gt; node = null, e;\n        K k;\n        V v;\n        // \u7b2c0\u4e2a\n        if (p.hash == hash &amp;&amp;\n                ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))\n            node = p;\n        // \u5f80\u4e0b\u627e\n        else if ((e = p.next) != null) {\n            if (p instanceof TreeNode)\n                node = ((TreeNode&lt;K, V&gt;) p).getTreeNode(hash, key);\n            else {\n                do {\n                    if (e.hash == hash &amp;&amp;\n                        ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) {\n                        node = e;\n                        break;\n                    }\n                    p = e;\n                } while ((e = e.next) != null);\n            }\n        }\n\n        if (node != null &amp;&amp;\n            (!matchValue || (v = node.value) == value || (value != null &amp;&amp; value.equals(v)))) {\n            if (node instanceof TreeNode)\n                ((TreeNode&lt;K, V&gt;) node).removeTreeNode(this, tab, movable);\n            else if (node == p)\n                tab[index] = node.next;\n            else\n                p.next = node.next;\n\n            ++modCount;\n            --size;\n            // \u4ec0\u4e48\u90fd\u4e0d\u505a, LinkedHashMap \u5b9e\u73b0\u8be5\u65b9\u6cd5\n            afterNodeRemoval(node);\n            return node;\n        }\n    }\n    return null;\n}\n</code></pre>"},{"location":"java/HashMap/#treeifybin","title":"treeifyBin","text":"<p>\u8fc7\u7a0b\u63cf\u8ff0:</p> <ol> <li>\u9996\u5148\u6269\u5bb9\u5224\u5b9a, cap&lt;64</li> <li>\u6784\u5efa TreeNode \u7c7b\u578b\u7684\u53cc\u5411\u94fe\u8868</li> <li>\u6876\u7684 head \u91cd\u7f6e\u4e3a\u521a\u521b\u5efa\u7684 head</li> <li>\u53cc\u5411\u94fe\u8868\u6811\u5f62\u5316 treeify()</li> </ol> <pre><code>static final int MIN_TREEIFY_CAPACITY = 64;\n\nfinal void treeifyBin(Node&lt;K, V&gt;[] tab, int hash) {\n    int n, index;\n    Node&lt;K, V&gt; e;\n    if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)\n        resize();\n    else if ((e = tab[index = (n - 1) &amp; hash]) != null) {\n        TreeNode&lt;K, V&gt; hd = null, tl = null;\n        do {\n            TreeNode&lt;K, V&gt; p = replacementTreeNode(e, null);\n            if (tl == null)\n                hd = p;\n            else {\n                p.prev = tl;\n                tl.next = p;\n            }\n            tl = p;\n        } while ((e = e.next) != null);\n\n        if ((tab[index] = hd) != null)\n            hd.treeify(tab);\n    }\n}\n</code></pre>"},{"location":"java/HashMap/#resize","title":"resize","text":"<ol> <li> <p>\u8ba1\u7b97 \u65b0\u9608\u503c\u548c\u65b0\u5bb9\u91cf</p> <ol> <li>\u65e0\u53c2\u521d\u59cb\u5316 <code>(cap==0 &amp;&amp; thr==0)</code>    \u65b0\u9608\u503c = 16*0.75 = 12    \u65b0\u5bb9\u91cf = 16</li> <li> <p>\u542b\u53c2\u521d\u59cb\u5316 <code>(cap==0 &amp;&amp; thr&gt;0)</code>    \u65b0\u5bb9\u91cf = \u8001\u9608\u503c</p> <p>\u8001\u9608\u503c\u5728\u6784\u9020\u65b9\u6cd5\u4e2d\u5df2\u8bbe\u4e3a 2 \u7684\u5e42</p> </li> <li> <p>\u975e\u521d\u59cb\u5316 <code>(cap!=0)</code></p> <ol> <li>\u5982\u679c\u5bb9\u91cf\u5df2\u7ecf\u6700\u5927, \u9608\u503c\u62c9\u6ee1, return;</li> <li>\u5426\u5219: \u5bb9\u91cf 2 \u500d\u6269\u5bb9; \u5982\u679c 2 \u500d\u8fd8\u6ca1\u6700\u5927, \u5e76\u4e14\u539f\u5bb9\u91cf&gt;=16:    \u9608\u503c *= 2</li> </ol> </li> </ol> <p>\u5982\u679c\u65b0\u9608\u503c\u6ca1\u8bbe\u5b9a</p> <p>\u6b64\u65f6\u6709 2 \u79cd\u60c5\u51b5, (\u542b\u53c2\u521d\u59cb\u5316 or \u65e7\u5bb9\u91cf&lt;16) \u90fd\u662f\u542b\u53c2\u521d\u59cb\u5316\u9020\u6210\u7684;</p> <ul> <li> <p>\u65b0\u9608\u503c = \u65b0\u5bb9\u91cf * factor</p> <p>\u5728\u5bb9\u91cf\u5c0f\u4e8e 16 \u7684\u60c5\u51b5\u4e0b, \u6bcf\u6b21\u90fd\u8ba1\u7b97\u65b0\u9608\u503c <code>newThr=newCap*factor</code>, \u4ee5\u7cbe\u786e\u5feb\u901f\u6269\u5bb9(thr \u76f4\u63a5*2 \u4e0d\u7cbe\u786e)</p> </li> </ul> </li> <li> <p>\u6269\u5bb9    \u6309\u7167\u65b0\u5bb9\u91cf\u6269\u5bb9</p> </li> <li> <p>\u91cd\u65b0\u6563\u5217    \u904d\u5386\u6bcf\u4e2a\u6876</p> <ul> <li>\u5355\u8282\u70b9</li> <li>\u6811\u8282\u70b9: \u5224\u5b9a\u662f\u5426\u9700\u8981\u94fe\u8868\u5316</li> <li> <p>\u94fe\u8868\u8282\u70b9: \u62c6\u6210\u4e24\u6761\u94fe\u8868</p> <p>(n-1) &amp; hash n-1: 00001111 -&gt; 00011111 hash:00010101 -&gt; 00010101 \u8981\u4e48\u5728\u539f\u4f4d\u7f6e, \u8981\u4e48\u5728\u539f\u4f4d\u7f6e+\u539f\u5bb9\u91cf\u7684\u4f4d\u7f6e</p> </li> </ul> </li> </ol> <pre><code>static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // 16\n\nstatic final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30; // 1073741824\n\nfinal Node&lt;K, V&gt;[] resize() {\n    Node&lt;K, V&gt;[] oldTab = table;\n    int oldCap = (oldTab == null) ? 0 : oldTab.length;\n    int oldThr = threshold;\n    int newCap, newThr = 0;\n    // \u5148\u8ba1\u7b97cap, thr\n    // cap&gt;0\n    if (oldCap &gt; 0) {\n        // \u5df2\u7ecf\u6700\u5927\u5bb9\u91cf, \u628a\u4e0b\u6b21\u89e6\u53d1\u7684\u9608\u503c\u62c9\u6ee1\n        if (oldCap &gt;= MAXIMUM_CAPACITY) {\n            threshold = Integer.MAX_VALUE;\n            return oldTab;\n        }\n        // cap \u6269\u5bb9\n        else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY)\n            // \u5982\u679c cap&gt;=dft_cap, thr\u4e5f\u6269\n            newThr = oldThr &lt;&lt; 1;\n    }\n    // cap=0 &amp;&amp; thr&gt;0\n    else if (oldThr &gt; 0) newCap = oldThr;\n    // cap=0 &amp;&amp; thr=0\n    else {\n        newCap = DEFAULT_INITIAL_CAPACITY;\n        newThr = (int) (DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n    }\n\n    if (newThr == 0) {\n        float ft = (float) newCap * loadFactor;\n        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float) MAXIMUM_CAPACITY ?\n            (int) ft :\n            Integer.MAX_VALUE);\n    }\n    threshold = newThr;\n\n    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n    Node&lt;K, V&gt;[] newTab = (Node&lt;K, V&gt;[]) new Node[newCap];\n    table = newTab;\n    // old_tab ==&gt; new_tab\n    if (oldTab != null) {\n        // \u904d\u5386\u6bcf\u4e2a\u6876\n        for (int j = 0; j &lt; oldCap; ++j) {\n            Node&lt;K, V&gt; e;\n            if ((e = oldTab[j]) != null) {\n                oldTab[j] = null;\n                // \u5355\u4e2a\u5143\u7d20\n                if (e.next == null)\n                    // \u8981\u4e48new_idx==old_idx, \u8981\u4e48new_idx=old_idx+old_cap\n                    newTab[e.hash &amp; (newCap - 1)] = e;\n                // TreeNode\n                else if (e instanceof TreeNode)\n                    ((TreeNode&lt;K, V&gt;) e).split(this, newTab, j, oldCap);\n                // ListNode\n                else {\n                    Node&lt;K, V&gt; loHead = null, loTail = null;\n                    Node&lt;K, V&gt; hiHead = null, hiTail = null;\n                    Node&lt;K, V&gt; next;\n                    do {\n                        next = e.next;\n                        // \u53d6\u6700\u9ad8\u4f4d, \u5982\u679c0\u5c31\u662f\u539f\u4f4d\n                        if ((e.hash &amp; oldCap) == 0) {\n                            if (loTail == null) loHead = e;\n                            else loTail.next = e;\n                            loTail = e;\n                        } else {\n                            if (hiTail == null) hiHead = e;\n                            else hiTail.next = e;\n                            hiTail = e;\n                        }\n                    } while ((e = next) != null);\n                    if (loTail != null) {\n                        loTail.next = null;\n                        newTab[j] = loHead;\n                    }\n                    if (hiTail != null) {\n                        hiTail.next = null;\n                        newTab[j + oldCap] = hiHead;\n                    }\n                }\n            }\n        }\n    }\n    return newTab;\n}\n</code></pre> <p></p>"},{"location":"java/HashMap/#_3","title":"\u7ec6\u8282\u63d0\u95ee","text":""},{"location":"java/HashMap/#key","title":"\u5982\u4f55\u5224\u5b9a key \u76f8\u7b49","text":"<pre><code>// hash &amp;&amp; (== || equal)\nif (p.hash == hash &amp;&amp;\n    ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))\n</code></pre>"},{"location":"java/HashMap/#_4","title":"\u4ec0\u4e48\u65f6\u5019\u94fe\u8868\u5316","text":"<ol> <li><code>resize() -&gt; TreeNode.split() -&gt; untreeify()</code></li> <li><code>removeNode() -&gt; TreeNode.removeTreeNode() -&gt; untreeify()</code></li> </ol> <p>\u6761\u4ef6: \u6876\u4e2d\u5143\u7d20\u6570&lt;=6</p>"},{"location":"java/HashMap/#_5","title":"\u4ec0\u4e48\u65f6\u5019\u6811\u5f62\u5316","text":"<ul> <li><code>put() -&gt; treeifyBin()</code></li> </ul> <p>\u6761\u4ef6: \u6876\u4e2d\u5143\u7d20\u6570&gt;=8</p>"},{"location":"java/HashMap/#table","title":"table \u4ec0\u4e48\u65f6\u5019\u6269\u5bb9","text":"<ul> <li><code>put() -&gt; resize()</code></li> </ul> <p>\u8c03\u7528 <code>resize()</code> \u7684\u573a\u666f:</p> <ol> <li>\u7a7a\u6570\u7ec4</li> <li><code>put()</code> \u51fd\u6570\u6700\u540e</li> <li><code>treeifyBin()</code> \u7684\u65f6\u5019 <code>if tab.length &lt; MIN_TREEIFY_CAPACITY</code>, \u5219 <code>resize()</code></li> </ol>"},{"location":"java/HashMap/#tips","title":"tips <p>\u53ef\u4ee5\u8bd5\u7740 debug \u4e00\u4e0b, \u5173\u6ce8\u4e00\u4e0b <code>resize()</code> \u7684\u7ec6\u8282</p> <pre><code>HashMap&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(0);\nmap.put(1, 1);\nmap.put(2, 2);\n</code></pre>","text":""},{"location":"java/JDK%E4%B8%8B%E8%BD%BD/","title":"JDK \u4e0b\u8f7d","text":""},{"location":"java/JDK%E4%B8%8B%E8%BD%BD/#jdk_1","title":"JDK \u4e0b\u8f7d","text":"<p>Java \u73b0\u5728\u8ddf Oracle \u59d3\u4e86, \u4ece Oracle \u5b98\u7f51\u4e0b\u8f7d: https://www.oracle.com/java/technologies/downloads/</p> <p>\u5b98\u7f51\u4f1a\u6446\u51fa\u6700\u65b0\u7684\u7248\u672c(Java 20)\u548c\u6700\u65b0\u7684 LTS \u7248\u672c(Java 17)</p> <p>\u6b64\u5916, \u8fd8\u53ef\u4ee5\u4e0b\u8f7d\u5f52\u6863(archive)\u7248\u672c, \u6bd4\u5982 Java 8. archive \u7248\u672c\u5217\u8868: https://www.oracle.com/java/technologies/downloads/archive/</p> <p>\u4ece 8u202 \u7248\u672c\u540e, Oracle \u66f4\u6362\u4e86\u8bb8\u53ef\u534f\u8bae, \u6240\u4ee5 8u202 \u6210\u4e86\u6700\u540e\u4e00\u4e2a\u65e7\u8bb8\u53ef\u7684\u7248\u672c</p> <p>8u202 \u7248\u672c\u4e0b\u8f7d: https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html</p> <p>\u4e0b\u8f7d\u9700\u8981\u767b\u5f55 Oracle \u5b98\u7f51</p>"},{"location":"java/JDK%E4%B8%8B%E8%BD%BD/#_1","title":"\u5b89\u88c5","text":"<p>MacOS \u7684\u9ed8\u8ba4\u5b89\u88c5\u5730\u5740: /Library/Java/JavaVirtualMachines</p>"},{"location":"java/JDK%E4%B8%8B%E8%BD%BD/#_2","title":"\u73af\u5883\u914d\u7f6e","text":"<p>Java \u7684\u73af\u5883\u914d\u7f6e\u53ea\u9700\u8981\u5c06 <code>bin</code> \u76ee\u5f55\u52a0\u5230 <code>$PATH</code> \u5c31\u53ef\u4ee5\u4e86, \u4e0d\u9700\u8981\u914d\u7f6e <code>CLASSPATH</code>. \u63a8\u8350\u5728\u542f\u52a8 jvm \u7684\u65f6\u5019\u901a\u8fc7\u53c2\u6570<code>-cp</code>\u4f20\u5165 <code>CLASSPATH</code></p>"},{"location":"java/JVM/","title":"JVM","text":""},{"location":"java/JVM/#13-jvm","title":"1.3 JVM","text":""},{"location":"java/JVM/#_1","title":"\u5185\u5b58\u533a\u57df","text":"<p>\u7ebf\u7a0b\u79c1\u6709: 1. \u7a0b\u5e8f\u8ba1\u6570\u5668: \u53ef\u4ee5\u7406\u89e3\u4e3a\u5f53\u524d\u7ebf\u7a0b\u6240\u6267\u884c\u7684\u5b57\u8282\u7801\u7684\u884c\u53f7\u6307\u793a\u5668;    - \u5b57\u8282\u7801\u89e3\u91ca\u5668\u901a\u8fc7\u6539\u53d8\u7a0b\u5e8f\u8ba1\u6570\u5668\u6765\u4f9d\u6b21\u8bfb\u53d6\u6307\u4ee4\uff0c\u4ece\u800c\u5b9e\u73b0\u4ee3\u7801\u7684\u6d41\u7a0b\u63a7\u5236;    - \u5728\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\uff0c\u7a0b\u5e8f\u8ba1\u6570\u5668\u8bb0\u5f55\u5f53\u524d\u7ebf\u7a0b\u7684\u6267\u884c\u4f4d\u7f6e\uff0c\u5f53\u7ebf\u7a0b\u5207\u6362\u65f6\u80fd\u6062\u590d\u5230\u6b63\u786e\u7684\u6267\u884c\u4f4d\u7f6e;  </p> <p>\u7a0b\u5e8f\u8ba1\u6570\u5668\u662f\u552f\u4e00\u4e00\u4e2a\u4e0d\u4f1a\u51fa\u73b0 OutOfMemoryError \u7684\u5185\u5b58\u533a\u57df;  </p> <ol> <li> <p>\u865a\u62df\u673a\u6808: \u63cf\u8ff0\u7684\u662f\u65b9\u6cd5\u6267\u884c\u7684\u7ebf\u7a0b\u5185\u5b58\u6a21\u578b, \u65b9\u6cd5\u8c03\u7528\u7684\u6570\u636e\u90fd\u662f\u901a\u8fc7\u6808\u4f20\u9012\u7684; \u65b9\u6cd5\u8c03\u7528\u5b9e\u9645\u4e0a\u662f\u6808\u5e27\u5165\u6808\u548c\u51fa\u6808\u7684\u8fc7\u7a0b\u3002     \u7531\u4e00\u4e2a\u4e2a\u6808\u5e27\u7ec4\u6210\uff0c\u800c\u6bcf\u4e2a\u6808\u5e27\u4e2d\u90fd\u62e5\u6709\uff1a\u5c40\u90e8\u53d8\u91cf\u8868(\u4e3b\u8981\u5b58\u653e\u4e86\u7f16\u8bd1\u5668\u53ef\u77e5\u7684\u5404\u79cd\u6570\u636e\u7c7b\u578b\u548c\u5bf9\u8c61\u5f15\u7528)\u3001\u64cd\u4f5c\u6570\u6808(\u4fdd\u5b58\u8ba1\u7b97\u8fc7\u7a0b\u7684\u4e2d\u95f4\u7ed3\u679c\uff0c\u4f5c\u4e3a\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u53d8\u91cf\u4e34\u65f6\u7684\u5b58\u50a8\u7a7a\u95f4)\u3001\u52a8\u6001\u94fe\u63a5(\u5c06\u7b26\u53f7\u5f15\u7528\u8f6c\u4e3a\u76f4\u63a5\u5f15\u7528)\u3001\u65b9\u6cd5\u51fa\u53e3\u4fe1\u606f;  </p> <p>\u4e24\u79cd\u5f02\u5e38\uff1aStackOverFlowError \u548c OutOfMemoryError;    - \u82e5\u865a\u62df\u673a\u6808\u7684\u5185\u5b58\u5927\u5c0f\u4e0d\u5141\u8bb8\u52a8\u6001\u6269\u5c55\uff0c\u90a3\u4e48\u5f53\u7ebf\u7a0b\u8bf7\u6c42\u6808\u7684\u6df1\u5ea6\u8d85\u8fc7\u5f53\u524d\u6808\u7684\u6700\u5927\u6df1\u5ea6\u7684\u65f6\u5019\uff0c\u5c31\u629b\u51faStackOverFlowError\u5f02\u5e38\u3002  HotSpot\u865a\u62df\u673a\u7684\u6808\u5bb9\u91cf\u4e0d\u80fd\u52a8\u6001\u6269\u5c55, \u4e0d\u4f1a\u56e0\u4e3a\u65e0\u6cd5\u6269\u5c55OOM, \u4f46\u662f\u7ebf\u7a0b\u7533\u8bf7\u6808\u7a7a\u95f4\u65f6\u5931\u8d25\u8fd8\u662f\u4f1a\u51fa\u73b0OOM;    - \u82e5\u865a\u62df\u673a\u6808\u7684\u5185\u5b58\u5927\u5c0f\u5141\u8bb8\u52a8\u6001\u6269\u5c55, \u52a8\u6001\u6269\u5c55\u65f6\uff0c\u5982\u679c\u65e0\u6cd5\u7533\u8bf7\u5230\u8db3\u591f\u7684\u5185\u5b58\u7a7a\u95f4, \u4f1a\u629b\u51faOutOfMemoryError\u5f02\u5e38\u3002  </p> </li> <li> <p>\u672c\u5730\u65b9\u6cd5\u6808     HotSpot\u865a\u62df\u673a\u4e24\u79cd\u6808\u5408\u4e8c\u4e3a\u4e00;      \u865a\u62df\u673a\u6808\u4e3a\u865a\u62df\u673a\u6267\u884c Java \u65b9\u6cd5\uff08\u4e5f\u5c31\u662f\u5b57\u8282\u7801\uff09\u670d\u52a1, \u800c\u672c\u5730\u65b9\u6cd5\u6808\u5219\u4e3a\u865a\u62df\u673a\u7528\u7684 Native \u65b9\u6cd5\u670d\u52a1;     \u6267\u884c\u65f6\u4e5f\u4f1a\u521b\u5efa\u6808\u5e27, \u5b58\u653e\u5c40\u90e8\u53d8\u91cf\u8868, \u64cd\u4f5c\u6570\u6808, \u52a8\u6001\u94fe\u63a5, \u51fa\u53e3\u4fe1\u606f;   </p> </li> </ol> <p>\u7ebf\u7a0b\u5171\u4eab:     - 1.7: \u5806 \u76f4\u63a5\u5185\u5b58 \u65b9\u6cd5\u533a-\u6c38\u4e45\u4ee3(\u5305\u542b\u5e38\u91cf\u6c60)     - 1.8: \u5806 \u76f4\u63a5\u5185\u5b58 \u65b9\u6cd5\u533a-\u5143\u7a7a\u95f4   </p> <ol> <li>\u5806: \u5b58\u653e\u5bf9\u8c61\u5b9e\u4f8b\uff0c\u5728\u7ecf\u5178\u5206\u4ee3\u8bbe\u8ba1\u4e2d\u5206\u4e3a\uff1a</li> <li> <p>\u65b0\u751f\u4ee3(Young Generation)    Eden \u533a\u3001Survivor from (s0)\u533a\u3001Survivor to (s1)\u533a    \u5bf9\u8c61\u9996\u5148\u5728 Eden \u533a\u5206\u914d\uff0c\u5728\u4e00\u6b21YGC\u540e\uff0c\u5982\u679c\u5bf9\u8c61\u8fd8\u5b58\u6d3b\uff0c\u5219\u4f1a\u8fdb\u5165 s0 \u6216\u8005 s1\uff0c\u5e76\u4e14\u5bf9\u8c61\u7684\u5e74\u9f84\u52a0 1(Eden \u533a ==&gt; Survivor \u533a\u540e\u5bf9\u8c61\u7684\u521d\u59cb\u5e74\u9f84\u53d8\u4e3a 1)\uff0c\u5f53\u5b83\u7684\u5e74\u9f84\u589e\u52a0\u5230\u4e00\u5b9a\u9608\u503c\uff08\u9ed8\u8ba4\u4e3a 15 \u5c81\uff09\uff0c\u5c31\u4f1a\u88ab\u664b\u5347\u5230\u8001\u5e74\u4ee3\u4e2d\u3002    \u5bf9\u8c61\u664b\u5347\u5230\u8001\u5e74\u4ee3\u7684\u5e74\u9f84\u9608\u503c\uff0c\u53ef\u4ee5\u901a\u8fc7\u53c2\u6570 -XX:MaxTenuringThreshold \u6765\u8bbe\u7f6e\u3002    Hotspot\u904d\u5386\u6240\u6709\u5bf9\u8c61\u65f6\uff0c\u6309\u7167\u5e74\u9f84\u4ece\u5c0f\u5230\u5927\u5bf9\u5176\u6240\u5360\u7528\u7684\u5927\u5c0f\u8fdb\u884c\u7d2f\u79ef\uff0c\u5f53\u7d2f\u79ef\u7684\u67d0\u4e2a\u5e74\u9f84\u5927\u5c0f\u8d85\u8fc7\u4e86survivor\u533a\u7684\u4e00\u534a\u65f6\uff0c\u53d6\u8fd9\u4e2a\u5e74\u9f84\u548cMaxTenuringThreshold\u4e2d\u66f4\u5c0f\u7684\u4e00\u4e2a\u503c\uff0c\u4f5c\u4e3a\u65b0\u7684\u664b\u5347\u5e74\u9f84\u9608\u503c\u3002</p> </li> <li> <p>\u8001\u5e74\u4ee3(Old Generation) </p> </li> <li> <p>\u65b9\u6cd5\u533a: \u5b58\u50a8\u88ab\u865a\u62df\u673a\u52a0\u8f7d\u7684\u7c7b\u578b\u4fe1\u606f\u3001\u5e38\u91cf\u3001\u9759\u6001\u53d8\u91cf\u3001\u5373\u65f6\u7f16\u8bd1\u5668\u7f16\u8bd1\u540e\u7684\u4ee3\u7801\u7f13\u5b58\u7b49\u6570\u636e (\u903b\u8f91\u533a\u57df)  \u5728HotSpot\u865a\u62df\u673a\u4e2d, \u6c38\u4e45\u4ee3\u539f\u672c\u662f\u65b9\u6cd5\u533a\u7684\u5b9e\u73b0\u30021.7\u628a\u5b57\u7b26\u4e32\u5e38\u91cf\u6c60\u548c\u9759\u6001\u53d8\u91cf\u79fb\u51fa\uff0c1.8\u5c06\u5269\u4f59\u7684(\u7c7b\u578b\u4fe1\u606f\u7b49)\u5185\u5bb9\u5168\u90e8\u79fb\u5230\u4e86\u5143\u7a7a\u95f4\uff0c\u76f4\u63a5\u4f7f\u7528\u672c\u5730\u5185\u5b58\u3002 \u5728JDK1.8 \u5408\u5e76HotSpot\u548cJRockit\u7684\u65f6\u5019, JRockit\u6ca1\u6709\u6c38\u4e45\u4ee3; \u53e6\u5916\u4e3a\u4e86\u8ba9\u65b9\u6cd5\u533a\u7684\u7a7a\u95f4\u8131\u79bbJVM\u7684\u9650\u5236\u3002 \u8fd0\u884c\u65f6\u5e38\u91cf\u6c60: \u662fclass\u6587\u4ef6\u4e2d\u6bcf\u4e2a\u7c7b\u3001\u63a5\u53e3\u7684\u5e38\u91cf\u6c60\u8868\u7684\u8fd0\u884c\u65f6\u8868\u793a\u5f62\u5f0f \u7b26\u53f7\u5f15\u7528\u548c\u7531\u6b64\u800c\u6765\u7684\u76f4\u63a5\u5f15\u7528\u90fd\u4f1a\u5b58\u50a8\u5728\u8fd9\u91cc\uff0c\u53e6\u5916\u8fd0\u884c\u671f\u95f4\u7684\u5e38\u91cf\u4e5f\u53ef\u4ee5\u653e\u5728\u8fd9\u91cc\u3002  </p> <ul> <li>JDK1.7 \u4e4b\u524d, \u8fd0\u884c\u65f6\u5e38\u91cf\u6c60\u5305\u542b\u5b57\u7b26\u4e32\u5e38\u91cf\u6c60, \u6b64\u65f6hotspot\u865a\u62df\u673a\u5bf9\u65b9\u6cd5\u533a\u7684\u5b9e\u73b0\u4e3a\u6c38\u4e45\u4ee3;  </li> <li>JDK1.7 \u5b57\u7b26\u4e32\u5e38\u91cf\u6c60\u4ece\u65b9\u6cd5\u533a\u88ab\u62ff\u5230\u4e86\u5806\u4e2d, \u4e5f\u5c31\u662f\u8bf4\u5b57\u7b26\u4e32\u5e38\u91cf\u6c60\u88ab\u5355\u72ec\u62ff\u5230\u5806, \u8fd0\u884c\u65f6\u5e38\u91cf\u6c60\u5269\u4e0b\u7684\u4e1c\u897f\u8fd8\u5728\u65b9\u6cd5\u533a(\u6c38\u4e45\u4ee3;  </li> <li>JDK1.8 hotspot\u79fb\u9664\u4e86\u6c38\u4e45\u4ee3\u7528\u5143\u7a7a\u95f4(Metaspace)\u53d6\u4ee3, \u8fd9\u65f6\u5b57\u7b26\u4e32\u5e38\u91cf\u6c60\u8fd8\u5728\u5806, \u8fd0\u884c\u65f6\u5e38\u91cf\u6c60\u8fd8\u5728\u65b9\u6cd5\u533a, \u53ea\u4e0d\u8fc7\u65b9\u6cd5\u533a\u7684\u5b9e\u73b0\u4ece\u6c38\u4e45\u4ee3\u53d8\u6210\u4e86\u5143\u7a7a\u95f4(Metaspace)</li> </ul> </li> <li> <p>\u76f4\u63a5\u5185\u5b58: \u5e76\u4e0d\u662f\u865a\u62df\u673a\u8fd0\u884c\u65f6\u6570\u636e\u533a\u7684\u4e00\u90e8\u5206\uff0c\u4e5f\u4e0d\u662f\u300aJava\u865a\u62df\u673a\u89c4\u8303\u300b\u4e2d\u5b9a\u4e49\u7684\u5185\u5b58\u533a\u57df\u3002\u4f46\u662f\u8fd9\u90e8\u5206\u5185\u5b58\u4e5f\u88ab\u9891\u7e41\u5730\u4f7f\u7528     JDK1.4\u4e2d\u65b0\u52a0\u5165\u7684 NIO(New Input/Output) \u7c7b\uff0c\u5f15\u5165\u4e86\u4e00\u79cd\u57fa\u4e8e\u901a\u9053\uff08Channel\uff09 \u4e0e\u7f13\u5b58\u533a\uff08Buffer\uff09 \u7684 I/O \u65b9\u5f0f\uff0c\u5b83\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528Native\u51fd\u6570\u5e93\u76f4\u63a5\u5206\u914d\u5806\u5916\u5185\u5b58\uff0c\u7136\u540e\u901a\u8fc7\u4e00\u4e2a\u5b58\u50a8\u5728 Java \u5806\u4e2d\u7684 DirectByteBuffer \u5bf9\u8c61\u4f5c\u4e3a\u8fd9\u5757\u5185\u5b58\u7684\u5f15\u7528\u8fdb\u884c\u64cd\u4f5c\u3002\u8fd9\u6837\u5c31\u80fd\u5728\u4e00\u4e9b\u573a\u666f\u4e2d\u663e\u8457\u63d0\u9ad8\u6027\u80fd\uff0c\u56e0\u4e3a\u907f\u514d\u4e86\u5728 Java \u5806\u548cNative \u5806\u4e4b\u95f4\u6765\u56de\u590d\u5236\u6570\u636e\u3002</p> </li> </ol>"},{"location":"java/JVM/#_2","title":"\u5bf9\u8c61","text":""},{"location":"java/JVM/#_3","title":"\u5bf9\u8c61\u521b\u5efa","text":"<ol> <li>\u7c7b\u52a0\u8f7d\u68c0\u67e5   \u865a\u62df\u673a\u63a5\u6536\u5230\u4e00\u6761 new \u6307\u4ee4\u65f6\uff0c\u9996\u5148\u53bb\u68c0\u67e5\u6307\u4ee4\u7684\u53c2\u6570\u80fd\u5426\u5728\u5e38\u91cf\u6c60\u4e2d\u5b9a\u4f4d\u5230\u8fd9\u4e2a\u7c7b\u7684\u7b26\u53f7\u5f15\u7528\uff0c\u5e76\u68c0\u67e5\u7b26\u53f7\u5f15\u7528\u4ee3\u8868\u7684\u7c7b\u662f\u5426\u5df2\u88ab\u52a0\u8f7d\u3001\u89e3\u6790\u548c\u521d\u59cb\u5316\u8fc7\u3002\u5982\u679c\u6ca1\u6709\uff0c\u90a3\u5fc5\u987b\u5148\u6267\u884c\u76f8\u5e94\u7684\u7c7b\u52a0\u8f7d\u8fc7\u7a0b\u3002</li> <li>\u5206\u914d\u5185\u5b58   \u5728\u7c7b\u52a0\u8f7d\u68c0\u67e5\u901a\u8fc7\u540e\uff0c\u63a5\u4e0b\u6765\u865a\u62df\u673a\u5c06\u4e3a\u65b0\u751f\u5bf9\u8c61\u5206\u914d\u5185\u5b58\u3002\u5bf9\u8c61\u6240\u9700\u7684\u5185\u5b58\u5927\u5c0f\u5728\u7c7b\u52a0\u8f7d\u5b8c\u6210\u540e\u4fbf\u53ef\u786e\u5b9a\uff0c\u4e3a\u5bf9\u8c61\u5206\u914d\u7a7a\u95f4\u7684\u4efb\u52a1\u7b49\u540c\u4e8e\u628a\u4e00\u5757\u786e\u5b9a\u5927\u5c0f\u7684\u5185\u5b58\u4ece Java \u5806\u4e2d\u5212\u5206\u51fa\u6765\u3002   \u5206\u914d\u65b9\u5f0f\u6709 \u201c\u6307\u9488\u78b0\u649e\u201d \u548c \u201c\u7a7a\u95f2\u5217\u8868\u201d \u4e24\u79cd\uff0c\u9009\u62e9\u90a3\u79cd\u5206\u914d\u65b9\u5f0f\u7531\u5806\u662f\u5426\u89c4\u6574\u51b3\u5b9a\uff0c\u800cJava\u5806\u662f\u5426\u89c4\u6574\u53c8\u7531\u6240\u91c7\u7528\u7684\u5783\u573e\u6536\u96c6\u5668\u662f\u5426\u5e26\u6709\u538b\u7f29\u6574\u7406\u529f\u80fd\u51b3\u5b9a\u3002 </li> <li>\u521d\u59cb\u5316\u96f6\u503c   \u5185\u5b58\u5206\u914d\u5b8c\u6210\u540e\uff0c\u865a\u62df\u673a\u9700\u8981\u5c06\u5206\u914d\u5230\u7684\u5185\u5b58\u7a7a\u95f4\u90fd\u521d\u59cb\u5316\u4e3a\u96f6\u503c\uff08\u4e0d\u5305\u62ec\u5bf9\u8c61\u5934\uff09\uff0c\u8fd9\u4e00\u6b65\u64cd\u4f5c\u4fdd\u8bc1\u4e86\u5bf9\u8c61\u7684\u5b9e\u4f8b\u5b57\u6bb5\u5728 Java \u4ee3\u7801\u4e2d\u53ef\u4ee5\u4e0d\u8d4b\u521d\u59cb\u503c\u5c31\u76f4\u63a5\u4f7f\u7528\uff0c\u7a0b\u5e8f\u80fd\u8bbf\u95ee\u5230\u8fd9\u4e9b\u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\u6240\u5bf9\u5e94\u7684\u96f6\u503c\u3002  </li> <li>\u8bbe\u7f6e\u5bf9\u8c61\u5934   \u521d\u59cb\u5316\u96f6\u503c\u5b8c\u6210\u4e4b\u540e\uff0c\u865a\u62df\u673a\u8981\u5bf9\u5bf9\u8c61\u8fdb\u884c\u5fc5\u8981\u7684\u8bbe\u7f6e\uff0c\u4f8b\u5982\u8fd9\u4e2a\u5bf9\u8c61\u662f\u54ea\u4e2a\u7c7b\u7684\u5b9e\u4f8b\u3001\u5982\u4f55\u624d\u80fd\u627e\u5230\u7c7b\u7684\u5143\u6570\u636e\u4fe1\u606f\u3001\u5bf9\u8c61\u7684\u54c8\u5e0c\u7801\u3001\u5bf9\u8c61\u7684 GC \u5206\u4ee3\u5e74\u9f84\u7b49\u4fe1\u606f\u3002 \u8fd9\u4e9b\u4fe1\u606f\u5b58\u653e\u5728\u5bf9\u8c61\u5934\u4e2d\u3002</li> <li>\u6267\u884cinit\u65b9\u6cd5   \u6267\u884c new \u6307\u4ee4\u4e4b\u540e\u4f1a\u63a5\u7740\u6267\u884c init \u65b9\u6cd5\uff0c\u628a\u5bf9\u8c61\u6309\u7167\u7a0b\u5e8f\u5458\u7684\u610f\u613f\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u8fd9\u6837\u4e00\u4e2a\u771f\u6b63\u53ef\u7528\u7684\u5bf9\u8c61\u624d\u7b97\u5b8c\u5168\u4ea7\u751f\u51fa\u6765\u3002</li> </ol>"},{"location":"java/JVM/#_4","title":"\u5185\u5b58\u5206\u914d\u7684\u4e24\u79cd\u65b9\u5f0f","text":"<ul> <li>\u6307\u9488\u78b0\u649e(\u5185\u5b58\u89c4\u6574)   \u7528\u8fc7\u7684\u5185\u5b58\u6574\u5408\u5230\u4e00\u4fa7, \u6ca1\u7528\u8fc7\u7684\u653e\u5728\u53e6\u4e00\u4fa7, \u4e2d\u95f4\u6709\u4e00\u4e2a\u5206\u754c\u503c\u6307\u9488, \u53ea\u9700\u5411\u6ca1\u7528\u8fc7\u7684\u5185\u5b58\u65b9\u5411\u79fb\u52a8\u5bf9\u8c61\u5185\u5b58\u5927\u5c0f\u7684\u4f4d\u7f6e\u5373\u53ef.   <p>GC\u6536\u96c6\u5668: Serial, ParNew  </p> </li> <li>\u7a7a\u95f2\u5217\u8868(\u5185\u5b58\u4e0d\u89c4\u6574)   \u865a\u62df\u673a\u4f1a\u7ef4\u62a4\u4e00\u4e2a\u5217\u8868, \u5217\u8868\u4f1a\u8bb0\u5f55\u54ea\u4e9b\u5185\u5b58\u662f\u53ef\u7528\u7684, \u5728\u5206\u914d\u7684\u65f6\u5019\u627e\u4e00\u5757\u8db3\u591f\u5927\u7684\u5185\u5b58\u5212\u5206\u7ed9\u5bf9\u8c61\u5b9e\u4f8b,\u66f4\u65b0\u7a7a\u95f2\u5217\u8868\u8bb0\u5f55. <p>GC\u6536\u96c6\u5668: CMS</p> </li> </ul>"},{"location":"java/JVM/#_5","title":"\u5185\u5b58\u5206\u914d\u65f6\u5e76\u53d1\u95ee\u9898(\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\u7684\u65b9\u5f0f","text":"<ul> <li>CAS+\u5931\u8d25\u91cd\u8bd5\uff1a CAS \u662f\u4e50\u89c2\u9501\u7684\u4e00\u79cd\u5b9e\u73b0\u65b9\u5f0f\u3002\u6240\u8c13\u4e50\u89c2\u9501\u5c31\u662f\uff0c\u6bcf\u6b21\u4e0d\u52a0\u9501\u5e76\u5047\u8bbe\u6ca1\u6709\u51b2\u7a81\u800c\u53bb\u5b8c\u6210\u67d0\u9879\u64cd\u4f5c\uff0c\u5982\u679c\u56e0\u4e3a\u51b2\u7a81\u800c\u5931\u8d25\u5c31\u91cd\u8bd5\uff0c\u76f4\u5230\u6210\u529f\u4e3a\u6b62\u3002\u865a\u62df\u673a\u91c7\u7528 CAS \u914d\u4e0a\u5931\u8d25\u91cd\u8bd5\u7684\u65b9\u5f0f\u4fdd\u8bc1\u66f4\u65b0\u64cd\u4f5c\u7684\u539f\u5b50\u6027\u3002</li> <li>TLAB\uff1a \u4e3a\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u9884\u5148\u5728Eden\u533a\u5206\u914d\u4e00\u5757\u513f\u5185\u5b58\uff0cJVM\u5728\u7ed9\u7ebf\u7a0b\u4e2d\u7684\u5bf9\u8c61\u5206\u914d\u5185\u5b58\u65f6\uff0c\u9996\u5148\u5728TLAB\u5206\u914d\uff0c\u5f53TLAB\u4e0d\u591f\u7528\u65f6\uff0c\u518d\u91c7\u7528\u4e0a\u8ff0\u7684CAS\u8fdb\u884c\u5185\u5b58\u5206\u914d</li> </ul>"},{"location":"java/JVM/#_6","title":"\u5bf9\u8c61\u7684\u5185\u5b58\u5e03\u5c40","text":"<p>\u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u7684\u5e03\u5c40\u53ef\u4ee5\u5206\u4e3a3\u5757\u533a\u57df\uff1a 1. \u5bf9\u8c61\u5934    - \u8fd0\u884c\u65f6\u6570\u636e(\u54c8\u5e0c\u7801\u3001GC\u5206\u4ee3\u5e74\u9f84\u3001\u9501\u72b6\u6001\u6807\u5fd7)    - \u7c7b\u578b\u6307\u9488(\u6307\u5411\u7c7b\u5143\u6570\u636e\u7684\u6307\u9488) 2. \u5b9e\u4f8b\u6570\u636e: \u5bf9\u8c61\u7684\u5c5e\u6027 3. \u5bf9\u9f50\u586b\u5145(\u5360\u4f4d)    Hotspot \u865a\u62df\u673a\u7684\u81ea\u52a8\u5185\u5b58\u7ba1\u7406\u7cfb\u7edf\u8981\u6c42\u5bf9\u8c61\u8d77\u59cb\u5730\u5740\u5fc5\u987b\u662f 8 \u5b57\u8282\u7684\u6574\u6570\u500d\uff0c\u5c31\u662f\u5bf9\u8c61\u7684\u5927\u5c0f\u5fc5\u987b\u662f 8 \u5b57\u8282\u7684\u6574\u6570\u500d\u3002</p>"},{"location":"java/JVM/#_7","title":"\u8bbf\u95ee\u5b9a\u4f4d\u5bf9\u8c61","text":"<ol> <li>\u53e5\u67c4  </li> <li>\u5806\u4e0a\u5212\u5206\u4e00\u5757\u533a\u57df\u4f5c\u4e3a\u53e5\u67c4\u6c60, \u6808\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u8868\u5f15\u7528\u53e5\u67c4\u5730\u5740, \u53e5\u67c4\u5305\u542b\u6307\u5411\u5bf9\u8c61\u7684\u5b9e\u4f8b\u6570\u636e\u548c\u7c7b\u578b\u6570\u636e\u7684\u6307\u9488 </li> <li>\u4f18\u52bf: \u5bf9\u8c61\u79fb\u52a8\u4e0d\u9700\u8981\u4fee\u6539reference\u672c\u8eab</li> <li>\u76f4\u63a5\u6307\u9488 (hotspot\u9ed8\u8ba4  </li> <li>\u6808\u4e2d\u7684\u5c40\u90e8\u53d8\u91cf\u8868\u5f15\u7528\u76f4\u63a5\u5b58\u50a8\u5bf9\u8c61\u5730\u5740, \u4f46\u5bf9\u8c61\u5b9e\u4f8b\u9700\u8981\u5b58\u50a8\u6307\u5411\u7c7b\u578b\u6570\u636e\u7684\u6307\u9488(\u7c7b\u578b\u6570\u636e\u5728\u65b9\u6cd5\u533a\u5185) </li> <li>\u4f18\u52bf: \u7701\u53bb\u4e00\u6b21\u5bfb\u5740</li> </ol>"},{"location":"java/JVM/#gc","title":"GC","text":""},{"location":"java/JVM/#_8","title":"\u5bf9\u8c61\u6b7b\u4ea1\u7684\u5224\u65ad\u4f9d\u636e","text":"<ul> <li> <p>\u5f15\u7528\u8ba1\u6570\u6cd5   \u5bf9\u8c61\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5f15\u7528\u8ba1\u6570\u5668\uff0c\u5728\u9762\u5bf9\u5faa\u73af\u5f15\u7528\u7684\u65f6\u5019\u975e\u5e38\u65e0\u529b</p> </li> <li> <p>\u53ef\u8fbe\u6027\u5206\u6790\u6cd5   GC root \u548c\u5f15\u7528\u94fe, \u5f53\u4e00\u4e2a\u5bf9\u8c61\u65e0\u6cd5\u901a\u8fc7\u5f15\u7528\u94fe\u5230root, \u5373\u4e3a\u4e0d\u53ef\u7528   \u53ef\u4f5c\u4e3aGCRoots\u7684\u5bf9\u8c61:  </p> </li> <li>\u865a\u62df\u673a\u6808(\u6808\u5e27\u4e2d\u7684\u672c\u5730\u53d8\u91cf\u8868)\u4e2d\u5f15\u7528\u7684\u5bf9\u8c61</li> <li>\u672c\u5730\u65b9\u6cd5\u6808(Native \u65b9\u6cd5)\u4e2d\u5f15\u7528\u7684\u5bf9\u8c61</li> <li>\u65b9\u6cd5\u533a\u4e2d\u7c7b\u9759\u6001\u5c5e\u6027\u5f15\u7528\u7684\u5bf9\u8c61</li> <li>\u65b9\u6cd5\u533a\u4e2d\u5e38\u91cf\u5f15\u7528\u7684\u5bf9\u8c61</li> <li>\u6240\u6709\u88ab\u540c\u6b65\u9501\u6301\u6709\u7684\u5bf9\u8c61</li> <li> <p>\u8fd8\u6709\u5176\u4ed6\u7684</p> </li> <li> <p>\u6700\u7ec8\u5224\u5b9a: \u4e0d\u53ef\u8fbe\u5bf9\u8c61\u5e76\u975e\u4e00\u5b9a\u88ab\u56de\u6536</p> </li> <li>\u7b2c\u4e00\u6b21\u7b5b\u9009   \u4e0d\u53ef\u8fbe\u7684\u5bf9\u8c61\u4f1a\u88ab\u7b5b\u9009\u4e00\u6b21, \u6761\u4ef6\u662f\u662f\u5426\u6709\u5fc5\u8981\u6267\u884cfinalize(). \u5982\u679c\u5bf9\u8c61\u6ca1\u6709\u91cd\u5199finalize()\u6216finalize()\u5df2\u7ecf\u88ab\u865a\u62df\u673a\u8c03\u7528\u8fc7, \u5c06\u88ab\u89c6\u4e3a\u6ca1\u5fc5\u8981\u6267\u884c, \u5bf9\u8c61\u88ab\u56de\u6536.</li> <li>\u7b2c\u4e8c\u6b21\u7b5b\u9009   \u5bf9\u8c61\u653e\u5230F-Queue\u961f\u5217\u4e2d, \u5e76\u4ea4\u7531\u4e00\u4e2a\u4f4e\u4f18\u5148\u7ea7\u7684Finalizer\u7ebf\u7a0b\u53bb\u6267\u884c. \u5982\u679c\u5728F-Queue\u4e2d\u7684\u5bf9\u8c61\u4e0e\u5f15\u7528\u94fe\u5efa\u7acb\u4e86\u5f15\u7528, \u5c06\u4f1a\u79fb\u51fa\u56de\u6536\u961f\u5217.</li> <li>\u4e09\u8272\u7b97\u6cd5</li> <li>\u767d\u8272\uff1a\u6ca1\u6709\u88ab\u6536\u96c6\u5668\u8bbf\u95ee\u8fc7</li> <li>\u9ed1\u8272\uff1a\u6536\u96c6\u5668\u8bbf\u95ee\u8fc7\u4e14\u5b83\u7684\u5f15\u7528\u90fd\u88ab\u8bbf\u95ee\u8fc7</li> <li>\u7070\u8272\uff1a\u6536\u96c6\u5668\u8bbf\u95ee\u8fc7\u4e14\u5b83\u7684\u5f15\u7528\u81f3\u5c11\u6709\u4e00\u4e2a\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7</li> </ul>"},{"location":"java/JVM/#_9","title":"\u65e0\u7528\u7c7b\u7684\u5224\u65ad","text":"<ul> <li>\u8be5\u7c7b\u7684\u6240\u6709\u5b9e\u4f8b\u90fd\u88ab\u56de\u6536</li> <li>\u52a0\u8f7d\u8be5\u7c7b\u7684ClassLoader\u5df2\u7ecf\u56de\u6536</li> <li>\u8be5\u7c7b\u5bf9\u5e94\u7684 java.lang.Class \u5bf9\u8c61\u6ca1\u6709\u4efb\u4f55\u5730\u65b9\u88ab\u5f15\u7528, \u65e0\u6cd5\u5728\u4efb\u4f55\u5730\u65b9\u901a\u8fc7\u53cd\u5c04\u8bbf\u95ee\u8be5\u7c7b</li> </ul>"},{"location":"java/JVM/#_10","title":"\u5783\u573e\u6536\u96c6\u7b97\u6cd5","text":""},{"location":"java/JVM/#gc_1","title":"GC \u79cd\u7c7b\u53ca\u533a\u57df","text":"<ul> <li>Partial GC: \u90e8\u5206</li> <li>Young GC: \u53ea\u6536\u96c6young gen</li> <li>Old GC: \u53ea\u6536\u96c6old gen \u53ea\u6709CMS\u7684concurrent collection\u662f\u8fd9\u4e2a\u6a21\u5f0f</li> <li>Mixed GC: \u6574\u4e2ayoung gen \u548c\u90e8\u5206 old gen \u53ea\u6709G1\u662f\u8fd9\u4e2a\u6a21\u5f0f, (\u4e5f\u5c31\u662f\u8bf4\u5176\u4ed6\u7684\u5783\u573e\u56de\u6536\u5668\u9700\u8981\u914d\u5408</li> <li>Full GC: \u6536\u96c6\u6574\u4e2a\u5806</li> </ul> <p>\u89e6\u53d1\u6761\u4ef6: - \u975e\u5e76\u53d1GC(\u8fde\u7eedGC):   - young GC: eden\u533a\u6ee1\u4e86\u89e6\u53d1   - full GC: young GC\u7684\u5e73\u5747\u664b\u5347\u5927\u5c0f\u6bd4\u5269\u4f59\u7684old gen\u7a7a\u95f4\u5927, \u4e0d\u8fdb\u884cyoung gc, \u89e6\u53d1full gc; \u6216\u8005\u6c38\u4e45\u4ee3\u7a7a\u95f4\u4e0d\u591f, \u540c\u6837;  </p> <ul> <li>\u5e76\u53d1GC:   CMS GC\u4e3a\u4f8b, \u5b83\u5b9a\u65f6\u68c0\u67e5old gen\u7684\u4f7f\u7528\u91cf, \u5f53\u4f7f\u7528\u91cf\u8d85\u8fc7\u89e6\u53d1\u6bd4\u4f8b\u5c31\u8fdb\u884cGC, \u5bf9old gen\u6536\u96c6.</li> </ul> <p>\u5206\u914d\u62c5\u4fdd\u673a\u5236 \u865a\u62df\u673a\u4f1a\u68c0\u67e5\u8001\u5e74\u4ee3\u6700\u5927\u53ef\u7528\u7684\u8fde\u7eed\u7a7a\u95f4\u662f\u5426\u5927\u4e8e\u65b0\u751f\u4ee3\u6240\u6709\u5bf9\u8c61\u7684\u603b\u7a7a\u95f4\uff0c \u5982\u679c\u5c0f\u4e8e\uff0c\u5219\u865a\u62df\u673a\u4f1a\u67e5\u770bHandlePromotionFailure\u8bbe\u7f6e\u503c\u662f\u5426\u5141\u8bb8\u62c5\u4fdd\u5931\u8d25\u3002   \u5982\u679cHandlePromotionFailure=true\uff0c\u90a3\u4e48\u4f1a\u7ee7\u7eed\u68c0\u67e5\u8001\u5e74\u4ee3\u6700\u5927\u53ef\u7528\u8fde\u7eed\u7a7a\u95f4\u662f\u5426\u5927\u4e8e\u5386\u6b21\u664b\u5347\u5230\u8001\u5e74\u4ee3\u7684\u5bf9\u8c61\u7684\u5e73\u5747\u5927\u5c0f\uff0c     \u5982\u679c\u5927\u4e8e\uff0c\u5219\u5c1d\u8bd5\u8fdb\u884c\u4e00\u6b21Minor GC\uff0c\u4f46\u8fd9\u6b21Minor GC\u4f9d\u7136\u662f\u6709\u98ce\u9669\u7684\uff1b     \u5982\u679c\u5c0f\u4e8e\u6216\u8005HandlePromotionFailure=false\uff0c\u5219\u6539\u4e3a\u8fdb\u884c\u4e00\u6b21Full GC\u3002</p> <pre><code>flowchart TD\n\u5224\u65ad1([\u8001\u5e74\u4ee3\u6700\u5927\u53ef\u7528\u8fde\u7eed\u7a7a\u95f4&gt;\u65b0\u751f\u4ee3\u6240\u6709\u5bf9\u8c61\u603b\u7a7a\u95f4])\n\u5224\u65ad2([HandlePromotionFailure])\n\u5224\u65ad3([\u8001\u5e74\u4ee3\u6700\u5927\u53ef\u7528\u8fde\u7eed\u7a7a\u95f4&gt;\u5e73\u5747\u664b\u5347\u5927\u5c0f])\n\u5f00\u59cb--&gt;\u5224\u65ad1\n\u5224\u65ad1--\u662f--&gt;YGC\n\u5224\u65ad1--\u5426--&gt;\u5224\u65ad2\n\u5224\u65ad2--true--&gt;\u5224\u65ad3\n\u5224\u65ad3--\u5426--&gt;FullGC\n\u5224\u65ad3--\u662f--&gt;YGC\n\u5224\u65ad2--false--&gt;FullGC</code></pre>"},{"location":"java/JVM/#_11","title":"\u5206\u4ee3\u56de\u6536","text":"<p>-Xmn: \u65b0\u751f\u4ee3\u5927\u5c0f; -Xms: \u6700\u5c0f\u5806\u7a7a\u95f4; -Xmx: \u6700\u5927\u5806\u7a7a\u95f4;  -XX:MaxTenuringThreshold=threshold(15)  </p> <p>\u65b0\u751f\u4ee3GC\u4e00\u6b21\u5e74\u9f84\u52a01, \u9ed8\u8ba4\u9608\u503c15( \u8d85\u8fc7survivor\u533a\u4e00\u534a\u7a7a\u95f4\u5927\u5c0f\u7684\u5e74\u9f84&gt;15 ? 15 : \u8be5\u5e74\u9f84 ); - GC\u4f1a\u6e05\u7a7aEden\u548cFrom\uff0c\u5c06\u91cc\u9762\u7684\u5bf9\u8c61\u5206\u914d\u5230To - \u4ea4\u6362From\u548cTo, \u4ee4To\u53d8\u6210\u7a7a\u7684 - \u76f4\u5230To\u88ab\u586b\u6ee1, \u586b\u6ee1\u540e\u5168\u90e8\u79fb\u52a8\u5230\u8001\u5e74\u4ee3\uff08\u56e0\u4e3a\u6b64\u65f6\u5230\u8fbe\u9608\u503c\u4e86\uff09</p> <p>\u9996\u5148\u5728Eden\u533a\u5206\u914d \u5927\u5bf9\u8c61(eden\u533a\u4e00\u534a\uff1f)\u76f4\u63a5\u8fdb\u5165\u8001\u5e74\u4ee3(\u9632\u6b62\u56e0\u5206\u914d\u62c5\u4fdd\u673a\u5236\u5e26\u6765\u7684\u590d\u5236\u800c\u964d\u4f4e\u6548\u7387)</p>"},{"location":"java/JVM/#_12","title":"\u5783\u573e\u56de\u6536\u7b97\u6cd5","text":"<ul> <li>\u6807\u8bb0-\u6e05\u9664\u7b97\u6cd5(CMS)   \u6548\u7387\u95ee\u9898(\u5bfb\u627e\u53ef\u7528\u7a7a\u95f4) \u7a7a\u95f4\u788e\u7247\u95ee\u9898</li> <li>\u6807\u8bb0-\u590d\u5236\u7b97\u6cd5(\u65b0\u751f\u4ee3\u9ed8\u8ba4)   \u5c06\u5185\u5b58\u5206\u4e3a\u5927\u5c0f\u76f8\u540c\u7684\u4e24\u5757, \u6bcf\u6b21\u4f7f\u7528\u4e00\u5757, \u7528\u5b8c\u540e\u5c06\u5b58\u6d3b\u7684\u5bf9\u8c61\u590d\u5236\u5230\u53e6\u4e00\u5757\u3002\uff08\u7a7a\u95f4\u5229\u7528\u95ee\u9898\uff09</li> <li>\u6807\u8bb0-\u6574\u7406\u7b97\u6cd5(\u8001\u5e74\u4ee3\u9ed8\u8ba4)   \u6807\u8bb0\u8fc7\u7a0b\u4e0e\u201c\u6807\u8bb0-\u6e05\u9664\u201d\u7b97\u6cd5\u4e00\u6837\uff0c\u7136\u540e\u8ba9\u6240\u6709\u5b58\u6d3b\u7684\u5bf9\u8c61\u5411\u4e00\u7aef\u79fb\u52a8\uff0c\u76f4\u63a5\u6e05\u7406\u6389\u7aef\u8fb9\u754c\u4ee5\u5916\u7684\u5185\u5b58\u3002\uff08\u6548\u7387\u95ee\u9898\uff09</li> <li>\u5206\u4ee3\u6536\u96c6\u7b97\u6cd5   \u5728\u65b0\u751f\u4ee3\u4e2d\uff0c\u6bcf\u6b21\u6536\u96c6\u90fd\u4f1a\u6709\u5927\u91cf\u5bf9\u8c61\u6b7b\u53bb\uff0c\u6240\u4ee5\u53ef\u4ee5\u9009\u62e9\u201d\u6807\u8bb0-\u590d\u5236\u201c\u7b97\u6cd5\uff0c\u53ea\u9700\u8981\u4ed8\u51fa\u5c11\u91cf\u5bf9\u8c61\u7684\u590d\u5236\u6210\u672c\u5c31\u53ef\u4ee5\u5b8c\u6210\u6bcf\u6b21\u5783\u573e\u6536\u96c6\u3002   \u800c\u8001\u5e74\u4ee3\u7684\u5bf9\u8c61\u5b58\u6d3b\u51e0\u7387\u662f\u6bd4\u8f83\u9ad8\u7684\uff0c\u800c\u4e14\u6ca1\u6709\u989d\u5916\u7684\u7a7a\u95f4\u5bf9\u5b83\u8fdb\u884c\u5206\u914d\u62c5\u4fdd\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u9009\u62e9\u201c\u6807\u8bb0-\u6e05\u9664\u201d\u6216\u201c\u6807\u8bb0-\u6574\u7406\u201d\u7b97\u6cd5\u8fdb\u884c\u5783\u573e\u6536\u96c6\u3002</li> </ul>"},{"location":"java/JVM/#_13","title":"\u5783\u573e\u56de\u6536\u5668","text":"<p>java -XX:+PrintFlagsFinal -version java -XX:+PrintCommandLineFlags -version</p> <p>\u65b0\u751f\u4ee3\u7248\u672c - Serial \u6536\u96c6\u5668 \u4e32\u884c, \u5355\u7ebf\u7a0b \u65b0\u751f\u4ee3\u91c7\u7528\u6807\u8bb0-\u590d\u5236\u7b97\u6cd5\uff0c\u8001\u5e74\u4ee3\u91c7\u7528\u6807\u8bb0-\u6574\u7406\u7b97\u6cd5\u3002  </p> <ul> <li> <p>ParNew \u6536\u96c6\u5668 \u591a\u7ebf\u7a0b\u7248\u7684 serial, \u53ea\u6709\u5b83\u548cserial\u80fd\u4e0eCMS\u914d\u5408\u5de5\u4f5c.</p> </li> <li> <p>Parallel Scavenge \u6536\u96c6\u5668 \u8ddfparNew\u5dee\u4e0d\u591a, \u4f46\u5173\u6ce8\u70b9\u662f\u63a7\u5236\u541e\u5410\u91cf(\u8fd0\u884c\u7528\u6237\u4ee3\u7801\u4e0eCPU\u603b\u8017\u65f6\u4e4b\u95f4\u7684\u6bd4\u4f8b). 1.8\u9ed8\u8ba4\u7684\u4e4b\u4e00 \u53ef\u4ee5\u5f00\u542fGC\u7684\u81ea\u9002\u5e94\u8c03\u8282\u7b56\u7565\uff0c\u5c06\u5185\u5b58\u7ba1\u7406\u7684\u8c03\u4f18\u7b56\u7565\u4ea4\u7531\u6536\u96c6\u5668 \u53ea\u80fd\u4e0e serial old \u548c parallel old \u5408\u4f5c</p> </li> </ul> <p>\u8001\u5e74\u4ee3\u7248\u672c - Serial Old \u6536\u96c6\u5668 serial\u7684\u8001\u5e74\u4ee3\u7248\u672c </p> <ul> <li> <p>Parallel Old \u6536\u96c6\u5668 parallel scavenge\u7684\u8001\u5e74\u4ee3\u7248\u672c</p> </li> <li> <p>CMS(Concurrent Mark Sweep) \u6536\u96c6\u5668   \u4ee5\u83b7\u53d6\u6700\u77ed\u56de\u6536\u505c\u987f\u65f6\u95f4\u4e3a\u76ee\u6807. \u7b2c\u4e00\u6b3e\u5e76\u53d1\u6536\u96c6\u5668, \u7b2c\u4e00\u6b21\u5b9e\u73b0\u4e86\u5783\u573e\u6536\u96c6\u7ebf\u7a0b\u548c\u7528\u6237\u7ebf\u7a0b\u540c\u65f6\u5de5\u4f5c.    CMS \u6536\u96c6\u5668\u662f \u201c\u6807\u8bb0-\u6e05\u9664\u201d \u7b97\u6cd5\u5b9e\u73b0\u7684, \u6267\u884c\u8fc7\u7a0b:</p> </li> <li>\u521d\u59cb\u6807\u8bb0: \u6682\u505c\u6240\u6709\u7684\u5176\u4ed6\u7ebf\u7a0b\uff0c\u5e76\u8bb0\u5f55\u4e0b\u76f4\u63a5\u4e0e root \u76f8\u8fde\u7684\u5bf9\u8c61\uff0c\u901f\u5ea6\u5f88\u5feb  </li> <li>\u5e76\u53d1\u6807\u8bb0: \u540c\u65f6\u5f00\u542f GC \u548c\u7528\u6237\u7ebf\u7a0b\uff0c\u7528\u4e00\u4e2a\u95ed\u5305\u7ed3\u6784\u53bb\u8bb0\u5f55\u53ef\u8fbe\u5bf9\u8c61\u3002\u7528\u6237\u7ebf\u7a0b\u4f1a\u4e0d\u65ad\u5730\u66f4\u65b0\u5f15\u7528\u57df\uff0c\u6240\u4ee5 GC \u7ebf\u7a0b\u65e0\u6cd5\u4fdd\u8bc1\u53ef\u8fbe\u6027\u5206\u6790\u7684\u5b9e\u65f6\u6027, \u4f1a\u8ddf\u8e2a\u8bb0\u5f55\u8fd9\u4e9b\u53d1\u751f\u5f15\u7528\u66f4\u65b0\u7684\u5730\u65b9\u3002</li> <li>\u91cd\u65b0\u6807\u8bb0: \u4e3a\u4fee\u6b63\u5e76\u53d1\u6807\u8bb0\u671f\u95f4\u56e0\u4e3a\u7528\u6237\u7ebf\u7a0b\u8fd0\u884c\u5bfc\u81f4\u7684\u6807\u8bb0\u53d8\u52a8\uff0c\u8fd9\u4e2a\u9636\u6bb5\u7684\u505c\u987f\u65f6\u95f4\u4e00\u822c\u4f1a\u6bd4\u521d\u59cb\u6807\u8bb0\u9636\u6bb5\u7684\u65f6\u95f4\u7a0d\u957f\uff0c\u8fdc\u8fdc\u6bd4\u5e76\u53d1\u6807\u8bb0\u9636\u6bb5\u65f6\u95f4\u77ed</li> <li> <p>\u5e76\u53d1\u6e05\u9664: \u5f00\u542f\u7528\u6237\u7ebf\u7a0b\uff0c\u540c\u65f6 GC \u7ebf\u7a0b\u5f00\u59cb\u5bf9\u672a\u6807\u8bb0\u7684\u533a\u57df\u505a\u6e05\u626b  </p> </li> <li> <p>\u4f18\u70b9: \u5e76\u53d1\u6536\u96c6 \u4f4e\u505c\u987f</p> </li> <li>\u7f3a\u70b9: <ul> <li>\u5bf9 CPU \u8d44\u6e90\u654f\u611f GC\u7ebf\u7a0b\u6570=(CPU\u6570 + 3) / 4 \uff1b</li> <li>\u65e0\u6cd5\u5904\u7406\u6d6e\u52a8\u5783\u573e\uff1b\u5e76\u53d1\u6536\u96c6\u9636\u6bb5\u4ea7\u751f\u7684\u5783\u573e\u53ea\u80fd\u4e0b\u4e00\u6b21GC\u5904\u7406\uff0c\u6240\u4ee5\u9700\u8981\u9884\u7559\u7a7a\u95f4\u7ed9\u5e76\u53d1\u6536\u96c6\u65f6\u4f7f\u7528\uff0c\u5982\u679c\u9884\u7559\u7a7a\u95f4\u4e0d\u8db3\u4f1a\u56de\u6536\u5931\u8d25\uff0c\u4f7f\u7528serial old</li> <li>\u4f7f\u7528\u7684\u56de\u6536\u7b97\u6cd5-\u201c\u6807\u8bb0-\u6e05\u9664\u201d \u7b97\u6cd5\u4f1a\u5bfc\u81f4\u5927\u91cf\u7a7a\u95f4\u788e\u7247\u4ea7\u751f\u3002\u53ef\u4ee5\u8bbe\u7f6e\u8fdb\u884c\u5185\u5b58\u7a7a\u95f4\u6574\u7406\uff0c\u4f46\u662f\u5408\u5e76\u8fc7\u7a0b\u4e0d\u80fd\u5e76\u53d1</li> </ul> </li> </ul> <p>G1(Garbage-First) \u6536\u96c6\u5668 \u662f\u4e00\u6b3e\u9762\u5411\u670d\u52a1\u5668\u7684\u5783\u573e\u6536\u96c6\u5668, \u4e3b\u8981\u9488\u5bf9\u914d\u7f6e\u591a\u5904\u7406\u5668\u53ca\u5927\u5185\u5b58\u7684\u673a\u5668. \u4f4e\u505c\u987f &amp; \u9ad8\u541e\u5410\u91cf \u628a\u5806\u5212\u5206\u6210\u4e86\u591a\u4e2a\u5927\u5c0f\u76f8\u7b49\u7684region\uff0c\u8bc4\u4f30region\u91cc\u7684\u5783\u573e\u4ef7\u503c(\u56de\u6536\u83b7\u5f97\u7684\u7a7a\u95f4\u5927\u5c0f\u548c\u8017\u8d39\u7684\u65f6\u95f4)\uff0c\u7ef4\u62a4\u4e86\u4e00\u4e2a\u4ef7\u503c\u5217\u8868, \u6839\u636e\u6bcf\u6b21\u5141\u8bb8\u7684\u6536\u96c6\u65f6\u95f4, \u4f18\u5148\u9009\u62e9\u56de\u6536\u4ef7\u503c\u6700\u5927\u7684\u533a\u57df \u5bf9\u4e8eregion\u4e4b\u95f4\u5f15\u7528\u7684\u95ee\u9898\uff0c\u6bcf\u4e2aregion\u4e2d\u90fd\u6709\u4e00\u4e2aremembered set\uff0c\u5982\u679cregion\u4e2d\u7684\u5bf9\u8c61\u88ab\u5f15\u7528\uff0c\u5c31\u7ef4\u62a4\u5728set\u4e2d\uff0c\u53ef\u8fbe\u6027\u5206\u6790\u65f6\u5c06set\u52a0\u5165\u5230GC root\u4e2d</p> <p>G1\u7684\u56de\u6536\u8fc7\u7a0b\u5206\u4e3a\u4ee5\u4e0b\u56db\u4e2a\u6b65\u9aa4\uff1a - \u521d\u59cb\u6807\u8bb0\uff1a\u6807\u8bb0GC ROOT\u80fd\u5173\u8054\u5230\u7684\u5bf9\u8c61\uff0c\u9700\u8981STW - \u5e76\u53d1\u6807\u8bb0\uff1a\u4eceGCRoots\u7684\u76f4\u63a5\u5173\u8054\u5bf9\u8c61\u5f00\u59cb\u904d\u5386\u6574\u4e2a\u5bf9\u8c61\u56fe\u7684\u8fc7\u7a0b\uff0c\u626b\u63cf\u5b8c\u6210\u540e\u8fd8\u4f1a\u91cd\u65b0\u5904\u7406\u5e76\u53d1\u6807\u8bb0\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u53d8\u52a8\u7684\u5bf9\u8c61 - \u6700\u7ec8\u6807\u8bb0\uff1a\u77ed\u6682\u6682\u505c\u7528\u6237\u7ebf\u7a0b\uff0c\u518d\u5904\u7406\u4e00\u6b21\uff0c\u9700\u8981STW - \u7b5b\u9009\u56de\u6536\uff1a\u66f4\u65b0Region\u7684\u7edf\u8ba1\u6570\u636e\uff0c\u5bf9\u6bcf\u4e2aRegion\u7684\u56de\u6536\u4ef7\u503c\u548c\u6210\u672c\u6392\u5e8f\uff0c\u6839\u636e\u7528\u6237\u8bbe\u7f6e\u7684\u505c\u987f\u65f6\u95f4\u5236\u5b9a\u56de\u6536\u8ba1\u5212\u3002\u518d\u628a\u9700\u8981\u56de\u6536\u7684Region\u4e2d\u5b58\u6d3b\u5bf9\u8c61\u590d\u5236\u5230\u7a7a\u7684Region\uff0c\u540c\u65f6\u6e05\u7a7a\u65e7\u7684Region\u3002\u9700\u8981STW  </p> <p>CMS \u4e0eG1\u7684\u533a\u522b\uff1a\u5728\u6700\u540e\u7684\u6e05\u9664\u8fc7\u7a0b\u4e2d\u4e00\u4e2a\u5e76\u53d1\u4e00\u4e2a\u4e0d\u5e76\u53d1\uff1b\u4e00\u4e2a\u6807\u8bb0\u590d\u5236\u4e00\u4e2a\u6807\u8bb0\u6e05\u9664\uff1b\u5728\u4e8c\u6b21\u6807\u8bb0\u7684\u8fc7\u7a0b\u4e2d\u7684\u7b97\u6cd5\u4e0d\u540c\uff0c\u4e00\u4e2a\u589e\u91cf\u66f4\u65b0\u4e00\u4e2a\u539f\u59cb\u5feb\u7167</p> <p>\u5e76\u53d1\u6807\u8bb0\u65f6\u5f15\u7528\u53d8\u52a8\u7684\u5904\u7406 - \u589e\u91cf\u66f4\u65b0\uff1a\u9ed1\u8272\u5bf9\u8c61\u5728\u65b0\u589e\u767d\u8272\u5f15\u7528\u540e\u53d8\u4e3a\u7070\u8272 - \u539f\u59cb\u5feb\u7167\uff1a\u7070\u8272\u5bf9\u8c61\u5728\u5220\u9664\u767d\u8272\u5f15\u7528\u540e\u91cd\u65b0\u626b\u63cf</p>"},{"location":"java/JVM/#_14","title":"\u7c7b\u6587\u4ef6\u7ed3\u6784","text":"<p>jclasslib\u63d2\u4ef6\u53ef\u4ee5\u67e5\u770bclass\u6587\u4ef6\u7ed3\u6784</p> <p>Class \u6587\u4ef6\u901a\u8fc7 ClassFile \u5b9a\u4e49 \u5927\u4f53\u52068\u90e8\u5206: \u9b54\u6cd5\u503c\u3001\u7248\u672c\u53f7\u3001\u5e38\u91cf\u6c60\u3001\u7c7b\u8bbf\u95ee\u6807\u8bb0\u3001\u7ee7\u627f\u548c\u5b9e\u73b0\u5173\u7cfb\u3001\u5b57\u6bb5\u8868\u3001\u65b9\u6cd5\u8868\u3001\u5c5e\u6027\u8868 <pre><code>  ClassFile {\n    u4             magic; //Class \u6587\u4ef6\u7684\u6807\u5fd7\n\n    u2             minor_version; //Class \u7684\u5c0f\u7248\u672c\u53f7\n    u2             major_version; //Class \u7684\u5927\u7248\u672c\u53f7 java \u7248\u672c\u53f7\n\n    u2             constant_pool_count; //\u5e38\u91cf\u6c60\u7684\u6570\u91cf\n    cp_info        constant_pool[constant_pool_count-1];  //\u5e38\u91cf\u6c60\n\n    u2             access_flags;  //Class \u7684\u8bbf\u95ee\u6807\u8bb0\n\n    u2             this_class;  //\u5f53\u524d\u7c7b\n    u2             super_class; //\u7236\u7c7b\n    u2             interfaces_count;  //\u63a5\u53e3    \n    u2             interfaces[interfaces_count];  //\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u5b9e\u73b0\u591a\u4e2a\u63a5\u53e3\n\n    u2             fields_count;  //Class \u6587\u4ef6\u7684\u5b57\u6bb5\u4e2a\u6570\n    field_info     fields[fields_count];//\u4e00\u4e2a\u7c7b\u4f1a\u53ef\u4ee5\u6709\u591a\u4e2a\u5b57\u6bb5\n\n    u2             methods_count;//Class \u6587\u4ef6\u7684\u65b9\u6cd5\u6570\u91cf\n    method_info    methods[methods_count];//\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u6709\u4e2a\u591a\u4e2a\u65b9\u6cd5\n\n    //\u5728 Class \u6587\u4ef6\uff0c\u5b57\u6bb5\u8868\uff0c\u65b9\u6cd5\u8868\u4e2d\u90fd\u53ef\u4ee5\u643a\u5e26\u81ea\u5df1\u7684\u5c5e\u6027\u8868\u96c6\u5408\n    u2             attributes_count;//\u6b64\u7c7b\u7684\u5c5e\u6027\u8868\u4e2d\u7684\u5c5e\u6027\u6570\n    attribute_info attributes[attributes_count];//\u5c5e\u6027\u8868\u96c6\u5408 \n  }\n</code></pre></p>"},{"location":"java/JVM/#_15","title":"\u7c7b\u52a0\u8f7d\u673a\u5236","text":""},{"location":"java/JVM/#_16","title":"\u7c7b\u52a0\u8f7d\u8fc7\u7a0b","text":"<p>\u7c7b\u52a0\u8f7d\uff0c\u7136\u540e\u9a8c\u8bc1\u6570\u636e\uff0c\u7136\u540e\u5206\u914d\u5185\u5b58\u5e76\u4e14\u521d\u59cb\u7c7b\u53d8\u91cf\u503c\uff0c\u66ff\u6362\u7b26\u53f7\u5f15\u7528\uff0c\u8c03\u7528clinit <pre><code>  1\u52a0\u8f7d\n  ==&gt; 2\u8fde\u63a5 (\u9a8c\u8bc1==&gt; \u51c6\u5907==&gt; \u89e3\u6790)\n  ==&gt; 3\u521d\u59cb\u5316\n\n  ==&gt; \u4f7f\u7528==&gt; \u5378\u8f7d\n</code></pre></p> <ol> <li>\u52a0\u8f7d:</li> <li>\u901a\u8fc7\u5168\u7c7b\u540d\u83b7\u53d6\u5b9a\u4e49\u6b64\u7c7b\u7684\u4e8c\u8fdb\u5236\u5b57\u8282\u6d41  <p>\u6b64\u65f6\u662f\u53ef\u63a7\u6027\u6700\u5f3a\u7684\u9636\u6bb5, \u53ef\u4ee5\u81ea\u5b9a\u4e49\u7c7b\u52a0\u8f7d\u5668\u63a7\u5236\u5b57\u8282\u6d41\u7684\u83b7\u53d6\u65b9\u5f0f(\u91cd\u5199\u7c7b\u52a0\u8f7d\u5668\u7684loadClass()\u65b9\u6cd5)</p> </li> <li>\u5c06\u5b57\u8282\u6d41\u6240\u4ee3\u8868\u7684\u9759\u6001\u5b58\u50a8\u7ed3\u6784\u8f6c\u6362\u4e3a\u65b9\u6cd5\u533a\u7684\u8fd0\u884c\u65f6\u6570\u636e\u7ed3\u6784</li> <li>\u5728\u5185\u5b58\u4e2d\u751f\u6210\u4e00\u4e2a\u4ee3\u8868\u8be5\u7c7b\u7684 Class \u5bf9\u8c61\uff0c\u4f5c\u4e3a\u65b9\u6cd5\u533a\u8fd9\u4e2a\u7c7b\u7684\u5404\u79cd\u6570\u636e\u7684\u8bbf\u95ee\u5165\u53e3  </li> <li>\u8fde\u63a5:    2.1 \u9a8c\u8bc1: \u786e\u4fdd\u5b57\u8282\u6d41\u4e2d\u7684\u4fe1\u606f\u7b26\u5408\u865a\u62df\u673a\u8981\u6c42\uff0c\u5e76\u4e14\u4e0d\u4f1a\u5371\u5bb3\u865a\u62df\u673a\u5b89\u5168\u3002  <ul> <li>\u6587\u4ef6\u683c\u5f0f\u9a8c\u8bc1: Class\u6587\u4ef6\u683c\u5f0f\u89c4\u8303\uff1b\u8fd9\u65f6\u5019\u4f1a\u8bb2\u5b57\u8282\u6d41\u8f6c\u5316\u6210\u65b9\u6cd5\u533a\u7684\u6570\u636e\u683c\u5f0f</li> <li>\u5143\u6570\u636e\u9a8c\u8bc1: \u5bf9\u7c7b\u7684\u5143\u6570\u636e\u4fe1\u606f\u8fdb\u884c\u8bed\u4e49\u6821\u9a8c, \u786e\u4fdd\u7b26\u5408Java\u8bed\u8a00\u89c4\u8303</li> <li>\u5b57\u8282\u7801\u9a8c\u8bc1: \u6700\u590d\u6742\u7684, \u901a\u8fc7\u6570\u636e\u6d41\u548c\u63a7\u5236\u6d41\u5206\u6790, \u786e\u5b9a\u7a0b\u5e8f\u8bed\u4e49\u5408\u6cd5</li> <li>\u7b26\u53f7\u5f15\u7528\u9a8c\u8bc1: \u53d1\u751f\u5728\u865a\u62df\u673a\u5c06\u7b26\u53f7\u5f15\u7528\u8f6c\u5316\u4e3a\u76f4\u63a5\u5f15\u7528\u7684\u65f6\u5019(\u89e3\u6790\u65f6\u53d1\u751f)\uff0c\u786e\u4fdd\u89e3\u6790\u52a8\u4f5c\u80fd\u6b63\u786e\u6267\u884c  </li> </ul> </li> </ol> <p>2.2 \u51c6\u5907:     \u5206\u914d\u5185\u5b58\u5e76\u8bbe\u7f6e\u7c7b\u53d8\u91cf\u521d\u59cb\u503c\u7684\u9636\u6bb5(\u5982\u679c\u662ffinal\u4fee\u9970, \u6b64\u65f6\u5c31\u4f1a\u88ab\u8d4b\u5177\u4f53\u503c)  </p> <p>2.3 \u89e3\u6790: \u8fd9\u4e00\u6b65\u7684\u65f6\u95f4\u65f6\u4e0d\u786e\u5b9a\u7684     \u5c06\u5e38\u91cf\u6c60\u5185\u7684\u7b26\u53f7\u5f15\u7528\u66ff\u6362\u4e3a\u76f4\u63a5\u5f15\u7528\u7684\u8fc7\u7a0b</p> <ol> <li>\u521d\u59cb\u5316    \u662f\u6267\u884c\u7c7b\u6784\u9020\u5668 clinit () \u65b9\u6cd5\u7684\u8fc7\u7a0b\u3002\u5e26\u9501\u7ebf\u7a0b\u5b89\u5168, \u4f1a\u9020\u6210\u7ebf\u7a0b\u963b\u585e  </li> </ol> <p>\u865a\u62df\u673a\u4e25\u683c\u89c4\u8303\u4e86\u6709\u4e14\u53ea\u6709 5 \u79cd\u60c5\u51b5\u4e0b\uff0c\u5fc5\u987b\u5bf9\u7c7b\u8fdb\u884c\u521d\u59cb\u5316:  1. new getstatic putstatic invokestatic   2. \u4f7f\u7528\u53cd\u5c04, \u9700\u8981\u5148\u521d\u59cb\u5316  3. \u7236\u7c7b\u4f1a\u5728\u5b50\u7c7b\u521d\u59cb\u5316\u4e4b\u524d\u521d\u59cb\u5316  4. Main{}\u4e3b\u7c7b\u5728jvm\u542f\u52a8\u65f6\u5c31\u4f1a\u521d\u59cb\u5316  5. MethodHandle\u548cVarHandle\u53ef\u4ee5\u770b\u4f5c\u662f\u8f7b\u91cf\u7ea7\u7684\u53cd\u5c04\u8c03\u7528\u673a\u5236\uff0c\u800c\u8981\u60f3\u4f7f\u7528\u8fd92\u4e2a\u8c03\u7528\uff0c \u5c31\u5fc5\u987b\u5148\u4f7f\u7528findStaticVarHandle\u6765\u521d\u59cb\u5316\u8981\u8c03\u7528\u7684\u7c7b\u3002  6. \u5f53\u4e00\u4e2a\u63a5\u53e3\u4e2d\u5b9a\u4e49\u4e86JDK8\u65b0\u52a0\u5165\u7684default\u65b9\u6cd5\u65f6\uff0c\u5982\u679c\u6709\u8fd9\u4e2a\u63a5\u53e3\u7684\u5b9e\u73b0\u7c7b\u53d1\u751f\u4e86\u521d\u59cb\u5316\uff0c\u90a3\u8be5\u63a5\u53e3\u8981\u5728\u5176\u4e4b\u524d\u88ab\u521d\u59cb\u5316\u3002 4. \u4f7f\u7528 5. \u5378\u8f7d    \u4e5f\u5c31\u662f\u5bf9\u5e94\u7684Class\u5bf9\u8c61\u88abGC    1. \u8be5\u7c7b\u7684\u6240\u6709\u7684\u5b9e\u4f8b\u5bf9\u8c61\u90fd\u5df2\u88abGC\uff0c\u4e5f\u5c31\u662f\u8bf4\u5806\u4e0d\u5b58\u5728\u8be5\u7c7b\u7684\u5b9e\u4f8b\u5bf9\u8c61    2. \u8be5\u7c7b\u6ca1\u6709\u5728\u5176\u4ed6\u4efb\u4f55\u5730\u65b9\u88ab\u5f15\u7528    3. \u8be5\u7c7b\u7684\u7c7b\u52a0\u8f7d\u5668\u7684\u5b9e\u4f8b\u5df2\u88abGC          jvm\u81ea\u5e26\u7684\u7c7b\u52a0\u8f7d\u5668\u4e0d\u4f1a\u88abGC, \u81ea\u5b9a\u4e49\u7684\u624d\u4f1a\u88ab\u56de\u6536; \u4e5f\u5c31\u662f\u53ea\u6709\u81ea\u5b9a\u4e49\u7684\u7c7b\u52a0\u8f7d\u5668\u6240\u52a0\u8f7d\u7684\u7c7b\u624d\u4f1a\u88ab\u56de\u6536</p>"},{"location":"java/JVM/#_17","title":"\u7c7b\u52a0\u8f7d\u5668","text":"<p>JVM \u4e2d\u5185\u7f6e\u4e86\u4e09\u4e2a\u91cd\u8981\u7684 ClassLoader\uff0c\u9664\u4e86 BootstrapClassLoader \u5176\u4ed6\u4e24\u4e2a\u5747\u7531 Java \u5b9e\u73b0\u4e14\u5168\u90e8\u7ee7\u627f\u81ea\u62bd\u8c61\u7c7b java.lang.ClassLoader\uff1a 1. BootstrapClassLoader(\u542f\u52a8\u7c7b\u52a0\u8f7d\u5668) \uff1a\u6700\u9876\u5c42\u7684\u52a0\u8f7d\u7c7b\uff0c\u7531C++\u5b9e\u73b0\uff0c\u8d1f\u8d23\u52a0\u8f7d %JAVA_HOME%/lib\u76ee\u5f55\u4e0b\u7684jar\u5305\u548c\u7c7b\u6216\u8005\u6216\u88ab -Xbootclasspath\u53c2\u6570\u6307\u5b9a\u7684\u8def\u5f84\u4e2d\u7684\u6240\u6709\u7c7b\u3002 2. ExtClassLoader(\u6269\u5c55\u7c7b\u52a0\u8f7d\u5668) \uff1aextension\u4e3b\u8981\u8d1f\u8d23\u52a0\u8f7d\u76ee\u5f55 %JRE_HOME%/lib/ext \u76ee\u5f55\u4e0b\u7684jar\u5305\u548c\u7c7b\uff0c\u6216\u88ab java.ext.dirs \u7cfb\u7edf\u53d8\u91cf\u6240\u6307\u5b9a\u7684\u8def\u5f84\u4e0b\u7684jar\u5305\u3002 3. AppClassLoader(\u5e94\u7528\u7a0b\u5e8f\u7c7b\u52a0\u8f7d\u5668) \uff1a\u9762\u5411\u6211\u4eec\u7528\u6237\u7684\u52a0\u8f7d\u5668\uff0c\u8d1f\u8d23\u52a0\u8f7d\u5f53\u524d\u5e94\u7528classpath\u4e0b\u7684\u6240\u6709jar\u5305\u548c\u7c7b\u3002</p>"},{"location":"java/JVM/#_18","title":"\u53cc\u4eb2\u59d4\u6d3e","text":"<p>\u7c7b\u52a0\u8f7d\u7684\u65f6\u5019, \u9996\u5148\u4f1a\u628a\u52a0\u8f7d\u7684\u8bf7\u6c42\u59d4\u6d3e\u7ed9\u7236\u52a0\u8f7d\u5668(\u6ce8\u610f,\u4e0d\u662f\u7236\u7c7b) \u7684 loadClass() \u5904\u7406, \u56e0\u6b64\u6240\u6709\u7684\u8bf7\u6c42\u6700\u7ec8\u90fd\u4f1a\u4ea4\u7ed9\u9876\u5c42\u7684\u542f\u52a8\u7c7b\u52a0\u8f7d\u5668 BootstrapClassLoader \u5904\u7406, \u5f53\u7236\u52a0\u8f7d\u5668\u65e0\u6cd5\u5904\u7406\u65f6\u624d\u81ea\u5df1\u5904\u7406. \u5f53\u7236\u52a0\u8f7d\u5668\u4e3a null \u65f6, \u4f1a\u4f7f\u7528\u542f\u52a8\u7c7b\u52a0\u8f7d\u5668 BootstrapClassLoader. \u53cc\u4eb2\u59d4\u6d3e\u53ef\u4ee5\u6709\u6548\u5730\u907f\u514d\u91cd\u590d\u52a0\u8f7d\u7684\u95ee\u9898.</p>"},{"location":"java/JVM/#_19","title":"\u81ea\u5b9a\u4e49\u7c7b\u52a0\u8f7d\u5668","text":"<p>\u81ea\u5b9a\u4e49\u52a0\u8f7d\u5668\uff0c\u9700\u8981\u7ee7\u627f\u62bd\u8c61\u7c7b ClassLoader \u3002\u5982\u679c\u6211\u4eec\u4e0d\u60f3\u6253\u7834\u53cc\u4eb2\u59d4\u6d3e\u6a21\u578b\uff0c\u5c31\u91cd\u5199 findClass() \u65b9\u6cd5\uff0c\u65e0\u6cd5\u88ab\u7236\u7c7b\u52a0\u8f7d\u5668\u52a0\u8f7d\u7684\u7c7b\u6700\u7ec8\u4f1a\u901a\u8fc7\u8fd9\u4e2a\u65b9\u6cd5\u88ab\u52a0\u8f7d\u3002\u4f46\u662f\uff0c\u5982\u679c\u60f3\u6253\u7834\u53cc\u4eb2\u59d4\u6d3e\u6a21\u578b\u5219\u9700\u8981\u91cd\u5199 loadClass() \u65b9\u6cd5</p>"},{"location":"java/Map-API/","title":"Map API","text":"<p>\u5b66\u4e60\u4e00\u4e0b\u8fd9\u4e9b\u51fd\u6570\u7684\u4f7f\u7528, \u7b97\u6cd5\u4e2d\u7528\u8d77\u6765\u6bd4\u8f83\u65b9\u4fbf</p> <pre><code>interface java.util.Map&lt;K, V&gt; {\n\n    // func: (k,v) -&gt; {}\n    default void forEach(BiConsumer action);\n\n    // func: (k,v) -&gt; new_v\n    default void replaceAll(BiFunction func);\n\n    // \u66ff\u6362\n    default V replace(K key, V value);\n\n    // \u66ff\u6362, k,v \u4e25\u683c\u4e00\u81f4\n    default boolean replace(K key, V oldValue, V newValue);\n\n    // k,v \u4e25\u683c\u4e00\u81f4\n    default boolean remove(Object key, Object value);\n\n    default V getOrDefault(Object key, V defaultValue);\n\n    // \u5982\u679c\u6ca1\u6709\u5219 put\n    default V putIfAbsent(K key, V value);\n\n    // func: (k,v) -&gt; new_v\n    default V compute(K key, BiFunction func);\n\n    // func: k -&gt; new_v\n    default V computeIfAbsent(K key, Function func);\n\n    // func: (k,v) -&gt; new_v\n    default V computeIfPresent(K key, BiFunction func);\n\n    // func: (old_v, value) -&gt; new_v\n    // \u4f8b\u5982: map.merge(\"key\", 1, Integer::sum); \u5e38\u7528\u4e8e\u8ba1\u6570\n    default V merge(K key, V value, BiFunction func);\n\n}\n</code></pre>"},{"location":"java/java/","title":"Java","text":""},{"location":"java/java/#11","title":"1.1 \u57fa\u7840","text":""},{"location":"java/java/#_1","title":"\u57fa\u672c\u6570\u636e\u7c7b\u578b","text":"\u7c7b\u578b \u5b57\u8282 byte 1 short 2 int 4 long 8 char 2 float 4 double 8"},{"location":"java/java/#bitset","title":"BitSet","text":"<p>BitSet \u5185\u90e8\u7ef4\u62a4\u4e86\u4e00\u4e2a long[] words, \u987a\u5e8f\u5730\u8868\u793a 1 \u5230 (words.length * 64)  </p> <p>\u6bcf\u4e2along\u5360\u752864\u4f4d</p>"},{"location":"java/java/#object-function","title":"Object function","text":"<ul> <li>registerNatives() \u7c7b\u88ab\u52a0\u8f7d\u7684\u65f6\u5019\uff0c\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u4ee5\u5b8c\u6210\u5bf9\u5176\u4ed6\u672c\u5730\u65b9\u6cd5\u7684\u6ce8\u518c</li> <li>clone</li> <li>equals</li> <li>hashCode</li> <li>finalize</li> <li>toString</li> <li>notify</li> <li>notifyAll</li> <li>wait</li> </ul>"},{"location":"java/java/#_2","title":"\u5f15\u7528\u7c7b\u578b","text":"<ol> <li>\u5f3a\u5f15\u7528(\u6c38\u4e45\u6709\u6548): \u53ea\u8981\u6709\u5f3a\u5f15\u7528\u6307\u5411, \u5e76\u4e14GC Roots\u53ef\u8fbe, \u90a3\u4e48GC\u65f6\u5c31\u4e0d\u4f1a\u56de\u6536  </li> <li>\u8f6f\u5f15\u7528(\u5185\u5b58\u4e0d\u8db3): OOM\u524d\u4f1a\u52a0\u5165\u56de\u6536\u8303\u56f4; \u4e3b\u8981\u7528\u6765\u7f13\u5b58\u670d\u52a1\u5668\u4e2d\u95f4\u8ba1\u7b97\u7ed3\u679c\u548c\u4e0d\u9700\u8981\u5b9e\u65f6\u4fdd\u5b58\u7684\u7528\u6237\u884c\u4e3a\u7b49  </li> <li>\u5f31\u5f15\u7528(\u518d\u6b21YGC): \u6307\u5411\u7684\u5bf9\u8c61\u5728\u4e0b\u4e00\u6b21YGC\u65f6\u56de\u6536  </li> <li>\u865a\u5f15\u7528(\u5373\u65f6\u5931\u6548): \u5b9a\u4e49\u5b8c\u6210\u540e\u5c31\u65e0\u6cd5\u901a\u8fc7\u8be5\u5f15\u7528\u83b7\u53d6\u6307\u5411\u7684\u5bf9\u8c61. \u4f7f\u7528\u865a\u5f15\u7528\u7684\u552f\u4e00\u76ee\u7684\u662f\u5e0c\u671b\u80fd\u5728\u56de\u6536\u65f6\u6536\u5230\u7cfb\u7edf\u7684\u901a\u77e5. \u5fc5\u987b\u4e0e\u5f15\u7528\u961f\u5217\u8054\u5408\u4f7f\u7528, \u56de\u6536\u5bf9\u8c61\u5185\u5b58\u524d\u4f1a\u628a\u865a\u5f15\u7528\u52a0\u5165\u5f15\u7528\u961f\u5217\u4e2d.  </li> </ol>"},{"location":"java/java/#exception-error","title":"exception error","text":"<p>exception\u80fd\u88ab\u7a0b\u5e8f\u672c\u8eab\u53ef\u4ee5\u5904\u7406\uff0cerror\u662f\u7a0b\u5e8f\u672c\u8eab\u65e0\u6cd5\u5904\u7406\u7684\u3002 error\u901a\u5e38\u662f\u865a\u62df\u673a\u8fd0\u884c\u9519\u8bef</p>"},{"location":"java/java/#_3","title":"\u53d7\u68c0\u5f02\u5e38\u548c\u975e\u53d7\u68c0\u5f02\u5e38","text":"<p>\u53d7\u68c0\u5f02\u5e38\uff1a\u7f16\u8bd1\u65f6\u7684\u5f02\u5e38 \u975e\u53d7\u68c0\u5f02\u5e38\uff1aRuntimeException\u548cError</p>"},{"location":"java/java/#12","title":"1.2 \u96c6\u5408","text":""},{"location":"java/java/#list","title":"List","text":"<p><pre><code>classDiagram\nclass List\n&lt;&lt;interface&gt;&gt; List\n\nList &lt;|.. AbstractList\nAbstractList &lt;|-- ArrayList\nAbstractList &lt;|-- AbstractSequentialList\nAbstractSequentialList &lt;|-- LinkedList\nAbstractList &lt;|-- Vector\nVector &lt;|-- Stack</code></pre> - ArrayList \u521d\u59cb\u5316size=0, add\u540e\u53d8\u621010, 1.5\u500d\u6269\u5bb9  </p> <ul> <li>LinkedList \u53cc\u5411\u94fe\u8868, \u5934\u63d2 | \u5c3e\u63d2  </li> </ul> <p>\u7ebf\u7a0b\u5b89\u5168\u7684 - CopyOnWriteArrayList \u8bfb\u7684\u65f6\u5019\u4e0d\u52a0\u9501\uff0c\u5199\u7684\u65f6\u5019\u52a0\u9501\u590d\u5236\u5bb9\u5668\u526f\u672c\uff0c\u5199\u5165\u5e76\u4fee\u6539\u5176\u5f15\u7528 - Collections.synchronizedList(List list)  - Vector  \u8ddfArrayList\u7c7b\u4f3c, \u5927\u90e8\u5206\u65b9\u6cd5\u88absynchronized\u4fee\u9970, 2\u500d\u6269\u5bb9</p>"},{"location":"java/java/#queue","title":"Queue","text":"<p><pre><code>classDiagram\nclass Queue\n&lt;&lt;interface&gt;&gt; Queue\n\nclass Deque\n&lt;&lt;interface&gt;&gt; Deque\n\nclass AbstractQueue\n&lt;&lt;abstract&gt;&gt; AbstractQueue\n\nQueue &lt;|-- Deque\nQueue &lt;|.. AbstractQueue\n\nAbstractQueue &lt;|-- PriorityQueue\n\nDeque &lt;|.. ArrayDeque\nDeque &lt;|.. LinkedList</code></pre> - Queue     Queue \u4e00\u7aef\u8fdb\u4e00\u7aef\u51fa     Deque \u4e24\u7aef\u5747\u53ef\u8fdb\u51fa  </p> <pre><code>Queue interface \u65b9\u6cd5:(\u5728\u7a7a\u95f4\u4e0d\u8db3\u7684\u60c5\u51b5\u4e0b)\n\n| runtime exception | no runtime exception |\n| ----------------- | -------------------- |\n| add(E)            | offer(E)             |\n| remove()          | poll()               |\n| element()         | peek()               |\n</code></pre> <ul> <li> <p>ArrayDeque  </p> <ul> <li>\u53ef\u6269\u5bb9\u6570\u7ec4  </li> <li>\u4e0d\u53ef\u5b58null  </li> <li>\u5934\u5c3e\u64cd\u4f5c\u9ad8\u6548\uff0c\u901a\u8fc7\u4fee\u6539\u5934\u5c3e\u7684\u7d22\u5f15\u8fdb\u884c\u64cd\u4f5c\u3002 <p>head\u4e0d\u4e00\u5b9a\u603b\u662f\u5927\u4e8etail  </p> </li> <li>\u5185\u5b58\u6548\u7387\u597d  </li> </ul> </li> <li> <p>LinkedList     \u53ef\u5b58null</p> </li> </ul>"},{"location":"java/java/#map","title":"Map","text":"<pre><code>classDiagram\n\nDictionary &lt;|-- HashTable\nMap &lt;|.. HashTable\nHashTable &lt;|-- Properties\n\nMap &lt;|-- SortedMap\nSortedMap &lt;|-- NavigableMap\nNavigableMap &lt;|.. TreeMap\n\nMap &lt;|.. AbstractMap\nAbstractMap &lt;|-- HashMap\nHashMap &lt;|-- LinkedHashMap\nAbstractMap &lt;|-- IdentityHashMap\nAbstractMap &lt;|-- WeakHashMap\nAbstractMap &lt;|-- EnumMap\nAbstractMap &lt;|-- TreeMap</code></pre> <ul> <li>HashMap  </li> <li> <p>\u5404\u7248\u672c\u5b9e\u73b0\u65b9\u5f0f  </p> <ul> <li>1.7 \u6570\u7ec4+\u5355\u94fe\u8868  <p>\u5982\u679c\u4e00\u4e2a\u6876\u4e2d\u7684\u5143\u7d20\u8fc7\u591a\uff0c\u67e5\u8be2\u6548\u7387\u5c31\u662fO(n)  </p> </li> </ul> <p>1.7 Entry   1.7 \u4f7f\u7528\u5934\u63d2\u6cd5(\u8ba4\u4e3a\u540e\u6765\u7684\u503c\u67e5\u627e\u53ef\u80fd\u6027\u5927)  </p> <p>\u591a\u7ebf\u7a0b\u72b6\u6001\u4e0b\u6709\u53ef\u80fd\u51fa\u73b0\u73af\u5f62\u94fe\u8868  </p> <ul> <li>1.8 \u6570\u7ec4+(\u5355\u94fe\u8868|\u7ea2\u9ed1\u6811) \u67e5\u8be2\u6548\u7387\u6700\u5dee\u662fO(logn)         1.8 Node   1.8 \u4f7f\u7528\u5c3e\u63d2\u6cd5  </li> </ul> </li> <li> <p>JDK1.8 \u5173\u952e\u53c2\u6570&amp;\u6269\u5bb9  </p> <ul> <li>\u521d\u59cb\u5316   <pre><code>static final int tableSizeFor(int cap) {\n  int n = cap - 1;\n  n |= n &gt;&gt;&gt; 1;\n  n |= n &gt;&gt;&gt; 2;\n  n |= n &gt;&gt;&gt; 4;\n  n |= n &gt;&gt;&gt; 8;\n  n |= n &gt;&gt;&gt; 16;\n  return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n}\n</code></pre></li> <li>putVal: <p>\u5982\u679ctable\u7a7a\uff0cresize()     \u5982\u679c\u6876\u91cc\u9762\u6ca1\u6709\u6570\u636e\uff0c\u653e\u8fdb\u53bb     \u5982\u679c\u7b2c\u4e00\u4e2a\u8282\u70b9\u54c8\u5e0c\u503c\u4e00\u6837\u4e14key\u4e00\u6837\uff0c\u8bf4\u660e\u5df2\u7ecf\u5728\u91cc\u9762\u4e86     else if \u662f\u6811\u8282\u70b9\uff0c\u5f80\u6811\u4e2d\u6dfb\u52a0\u8282\u70b9     else if \u662f\u94fe\u8868\uff0c\u4ece\u5934\u5230\u5c3e\u904d\u5386\uff0c\u5982\u679c\u6ca1\u6709\u51b2\u7a81\u5c31\u653e\u5230\u5c3e\u8282\u70b9\uff08\u5982\u679c\u5927\u4e8e\u7b49\u4e8e8\u6811\u5f62\u5316\uff09     \u5224\u65ad\u9608\u503c\u662f\u5426\u8981\u6269\u5bb9</p> </li> <li>removeNode: <p>\u8ba1\u7b97index, \u5982\u679c\u4e3a\u7a7a\u8fd4\u56denull     \u5982\u679c\u7b2c\u4e00\u4e2a\u8282\u70b9\u5c31\u662f, \u8bb0\u5f55\u7b2c\u4e00\u4e2a\u8282\u70b9     \u5982\u679c\u4e0d\u662f, \u4e14next\u4e0d\u4e3anull, \u5224\u65ad\u7b2c1\u4e2a\u8282\u70b9\u662f\u6811\u8282\u70b9\u8fd8\u662f\u94fe\u8868\u8282\u70b9, \u5206\u522b\u8fdb\u884c\u67e5\u627e     \u6700\u540e\u6839\u636e\u60c5\u51b5\u5220\u9664 </p> </li> <li> <p>resize:</p> <p>if\u65e7\u5bb9\u91cf\u4e0d\u4e3a0, \u4e24\u500d\u6269\u5bb9;\u5e76\u4e14\u5bb9\u91cf\u523016, \u65b0\u9608\u503c\u4e5f\u52a0\u500d     else if\u65e7\u5bb9\u91cf\u4e3a0, \u65e7\u9608\u503c\u4e0d\u4e3a0, \u65b0\u5bb9\u91cf=\u65e7\u9608\u503c     else if\u65e7\u5bb9\u91cf\u4e3a0, \u65e7\u9608\u503c\u4e3a0, \u90a3\u4e48\u90fd\u53d8\u6210\u9ed8\u8ba4\u7684       if \u65b0\u9608\u503c\u4e3a0 (\u53ea\u6709\u65e7\u5bb9\u91cf\u5c0f\u4e8e16\u6216\u8005\u65e7\u5bb9\u91cf0&amp;\u9608\u503c\u4e0d\u4e3a0\u7684\u4e24\u79cd\u60c5\u51b5\u4e0b\u51fa\u73b0), \u53d8\u6210\u9ed8\u8ba4\u7684     \u904d\u5386\u65e7table, \u91cd\u65b0\u505ahash\u6563\u5217 </p> </li> <li> <p>\u5bb9\u91cf   \u521d\u59cb\u5316\u5bb9\u91cf16   loadFactor=0.75   threshold = capacity * loadFactor = 12   2\u500d\u6269\u5bb9  </p> </li> <li> <p>(\u5355\u94fe\u8868\u957f\u5ea6 &gt;= 8) &amp; (\u6570\u7ec4\u957f\u5ea6 &gt;= 64) \u53d8\u6210\u7ea2\u9ed1\u6811  </p> <p>TREEIFY_THRESHOLD \u6876\u7684\u6811\u5316\u9608\u503c 8 MIN_TREEIFY_CAPACITY \u6700\u5c0f\u6811\u5f62\u5316\u5bb9\u91cf 64  </p> </li> <li> <p>\u7ea2\u9ed1\u6811node\u6570\u91cf &lt;= 6 \u53d8\u6210\u5355\u94fe\u8868  </p> <p>UNTREEIFY_THRESHOLD \u6811\u7684\u94fe\u8868\u8fd8\u539f\u9608\u503c 6  </p> </li> </ul> </li> <li> <p>\u6876\u7684\u6811\u5f62\u5316 treeifyBin()</p> <ol> <li>\u6839\u636eHash\u8868\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u51b3\u5b9a\u662f\u6269\u5bb9\u8fd8\u662f\u6811\u5f62\u5316</li> <li>\u904d\u5386\u6876\u4e2d\u7684\u5143\u7d20\u521b\u5efa\u76f8\u540c\u4e2a\u6570\u7684\u6811\u578b\u8282\u70b9\uff0c\u7531\u5355\u94fe\u8868\u8f6c\u4e3a\u53cc\u94fe\u8868\u518d\u8f6c\u4e3a\u6811\u5f62</li> <li>\u8ba9\u6876\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u6307\u5411\u65b0\u5efa\u7684\u6811\u5934\u7ed3\u70b9  </li> </ol> </li> <li> <p>put()     \u6269\u5bb9 \u9996\u5148\u68c0\u6d4b\u9608\u503c, \u6269\u5bb9\u62102\u500d, \u91cd\u65b0\u8ba1\u7b97\u6570\u7ec4\u4e2d\u7684index = key.hash &amp; (length-1)     index = (n-1)&amp;hash, n\u662f\u6570\u7ec4\u957f\u5ea6, \u662f2\u7684\u5e42\u6b21\u65b9, \u5219n-1=11111     \u6269\u5bb9\u4e3a2\u500d\u7684\u60c5\u51b5\u4e0b\uff0c\u539f\u6765\u7684index\u4f1a\u5728\u539f\u4f4d\u7f6e\u6216\u539f\u4f4d\u7f6e+\u539ftable\u957f\u5ea6\u7684\u4f4d\u7f6e <pre><code>n-1:    0000 0000 1111\nhash1:  0101 0101 0101  -&gt;  0101\nhash2:  0101 0100 0101  -&gt;  0101\n\nn-1:    0000 0001 1111\nhash1:  0101 0101 0101  -&gt;  1 0101\nhash2:  0101 0100 0101  -&gt;  0 0101\n</code></pre></p> </li> <li> <p>\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u7684\u95ee\u9898     1.7 \u591a\u7ebf\u7a0b\u8c03\u7528\uff0cresize\u7684\u65f6\u5019\u6709\u53ef\u80fd\u51fa\u73b0\u73af\u5f62\u94fe\u8868\u6216\u8005\u6570\u636e\u4e22\u5931:     \u672aresize\u4e4b\u524d\u7684\u8282\u70b9B\u5728resize\u7684\u65f6\u5019\u5934\u63d2\uff0c\u800c\u4e4b\u524d\u8fd9\u4e2a\u8282\u70b9\u88ab\u5b83\u4e4b\u524d\u7684\u8282\u70b9A\u6307\u5411\u3002\u8fd9\u662f1.7\u7ebf\u7a0b\u4e0d\u5b89\u5168\u6700\u5927\u7684\u95ee\u9898\u4e4b\u4e00\u3002     1.8 \u7684get/put\u4e5f\u6ca1\u6709\u52a0\u540c\u6b65\u9501\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u591a\u7ebf\u7a0b\u64cd\u4f5c\u65f6\u4e0a\u4e00\u65f6\u523b\u653e\u8fdb\u53bb\u7684\u503cget\u51fa\u6765\u8fd8\u539f\u503c\u3002</p> </li> </ul>"},{"location":"java/java/#set","title":"Set","text":"<p><pre><code>classDiagram\nSet&lt;|--SortedSet\nSet&lt;|..AbstractSet\nSortedSet&lt;|--NavigableSet\nAbstractSet&lt;|--TreeSet\nNavigableSet&lt;|--TreeSet\nAbstractSet&lt;|--HashSet\nHashSet&lt;|--LinkedHashSet\nAbstractSet&lt;|--EnumSet</code></pre> Set\u662f\u57fa\u4e8eMap\u5b9e\u73b0\u7684\uff0cmap\u91cc\u9762\u7684value\u662f\uff1aprivate static final Object PRESENT = new Object(); - LinkedHashSet \u52a0\u4e86\u4e00\u6761\u53cc\u5411\u94fe\u8868 - TreeSet \u7ea2\u9ed1\u6811\uff0c\u53ef\u4ee5\u6709\u5e8f\u5730\u7ec4\u7ec7\u6570\u636e  </p>"},{"location":"java/java%E5%8F%91%E5%B1%95%E5%8F%B2/","title":"java \u53d1\u5c55\u53f2","text":"<pre><code>timeline\n    title Java \u6280\u672f\u53d1\u5c55\u65f6\u95f4\u7ebf\n    section Sun\n        1995 : Java 1.0 \u7248\u672c\n        1996 : JDK 1.0\n             : JavaOne \u5927\u4f1a\n        1997 : JDK 1.1\n        1998 : JDK 1.2\n             : J2SE, J2EE, J2ME\n        1999 : HotSpot\n        2000 : JDK 1.3\n             : 2\u5e741\u4e2a\u4e3b\u7248\u672c\n        2002 : JDK 1.4\n        2004 : JDK 5\n        2006 : JDK 6\n             : Java EE 6&lt;br&gt;Java SE 6&lt;br&gt;Java ME 6\n             : JavaOne \u5927\u4f1a\u4e0a\u5ba3\u5e03\u5f00\u6e90\n    section Oracle\n        2009 : JDK 7\n             : Oracle \u6536\u8d2d Sun\n        2014 : JDK 8\n             : JEP&lt;br&gt;(JDK Enhancement Proposals)\n        2017 : JDK 9\n             : 1\u5e742\u4e2a\u5927\u7248\u672c\n             : 6\u4e2a\u5927\u7248\u672c1\u4e2aLTS\n        2018 : JDK 10\n             : \u72b6\u544a Android\n             : Java EE \u6210\u4e3a\u5386\u53f2&lt;br&gt;\u6350\u7ed9Eclipse\u57fa\u91d1\u4f1a&lt;br&gt;\u6539\u540d Jakarta EE\n             : \u6700\u540e\u7684 JavaOne \u5927\u4f1a\n             : JDK 11\n             : \u62c6\u6210 OpenJDK \u548c OracleJDK&lt;br&gt;OpenJDK \u7ef4\u62a46\u4e2a\u6708\n        2019 : RedHat \u7ef4\u62a4 OpenJDK\n             : JDK 12</code></pre>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/","title":"\u591a\u7ebf\u7a0b","text":""},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#14","title":"1.4 \u591a\u7ebf\u7a0b","text":""},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#sleep-wait","title":"sleep() wait()","text":"<p>Thread.sleep() this.wait() \u6700\u4e3b\u8981\u7684\u533a\u522b: sleep()\u4e0d\u91ca\u653e\u9501 wait()\u91ca\u653e\u9501 wait() notify()\u53ea\u6709syncronized\u5185\u90e8\u53ef\u8c03\u7528, \u53ea\u80fd\u7531monitor\u5f53\u524d\u6301\u6709\u7684\u9501\u5bf9\u8c61\u8c03\u7528, \u5426\u5219IllegalMonitorStateException</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#_1","title":"\u7ebf\u7a0b\u72b6\u6001","text":"\u72b6\u6001 \u8bf4\u660e NEW \u7ebf\u7a0b\u6784\u5efa\u540e\u672a\u8c03\u7528start() RUNNABLE \u5c31\u7eea&amp;\u8fd0\u884c \u7edf\u79f0runnable BLOCKED \u963b\u585e\u4e8e\u9501 WAITING \u7b49\u5f85\uff0c\u7b49\u5f85\u5176\u4ed6\u7ebf\u7a0b\u901a\u77e5\u6216\u4e2d\u65ad TIME_WAITING \u8d85\u65f6\u7b49\u5f85 TERMINATED \u7ec8\u6b62\uff0c\u7ebf\u7a0b\u6267\u884c\u5b8c\u6bd5"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#_2","title":"\u7ebf\u7a0b\u4e2d\u65ad","text":"<p>interrupt \u4f18\u96c5\u5730\u4e2d\u65ad\u7ebf\u7a0b\u662f\u4e00\u79cd\u827a\u672f\u3002\u7c7b\u4f3c\u4e00\u79cd\u6807\u5fd7\u4f4d\uff0c\u8ba9\u7ebf\u7a0b\u81ea\u5df1\u4e2d\u65ad\u3002 1. interrupt \u4e2d\u65ad\u64cd\u4f5c\u65f6\uff0c\u975e\u81ea\u8eab\u6253\u65ad\u9700\u8981\u5148\u68c0\u6d4b\u662f\u5426\u6709\u4e2d\u65ad\u6743\u9650\uff0c\u8fd9\u7531jvm\u7684\u5b89\u5168\u673a\u5236\u914d\u7f6e\uff1b 2. \u5982\u679c\u7ebf\u7a0b\u5904\u4e8esleep, wait, join \u7b49\u72b6\u6001\uff0c\u90a3\u4e48\u7ebf\u7a0b\u5c06\u7acb\u5373\u9000\u51fa\u88ab\u963b\u585e\u72b6\u6001\uff0c\u5e76\u629b\u51fa\u4e00\u4e2aInterruptedException\u5f02\u5e38\uff1b 3. \u5982\u679c\u7ebf\u7a0b\u5904\u4e8eI/O\u963b\u585e\u72b6\u6001\uff0c\u5c06\u4f1a\u629b\u51faClosedByInterruptException\uff08IOException\u7684\u5b50\u7c7b\uff09\u5f02\u5e38\uff1b 4. \u5982\u679c\u7ebf\u7a0b\u5728Selector\u4e0a\u88ab\u963b\u585e\uff0cselect\u65b9\u6cd5\u5c06\u7acb\u5373\u8fd4\u56de\uff1b 5. \u5982\u679c\u975e\u4ee5\u4e0a\u60c5\u51b5\uff0c\u5c06\u76f4\u63a5\u6807\u8bb0 interrupt \u72b6\u6001\uff1b</p> <p>Future.cancel() ExecutorService.shutdown()</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#_3","title":"\u6b7b\u9501","text":"<p>\u4e00\u7ec4\u7ebf\u7a0b\u88ab\u963b\u585e\u4e86\uff0c\u7b49\u5f85\u4e00\u4e2a\u6c38\u8fdc\u4e0d\u4f1a\u4e3a\u771f\u7684\u6761\u4ef6\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u5728\u7b49\u5f85\u5176\u4ed6\u7ebf\u7a0b\u6267\u884c\u4e00\u4e2a\u4e0d\u53ef\u80fd\u6267\u884c\u7684\u64cd\u4f5c\u3002 \u5982\u4f55\u907f\u514d\uff1a\u7ed9\u5b9a\u6240\u6709\u4e92\u65a5\u64cd\u4f5c\u7684\u4e00\u4e2a\u5168\u5e8f\uff0c\u5982\u679c\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u4ee5\u4e00\u79cd\u987a\u5e8f\u83b7\u5f97\u4e92\u65a5\u9501\u5e76\u4e14\u4ee5\u76f8\u53cd\u7684\u987a\u5e8f\u91ca\u653e\uff0c\u5c31\u4e0d\u4f1a\u6b7b\u9501\u3002\uff08CSAPP\uff09</p> <p>\u4ea7\u751f\u6b7b\u9501\u5fc5\u987b\u5177\u5907\u4ee5\u4e0b\u56db\u4e2a\u6761\u4ef6\uff1a 1. \u4e92\u65a5\u6761\u4ef6\uff1a\u8be5\u8d44\u6e90\u4efb\u610f\u4e00\u4e2a\u65f6\u523b\u53ea\u7531\u4e00\u4e2a\u7ebf\u7a0b\u5360\u7528\u3002 2. \u8bf7\u6c42\u4e0e\u4fdd\u6301\u6761\u4ef6\uff1a\u4e00\u4e2a\u8fdb\u7a0b\u56e0\u8bf7\u6c42\u8d44\u6e90\u800c\u963b\u585e\u65f6\uff0c\u5bf9\u5df2\u83b7\u5f97\u7684\u8d44\u6e90\u4fdd\u6301\u4e0d\u653e\u3002 3. \u4e0d\u5265\u593a\u6761\u4ef6: \u7ebf\u7a0b\u5df2\u83b7\u5f97\u7684\u8d44\u6e90\u5728\u672a\u4f7f\u7528\u5b8c\u4e4b\u524d\u4e0d\u80fd\u88ab\u5176\u4ed6\u7ebf\u7a0b\u5f3a\u884c\u5265\u593a\uff0c\u53ea\u6709\u81ea\u5df1\u4f7f\u7528\u5b8c\u6bd5\u540e\u624d\u91ca\u653e\u8d44\u6e90\u3002 4. \u5faa\u73af\u7b49\u5f85\u6761\u4ef6: \u82e5\u5e72\u8fdb\u7a0b\u4e4b\u95f4\u5f62\u6210\u4e00\u79cd\u5934\u5c3e\u76f8\u63a5\u7684\u5faa\u73af\u7b49\u5f85\u8d44\u6e90\u5173\u7cfb\u3002</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#synchronized","title":"synchronized","text":"<p>\u89e3\u51b3\u591a\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u8bbf\u95ee\u8d44\u6e90\u7684\u540c\u6b65\u6027, \u4fdd\u8bc1\u5b83\u6240\u4fee\u9970\u7684\u65b9\u6cd5\u6216\u8005\u4ee3\u7801\u5757\u5728\u4efb\u610f\u65f6\u523b\u53ea\u80fd\u6709\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c.</p> <p>1.6\u4e4b\u524d\u662f\u91cd\u91cf\u7ea7\u9501, \u56e0\u4e3a\u76d1\u89c6\u5668\u9501\uff08monitor\uff09\u662f\u4f9d\u8d56\u4e8e\u5e95\u5c42\u7684\u64cd\u4f5c\u7cfb\u7edf\u7684 Mutex Lock \u6765\u5b9e\u73b0\u7684\uff0cJava \u7684\u7ebf\u7a0b\u662f\u6620\u5c04\u5230\u64cd\u4f5c\u7cfb\u7edf\u7684\u539f\u751f\u7ebf\u7a0b\u4e4b\u4e0a\u7684\u3002\u5982\u679c\u8981\u6302\u8d77\u6216\u8005\u5524\u9192\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u90fd\u9700\u8981\u64cd\u4f5c\u7cfb\u7edf\u5e2e\u5fd9\u5b8c\u6210\uff0c\u800c\u64cd\u4f5c\u7cfb\u7edf\u5b9e\u73b0\u7ebf\u7a0b\u4e4b\u95f4\u7684\u5207\u6362\u65f6\u9700\u8981\u4ece\u7528\u6237\u6001\u8f6c\u6362\u5230\u5185\u6838\u6001\uff0c\u8fd9\u4e2a\u72b6\u6001\u8f6c\u6362\u9700\u8981\u76f8\u5bf9\u6bd4\u8f83\u957f\u7684\u65f6\u95f4</p> <p>\u4e09\u79cd\u4f7f\u7528\u65b9\u5f0f: 1. \u4fee\u9970\u65b9\u6cd5:   1.1 \u5b9e\u4f8b\u65b9\u6cd5: \u76f8\u5f53\u4e8e\u5bf9\u5f53\u524d\u5bf9\u8c61\u52a0\u9501, \u9700\u8981\u83b7\u5f97\u5bf9\u8c61\u9501   1.2 \u9759\u6001\u65b9\u6cd5: \u76f8\u5f53\u4e8e\u7ed9\u5f53\u524d\u7c7b\u5bf9\u8c61\u52a0\u9501, \u9700\u8981\u83b7\u5f97\u7c7b\u9501   \u540c\u6b65\u65b9\u6cd5\u4f7f\u7528 ACC_SYNCHRONIZED \u6807\u8bc6, JVM\u68c0\u6d4b\u5230\u4e4b\u540e\u8fdb\u884c\u540c\u6b65\u8c03\u7528.</p> <ol> <li>\u4fee\u9970\u4ee3\u7801\u5757: \u6307\u5b9a\u52a0\u9501\u5bf9\u8c61, \u9700\u8981\u83b7\u5f97\u76f8\u5bf9\u5e94\u7684\u5bf9\u8c61\u9501\u6216\u8005\u7c7b\u9501 <p>\u901a\u8fc7\u67e5\u770b\u5b57\u8282\u7801\u4fe1\u606f  javap -c -s -v -l SynchronizedDemo.class</p> </li> </ol> <p>\u53ef\u4ee5\u770b\u51fa\u540c\u6b65\u4ee3\u7801\u5757\u4f7f\u7528 monitorenter(\u6307\u5411\u5f00\u59cb) \u548c monitorexit(\u6307\u5411\u7ed3\u675f) \u6307\u4ee4, \u6267\u884center\u65f6\u5c1d\u8bd5\u6301\u6709\u5bf9\u8c61\u76d1\u89c6\u5668monitor</p> <p>(HotSpot\u4e2d\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u5185\u7f6e\u4e00\u4e2aObjectMonitor\u5bf9\u8c61//HotSpot\u4e2d\uff0cMonitor\u662f\u57fa\u4e8e C++ \u5b9e\u73b0\u7684)  </p> <p>\u6267\u884center\u65f6\u5c1d\u8bd5\u83b7\u53d6\u5bf9\u8c61\u9501, \u9501\u8ba1\u6570\u5668\u4e3a0\u8868\u793a\u53ef\u83b7\u53d6, \u83b7\u53d6\u540e\u9501\u8ba1\u6570\u5668+1    \u6267\u884cexit\u540e\u5c06\u9501\u8ba1\u6570\u5668\u8bbe\u4e3a0, \u8868\u793a\u9501\u5df2\u91ca\u653e.  </p> <p>\u672c\u8d28\u90fd\u662f\u5bf9\u5bf9\u8c61\u76d1\u89c6\u5668 monitor \u7684\u83b7\u53d6.</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#_4","title":"\u9501\u7684\u56db\u79cd\u72b6\u6001","text":"<p>\u65e0\u9501\u72b6\u6001 \u504f\u5411\u9501\u72b6\u6001 \u8f7b\u91cf\u7ea7\u9501\u72b6\u6001 \u91cd\u91cf\u7ea7\u9501\u72b6\u6001 \u9501\u5347\u7ea7\u8fc7\u7a0b\uff1a\u65e0\u9501\u72b6\u6001\uff0c\u6301\u6709\u504f\u5411\u9501\u7684\u7ebf\u7a0b\u4e0d\u4f1a\u4e3b\u52a8\u91ca\u653e\u9501\uff0c\u4e8c\u6b21\u8fdb\u5165\u4e5f\u4e0d\u9700\u8981\u91cd\u65b0\u83b7\u53d6\u9501\uff0c\u7b49\u51fa\u73b0\u9501\u7ade\u4e89\u7684\u65f6\u5019\u4f1a\u53d8\u6210\u8f7b\u91cf\u7ea7\u9501\uff0c\u8f7b\u91cf\u7ea7\u9501\u901a\u8fc7CAS\u81ea\u65cb\u5904\u7406\u9501\u7ade\u4e89\uff0c\u81ea\u65cb\u6b21\u6570\u5230\u8fbe\u4e00\u5b9a\u7a0b\u5ea6\u4ee5\u540e\u53d8\u6210\u91cd\u91cf\u7ea7\u9501\uff0c\u4f7f\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u76d1\u89c6\u5668\u9501 1.6\u540esynchronized\u4f18\u5316 https://www.cnblogs.com/wuqinglong/p/9945618.html</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#synchronized-reentrantlock","title":"synchronized \u548c ReentrantLock \u7684\u533a\u522b","text":"<p>\u4e8c\u8005\u90fd\u662f\u53ef\u91cd\u5165\u9501: \u81ea\u5df1\u53ef\u4ee5\u518d\u6b21\u83b7\u5f97\u81ea\u5df1\u5185\u90e8\u9501, \u6bcf\u6b21\u83b7\u53d6\u9501\u8ba1\u6570\u5668\u90fd\u4f1a\u81ea\u589e1 synchronized\u4f9d\u8d56jvm, ReentrantLock\u4f9d\u8d56API ReentrantLock \u9700\u8981\u624b\u52a8\u52a0\u9501\u3001\u91ca\u653e\uff0c\u81ea\u65cb\u9501\uff0c\u901a\u8fc7\u5faa\u73af\u8c03\u7528CAS\u64cd\u4f5c\u5b9e\u73b0\u52a0\u9501\u3002 ReentrantLock \u9ad8\u7ea7\u529f\u80fd: 1. \u7b49\u5f85\u53ef\u4e2d\u65ad: \u53ef\u4ee5\u4e2d\u65ad\u7b49\u5f85\u9501\u7684\u7ebf\u7a0b, lock.lockInterruptibly() 2. \u53ef\u5b9e\u73b0\u516c\u5e73\u9501: \u53ef\u6307\u5b9a\u662f\u516c\u5e73\u9501\u8fd8\u662f\u975e\u516c\u5e73\u9501(\u901a\u8fc7\u6784\u9020\u65b9\u6cd5) 3. \u53ef\u5b9e\u73b0\u9009\u62e9\u6027\u901a\u77e5: \u5728\u4e00\u4e2aLock\u5bf9\u8c61\u4e2d\u53ef\u4ee5\u521b\u5efa\u591a\u4e2aCondition\u5b9e\u4f8b, \u7ebf\u7a0b\u53ef\u4ee5\u6ce8\u518c\u5230\u6307\u5b9a\u7684Condition\u4e2d, \u53ef\u4ee5\u6709\u9009\u62e9\u6027\u5730\u8fdb\u884c\u7ebf\u7a0b\u901a\u77e5.</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#cas-compare-and-swap","title":"CAS Compare and Swap","text":"<pre><code>\u8f7b\u91cf\u7ea7 \u4e0d\u52a0\u4e92\u65a5\u9501  \n\u5e76\u53d1\u91cf\u5927\u65f6\u5bf9CPU\u6d88\u8017\u5927, \u6709\u53ef\u80fd\u4ea7\u751f\u5fd9\u5faa\u73af  \nABA\u95ee\u9898, \u7b2c\u4e09\u8005\u6539\u56de\u6700\u521d\u7684\u72b6\u6001, \u53ef\u4ee5\u901a\u8fc7\u6dfb\u52a0\u7248\u672c\u53f7\u89e3\u51b3\n</code></pre>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#volatile","title":"volatile","text":""},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#cpu","title":"CPU\u7f13\u5b58","text":"<p>\u5148\u590d\u5236\u5230CPU\u7f13\u5b58\u4e2d, \u8fd0\u7b97\u5b8c\u6210\u540e\u56de\u5237\u4e3b\u5b58. \u5b58\u5728\u4e0d\u4e00\u81f4\u95ee\u9898</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#jmm","title":"JMM\u5185\u5b58\u6a21\u578b","text":"<p>\u7ebf\u7a0b\u53ef\u4ee5\u5c06\u53d8\u91cf\u4fdd\u5b58\u5728\u672c\u5730\u5185\u5b58(\u5982CPU\u7684\u5bc4\u5b58\u5668), \u800c\u4e0d\u662f\u4e3b\u5b58(\u5171\u4eab\u5185\u5b58). \u4ea7\u751f\u4e0d\u4e00\u81f4\u95ee\u9898 volatile \u9632\u6b62JVM\u6307\u4ee4\u91cd\u6392&amp;&amp;\u4fdd\u8bc1\u53d8\u91cf\u7684\u53ef\u89c1\u6027</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#_5","title":"\u539f\u5b50\u6027 \u53ef\u89c1\u6027 \u6709\u5e8f\u6027\u53ca\u5176\u76f8\u5173\u95ee\u9898","text":"<ul> <li> <p>\u5185\u5b58\u5c4f\u969c: \u7981\u6b62\u6307\u4ee4\u91cd\u6392 //\u5199\u4e4b\u524d, \u8bfb\u4e4b\u540e\u4e0d\u53ef\u91cd\u6392 &amp; \u5199\u5b8c\u8bfb\u4e5f\u4e0d\u53ef\u91cd\u6392   \u5f53\u7b2c\u4e8c\u4e2a\u64cd\u4f5c\u662fvolatile\u5199, \u4e0d\u53ef\u91cd\u6392, \u9632\u6b62\u5199\u4e4b\u524d\u7684\u64cd\u4f5c\u88ab\u91cd\u6392\u5230\u5199\u4e4b\u540e   \u5f53\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u662fvolatile\u8bfb, \u4e0d\u53ef\u91cd\u6392, \u9632\u6b62\u8bfb\u4e4b\u540e\u7684\u64cd\u4f5c\u88ab\u91cd\u6392\u5230\u8bfb\u4e4b\u524d   \u5f53\u7b2c\u4e00\u4e2a\u662fvolatile\u5199, \u7b2c\u4e8c\u4e2a\u662fvolatile\u8bfb, \u4e0d\u53ef\u91cd\u6392</p> </li> <li> <p>\u603b\u7ebf\u55c5\u63a2: \u6bcf\u4e2a\u5904\u7406\u5668\u901a\u8fc7\u55c5\u63a2\u603b\u7ebf\u4e0a\u4f20\u64ad\u7684\u6570\u636e\u68c0\u67e5\u81ea\u5df1\u7684\u7f13\u5b58\u662f\u5426\u8fc7\u671f, \u5982\u679c\u5904\u7406\u5668\u53d1\u73b0\u81ea\u5df1\u7f13\u5b58\u884c\u5bf9\u5e94\u7684\u5185\u5b58\u5730\u5740\u88ab\u4fee\u6539, \u4f1a\u5c06\u5904\u7406\u5668\u7684\u7f13\u5b58\u884c\u8bbe\u7f6e\u4e3a\u65e0\u6548\u72b6\u6001\uff0c\u5e76\u4ece\u4e3b\u5185\u5b58\u91cd\u65b0\u83b7\u53d6\u6570\u636e. </p> </li> <li> <p>\u603b\u7ebf\u98ce\u66b4: \u7531\u4e8evolatile\u7684mesi\u7f13\u5b58\u4e00\u81f4\u6027\u534f\u8bae\u9700\u8981\u4e0d\u65ad\u7684\u4ece\u4e3b\u5185\u5b58\u55c5\u63a2\u548ccas\u4e0d\u65ad\u5faa\u73af\u65e0\u6548\u4ea4\u4e92\u5bfc\u81f4\u603b\u7ebf\u5e26\u5bbd\u8fbe\u5230\u5cf0\u503c   \u89e3\u51b3\u529e\u6cd5\uff1a\u90e8\u5206volatile\u548ccas\u4f7f\u7528synchronize</p> </li> </ul>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#volatile-synchronized","title":"volatile \u548c synchronized \u4e4b\u95f4\u7684\u533a\u522b","text":"<p>\u4fee\u9970\u5bf9\u8c61\u4e0d\u540c, \u4fee\u9970\u53d8\u91cf \u548c \u4fee\u9970\u65b9\u6cd5&amp;\u4ee3\u7801\u5757 \u89e3\u51b3\u53d8\u91cf\u5728\u591a\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u7684\u53ef\u89c1\u6027, \u89e3\u51b3\u591a\u4e2a\u7ebf\u7a0b\u4e4b\u95f4\u8bbf\u95ee\u5171\u4eab\u8d44\u6e90\u7684\u540c\u6b65\u6027  </p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#threadlocal","title":"ThreadLocal","text":"<p>copy calue into every thread \u8bbe\u8ba1\u7684\u521d\u8877\u662f\u8de8\u7ebf\u7a0b\u4f20\u9012\u6570\u636e\uff1b\u5e38\u7528\u65b9\u5f0f\uff1a\u901a\u8fc7\u8fd9\u73a9\u610f\u513f\u900f\u4f20\u6570\u636e\uff0c\u907f\u514d\u65b9\u6cd5\u4e4b\u95f4\u8fd4\u56de\u503c\u53c2\u6570\u7b49\u8026\u5408\u3002 <pre><code>Thread {\n  ThreadLocal.ThreadLocalMap threadLocals = null;\n}\nThreadLocal {\n  static class ThreadLocalMap {\n    static class Entry extends WeakReference&lt; ThreadLocal&lt;?&gt; &gt;{\n        // Entry\u672c\u8eab\u6301\u6709ThreadLocal\u5bf9\u8c61(\u5f31Weak\u5f15\u7528)\u548cObject\u5bf9\u8c61(\u5f3a\u5f15\u7528)\n    }\n  }\n}\n</code></pre> \u4e00\u4e2aThread\u72ec\u4eab\u4e00\u4e2aThreadLocal.ThreadLocalMap, \u4e00\u4e2amap\u6709\u591a\u4e2aentry, Entry\u7684\"key\"\u662fthreadLocal\u7684\u5f31\u5f15\u7528, Entry\u7684\"value\"\u662fObject. ThreadLocal\u53ea\u662f\u4f5c\u4e3a\u4e00\u4e2akey, \u5b83\u53ea\u88abEntry\u6301\u6709 \u5185\u5b58\u6cc4\u6f0f\u548c\u9ad8\u5e76\u53d1\u4e0b\u810f\u6570\u636e\u60c5\u51b5, ThreadLocal\u7528\u5b8c\u540e\u8981\u8c03\u7528remove() - \u5185\u5b58\u6cc4\u6f0f\uff1aThreadLocal\u5bf9\u8c61\u901a\u5e38\u662f\u9759\u6001\u7684\uff0c\u5373\u4fbf\u662f\u5f31\u5f15\u7528\u4e5f\u4e0d\u4f1a\u5728\u4e0b\u4e00\u6b21YGC\u65f6\u56de\u6536\uff0c\u90a3\u5c31\u65e0\u6cd5\u4f7fValue\u8ddf\u7740\u56de\u6536\uff08Value\u662f\u5728Key==null\u6761\u4ef6\u4e0b,\u89e6\u53d1get/set\u65b9\u6cd5\u7f6e\u4e3anull\uff09  - \u810f\u6570\u636e\uff1a\u7ebf\u7a0b\u590d\u7528\u60c5\u51b5\u4e0b\uff0c\u6ca1\u6709\u8c03\u7528remove()\uff0c\u5bfc\u81f4Thread\u5171\u4eab\u5230\u810f\u6570\u636e</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#runnable-callable","title":"Runnable Callable\u533a\u522b","text":"<p>\u9700\u8981\u8fd4\u56de\u7ed3\u679c\u6216\u629b\u51fa\u5f02\u5e38\uff0c\u7528callable. \u5de5\u5177\u7c7b Executors \u53ef\u4ee5\u5b9e\u73b0 Runnable \u5bf9\u8c61\u548c Callable \u5bf9\u8c61\u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362\u3002 Executors.callable(Runnable task) \u6216 Executors.callable(Runnable task\uff0cObject resule)  </p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#execute-submit","title":"execute()\u65b9\u6cd5\u548c submit()\u65b9\u6cd5\u7684\u533a\u522b","text":"<p>execute()\u65b9\u6cd5\u7528\u4e8e\u63d0\u4ea4\u4e0d\u9700\u8981\u8fd4\u56de\u503c\u7684\u4efb\u52a1\uff0c\u6240\u4ee5\u65e0\u6cd5\u5224\u65ad\u4efb\u52a1\u662f\u5426\u6267\u884c\u6210\u529f submit()\u65b9\u6cd5\u7528\u4e8e\u63d0\u4ea4\u9700\u8981\u8fd4\u56de\u503c\u7684\u4efb\u52a1\u3002\u7ebf\u7a0b\u6c60\u4f1a\u8fd4\u56de\u4e00\u4e2a Future \u7c7b\u578b\u7684\u5bf9\u8c61\uff0c\u901a\u8fc7\u8fd9\u4e2a Future \u5bf9\u8c61\u53ef\u4ee5\u5224\u65ad\u4efb\u52a1\u662f\u5426\u6267\u884c\u6210\u529f</p> <p>\u4e0e\u4e0a\u9762\u7684Callable\u914d\u5408\u4f7f\u7528</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#_6","title":"\u7ebf\u7a0b\u6c60","text":"<ul> <li>\u6784\u6210: \u6838\u5fc3\u7ebf\u7a0b\u6570 \u6700\u5927\u7ebf\u7a0b\u6570 \u963b\u585e\u961f\u5217 \u9971\u548c\u7b56\u7565  </li> <li> <p>\u6784\u9020\u51fd\u6570 <pre><code>  public ThreadPoolExecutor(int corePoolSize, //\u6838\u5fc3\u7ebf\u7a0b\u6570\n                            int maximumPoolSize, //\u6700\u5927\u7ebf\u7a0b\u6570\n                            long keepAliveTime, //\u8d85\u8fc7\u6838\u5fc3\u7ebf\u7a0b\u7684\u5b58\u6d3b\u65f6\u95f4\n                            TimeUnit unit, //\u65f6\u95f4\u5355\u4f4d\n                            BlockingQueue&lt;Runnable&gt; workQueue, //\u963b\u585e\u961f\u5217\n                            ThreadFactory threadFactory, //\u5de5\u5382\n                            RejectedExecutionHandler handler //\u62d2\u7edd\u7b56\u7565\n                            );\n</code></pre></p> </li> <li> <p>\u8fd0\u884c\u673a\u5236: \u6838\u5fc3\u7ebf\u7a0b\u6ee1-&gt; \u963b\u585e\u961f\u5217\u6ee1-&gt; \u7ebf\u7a0b\u6c60\u6ee1-&gt; \u62d2\u7edd\u7b56\u7565  </p> </li> <li>\u62d2\u7edd\u7b56\u7565:  </li> <li>CallerRunsPolicy: \u4ea4\u7531\u8c03\u7528\u65b9\u6267\u884c  </li> <li>AbortPolicy: \u629b\u51faRejectedExecutionException\u5f02\u5e38  </li> <li>DiscardPolicy: \u4e22\u5f03  </li> <li>DiscardOldestPolicy: \u4e22\u5f03\u6700\u65e9\u672a\u5904\u7406\u7684\u4efb\u52a1  </li> <li>\u963b\u585e\u961f\u5217  </li> <li>\u65e0\u754c\u961f\u5217  </li> <li>\u6709\u754c\u961f\u5217  </li> <li> <p>\u540c\u6b65\u79fb\u4ea4(\u76f8\u5f53\u4e8e\u6ca1\u6709\u961f\u5217)  \u6761\u4ef6\u662f\u6709\u7ebf\u7a0b\u5728\u7b49\u5f85\u63a5\u6536\u961f\u5217\u4e2d\u7684\u5143\u7d20; \u5982\u679c\u6ca1\u6709\u7ebf\u7a0b\u7b49\u5f85\u63a5\u6536, \u90a3\u4e48\u4f1a\u521b\u5efa\u65b0\u7684\u7ebf\u7a0b\u5904\u7406; \u7136\u800c\u53c8\u8d85\u8fc7\u4e86\u6700\u5927\u7684\u7ebf\u7a0b\u6570\u9650\u5236\u90a3\u4f1a\u6839\u636e\u9971\u548c\u7b56\u7565\u4e22\u5f03;</p> </li> <li> <p>\u7ebf\u7a0b\u8d85\u65f6\u4f1a\u88ab\u6807\u8bb0\u4e3a\u53ef\u56de\u6536, \u8d85\u8fc7\u6838\u5fc3\u7ebf\u7a0b\u6570, \u88ab\u6807\u8bb0\u7684\u4f1a\u88ab\u4e2d\u6b62. </p> <p>\u6ce8\u610f\u8fd9\u91cc\u7684\u6838\u5fc3\u7ebf\u7a0b\u6c60\u91cc\u7684\u7ebf\u7a0b\u4e0d\u4f1a\u88ab\u6807\u8bb0, \u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u6838\u5fc3\u7ebf\u7a0b\u53ef\u8d85\u65f6\u5904\u7406</p> </li> <li>\u7ebf\u7a0b\u6570\u8bbe\u7f6e:   \u8ba1\u7b97\u5bc6\u96c6\u578b\u7684CPU\u6838\u5fc3\u6570+1;   \u7ebf\u7a0b\u6570=\u76ee\u6807\u5229\u7528\u7387 * CPU\u6838\u5fc3\u6570 * (1+\u7b49\u5f85\u65f6\u95f4/\u4f7f\u7528\u65f6\u95f4)</li> </ul> <p>\u7ebf\u7a0b\u6c60\u8fd0\u884c\u72b6\u60015\u79cd | \u72b6\u6001       | \u63cf\u8ff0                      | | ---------- | ------------------------- | | running    | \u53ef\u63a5\u4efb\u52a1\uff0c\u4e5f\u53ef\u5904\u7406\u961f\u5217    | | shutdown   | \u4e0d\u63a5\u4efb\u52a1\uff0c\u4ecd\u53ef\u5904\u7406\u961f\u5217    | | stop       | \u4e2d\u65ad\u6b63\u5728\u5904\u7406\u7684\u7ebf\u7a0b        | | tidying    | \u6240\u6709\u4efb\u52a1\u7ec8\u6b62\uff0c\u6709\u6548\u7ebf\u7a0b\u65700 | | terminated | \u7ed3\u675f                      |</p> <pre><code>graph LR\nrunning--shutdown--&gt;shutdown--\u961f\u5217\u7a7a,\u5de5\u4f5c\u7ebf\u7a0b0--&gt;tidying\nrunning--shutdownNow--&gt;stop--\u961f\u5217\u7a7a,\u5de5\u4f5c\u7ebf\u7a0b0--&gt;tidying\ntidying--terminated--&gt;terminated\n</code></pre>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#atomic","title":"Atomic \u7c7b","text":"<p>4\u7c7b: \u57fa\u672c\u7c7b\u578b, Array, Reference, Updater \u57fa\u672c\u7c7b\u578b \u4f7f\u7528\u539f\u5b50\u7684\u65b9\u5f0f\u66f4\u65b0\u57fa\u672c\u7c7b\u578b</p> <ul> <li>AtomicInteger\uff1a\u6574\u5f62\u539f\u5b50\u7c7b</li> <li>AtomicLong\uff1a\u957f\u6574\u578b\u539f\u5b50\u7c7b</li> <li>AtomicBoolean\uff1a\u5e03\u5c14\u578b\u539f\u5b50\u7c7b</li> </ul> <p>\u6570\u7ec4\u7c7b\u578b \u4f7f\u7528\u539f\u5b50\u7684\u65b9\u5f0f\u66f4\u65b0\u6570\u7ec4\u91cc\u7684\u67d0\u4e2a\u5143\u7d20</p> <ul> <li>AtomicIntegerArray\uff1a\u6574\u5f62\u6570\u7ec4\u539f\u5b50\u7c7b</li> <li>AtomicLongArray\uff1a\u957f\u6574\u5f62\u6570\u7ec4\u539f\u5b50\u7c7b</li> <li>AtomicReferenceArray\uff1a\u5f15\u7528\u7c7b\u578b\u6570\u7ec4\u539f\u5b50\u7c7b</li> </ul> <p>\u5f15\u7528\u7c7b\u578b</p> <ul> <li>AtomicReference\uff1a\u5f15\u7528\u7c7b\u578b\u539f\u5b50\u7c7b</li> <li>AtomicStampedReference\uff1a\u539f\u5b50\u66f4\u65b0\u5e26\u6709\u7248\u672c\u53f7\u7684\u5f15\u7528\u7c7b\u578b\u3002\u8be5\u7c7b\u5c06\u6574\u6570\u503c\u4e0e\u5f15\u7528\u5173\u8054\u8d77\u6765\uff0c\u53ef\u7528\u4e8e\u89e3\u51b3\u539f\u5b50\u7684\u66f4\u65b0\u6570\u636e\u548c\u6570\u636e\u7684\u7248\u672c\u53f7\uff0c\u53ef\u4ee5\u89e3\u51b3\u4f7f\u7528 CAS \u8fdb\u884c\u539f\u5b50\u66f4\u65b0\u65f6\u53ef\u80fd\u51fa\u73b0\u7684 ABA \u95ee\u9898\u3002</li> <li>AtomicMarkableReference \uff1a\u539f\u5b50\u66f4\u65b0\u5e26\u6709\u6807\u8bb0\u4f4d\u7684\u5f15\u7528\u7c7b\u578b</li> </ul> <p>\u5bf9\u8c61\u7684\u5c5e\u6027\u4fee\u6539\u7c7b\u578b \u66f4\u65b0\u5bf9\u8c61\u7684\u5c5e\u6027\u5fc5\u987b public volatile \u4fee\u9970 - AtomicIntegerFieldUpdater\uff1a\u539f\u5b50\u66f4\u65b0\u6574\u5f62\u5b57\u6bb5\u7684\u66f4\u65b0\u5668 - AtomicLongFieldUpdater\uff1a\u539f\u5b50\u66f4\u65b0\u957f\u6574\u5f62\u5b57\u6bb5\u7684\u66f4\u65b0\u5668 - AtomicReferenceFieldUpdater\uff1a\u539f\u5b50\u66f4\u65b0\u5f15\u7528\u7c7b\u578b\u5b57\u6bb5\u7684\u66f4\u65b0\u5668</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#atomicinteger","title":"AtomicInteger\u539f\u7406","text":"<p>\u5229\u7528 CAS, volatile \u548c native \u65b9\u6cd5\u6765\u4fdd\u8bc1\u539f\u5b50\u64cd\u4f5c \u62ff\u671f\u671b\u7684\u503c\u548c\u539f\u672c\u7684\u4e00\u4e2a\u503c\u4f5c\u6bd4\u8f83\uff0c\u5982\u679c\u76f8\u540c\u5219\u66f4\u65b0\u6210\u65b0\u7684\u503c\u3002 UnSafe \u7c7b\u7684 objectFieldOffset() \u65b9\u6cd5\u662f\u4e00\u4e2a\u672c\u5730\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u7528\u6765\u62ff\u5230\u201c\u539f\u6765\u7684\u503c\u201d\u7684\u5185\u5b58\u5730\u5740\uff0c\u8fd4\u56de\u503c\u662f(long) valueOffset\u3002\u53e6\u5916 value \u662f\u4e00\u4e2a volatile \u53d8\u91cf\uff0c\u5728\u5185\u5b58\u4e2d\u53ef\u89c1\uff0c\u56e0\u6b64 JVM \u53ef\u4ee5\u4fdd\u8bc1\u4efb\u4f55\u65f6\u523b\u4efb\u4f55\u7ebf\u7a0b\u603b\u80fd\u62ff\u5230\u8be5\u53d8\u91cf\u7684\u6700\u65b0\u503c\u3002</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#aqs","title":"AQS","text":"<p>java.util.concurrent.locks.AbstractQueuedSynchronizer;  \u662f\u4e00\u4e2a\u6784\u5efa\u9501\u548c\u540c\u6b65\u5668\u7684\u6846\u67b6\uff0c\u80fd\u6784\u9020\u51fa\u5927\u91cf\u540c\u6b65\u5668 (Lock\u5c31\u662f\u7528\u4e86\u8fd9\u4e2a \u5185\u90e8\u7ef4\u62a4\u4e86volitile int state\u4ee3\u8868\u5171\u4eab\u8d44\u6e90\uff0c\u4e00\u4e2aFIFO\u5c01\u88c5\u7ebf\u7a0b\u7684\u53cc\u5411\u963b\u585e\u961f\u5217</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#aqs_1","title":"AQS\u539f\u7406","text":"<p>\u5982\u679c\u88ab\u8bf7\u6c42\u7684\u8d44\u6e90\u7a7a\u95f2\uff0c\u5219\u5c06\u5f53\u524d\u8bf7\u6c42\u8d44\u6e90\u7684\u7ebf\u7a0b\u8bbe\u7f6e\u4e3a\u6709\u6548\u7684\u5de5\u4f5c\u7ebf\u7a0b\uff0c\u5e76\u5c06\u5171\u4eab\u8d44\u6e90\u9501\u5b9a\u3002 \u5982\u679c\u88ab\u8bf7\u6c42\u7684\u8d44\u6e90\u88ab\u5360\u7528\uff0c\u90a3\u4e48\u9700\u8981\u4e00\u5957\u963b\u585e\u7b49\u5f85\u5524\u9192\u673a\u5236\u4fdd\u8bc1\u9501\u7684\u5206\u914d\u3002AQS\u901a\u8fc7CLH\u961f\u5217\u9501\u5b9e\u73b0\uff0c\u5c06\u6682\u65f6\u83b7\u53d6\u4e0d\u5230\u9501\u7684\u7ebf\u7a0b\u52a0\u5165\u961f\u5217\u3002</p> <p>CLH\uff1aCraig\u3001Landin and Hagersten\u961f\u5217\uff0c\u662f\u5355\u5411\u94fe\u8868\uff0cAQS\u4e2d\u7684\u961f\u5217\u662fCLH\u53d8\u4f53\u7684\u865a\u62df\u53cc\u5411\u961f\u5217\uff08FIFO\uff09\uff0cAQS\u662f\u901a\u8fc7\u5c06\u6bcf\u6761\u8bf7\u6c42\u5171\u4eab\u8d44\u6e90\u7684\u7ebf\u7a0b\u5c01\u88c5\u6210\u4e00\u4e2a\u8282\u70b9\u6765\u5b9e\u73b0\u9501\u7684\u5206\u914d\u3002</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#aqs_2","title":"AQS\u5171\u4eab\u8d44\u6e90\u7684\u65b9\u5f0f","text":"<ul> <li>\u72ec\u5360\uff1a\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u6267\u884c\uff0c\u6bd4\u5982ReetrantLock\uff0c\u53c8\u53ef\u5206\u4e3a\u516c\u5e73\u9501\u548c\u975e\u516c\u5e73\u9501</li> <li>\u516c\u5e73\u9501\uff1a\u6309\u7167\u7ebf\u7a0b\u5728\u961f\u5217\u4e2d\u7684\u987a\u5e8f\uff0c\u5148\u5230\u8005\u62ff\u5230\u9501</li> <li>\u975e\u516c\u5e73\u9501\uff1a\u65e0\u89c6\u961f\u5217\u987a\u5e8f\uff0c\u4e24\u6b21CAS\u4e89\u62a2\u9501</li> <li>\u5171\u4eab\uff1a\u591a\u4e2a\u7ebf\u7a0b\u53ef\u540c\u65f6\u6267\u884c</li> </ul>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#aqs_3","title":"AQS \u516c\u5e73\u9501\u975e\u516c\u5e73\u9501","text":"<p>\u975e\u516c\u5e73\u9501\u5728\u8c03\u7528 lock \u540e\uff0c\u9996\u5148\u5c31\u4f1a\u8c03\u7528 CAS \u8fdb\u884c\u4e00\u6b21\u62a2\u9501\uff0c\u5982\u679c\u8fd9\u4e2a\u65f6\u5019\u6070\u5de7\u9501\u6ca1\u6709\u88ab\u5360\u7528\uff0c\u90a3\u4e48\u76f4\u63a5\u5c31\u83b7\u53d6\u5230\u9501\u8fd4\u56de\u4e86\u3002 \u975e\u516c\u5e73\u9501\u5728 CAS \u5931\u8d25\u540e\uff0c\u548c\u516c\u5e73\u9501\u4e00\u6837\u90fd\u4f1a\u8fdb\u5165\u5230 tryAcquire \u65b9\u6cd5\uff0c\u5728 tryAcquire \u65b9\u6cd5\u4e2d\uff0c\u5982\u679c\u53d1\u73b0\u9501\u8fd9\u4e2a\u65f6\u5019\u88ab\u91ca\u653e\u4e86\uff08state == 0\uff09\uff0c\u975e\u516c\u5e73\u9501\u4f1a\u76f4\u63a5 CAS \u62a2\u9501\uff0c\u4f46\u662f\u516c\u5e73\u9501\u4f1a\u5224\u65ad\u7b49\u5f85\u961f\u5217\u662f\u5426\u6709\u7ebf\u7a0b\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\uff0c\u5982\u679c\u6709\u5219\u4e0d\u53bb\u62a2\u9501\uff0c\u4e56\u4e56\u6392\u5230\u540e\u9762\u3002</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#reentrantlock","title":"ReentrantLock\u5b9e\u73b0\u539f\u7406","text":"<p>state\u8d44\u6e90\u72b6\u6001\u8ba1\u6570\u3002state\u521d\u59cb\u5316\u4e3a0\uff0c\u8868\u793a\u672a\u9501\u5b9a\u72b6\u6001\uff0cA\u7ebf\u7a0block()\u65f6\uff0c\u4f1a\u8c03\u7528 tryAcquire() \u72ec\u5360\u9501\u5e76\u5c06state+1\u3002\u5176\u4ed6\u7ebf\u7a0b tryAcquire() \u5c31\u4f1a\u5931\u8d25\uff0c\u76f4\u5230A\u7ebf\u7a0bunlock()\u5230state=0\u4e3a\u6b62\u3002\u5728\u91ca\u653e\u9501\u4e4b\u524dA\u7ebf\u7a0b\u53ef\u4ee5\u91cd\u590d\u83b7\u53d6\u8fd9\u4e2a\u9501\uff0cstate\u72b6\u6001\u4f1a\u7d2f\u52a0\uff0c\u8fd9\u5c31\u662f\u53ef\u91cd\u5165\u3002</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#aqs_4","title":"AQS\u7ec4\u4ef6","text":"<ul> <li>Semaphore \u5141\u8bb8\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee</li> <li>CountDownLatch  \u534f\u8c03\u591a\u4e2a\u7ebf\u7a0b\u7684\u540c\u6b65\uff0c\u53ef\u4ee5\u8ba9\u67d0\u7ebf\u7a0b\u7b49\u5f85\u5012\u8ba1\u65f6\u7ed3\u675f\u518d\u5f00\u59cb\u6267\u884c</li> <li>CyclicBarrier \u8ddf\u5012\u8ba1\u65f6\u5668\u7c7b\u4f3c\uff0c\u5b83\u662f\u8ba9\u4e00\u7ec4\u7ebf\u7a0b\u8fbe\u5230\u4e00\u4e2a\u5c4f\u969c\u65f6\u88ab\u963b\u585e\uff0c\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u7ebf\u7a0b\u5230\u8fbe\u5c4f\u969c\u65f6\u88ab\u62e6\u622a\u7684\u7ebf\u7a0b\u624d\u80fd\u7ee7\u7eed\u5de5\u4f5c</li> </ul>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#countdownlatch","title":"CountDownLatch","text":"<p>\u4efb\u52a1\u5206\u4e3aN\u4e2a\u5b50\u7ebf\u7a0b\u6267\u884c\uff0cstate\u521d\u59cb\u5316\u4e3aN\uff0c\u5b50\u7ebf\u7a0b\u662f\u5e76\u884c\u6267\u884c\u7684\uff0c\u6bcf\u4e2a\u5b50\u7ebf\u7a0b\u6267\u884c\u5b8c\u540ecountDown()\u4e00\u6b21\uff0cstate\u4f1aCAS\uff0c\u51cf\u4e00\u3002\u7b49\u5230state=0\uff0c\u4f1aunpark()\u4e3b\u7ebf\u7a0b\uff0c\u4e3b\u7ebf\u7a0b\u4f1a\u4eceawait()\u8fd4\u56de\uff0c\u7ee7\u7eed\u540e\u7eed\u64cd\u4f5c\u3002</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#countdownlatch_1","title":"countDownLatch\u4f7f\u7528","text":"<p>\u9884\u4f30\u591a\u4e2a\u4efb\u52a1\u8d39\u7528\u7684\u65f6\u5019, \u670910\u6761\u7ebf\u7a0b\u5e76\u884c\u6267\u884c, \u6bcf\u6761\u7ebf\u7a0b\u6267\u884c\u5b8c\u4efb\u52a1\u540ecountDown, \u6700\u540eawait\u7b49\u5f85\u6240\u6709\u7ebf\u7a0b\u6267\u884c\u5b8c\u6bd5\u540e\u7edf\u4e00\u8fd4\u56de\u7ed3\u679c \u53ef\u4ee5\u7528CompletableFuture\u6539\u8fdb</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#aqs_5","title":"AQS \u963b\u585e\u961f\u5217","text":"<p>\u600e\u4e48\u5b9e\u73b0\u7684 \u90fd\u6709\u54ea\u51e0\u4e2a\u72b6\u6001\u3002\u5404\u4e2a\u72b6\u6001\u4ec0\u4e48\u542b\u4e49 \u6709\u4ec0\u4e48\u7528 \u901a\u8fc7\u5185\u90e8\u7c7bNode\u5c01\u88c5\u7ebf\u7a0b\uff0c\u5e76\u4e14\u7ef4\u62a4pre\u3001next\u548cwaitStatus\u4fe1\u606f\u5b9e\u73b0\u53cc\u5411\u961f\u5217 waitStatus\u72b6\u6001\uff1a 1. CANCELLED=1 \u53d6\u6d88\u72b6\u6001\uff0c\u8868\u793a\u7ebf\u7a0b\u83b7\u53d6\u9501\u7684\u8bf7\u6c42\u5df2\u7ecf\u53d6\u6d88\u4e86\uff0c\u5982\u8282\u70b9\u83b7\u53d6\u9501\u8d85\u65f6\u3002 2. SIGNAL=-1 \u8868\u793a\u7ebf\u7a0b\u5df2\u7ecf\u51c6\u5907\u597d\u4e86\uff0c\u7b49\u5230\u8d44\u6e90\u91ca\u653e 3. CONDITION=-2 \u8868\u793a\u8282\u70b9\u5728\u7b49\u5f85\u961f\u5217\u4e2d\uff0c\u8282\u70b9\u7ebf\u7a0b\u7b49\u5f85\u5524\u9192 4. PROPAGATE=-3 \u5f53\u524d\u7ebf\u7a0b\u5904\u4e8e\u5171\u4eab\u60c5\u51b5\u4e0b\u624d\u4f1a\u4f7f\u7528 5. 0 \u521d\u59cb\u5316</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#aqs_6","title":"AQS\u6761\u4ef6\u961f\u5217","text":"<p>\u662f\u5565 \u6709\u4ec0\u4e48\u7528 \u6bcf\u4e2aCondition\u90fd\u6709\u4e00\u4e2a\u6761\u4ef6\u961f\u5217 \u5355\u5411\u94fe\u8868\uff0c\u963b\u585e\u961f\u5217\u7684\u6682\u5b58</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#aqs_7","title":"AQS\u54cd\u5e94\u4e2d\u65ad","text":"<p>\u672c\u8d28\u662f\u8fd0\u884c\u7684\u7ebf\u7a0b\u80fd\u591f\u4ece\u963b\u585e\u4e2d\u5524\u9192\u5e76\u6267\u884c\u5b8c\u6bd5\u3002 1 \u7ebf\u7a0b\u80fd\u4ece\u963b\u585e\u4e2d\u5524\u9192\uff0cAQS\u4f7f\u7528LockSupport.park(this)\u963b\u585e\u7ebf\u7a0b\u3002\u800c\u6b64\u65b9\u6cd5\u662f\u652f\u6301\u4e2d\u65ad\u3002 2 \u7ebf\u7a0b\u80fd\u6267\u884c\u5b8c\u6bd5\u6b63\u5e38\u9000\u51fa\uff0c\u53ea\u6709\u83b7\u53d6\u540c\u6b65\u72b6\u6001\u624d\u80fd\u6b63\u5e38\u9000\u51fa\u81ea\u65cb\u5faa\u73af\u3002\u9700\u8981\u9000\u51fa\u5c31\u9700\u8981\u5728\u4e2d\u65ad\u65f6\u629b\u51fa\u5f02\u5e38\u3002</p>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#concurrenthashmap","title":"ConcurrentHashMap","text":"<pre><code>1.7 \u5e95\u5c42\u662f\u5206\u7247\u6570\u7ec4  \n\u6709Segment\u5206\u6bb5\u9501, \u7ee7\u627f\u4e8eReentrantLock, \u6bcf\u6b21\u53ea\u7ed9\u4e00\u6bb5\u52a0\u9501\u4fdd\u8bc1\u5e76\u53d1\u5ea6  \n1.8 \u5e95\u5c42\u8ddfHashMap\u4e00\u81f4, \u4f7f\u7528synchronized\u548cCAS\n</code></pre>"},{"location":"java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#_7","title":"\u4e50\u89c2\u9501 \u60b2\u89c2\u9501","text":"<p>\u4e50\u89c2\u9ed8\u8ba4\u522b\u4eba\u4e0d\u4f1a\u4fee\u6539\uff0c\u66f4\u65b0\u7684\u65f6\u5019\u4f1a\u5224\u65ad\u662f\u5426\u88ab\u5176\u4ed6\u64cd\u4f5c\u4fee\u6539\u8fc7\uff0c\u5982\u679c\u4fee\u6539\u8fc7\u4f1a\u91cd\u8bd5\u3002\u7248\u672c\u53f7\u3001CAS\u7b49 \u60b2\u89c2\u9501\u9ed8\u8ba4\u522b\u4eba\u4f1a\u4fee\u6539\uff0c\u4f1a\u5148\u5bf9\u8d44\u6e90\u8fdb\u884c\u52a0\u9501\u5904\u7406</p> <p>\u91cd\u5165\u9501\u6e90\u7801 Aqs\u6e90\u7801</p> <p>CountdownLatch</p>"},{"location":"java/spring/spring/","title":"4. Spring","text":"<p>Spring\u662f\u4e00\u4e2a\u6846\u67b6\uff0c\u8d77\u5230IOC\u5bb9\u5668\u7684\u4f5c\u7528\uff0c\u5e2e\u6211\u4eec\u627f\u8f7d\u4e86Bean\u5bf9\u8c61\uff0c\u5e76\u4e14\u505a\u4e86\u5bf9\u8c61\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u7684\u7ba1\u7406\uff0c\u53ef\u4f7f\u7528\u914d\u7f6e\u6587\u4ef6\u3001\u6ce8\u89e3\u7b49\u65b9\u5f0f\u5b9a\u4e49Bean\u4fe1\u606f\u3002\u5f53\u7a0b\u5e8f\u542f\u52a8\u4e4b\u540e\uff0c\u9700\u8981\u5c06\u5b9a\u4e49\u7684Bean\u5bf9\u8c61\u8f6c\u6362\u6210BeanDefinition\uff0c\u5b8c\u6210BeanDefinition\u7684\u89e3\u6790\u548c\u52a0\u8f7d\u5e76\u8fdb\u884c\u5b9e\u4f8b\u5316\uff0c\u901a\u8fc7\u53cd\u5c04\u521b\u5efa\u5bf9\u8c61\uff0c\u540e\u9762\u8fdb\u884c\u521d\u59cb\u5316\u64cd\u4f5c\uff08aware\u63a5\u53e3\uff0cinit-Method\uff0cBeanPostProcessor\uff09</p>"},{"location":"java/spring/spring/#restcontroller-controller","title":"@RestController \u4e0e @Controller","text":"<ul> <li>\u5355\u72ec\u4f7f\u7528 @Controller \u4e0d\u52a0 @ResponseBody\u7684\u8bdd\u4e00\u822c\u7528\u4e8e\u8981\u8fd4\u56de\u4e00\u4e2a\u89c6\u56fe\u7684\u60c5\u51b5\uff0c\u8fd9\u79cd\u60c5\u51b5\u5c5e\u4e8e\u6bd4\u8f83\u4f20\u7edf\u7684Spring MVC \u7684\u5e94\u7528\uff0c\u5bf9\u5e94\u4e8e\u524d\u540e\u7aef\u4e0d\u5206\u79bb\u7684\u60c5\u51b5\u3002</li> <li>@ResponseBody \u6ce8\u89e3\u7684\u4f5c\u7528\u662f\u5c06 Controller \u7684\u65b9\u6cd5\u8fd4\u56de\u7684\u5bf9\u8c61\u901a\u8fc7\u9002\u5f53\u7684\u8f6c\u6362\u5668\u8f6c\u6362\u4e3a\u6307\u5b9a\u7684\u683c\u5f0f\u4e4b\u540e\uff0c\u5199\u5165\u5230HTTP \u54cd\u5e94(Response)\u5bf9\u8c61\u7684 body \u4e2d\uff0c\u901a\u5e38\u7528\u6765\u8fd4\u56de JSON \u6216\u8005 XML \u6570\u636e\uff0c\u8fd4\u56de JSON \u6570\u636e\u7684\u60c5\u51b5\u6bd4\u8f83\u591a\u3002</li> </ul>"},{"location":"java/spring/spring/#ioc-aop","title":"IoC &amp; AOP","text":""},{"location":"java/spring/spring/#ioc-dependency-injection","title":"IoC \u548c Dependency Injection","text":"<p>IoC(Inverse of Control) \u63a7\u5236\u53cd\u8f6c\u662f\u4e00\u79cd\u8bbe\u8ba1\u601d\u60f3\uff0c\u5c06\u539f\u672c\u624b\u52a8\u521b\u5efa\u5bf9\u8c61\u7684\u63a7\u5236\u6743\uff0c\u4ea4\u7531Spring\u6846\u67b6\u6765\u7ba1\u7406\u3002IoC \u5bb9\u5668\u662f Spring \u7528\u6765\u5b9e\u73b0 IoC \u7684\u8f7d\u4f53\uff0cIoC \u5bb9\u5668\u5b9e\u9645\u4e0a\u5c31\u662f\u4e2aMap(key\uff0cvalue), Map \u4e2d\u5b58\u653e\u7684\u662f\u5404\u79cd\u5bf9\u8c61\u3002</p> <p>\u4f9d\u8d56\u6ce8\u5165: \u5c06\u5bf9\u8c61\u4e4b\u95f4\u7684\u76f8\u4e92\u4f9d\u8d56\u5173\u7cfb\u4ea4\u7ed9 IoC \u5bb9\u5668\u6765\u7ba1\u7406\uff0c\u5e76\u7531 IoC \u5bb9\u5668\u5b8c\u6210\u5c5e\u6027\u7684\u6ce8\u5165\u3002 \u8fd9\u6837\u80fd\u591f\u5f88\u5927\u7a0b\u5ea6\u4e0a\u7b80\u5316\u5e94\u7528\u7684\u5f00\u53d1\uff0c\u628a\u5e94\u7528\u4ece\u590d\u6742\u7684\u4f9d\u8d56\u5173\u7cfb\u4e2d\u89e3\u653e\u51fa\u6765\u3002 IoC \u5bb9\u5668\u50cf\u4e00\u4e2a\u5de5\u5382\uff0c\u5f53\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u53ea\u9700\u8981\u914d\u7f6e\u597d\u914d\u7f6e\u6587\u4ef6/\u6ce8\u89e3\u5373\u53ef\uff0c\u5b8c\u5168\u4e0d\u7528\u8003\u8651\u5bf9\u8c61\u662f\u5982\u4f55\u88ab\u521b\u5efa\u51fa\u6765\u7684\u3002 \u5728\u5b9e\u9645\u9879\u76ee\u4e2d\u4e00\u4e2a Service \u7c7b\u53ef\u80fd\u6709\u51e0\u767e\u751a\u81f3\u4e0a\u5343\u4e2a\u7c7b\u4f5c\u4e3a\u5b83\u7684\u5e95\u5c42\uff0c\u5047\u5982\u6211\u4eec\u9700\u8981\u5b9e\u4f8b\u5316\u8fd9\u4e2a Service\uff0c\u4f60\u53ef\u80fd\u8981\u6bcf\u6b21\u90fd\u8981\u641e\u6e05\u8fd9\u4e2a Service \u6240\u6709\u5e95\u5c42\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002\u5982\u679c\u5229\u7528 IoC \u7684\u8bdd\uff0c\u4f60\u53ea\u9700\u8981\u914d\u7f6e\u597d\uff0c\u7136\u540e\u5728\u9700\u8981\u7684\u5730\u65b9\u5f15\u7528\u5c31\u884c\u4e86\uff0c\u8fd9\u5927\u5927\u589e\u52a0\u4e86\u9879\u76ee\u7684\u53ef\u7ef4\u62a4\u6027\u4e14\u964d\u4f4e\u4e86\u5f00\u53d1\u96be\u5ea6\u3002</p>"},{"location":"java/spring/spring/#ioc","title":"IoC\u5bb9\u5668\u7684\u521d\u59cb\u5316\u8fc7\u7a0b","text":"<p>\u542f\u52a8\u65f6\u8bfb\u53d6Bean\u914d\u7f6e\u8d44\u6e90\u4fe1\u606f\uff0c\u89e3\u6790\u6210BeanDefinition\uff0c\u5e76\u5728Spring\u5bb9\u5668\u4e2d\u751f\u6210\u4e00\u4efd\u76f8\u5e94\u7684Bean\u914d\u7f6e\u6ce8\u518c\u8868\uff0c\u6839\u636e\u6ce8\u518c\u8868\u5b9e\u4f8b\u5316Bean\uff0cBean\u90fd\u4f1a\u653e\u5230\u7f13\u5b58\u6c60(HashMap)\u4e2d\u3002 <pre><code>XML |--\u8bfb\u53d6--&gt; Resource |--\u89e3\u6790--&gt; BeanDefinition |--\u6ce8\u518c--&gt; BeanFactory\n</code></pre></p>"},{"location":"java/spring/spring/#_1","title":"\u4f9d\u8d56\u6ce8\u5165\u8fc7\u7a0b","text":""},{"location":"java/spring/spring/#_2","title":"\u6e90\u7801\u6d41\u7a0b","text":"<ol> <li>\u521b\u5efaBeanFactory\u5bb9\u5668</li> <li>\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\u8f6c\u6362\u6210Resource\uff0cResource\u89e3\u6790\uff0c\u89e3\u6790bean\u5b9a\u4e49\u4fe1\u606f\uff0c\u5305\u88c5\u6210BeanDefinition</li> <li>\u6267\u884cBeanFactoryPostProcessor</li> <li>\u51c6\u5907\u5de5\u4f5c\uff1a\u51c6\u5907BeanPostProcessor\u3001\u5e7f\u64ad\u5668\u3001\u76d1\u542c\u5668</li> <li>\u5b9e\u4f8b\u5316</li> <li>\u521d\u59cb\u5316</li> <li>\u586b\u5145\u5c5e\u6027 - populateBean</li> <li>\u5b9e\u73b0Aware\u63a5\u53e3 - \u83b7\u53d6\u5bb9\u5668\u5bf9\u8c61\u5c5e\u6027(BeanFactroyAware BeanNameAware BeanClassLoaderAware) </li> <li>before - ApplicationContextAware</li> <li>init-method</li> <li>after - BeanPostProcessor( AOP \u589e\u5f3a )</li> <li>\u83b7\u53d6\u5bf9\u8c61</li> </ol>"},{"location":"java/spring/spring/#aop","title":"AOP","text":"<p>AOP(Aspect-Oriented Programming:\u9762\u5411\u5207\u9762\u7f16\u7a0b) \u80fd\u591f\u5c06\u90a3\u4e9b\u4e0e\u4e1a\u52a1\u65e0\u5173\uff0c\u5374\u4e3a\u4e1a\u52a1\u6a21\u5757\u6240\u5171\u540c\u8c03\u7528\u7684\u903b\u8f91\u6216\u8d23\u4efb(\u4f8b\u5982\u4e8b\u52a1\u5904\u7406\u3001\u65e5\u5fd7\u7ba1\u7406\u3001\u6743\u9650\u63a7\u5236\u7b49)\u5c01\u88c5\u8d77\u6765\uff0c\u4fbf\u4e8e\u51cf\u5c11\u7cfb\u7edf\u7684\u91cd\u590d\u4ee3\u7801\uff0c\u964d\u4f4e\u6a21\u5757\u95f4\u7684\u8026\u5408\u5ea6\uff0c\u5e76\u6709\u5229\u4e8e\u672a\u6765\u7684\u53ef\u62d3\u5c55\u6027\u548c\u53ef\u7ef4\u62a4\u6027\u3002</p> <p>Spring AOP\u662f\u57fa\u4e8e\u52a8\u6001\u4ee3\u7406\u7684: - \u5982\u679c\u8981\u4ee3\u7406\u7684\u5bf9\u8c61\u5b9e\u73b0\u4e86\u67d0\u4e2a\u63a5\u53e3\uff0c\u90a3\u4e48Spring AOP\u4f1a\u4f7f\u7528 JDK\u52a8\u6001\u4ee3\u7406\uff0c\u53bb\u521b\u5efa\u4ee3\u7406\u5bf9\u8c61.   \u4f7f\u7528\u53cd\u5c04\u751f\u6210\u4e00\u4e2a\u5b9e\u73b0\u4ee3\u7406\u63a5\u53e3\u7684\u7c7b, \u901a\u8fc7\u91cd\u5199\u65b9\u6cd5\u7684\u65b9\u5f0f, \u5b9e\u73b0\u5bf9\u4ee3\u7801\u7684\u589e\u5f3a. \u5728\u8c03\u7528\u65b9\u6cd5\u524d\u8c03\u7528 InvocationHandler \u6765\u5904\u7406  - \u800c\u5bf9\u4e8e\u6ca1\u6709\u5b9e\u73b0\u63a5\u53e3\u7684\u5bf9\u8c61\uff0c\u5c31\u65e0\u6cd5\u4f7f\u7528 JDK Proxy \u53bb\u8fdb\u884c\u4ee3\u7406\u4e86\uff0c\u8fd9\u65f6\u5019Spring AOP\u4f1a\u4f7f\u7528 Cglib \u751f\u6210\u4e00\u4e2a\u88ab\u4ee3\u7406\u5bf9\u8c61\u7684\u5b50\u7c7b\u6765\u4f5c\u4e3a\u4ee3\u7406.   \u4f7f\u7528ASM\u4e09\u65b9\u6846\u67b6, \u64cd\u4f5c\u5b57\u8282\u7801, \u5c06\u4ee3\u7406\u5bf9\u8c61\u7c7b\u7684class\u6587\u4ef6\u52a0\u8f7d\u8fdb\u6765, \u901a\u8fc7\u4fee\u6539\u5b57\u8282\u7801\u751f\u6210\u5b50\u7c7b, \u7136\u540e\u91cd\u5199\u7236\u7c7b\u7684\u65b9\u6cd5, \u5b9e\u73b0\u5bf9\u4ee3\u7801\u7684\u589e\u5f3a.</p>"},{"location":"java/spring/spring/#aop_1","title":"aop\u6838\u5fc3\u6982\u5ff5","text":"<ul> <li>advice \u901a\u77e5\uff1a\u5b9a\u4e49\u4e86\u5207\u9762\u7684\u5de5\u4f5c\u4ee5\u53ca\u4f55\u65f6\u4f7f\u7528</li> <li>pointcut \u5207\u70b9\uff1a\u5b9a\u4e49\u8fde\u63a5\u70b9\u4f4d\u7f6e</li> <li>join point \u8fde\u63a5\u70b9\uff1a\u65b9\u6cd5\uff0c\u53ef\u88ab\u5207\u5165\u7684\u4f4d\u7f6e</li> <li>Aspect \u5207\u9762\uff1a\u901a\u77e5\u548c\u5207\u70b9\u7684\u7ed3\u5408</li> </ul>"},{"location":"java/spring/spring/#spring","title":"Spring\u7684\u8bbe\u8ba1\u6a21\u5f0f","text":"<ul> <li>\u5355\u4f8b\u6a21\u5f0f:   Bean\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u662f\u5355\u4f8b\u7684</li> <li>\u5de5\u5382\u6a21\u5f0f:   \u5de5\u5382\u6a21\u5f0f\u4e3b\u8981\u662f\u901a\u8fc7 BeanFactory \u548c ApplicationContext \u751f\u4ea7 Bean \u5bf9\u8c61\u3002\u5b83\u4eec\u4e5f\u662fIOC\u5bb9\u5668, \u5bf9Bean\u8fdb\u884c\u7ba1\u7406.</li> <li>\u4ee3\u7406\u6a21\u5f0f:   AOP \u6700\u5e38\u89c1\u7684\u5b9e\u73b0\u65b9\u5f0f\u5c31\u662f\u901a\u8fc7\u4ee3\u7406\u5b9e\u73b0\uff0cSpring \u4e3b\u8981\u4f7f\u7528 JDK \u52a8\u6001\u4ee3\u7406\u548c CGLIB \u4ee3\u7406\u3002</li> <li>\u6a21\u677f\u65b9\u6cd5:   \u4e3b\u8981\u662f\u4e00\u4e9b\u64cd\u4f5c\u6570\u636e\u5e93\u7684\u7c7b\u7528\u5230\uff0c\u6bd4\u5982 JdbcTemplate\u3001JpaTemplate\uff0c\u56e0\u4e3a\u67e5\u8be2\u6570\u636e\u5e93\u7684\u5efa\u7acb\u8fde\u63a5\u3001\u6267\u884c\u67e5\u8be2\u3001\u5173\u95ed\u8fde\u63a5\u51e0\u4e2a\u8fc7\u7a0b\uff0c\u975e\u5e38\u9002\u7528\u4e8e\u6a21\u677f\u65b9\u6cd5\u3002</li> </ul>"},{"location":"java/spring/spring/#spring-aop-aspectj-aop","title":"Spring AOP \u548c AspectJ AOP \u533a\u522b","text":"<p>Spring AOP \u57fa\u4e8e\u52a8\u6001\u4ee3\u7406\u5b9e\u73b0\uff0c\u5c5e\u4e8e\u8fd0\u884c\u65f6\u589e\u5f3a\u3002 AspectJ \u5219\u5c5e\u4e8e\u7f16\u8bd1\u65f6\u589e\u5f3a\uff0c\u4e3b\u8981\u67093\u79cd\u65b9\u5f0f\uff1a 1. \u7f16\u8bd1\u65f6\u7ec7\u5165\uff1a\u6307\u7684\u662f\u589e\u5f3a\u7684\u4ee3\u7801\u548c\u6e90\u4ee3\u7801\u6211\u4eec\u90fd\u6709\uff0c\u76f4\u63a5\u4f7f\u7528 AspectJ \u7f16\u8bd1\u5668\u7f16\u8bd1\u5c31\u884c\u4e86\uff0c\u7f16\u8bd1\u4e4b\u540e\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u7c7b\uff0c\u4ed6\u4e5f\u4f1a\u4f5c\u4e3a\u4e00\u4e2a\u6b63\u5e38\u7684 Java \u7c7b\u88c5\u8f7d\u5230JVM\u3002 2. \u7f16\u8bd1\u540e\u7ec7\u5165\uff1a\u6307\u7684\u662f\u4ee3\u7801\u5df2\u7ecf\u88ab\u7f16\u8bd1\u6210 class \u6587\u4ef6\u6216\u8005\u5df2\u7ecf\u6253\u6210 jar \u5305\uff0c\u8fd9\u65f6\u5019\u8981\u589e\u5f3a\u7684\u8bdd\uff0c\u5c31\u662f\u7f16\u8bd1\u540e\u7ec7\u5165\uff0c\u6bd4\u5982\u4f60\u4f9d\u8d56\u4e86\u7b2c\u4e09\u65b9\u7684\u7c7b\u5e93\uff0c\u53c8\u60f3\u5bf9\u4ed6\u589e\u5f3a\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u3002 3. \u7c7b\u52a0\u8f7d\u65f6\u7ec7\u5165\uff1a\u6307\u7684\u662f\u5728 JVM \u52a0\u8f7d\u7c7b\u7684\u65f6\u5019\u8fdb\u884c\u7ec7\u5165\u3002</p>"},{"location":"java/spring/spring/#factorybean-beanfactory","title":"FactoryBean \u548c BeanFactory \u533a\u522b","text":"<p>BeanFactory \u662f Bean \u7684\u5de5\u5382\uff0c ApplicationContext \u7684\u7236\u7c7b\uff0cIOC \u5bb9\u5668\u7684\u6838\u5fc3\uff0c\u8d1f\u8d23\u751f\u4ea7\u548c\u7ba1\u7406 Bean \u5bf9\u8c61\u3002 FactoryBean \u662f Bean\uff0c\u53ef\u4ee5\u901a\u8fc7\u5b9e\u73b0 FactoryBean \u63a5\u53e3(\u5b9e\u73b0\u63a5\u53e3\u7684\u7c7b\u662f\u751f\u6210Bean\u7684\u7c7b, \u5e76\u4e0d\u662fBean\u7c7b\u672c\u8eab)\u53bb\u5b9a\u5236\u5b9e\u4f8b\u5316 Bean \u7684\u903b\u8f91. </p>"},{"location":"java/spring/spring/#bean","title":"Bean\u7684\u751f\u547d\u5468\u671f","text":"<ol> <li>\u5b9e\u4f8b\u5316\uff0c\u521b\u5efa\u4e00\u4e2aBean\u5bf9\u8c61</li> <li>\u586b\u5145\u5c5e\u6027\uff0c\u4e3a\u5c5e\u6027\u8d4b\u503cpopulateBean</li> <li>\u521d\u59cb\u5316   \u5982\u679c\u5b9e\u73b0\u4e86xxxAware\u63a5\u53e3\uff0c\u901a\u8fc7\u4e0d\u540c\u7c7b\u578b\u7684Aware\u63a5\u53e3\u62ff\u5230Spring\u5bb9\u5668\u7684\u8d44\u6e90   \u5982\u679c\u5b9e\u73b0\u4e86BeanPostProcessor\u63a5\u53e3\uff0c\u5219\u4f1a\u56de\u8c03\u8be5\u63a5\u53e3\u7684 postProcessBeforeInitialzation() \u548c postProcessAfterInitialization() \u65b9\u6cd5   \u5982\u679c\u914d\u7f6e\u6709\u81ea\u5b9a\u4e49\u7684 init-method \u65b9\u6cd5\uff0c\u5219\u4f1a\u6267\u884c init-method \u914d\u7f6e\u7684\u65b9\u6cd5</li> <li>\u9500\u6bc1   \u5bb9\u5668\u5173\u95ed\u540e\uff0c\u5982\u679cBean\u5b9e\u73b0\u4e86DisposableBean\u63a5\u53e3\uff0c\u5219\u4f1a\u56de\u8c03\u8be5\u63a5\u53e3\u7684destroy()\u65b9\u6cd5   \u5982\u679c\u914d\u7f6e\u4e86destroy-method\u65b9\u6cd5\uff0c\u5219\u4f1a\u6267\u884cdestroy-method\u914d\u7f6e\u7684\u65b9\u6cd5</li> </ol>"},{"location":"java/spring/spring/#_3","title":"\u5faa\u73af\u4f9d\u8d56","text":"<p>\u9996\u5148, \u6709\u4e24\u4e2a\u524d\u63d0\u6761\u4ef6: 1. \u4e0d\u5168\u662f\u6784\u9020\u5668\u5bfc\u81f4\u7684\u5faa\u73af\u4f9d\u8d56 2. \u5fc5\u987b\u662f\u5355\u4f8b</p> <p>\u672c\u8d28\u4e0a\u89e3\u51b3\u65b9\u5f0f\u662f\u4e09\u7ea7\u7f13\u5b58, \u901a\u8fc7\u4e09\u7ea7\u7f13\u5b58\u63d0\u524d\u62ff\u5230\u672a\u521d\u59cb\u5316\u5b8c\u5168\u7684\u5bf9\u8c61  </p> <ul> <li>\u7b2c\u4e00\u7ea7\u7f13\u5b58\uff1a\u7528\u6765\u4fdd\u5b58\u5b9e\u4f8b\u5316\u3001\u521d\u59cb\u5316\u90fd\u5b8c\u6210\u7684\u5bf9\u8c61</li> <li>\u7b2c\u4e8c\u7ea7\u7f13\u5b58\uff1a\u7528\u6765\u4fdd\u5b58\u5b9e\u4f8b\u5316\u5b8c\u6210\uff0c\u4f46\u662f\u672a\u521d\u59cb\u5316\u5b8c\u6210\u7684\u5bf9\u8c61</li> <li>\u7b2c\u4e09\u7ea7\u7f13\u5b58\uff1a\u4fdd\u5b58\u4e00\u4e2a\u5bf9\u8c61\u5de5\u5382\uff0c\u63d0\u4f9b\u4e00\u4e2a\u533f\u540d\u5185\u90e8\u7c7b\uff0c\u7528\u4e8e\u521b\u5efa\u4e8c\u7ea7\u7f13\u5b58\u4e2d\u7684\u5bf9\u8c61 https://zhuanlan.zhihu.com/p/368769721</li> </ul>"},{"location":"java/spring/spring/#_4","title":"\u4e3a\u4ec0\u4e48\u8981\u4e09\u7ea7\u7f13\u5b58\uff1f","text":"<p>Spring\u8bbe\u8ba1\u4e2d\uff0c\u4ee3\u7406\u5bf9\u8c61\u7684\u521b\u5efa\u662f\u5728\u5b9e\u4f8b\u5316\u7684\u6700\u540e\u5b8c\u6210\u7684\uff0c\u800c\u52a0\u5165\u7f13\u5b58\u7684\u65f6\u5019\u662f\u6ca1\u6709\u8fdb\u884c\u586b\u5145\u5c5e\u6027\u548cinit\u7684\uff0c\u6b64\u65f6\u4e0d\u5e94\u751f\u6210\u4ee3\u7406\u5bf9\u8c61\uff0c\u6240\u4ee5\u5305\u4e00\u5c42\u5de5\u5382\u5bf9\u8c61\u5148\u653e\u5165\u7f13\u5b58\u4e2d\u3002 \u6ca1\u6709\u4ee3\u7406\u7684\u8bdd\u5c31\u65e0\u6240\u8c13\u4e86\uff0c\u4e24\u7ea7\u7f13\u5b58\u4e5f\u884c\u3002</p>"},{"location":"java/spring/spring/#spring_1","title":"Spring\u4e8b\u52a1\u4f20\u64ad\u673a\u5236(\u884c\u4e3a)","text":"<p>https://zhuanlan.zhihu.com/p/148504094 \u5e26\u6709\u4e8b\u52a1\u7684\u65b9\u6cd5\u8c03\u7528\u4e4b\u95f4\u4e8b\u52a1\u7684\u5904\u7406</p> <p>PROPAGATION_REQUIRED\uff1a\u5982\u679c\u5f53\u524d\u6ca1\u6709\u4e8b\u52a1\uff0c\u5c31\u521b\u5efa\u4e00\u4e2a\u65b0\u4e8b\u52a1\uff0c\u5982\u679c\u5f53\u524d\u5b58\u5728\u4e8b\u52a1\uff0c\u5c31\u52a0\u5165\u8be5\u4e8b\u52a1\uff0c\u8fd9\u4e5f\u662f\u901a\u5e38\u6211\u4eec\u7684\u9ed8\u8ba4\u9009\u62e9\u3002 PROPAGATION_REQUIRES_NEW\uff1a\u521b\u5efa\u65b0\u4e8b\u52a1\uff0c\u65e0\u8bba\u5f53\u524d\u5b58\u4e0d\u5b58\u5728\u4e8b\u52a1\uff0c\u90fd\u521b\u5efa\u65b0\u4e8b\u52a1\u3002 PROPAGATION_NESTED\uff1a\u5982\u679c\u5f53\u524d\u5b58\u5728\u4e8b\u52a1\uff0c\u5219\u5728\u5d4c\u5957\u4e8b\u52a1\u5185\u6267\u884c\u3002\u5982\u679c\u5f53\u524d\u6ca1\u6709\u4e8b\u52a1\uff0c\u5219\u6309REQUIRED\u5c5e\u6027\u6267\u884c\u3002 PROPAGATION_NOT_SUPPORTED\uff1a\u4ee5\u975e\u4e8b\u52a1\u65b9\u5f0f\u6267\u884c\u64cd\u4f5c\uff0c\u5982\u679c\u5f53\u524d\u5b58\u5728\u4e8b\u52a1\uff0c\u5c31\u628a\u5f53\u524d\u4e8b\u52a1\u6302\u8d77\u3002 PROPAGATION_NEVER\uff1a\u4ee5\u975e\u4e8b\u52a1\u65b9\u5f0f\u6267\u884c\uff0c\u5982\u679c\u5f53\u524d\u5b58\u5728\u4e8b\u52a1\uff0c\u5219\u629b\u51fa\u5f02\u5e38\u3002 PROPAGATION_MANDATORY\uff1a\u652f\u6301\u5f53\u524d\u4e8b\u52a1\uff0c\u5982\u679c\u5f53\u524d\u5b58\u5728\u4e8b\u52a1\uff0c\u5c31\u52a0\u5165\u8be5\u4e8b\u52a1\uff0c\u5982\u679c\u5f53\u524d\u4e0d\u5b58\u5728\u4e8b\u52a1\uff0c\u5c31\u629b\u51fa\u5f02\u5e38\u3002 PROPAGATION_SUPPORTS\uff1a\u652f\u6301\u5f53\u524d\u4e8b\u52a1\uff0c\u5982\u679c\u5f53\u524d\u5b58\u5728\u4e8b\u52a1\uff0c\u5c31\u52a0\u5165\u8be5\u4e8b\u52a1\uff0c\u5982\u679c\u5f53\u524d\u4e0d\u5b58\u5728\u4e8b\u52a1\uff0c\u5c31\u4ee5\u975e\u4e8b\u52a1\u6267\u884c\u3002</p>"},{"location":"java/spring/spring/#springboot","title":"SpringBoot \u542f\u52a8\u8fc7\u7a0b","text":"<ol> <li>\u51c6\u5907\u73af\u5883\uff0c\u6839\u636e\u4e0d\u540c\u7684\u73af\u5883\u521b\u5efa\u4e0d\u540c\u7684Environment</li> <li>\u51c6\u5907\u3001\u52a0\u8f7d\u4e0a\u4e0b\u6587\uff0c\u4e3a\u4e0d\u540c\u7684\u73af\u5883\u9009\u62e9\u4e0d\u540c\u7684Spring Context\uff0c\u7136\u540e\u52a0\u8f7d\u8d44\u6e90\uff0c\u914d\u7f6eBean</li> <li>\u521d\u59cb\u5316\uff0c\u8fd9\u4e2a\u9636\u6bb5\u5237\u65b0Spring Context\uff0c\u542f\u52a8\u5e94\u7528</li> <li>\u6700\u540e\u7ed3\u675f\u6d41\u7a0b</li> </ol>"},{"location":"java/spring/spring/#spring-bean","title":"Spring Bean \u4f5c\u7528\u57df","text":"<p>singleton : \u552f\u4e00 bean \u5b9e\u4f8b\uff0cSpring \u4e2d\u7684 bean \u9ed8\u8ba4\u90fd\u662f\u5355\u4f8b\u7684\u3002 prototype : \u6bcf\u6b21\u8bf7\u6c42\u90fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 bean \u5b9e\u4f8b\u3002 request : \u6bcf\u4e00\u6b21HTTP\u8bf7\u6c42\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684bean\uff0c\u8be5bean\u4ec5\u5728\u5f53\u524dHTTP request \u5185\u6709\u6548\u3002 session : \u6bcf\u4e00\u6b21HTTP\u8bf7\u6c42\u90fd\u4f1a\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684 bean\uff0c\u8be5bean\u4ec5\u5728\u5f53\u524d HTTP session \u5185\u6709\u6548\u3002 global-session\uff1a \u5168\u5c40session\u4f5c\u7528\u57df\uff0c\u4ec5\u4ec5\u5728\u57fa\u4e8eportlet\u7684web\u5e94\u7528\u4e2d\u624d\u6709\u610f\u4e49\uff0cSpring5\u5df2\u7ecf\u6ca1\u6709\u4e86\u3002Portlet\u662f\u80fd\u591f\u751f\u6210\u8bed\u4e49\u4ee3\u7801(\u4f8b\u5982\uff1aHTML)\u7247\u6bb5\u7684\u5c0f\u578bJava Web\u63d2\u4ef6\u3002\u5b83\u4eec\u57fa\u4e8eportlet\u5bb9\u5668\uff0c\u53ef\u4ee5\u50cfservlet\u4e00\u6837\u5904\u7406HTTP\u8bf7\u6c42\u3002\u4f46\u662f\uff0c\u4e0e servlet \u4e0d\u540c\uff0c\u6bcf\u4e2a portlet \u90fd\u6709\u4e0d\u540c\u7684\u4f1a\u8bdd</p>"},{"location":"java/spring/spring/#bean_1","title":"\u5355\u4f8bBean\u7684\u7ebf\u7a0b\u5b89\u5168\u95ee\u9898","text":"<p>\u901a\u5e38\u4f7f\u7528\u7684Bean\u90fd\u662f\u65e0\u72b6\u6001\u7684, \u4e0d\u4f1a\u6709\u7ebf\u7a0b\u5b89\u5168\u95ee\u9898 \u89e3\u51b3\u65b9\u6848: 1. \u5b9a\u4e49ThreadLocal\u6210\u5458\u53d8\u91cf, \u5c06\u53ef\u53d8\u6210\u5458\u653e\u5230\u91cc\u9762 2. \u6539\u53d8bean\u7684\u4f5c\u7528\u57df\u4e3aprototype, \u6bcf\u6b21\u8bf7\u6c42\u90fd\u521b\u5efa\u65b0\u7684Bean\u5b9e\u4f8b</p>"},{"location":"java/spring/spring/#bean-component","title":"@Bean \u548c @Component\u7684\u533a\u522b","text":"<ol> <li>@Bean \u7528\u4e8e\u65b9\u6cd5, @Component \u7528\u4e8e\u7c7b</li> <li>@Bean \u6807\u6ce8\u7684\u65b9\u6cd5\u901a\u5e38\u5b9a\u4e49\u4e3a\u4ea7\u751f\u8fd9\u4e2aBean, \u5c24\u5176\u662f\u5728\u4f7f\u7528\u7b2c\u4e09\u65b9\u5e93\u7684\u65f6\u5019; @Component \u81ea\u52a8\u4fa6\u6d4b \u81ea\u52a8\u88c5\u914d\u5230Spring\u5bb9\u5668\u4e2d</li> </ol>"},{"location":"java/spring/spring/#spring_2","title":"Spring\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b","text":"<p>\u8ddfMySQL\u7c7b\u4f3c, \u53ea\u591a\u4e00\u4e2adefault\u7ea7\u522b, \u8fd9\u4e2a\u7ea7\u522b\u4f7f\u7528\u6570\u636e\u5e93\u672c\u8eab\u7684\u9694\u79bb\u7ea7\u522b</p>"},{"location":"java/spring/spring/#springbootspringmvc","title":"SpringBoot\u4e0eSpringMVC","text":"<p>SpringBoot = Spring MVC + \u65e0\u914d\u7f6e + Server(Tomcat Jetty)  \u4e0d\u7528\u624b\u52a8\u6784\u5efa\u914d\u7f6e(spring.xml)</p>"},{"location":"java/spring/spring/#spring_3","title":"spring\u600e\u4e48\u505a\u4e8b\u7269\u7684\uff0c\u600e\u4e48\u4f20\u64ad\u7684","text":"<ul> <li>\u7f16\u7a0b\u5f0f\u4e8b\u52a1   \u901a\u8fc7 TransactionTemplate\u6216\u8005TransactionManager\u624b\u52a8\u7ba1\u7406\u4e8b\u52a1</li> <li>\u58f0\u660e\u5f0f\u4e8b\u52a1   \u57fa\u4e8e @Transactional \u7684\u5168\u6ce8\u89e3\u65b9\u5f0f\u4f7f\u7528\u6700\u591a \u5b9e\u9645\u662f\u901a\u8fc7 AOP \u5b9e\u73b0   Spring \u5bb9\u5668\u542f\u52a8\u7684\u65f6\u5019\u521b\u5efa\u4e00\u4e2a\u4ee3\u7406\u7c7b\uff0c\u8c03\u7528\u6ce8\u89e3\u58f0\u660e\u7684\u65b9\u6cd5\u7684\u65f6\u5019\u5b9e\u9645\u4e0a\u662f\u8c03\u7528\u7684\u62e6\u622a\u5668 TransactionInterceptor \u7684invoke()\u65b9\u6cd5\u3002   \u82e5\u540c\u4e00\u7c7b\u4e2d\u7684\u5176\u4ed6\u6ca1\u6709 @Transactional \u6ce8\u89e3\u7684\u65b9\u6cd5\u5185\u90e8\u8c03\u7528\u6709 @Transactional \u6ce8\u89e3\u7684\u65b9\u6cd5\uff0c\u6709@Transactional \u6ce8\u89e3\u7684\u65b9\u6cd5\u7684\u4e8b\u52a1\u4f1a\u5931\u6548\u3002</li> </ul>"},{"location":"java/spring/spring/#_5","title":"\u4e8b\u52a1\u7ba1\u7406\u63a5\u53e3","text":"<ul> <li>PlatformTransactionManager: \u4e8b\u52a1\u7b56\u7565\u7684\u6838\u5fc3</li> <li>TransactionDefinition: \u4e8b\u52a1\u5b9a\u4e49\u4fe1\u606f</li> <li>\u9694\u79bb\u7ea7\u522b<ul> <li>PROPAGATION_REQUIRED</li> <li>PROPAGATION_REQUIRES_NEW</li> <li>PROPAGATION_NESTED</li> </ul> </li> <li>\u4f20\u64ad\u884c\u4e3a</li> <li>\u56de\u6eda\u89c4\u5219\uff1a\u975e\u53d7\u68c0\u5f02\u5e38(Runtime\u3001Error)\u624d\u4f1a\u56de\u6eda</li> <li>\u662f\u5426\u53ea\u8bfb\uff1a\u56e0\u4e3a\u6bcf\u4e00\u6761\u67e5\u8be2\u8bed\u53e5\u5b58\u50a8\u5f15\u64ce\u90fd\u4f5c\u4e3a\u4e00\u4e2a\u4e8b\u52a1\u5904\u7406\uff0c\u5982\u679c\u6c47\u603b\u7edf\u8ba1\u7c7b\u7684\u67e5\u8be2\u4e0d\u52a0\u4e8b\u52a1\u5728DB\u4f1a\u6709\u591a\u4e2a\u4e8b\u52a1\uff0c\u6570\u636e\u6709\u53ef\u80fd\u4e0d\u4e00\u81f4</li> <li>\u4e8b\u52a1\u8d85\u65f6</li> <li>TransactionStatus: \u4e8b\u52a1\u8fd0\u884c\u72b6\u6001</li> </ul>"},{"location":"java/spring/spring/#_6","title":"\u6ce8\u89e3\u5b9e\u73b0\u539f\u7406\uff0c\u5982\u679c\u8ba9\u4f60\u81ea\u5df1\u505a\u7c7b\u4f3c\u6ce8\u89e3\u600e\u4e48\u5b9e\u73b0","text":"<ul> <li>\u5143\u6ce8\u89e3</li> <li>@Retention\uff08\u6807\u660e\u6ce8\u89e3\u88ab\u4fdd\u7559\u7684\u9636\u6bb5\uff09</li> <li>@Target\uff08\u6807\u660e\u6ce8\u89e3\u4f7f\u7528\u7684\u8303\u56f4\uff09</li> <li>@Inherited\uff08\u6807\u660e\u6ce8\u89e3\u53ef\u7ee7\u627f\uff09</li> <li>@Documented\uff08\u6807\u660e\u662f\u5426\u751f\u6210javadoc\u6587\u6863\uff09</li> <li>Component   \u7b2c\u4e00\u6b65\uff0c\u521d\u59cb\u5316\u65f6\u8bbe\u7f6e\u4e86Component\u7c7b\u578b\u8fc7\u6ee4\u5668\uff1b   \u7b2c\u4e8c\u6b65\uff0c\u6839\u636e\u6307\u5b9a\u626b\u63cf\u5305\u626b\u63cf.class\u6587\u4ef6\uff0c\u751f\u6210Resource\u5bf9\u8c61\uff1b   \u7b2c\u4e09\u6b65\u3001\u89e3\u6790.class\u6587\u4ef6\u5e76\u6ce8\u89e3\u5f52\u7c7b\uff0c\u751f\u6210MetadataReader\u5bf9\u8c61\uff1b   \u7b2c\u56db\u6b65\u3001\u4f7f\u7528\u7b2c\u4e00\u6b65\u7684\u6ce8\u89e3\u8fc7\u6ee4\u5668\u8fc7\u6ee4\u51fa\u6709@Component\u7c7b\uff1b   \u7b2c\u4e94\u6b65\u3001\u751f\u6210BeanDefinition\uff1b   \u7b2c\u516d\u6b65\u3001\u628aBeanDefinition\u6ce8\u518c\u5230Spring\u5bb9\u5668\u3002</li> <li>AutoWired   BeanPostProcessor</li> </ul>"},{"location":"java/spring/spring/#spring_4","title":"Spring \u52a8\u6001\u4ee3\u7406 \u9759\u6001\u4ee3\u7406","text":"<p>AspectJ AOP</p>"},{"location":"java/spring/spring/#spring-cloud","title":"Spring Cloud\u6709\u90a3\u4e9b\u7ec4\u4ef6","text":"<p>\u670d\u52a1\u53d1\u73b0\u2014\u2014Netflix Eureka \u5ba2\u670d\u7aef\u8d1f\u8f7d\u5747\u8861\u2014\u2014Netflix Ribbon \u65ad\u8def\u5668\u2014\u2014Netflix Hystrix \u670d\u52a1\u7f51\u5173\u2014\u2014Netflix Zuul \u5206\u5e03\u5f0f\u914d\u7f6e\u2014\u2014Spring Cloud Config</p>"},{"location":"java/spring/spring/#springmvc-m-v-c","title":"SpringMVC M V C","text":"<p>Model: \u901a\u5e38\u6307\u7684\u662f\u6570\u636e View: UI\uff0c\u9875\u9762 Controller: \u8d1f\u8d23\u5904\u7406\u8bf7\u6c42\u548c\u903b\u8f91</p>"},{"location":"java/spring/spring/#mvc","title":"\u7528\u6237\u8bf7\u6c42MVC\u4f1a\u53d1\u751f\u4ec0\u4e48","text":"<ol> <li>Http\u8bf7\u6c42\uff1a\u6d4f\u89c8\u5668\u8bf7\u6c42\u63d0\u4ea4\u5230DispatcherServlet\u3002</li> <li>\u5bfb\u627e\u5904\u7406\u5668\uff1a\u7531DispatcherServlet\u63a7\u5236\u5668\u67e5\u8be2\u4e00\u4e2a\u6216\u591a\u4e2aHandlerMapping\uff0c\u627e\u5230\u5904\u7406\u8bf7\u6c42\u7684Controller\u3002</li> <li>\u8c03\u7528\u5904\u7406\u5668\uff1aDispatcherServlet\u5c06\u8bf7\u6c42\u63d0\u4ea4\u5230Controller\u3002</li> <li>\u8c03\u7528\u4e1a\u52a1\u5904\u7406\u548c\u8fd4\u56de\u7ed3\u679c\uff1aController\u8c03\u7528\u4e1a\u52a1\u903b\u8f91\u5904\u7406\u540e\uff0c\u8fd4\u56deModelAndView\u3002</li> <li>\u5904\u7406\u89c6\u56fe\u6620\u5c04\u5e76\u8fd4\u56de\u6a21\u578b\uff1a DispatcherServlet\u67e5\u8be2\u4e00\u4e2a\u6216\u591a\u4e2aViewResoler\u89c6\u56fe\u89e3\u6790\u5668\uff0c\u627e\u5230ModelAndView\u6307\u5b9a\u7684\u89c6\u56fe\uff0c\u5c06model\u4f20\u9012\u7ed9View\u663e\u793a\u3002</li> <li>Http\u54cd\u5e94\uff1a\u89c6\u56fe\u8d1f\u8d23\u5c06\u7ed3\u679c\u663e\u793a\u5230\u5ba2\u6237\u7aef\u3002</li> </ol>"},{"location":"leetcode/1%20%E6%8A%80%E5%B7%A7/","title":"\u6280\u5de7","text":""},{"location":"leetcode/1%20%E6%8A%80%E5%B7%A7/#_2","title":"\u6570\u5b57\u6280\u5de7","text":"<p>\u662f\u5426\u6574\u9664</p> <pre><code>int a = sum/cnt;\nif(sum%cnt!=0) a++;\n// \u7b49\u4ef7\u4e8e\nint a = (sum+cnt-1)/cnt;\n</code></pre>"},{"location":"leetcode/1%20%E6%8A%80%E5%B7%A7/#_3","title":"\u80cc\u5305","text":"<p>\u5b9a\u4e49\u4e8c\u7ef4\u6570\u7ec4 $dp = int[i][j]$, $dp[i][j]$ \u8868\u793a\u524d i \u4ef6\u7269\u54c1\u4f53\u79ef\u4e0d\u8d85\u8fc7 j \u7684\u60c5\u51b5\u4e0b\u80fd\u8fbe\u5230\u7684\u6700\u5927\u4ef7\u503c\u3002 \u8bbe\u7b2c i \u4ef6\u7269\u54c1\u7684\u4f53\u79ef\u4e3a w, \u4ef7\u503c\u4e3a v:</p> <ul> <li>\u7b2c i \u4ef6\u7269\u54c1\u6ca1\u6709\u6dfb\u52a0\uff0c$dp[i][j] = dp[i-1][j]$</li> <li>\u7b2c i \u4ef6\u7269\u54c1\u5df2\u7ecf\u6dfb\u52a0\uff0c$dp[i][j] = dp[i-1][j-w] + v$</li> </ul> <p>\u80cc\u5305\u7a7a\u95f4\u4f18\u5316 \u6eda\u52a8\u6570\u7ec4\u7684\u601d\u60f3, $dp[j] = dp[j]$ or $dp[j-w]+v$</p>"},{"location":"leetcode/1%20%E6%8A%80%E5%B7%A7/#_4","title":"\u5dee\u5206\u6570\u7ec4","text":"<p>\u672c\u8d28\u4e0a\u662f\u4e2a\u8f85\u52a9\u7684\u6570\u7ec4, \u7ef4\u62a4\u539f\u59cb\u6570\u7ec4\u76f8\u90bb\u4e24\u4e2a\u503c\u7684\u5dee\u503c.</p>"},{"location":"leetcode/1%20%E6%8A%80%E5%B7%A7/#_5","title":"\u573a\u666f","text":"<p>\u5982\u679c\u7ed9\u4f60\u4e00\u4e2a\u5305\u542b5000\u4e07\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u7136\u540e\u4f1a\u6709\u9891\u7e41\u533a\u95f4\u4fee\u6539\u64cd\u4f5c\uff0c\u90a3\u4ec0\u4e48\u662f\u9891\u7e41\u7684\u533a\u95f4\u4fee\u6539\u64cd\u4f5c\u5462\uff1f\u6bd4\u5982\u8ba9\u7b2c1\u4e2a\u6570\u5230\u7b2c1000\u4e07\u4e2a\u6570\u6bcf\u4e2a\u6570\u90fd\u52a0\u4e0a1\uff0c\u800c\u4e14\u8fd9\u79cd\u64cd\u4f5c\u662f\u9891\u7e41\u7684\u3002 \u5dee\u5206\u6570\u7ec4\u7684\u524d n \u9879\u548c\u5c31\u662f offset</p>"},{"location":"leetcode/1%20%E6%8A%80%E5%B7%A7/#2","title":"2\u8fdb\u5236\u679a\u4e3e","text":"<p>\u75282\u8fdb\u5236\u6570\u5b57\u8868\u793a\u4ecem\u4e2a\u5143\u7d20\u4e2d\u9009\u62e9n\u4e2a\u5143\u7d20\u7684\u6240\u6709\u53ef\u80fd\u7ec4\u5408</p>"},{"location":"leetcode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/","title":"\u4e8c\u5206\u67e5\u627e","text":""},{"location":"leetcode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_1","title":"\u4e8c\u5206\u67e5\u627e","text":"<ul> <li>\u6807\u51c6\u65b9\u6848</li> </ul> <pre><code>class Solution {\n    public int binarySearch(int[] nums, int key) {\n        int l = 0, h = nums.length - 1;\n        while (l &lt;= h) {\n            int m = l + (h - l &gt;&gt; 1);\n            if (nums[m] == key) return m;\n            else if (nums[m] &gt; key) {\n                h = m - 1;\n            } else\n                l = m + 1;\n        }\n        return -1;\n    }\n}\n</code></pre> <ul> <li> <p>mid \u8ba1\u7b97   $mid = l+(h-l)/2$</p> </li> <li> <p>\u627e\u6709\u91cd\u590d\u6570\u5b57\u7684\u6700\u5de6\u8fb9\u754c \u8fd9\u662f\u627e\u533a\u95f4   \u5199\u6cd51:</p> </li> </ul> <p>\u56e0\u4e3am\u662f\u504f\u5de6\u7684, \u6240\u4ee5 [m] &lt; key \u65f6\u5c06 h \u6536\u655b\u5230 m \u4e5f\u6b63\u786e</p> <pre><code>class Solution {\n    // [i] = k &amp;&amp; [i-1] != k\n    public int binarySearch(int[] nums, int key) {\n        int l = 0, h = nums.length - 1;\n        // \u4e0d\u540c\u70b9 1, \u6536\u655b\u5230\u4e00\u4e2a\u4f4d\u7f6e, \u6700\u540e\u518d\u5224\u5b9a\u8fd9\u4e2a\u503c\u5bf9\u4e0d\u5bf9\n        while (l &lt; h) {\n            int m = l + (h - l &gt;&gt; 1);\n            // \u4e0d\u540c\u70b9 2\n            if (nums[m] &lt; key)\n                // \u4e0d\u540c\u70b9 3\n                l = m + 1;\n            else\n                h = m;\n        }\n        return (nums[l] == key) ? l : -1;\n    }\n}\n</code></pre> <p>\u5199\u6cd52:</p> <pre><code>class Solution {\n    public int binarySearch(int[] nums, int key) {\n        int l = 0, h = nums.length - 1;\n        while (l &lt; h) {\n            int m = l + (h - l &gt;&gt; 1);\n            if (nums[m] &lt; key)\n                l = m + 1;\n            else if (nums[m] &gt; key)\n                h = m - 1;\n            else\n                h = m;\n        }\n        return (nums[l] == key) ? l : -1;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_2","title":"\u5355\u8c03\u533a\u95f4","text":""},{"location":"leetcode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#offer-53-i-i-easy","title":"\u5251\u6307 Offer 53 - I. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u6570\u5b57 I easy","text":"<p>\u7edf\u8ba1\u4e00\u4e2a\u6570\u5b57\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u51fa\u73b0\u7684\u6b21\u6570\u3002</p> <p>\u5de6\u53f3\u8fb9\u754c\u5f88\u7b80\u5355, \u53ea\u8981\u5f04\u6e05\u695a\u4e8c\u5206\u7684\u65f6\u5019\u504f\u5de6\u8fd8\u662f\u504f\u53f3\u5373\u53ef</p> Java <pre><code>class Solution {\n    public int search(int[] nums, int target) {\n        if (nums.length == 0) return 0;\n        int l = 0, h = nums.length - 1;\n        while (l &lt; h) {\n            int m = l + (h - l &gt;&gt; 1);\n            if (nums[m] &lt; target)\n                l = m + 1;\n            else\n                h = m;\n        }\n        if (nums[l] != target) return 0;\n        int left = l;\n\n        h = nums.length - 1;\n        while (l &lt; h) {\n            int m = l + (1 + h - l &gt;&gt; 1);\n            if (nums[m] &gt; target)\n                h = m - 1;\n            else\n                l = m;\n        }\n        return l - left + 1;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#540-mid","title":"540. \u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u5355\u4e00\u5143\u7d20 mid","text":"<p>\u5251\u6307 Offer II 070. \u6392\u5e8f\u6570\u7ec4\u4e2d\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u4ec5\u7531\u6574\u6570\u7ec4\u6210\u7684\u6709\u5e8f\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4f1a\u51fa\u73b0\u4e24\u6b21\uff0c\u552f\u6709\u4e00\u4e2a\u6570\u53ea\u4f1a\u51fa\u73b0\u4e00\u6b21\u3002 \u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u90a3\u4e2a\u6570\u3002</p> <p>\u4f60\u8bbe\u8ba1\u7684\u89e3\u51b3\u65b9\u6848\u5fc5\u987b\u6ee1\u8db3 O(log n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) \u7a7a\u95f4\u590d\u6742\u5ea6\u3002</p> <p>\u7d22\u5f15\u4e2d\u6709\u4e00\u4e2a\u5206\u9694, \u5de6\u8fb9 [\u5076\u6570]=[\u5076\u6570+1], \u53f3\u8fb9 [\u5947\u6570]=[\u5947\u6570+1]</p> <pre><code>class Solution {\n    public int singleNonDuplicate(int[] nums) {\n        int l = 0, h = nums.length - 1;\n        while (l &lt; h) {\n            int m = l + (h - l &gt;&gt; 1);\n            // i\u5947\u6570: i^1 = i-1;\n            // i\u5076\u6570: i^1 = i+1;\n            if (nums[m] == nums[m ^ 1]) l = m + 1;\n            else h = m;\n        }\n        return nums[l];\n    }\n}\n</code></pre>"},{"location":"leetcode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#704-easy","title":"704. \u4e8c\u5206\u67e5\u627e easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a n \u4e2a\u5143\u7d20\u6709\u5e8f\u7684\uff08\u5347\u5e8f\uff09\u6574\u578b\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target \uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u641c\u7d22 nums \u4e2d\u7684 target\uff0c\u5982\u679c\u76ee\u6807\u503c\u5b58\u5728\u8fd4\u56de\u4e0b\u6807\uff0c\u5426\u5219\u8fd4\u56de -1\u3002</p> <pre><code>class Solution {\n    public int search(int[] nums, int target) {\n        int l = 0, r = nums.length - 1;\n        while (l &lt;= r) {\n            int m = l + (r - l &gt;&gt; 1);\n            if (nums[m] == target)\n                return m;\n            else if (nums[m] &lt; target)\n                l = m + 1;\n            else\n                r = m - 1;\n        }\n        return -1;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#744-easy","title":"744. \u5bfb\u627e\u6bd4\u76ee\u6807\u5b57\u6bcd\u5927\u7684\u6700\u5c0f\u5b57\u6bcd easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6392\u5e8f\u540e\u7684\u5b57\u7b26\u5217\u8868 letters \uff0c\u5217\u8868\u4e2d\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u3002\u53e6\u7ed9\u51fa\u4e00\u4e2a\u76ee\u6807\u5b57\u6bcd target\uff0c\u8bf7\u4f60\u5bfb\u627e\u5728\u8fd9\u4e00\u6709\u5e8f\u5217\u8868\u91cc\u6bd4\u76ee\u6807\u5b57\u6bcd\u5927\u7684\u6700\u5c0f\u5b57\u6bcd\u3002</p> <pre><code>class Solution {\n    public char nextGreatestLetter(char[] letters, char target) {\n        int l = 0, h = letters.length;\n        while (l &lt; h) {\n            int m = l + (h - l &gt;&gt; 1);\n            // \u5de6\u8fb9\u754c\n            if (letters[m] &gt; target)\n                h = m;\n            else\n                l = m + 1;\n        }\n        if (l &gt;= letters.length) return letters[0];\n        return letters[l];\n    }\n}\n</code></pre>"},{"location":"leetcode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#2563-mid","title":"2563. \u7edf\u8ba1\u516c\u5e73\u6570\u5bf9\u7684\u6570\u76ee mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u3001\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u548c\u4e24\u4e2a\u6574\u6570 lower \u548c upper \uff0c\u8fd4\u56de \u516c\u5e73\u6570\u5bf9\u7684\u6570\u76ee \u3002</p> <p>\u5982\u679c(i, j)\u6570\u5bf9\u6ee1\u8db3\u4ee5\u4e0b\u60c5\u51b5\uff0c\u5219\u8ba4\u4e3a\u5b83\u662f\u4e00\u4e2a \u516c\u5e73\u6570\u5bf9\uff1a</p> <ul> <li>0 &lt;= i &lt; j &lt; n</li> <li>lower &lt;= nums[i] + nums[j] &lt;= upper</li> </ul> <pre><code>class Solution {\n    public long countFairPairs(int[] nums, int lower, int upper) {\n        long res = 0;\n        Arrays.sort(nums);\n        // L-l &lt;= r &lt;= U-l\n        int n = nums.length;\n        for (int i = 0; i &lt; n - 1; i++) {\n            int l = i + 1;\n            int r = n - 1;\n            int te = biSearch(nums, lower - nums[i], upper - nums[i], l, r);\n            res += te;\n        }\n        return res;\n    }\n\n    private int biSearch(int[] nums, int lower, int upper, int l, int r) {\n        // \u5de6 &gt;= lower\n        int tempR = r;\n        while (l &lt; r) {\n            int m = l + (r - l &gt;&gt; 1);\n            if (nums[m] &lt; lower) l = m + 1;\n            else r = m;\n        }\n        if (nums[l] &lt; lower) return 0;\n        int left = l;\n        // \u53f3 &lt;= high\n        r = tempR;\n        while (l &lt; r) {\n            int m = l + (r - l + 1 &gt;&gt; 1);\n            if (nums[m] &gt; upper) r = m - 1;\n            else l = m;\n        }\n        if (nums[l] &gt; upper) return 0;\n        return l - left + 1;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_3","title":"\u6c34\u5e73\u5bf9\u79f0\u5355\u8c03\u533a\u95f4","text":""},{"location":"leetcode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#852-mid","title":"852. \u5c71\u8109\u6570\u7ec4\u7684\u5cf0\u9876\u7d22\u5f15 mid","text":"<p>\u7b26\u5408\u4e0b\u5217\u5c5e\u6027\u7684\u6570\u7ec4 arr \u79f0\u4e3a \u5c71\u8109\u6570\u7ec4 \uff1a</p> <ul> <li>arr.length &gt;= 3</li> <li>\u5b58\u5728 i\uff080 &lt; i&lt; arr.length - 1\uff09\u4f7f\u5f97\uff1a<ul> <li>arr[0] &lt; arr[1] &lt; ... arr[i-1] &lt; arr[i]</li> <li>arr[i] &gt; arr[i+1] &gt; ... &gt; arr[arr.length - 1]</li> <li>\u7ed9\u4f60\u7531\u6574\u6570\u7ec4\u6210\u7684\u5c71\u8109\u6570\u7ec4 arr \uff0c\u8fd4\u56de\u4efb\u4f55\u6ee1\u8db3 arr[0] &lt; arr[1] &lt; ... arr[i - 1] &lt; arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1] \u7684\u4e0b\u6807 i \u3002</li> </ul> </li> </ul> <pre><code>class Solution {\n    public int peakIndexInMountainArray(int[] arr) {\n        int l = 1, h = arr.length - 2;\n        while (l &lt; h) {\n            int m = l + (h - l &gt;&gt; 1); // \u6ce8\u610f\u504f\u5411\n            if (arr[m] &lt; arr[m + 1]) l = m + 1;\n            else h = m;\n        }\n        return l;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_4","title":"\u6ee1\u8db3\u67d0\u79cd\u6761\u4ef6\u7684\u8fb9\u754c\u503c","text":"<ol> <li>\u786e\u5b9a\u4e0a\u4e0b\u754c</li> <li>\u4e8c\u5206\u67e5\u627e</li> </ol>"},{"location":"leetcode/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#875-mid","title":"875. \u7231\u5403\u9999\u8549\u7684\u73c2\u73c2 mid","text":"<p>\u5251\u6307 Offer II 073. \u72d2\u72d2\u5403\u9999\u8549</p> <p>\u73c2\u73c2\u559c\u6b22\u5403\u9999\u8549\u3002\u8fd9\u91cc\u6709 n \u5806\u9999\u8549\uff0c\u7b2c i \u5806\u4e2d\u6709 piles[i]\u6839\u9999\u8549\u3002\u8b66\u536b\u5df2\u7ecf\u79bb\u5f00\u4e86\uff0c\u5c06\u5728 h \u5c0f\u65f6\u540e\u56de\u6765\u3002</p> <p>\u73c2\u73c2\u53ef\u4ee5\u51b3\u5b9a\u5979\u5403\u9999\u8549\u7684\u901f\u5ea6 k \uff08\u5355\u4f4d\uff1a\u6839/\u5c0f\u65f6\uff09\u3002\u6bcf\u4e2a\u5c0f\u65f6\uff0c\u5979\u5c06\u4f1a\u9009\u62e9\u4e00\u5806\u9999\u8549\uff0c\u4ece\u4e2d\u5403\u6389 k \u6839\u3002\u5982\u679c\u8fd9\u5806\u9999\u8549\u5c11\u4e8e k \u6839\uff0c\u5979\u5c06\u5403\u6389\u8fd9\u5806\u7684\u6240\u6709\u9999\u8549\uff0c\u7136\u540e\u8fd9\u4e00\u5c0f\u65f6\u5185\u4e0d\u4f1a\u518d\u5403\u66f4\u591a\u7684\u9999\u8549\u3002</p> <p>\u73c2\u73c2\u559c\u6b22\u6162\u6162\u5403\uff0c\u4f46\u4ecd\u7136\u60f3\u5728\u8b66\u536b\u56de\u6765\u524d\u5403\u6389\u6240\u6709\u7684\u9999\u8549\u3002</p> <p>\u8fd4\u56de\u5979\u53ef\u4ee5\u5728 h \u5c0f\u65f6\u5185\u5403\u6389\u6240\u6709\u9999\u8549\u7684\u6700\u5c0f\u901f\u5ea6 k\uff08k \u4e3a\u6574\u6570\uff09\u3002</p> <pre><code>class Solution {\n    public int minEatingSpeed(int[] piles, int h) {\n        int r = Integer.MIN_VALUE;\n        for (int e : piles) {\n            r = Math.max(r, e);\n        }\n        int l = 1;\n        while (l &lt; r) {\n            int m = l + (r - l &gt;&gt; 1);\n            // \u6ee1\u8db3 check \u7684\u5de6\u8fb9\u754c\n            if (check(piles, h, m)) r = m;\n            else l = m + 1;\n        }\n        return l;\n    }\n\n    private boolean check(int[] piles, int h, int k) {\n        int sum = 0;\n        for (int e : piles) {\n            sum += (e - 1) / k + 1;\n        }\n        return sum &lt;= h;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E4%BD%8D%E8%BF%90%E7%AE%97/","title":"\u4f4d\u8fd0\u7b97","text":""},{"location":"leetcode/%E4%BD%8D%E8%BF%90%E7%AE%97/#_1","title":"\u57fa\u672c\u539f\u7406","text":""},{"location":"leetcode/%E4%BD%8D%E8%BF%90%E7%AE%97/#_2","title":"\u4e09\u4e2a\u6570\u53bb\u6389\u76f8\u540c\u7684\u4e24\u4e2a\u6570","text":"<p>b=a ^ a ^ b</p>"},{"location":"leetcode/%E4%BD%8D%E8%BF%90%E7%AE%97/#1","title":"\u53bb\u6389\u6700\u4f4e\u4f4d\u76841","text":"<p>n&amp;(n-1)</p>"},{"location":"leetcode/%E4%BD%8D%E8%BF%90%E7%AE%97/#1_1","title":"\u83b7\u53d6\u6700\u4f4e\u4f4d\u76841","text":"<p>n&amp;(-n)</p> <p>\u6700\u540e\u7684\u4e00\u4e2a1, \u540e\u9762\u7684\u4f4d\u88650</p>"},{"location":"leetcode/%E4%BD%8D%E8%BF%90%E7%AE%97/#mask","title":"mask \u8ba1\u7b97","text":"<p>\u51681:</p> <pre><code>~0\n</code></pre> <p>i \u4f4d\u4e3a 1:</p> <pre><code>1&lt;&lt;(i-1)\n</code></pre> <p>1 \u5230 i \u4f4d\u4e3a 1:</p> <pre><code>(1&lt;&lt;i) - 1\n</code></pre> <p>1 \u5230 i \u4f4d\u4e3a 0:</p> <pre><code>~((1&lt;&lt;i)-1)\n</code></pre>"},{"location":"leetcode/%E4%BD%8D%E8%BF%90%E7%AE%97/#_3","title":"\u4f8b\u9898","text":""},{"location":"leetcode/%E4%BD%8D%E8%BF%90%E7%AE%97/#offer-56-ii-ii-mid","title":"\u5251\u6307 Offer 56 - II. \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570 II mid","text":"<p>\u5728\u4e00\u4e2a\u6570\u7ec4 nums \u4e2d\u9664\u4e00\u4e2a\u6570\u5b57\u53ea\u51fa\u73b0\u4e00\u6b21\u4e4b\u5916\uff0c\u5176\u4ed6\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e09\u6b21\u3002\u8bf7\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u3002</p> <p>https://leetcode.cn/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof/solution/mian-shi-ti-56-ii-shu-zu-zhong-shu-zi-chu-xian-d-4/</p> <p>\u89e3\u6cd51:\u8ba1\u6570</p> <pre><code>class Solution1 {\n    public int singleNumber(int[] nums) {\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n        for (int num : nums) {\n            map.merge(num, 1, Integer::sum);\n        }\n        for (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) {\n            if (entry.getValue() == 1) return entry.getKey();\n        }\n        return -1;\n    }\n}\n</code></pre> <p>\u89e3\u6cd52:stream</p> <pre><code>class Solution {\n    public int singleNumber(int[] nums) {\n        return IntStream.of(nums)\n                .boxed()\n                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n                .entrySet()\n                .stream()\n                .filter(o -&gt; o.getValue() == 1)\n                .map(Map.Entry::getKey).findAny()\n                .orElse(-1);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E4%BD%8D%E8%BF%90%E7%AE%97/#461-easy","title":"461. \u6c49\u660e\u8ddd\u79bb easy","text":"<p>\u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7684 \u6c49\u660e\u8ddd\u79bb \u6307\u7684\u662f\u8fd9\u4e24\u4e2a\u6570\u5b57\u5bf9\u5e94\u4e8c\u8fdb\u5236\u4f4d\u4e0d\u540c\u7684\u4f4d\u7f6e\u7684\u6570\u76ee\u3002</p> <p>\u7ed9\u4f60\u4e24\u4e2a\u6574\u6570 x \u548c y\uff0c\u8ba1\u7b97\u5e76\u8fd4\u56de\u5b83\u4eec\u4e4b\u95f4\u7684\u6c49\u660e\u8ddd\u79bb\u3002</p> <pre><code>class Solution {\n    public int hammingDistance(int x, int y) {\n        int p = x ^ y;\n        int cnt = 0;\n        while (p != 0) {\n            p &amp;= (p - 1);\n            cnt++;\n        }\n        return cnt;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E4%BD%8D%E8%BF%90%E7%AE%97/#476-easy","title":"476. \u6570\u5b57\u7684\u8865\u6570 easy","text":"<p>\u5bf9\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u53d6\u53cd\uff080 \u53d8 1 \uff0c1 \u53d8 0\uff09\u540e\uff0c\u518d\u8f6c\u6362\u4e3a\u5341\u8fdb\u5236\u8868\u793a\uff0c\u53ef\u4ee5\u5f97\u5230\u8fd9\u4e2a\u6574\u6570\u7684\u8865\u6570\u3002</p> <ul> <li>\u4f8b\u5982\uff0c\u6574\u6570 5 \u7684\u4e8c\u8fdb\u5236\u8868\u793a\u662f \"101\" \uff0c\u53d6\u53cd\u540e\u5f97\u5230 \"010\" \uff0c\u518d\u8f6c\u56de\u5341\u8fdb\u5236\u8868\u793a\u5f97\u5230\u8865\u6570 2\u3002</li> </ul> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 num \uff0c\u8f93\u51fa\u5b83\u7684\u8865\u6570\u3002</p> <p>\u4ece\u6700\u9ad8\u4f4d\u76841\u53d6\u53cd</p> <pre><code>class Solution {\n    public int findComplement(int num) {\n        int n = num;\n        n |= n &gt;&gt;&gt; 1;\n        n |= n &gt;&gt;&gt; 2;\n        n |= n &gt;&gt;&gt; 4;\n        n |= n &gt;&gt;&gt; 8;\n        n |= n &gt;&gt;&gt; 16;\n        return num ^ n;\n    }\n}\n</code></pre> <p>\u4f53\u609f\u4e00\u4e0bHashMap</p> <pre><code>class HashMap&lt;K, V&gt; {\n    static final int tableSizeFor(int cap) {\n        // \u5982\u679c cap \u662f2\u7684\u5e42, \u521d\u59cb\u5316\u4e3a cap\n        int n = cap - 1;\n        // \u6700\u9ad8\u4f4d\u76841\u586b\u5145\u4f4e\u4f4d\n        n |= n &gt;&gt;&gt; 1;\n        n |= n &gt;&gt;&gt; 2;\n        n |= n &gt;&gt;&gt; 4;\n        n |= n &gt;&gt;&gt; 8;\n        n |= n &gt;&gt;&gt; 16;\n        // \u6700\u540e +1 \u8fdb\u4f4d\n        return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E4%BD%8D%E8%BF%90%E7%AE%97/#693-easy","title":"693. \u4ea4\u66ff\u4f4d\u4e8c\u8fdb\u5236\u6570 easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u68c0\u67e5\u5b83\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u662f\u5426\u603b\u662f 0\u30011 \u4ea4\u66ff\u51fa\u73b0\uff1a\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u76f8\u90bb\u4e24\u4f4d\u7684\u6570\u5b57\u6c38\u4e0d\u76f8\u540c\u3002</p> <p>\u9519\u4f4d\u540e\u5f02\u6216, \u5e94\u8be5\u662f\u51681</p> <pre><code>class Solution {\n    public boolean hasAlternatingBits(int n) {\n        int a = n ^ (n &gt;&gt; 1);\n        return (a &amp; (a + 1)) == 0;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%88%86%E5%89%B2%E5%AD%90%E9%9B%86/","title":"\u5206\u5272\u5b50\u96c6","text":""},{"location":"leetcode/%E5%88%86%E5%89%B2%E5%AD%90%E9%9B%86/#416-mid","title":"416. \u5206\u5272\u7b49\u548c\u5b50\u96c6 mid","text":"<p>\u5251\u6307 Offer II 101. \u5206\u5272\u7b49\u548c\u5b50\u96c6</p> <p>\u7ed9\u4f60\u4e00\u4e2a \u53ea\u5305\u542b\u6b63\u6574\u6570 \u7684 \u975e\u7a7a \u6570\u7ec4 nums \u3002\u8bf7\u4f60\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u6570\u7ec4\u5206\u5272\u6210\u4e24\u4e2a\u5b50\u96c6\uff0c\u4f7f\u5f97\u4e24\u4e2a\u5b50\u96c6\u7684\u5143\u7d20\u548c\u76f8\u7b49\u3002</p> <p>\u53ea\u9700\u8981\u80fd\u6070\u597d\u51d1\u6ee1\u5143\u7d20\u548c\u7684\u4e00\u534a \u80cc\u5305 \u5176\u4e2d dp[i][j] \u8868\u793a\u4ecenums idx\u2208[0,i] \u5185\u9009\u53d6\u82e5\u5e72\u4e2a\u6b63\u6574\u6570(\u53ef\u4ee5\u662f0\u4e2a)\uff0c\u662f\u5426\u5b58\u5728\u4e00\u79cd\u65b9\u6848, \u4f7f\u5f97\u88ab\u9009\u53d6\u7684\u6b63\u6574\u6570\u7684\u548c == j \u7528\u8fde\u7eed\u7684\u6574\u578bidx\u53bb\u8868\u5f81\u80cc\u5305\u4f53\u79ef(\u5143\u7d20\u548c)</p> <pre><code>class Solution {\n    public boolean canPartition(int[] nums) {\n        int n = nums.length;\n        if (n &lt; 2) return false;\n        int max = nums[0];\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n            max = Math.max(max, num);\n        }\n        // \u5947\u6570\u4e0d\u884c\n        if (sum % 2 == 1) return false;\n        int half = sum &gt;&gt; 1;\n        // num\u4e0d\u80fd\u8d85\u8fc7\u4e00\u534a\n        if (max &gt; half) return false;\n/*\n\u5176\u4e2d dp[i][j] \u8868\u793a\u4ecenums idx\u2208[0,i] \u5185\u9009\u53d6\u82e5\u5e72\u4e2a\u6b63\u6574\u6570(\u53ef\u4ee5\u662f0\u4e2a)\uff0c\u662f\u5426\u5b58\u5728\u4e00\u79cd\u65b9\u6848\u4f7f\u5f97\u88ab\u9009\u53d6\u7684\u6b63\u6574\u6570\u7684\u548c == j\n*/\n        boolean[][] dp = new boolean[n][half + 1];\n        for (int i = 0; i &lt; n; i++) {\n            dp[i][0] = true;\n        }\n        dp[0][nums[0]] = true;\n        for (int i = 1; i &lt; n; i++) {\n            int num = nums[i];\n            for (int j = 1; j &lt;= half; j++) {\n                // \u4e0a\u4e2a\u6ee1\u8db3\u8fd9\u4e2a\u80af\u5b9a\u6ee1\u8db3\n                dp[i][j] = dp[i - 1][j];\n                // \u72b6\u6001\u8f6c\u79fb\n                if (j &gt;= num) dp[i][j] |= dp[i - 1][j - num];\n            }\n        }\n        return dp[n - 1][half];\n    }\n}\n</code></pre> <pre><code>class Solution {\n    public boolean canPartition(int[] nums) {\n        int sum = this.sumArray(nums);\n        if ((sum &amp; 1) == 1) return false;\n        int half = sum &gt;&gt; 1;\n\n        boolean[] dp = new boolean[half + 1];\n\n        dp[0] = true;\n        for (int num : nums) {\n            // \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5143\u7d20, \u904d\u5386 [target, e], \u770b\u4e0b\u80fd\u4e0d\u80fd\u7531 e \u6ee1\u8db3\n            // \u6ce8\u610f\u4ece\u5927\u5230\u5c0f, \u56e0\u4e3a dp[j - num] \u5f97\u665a\u66f4\u65b0, \u5426\u5219\u672c\u6b21\u5faa\u73af\u5c31\u4f1a\u8986\u76d6\u672c\u6b21\u5faa\u73af\u7684\u503c; \u76f8\u5f53\u4e8e1\u4e2a\u5143\u7d20\u91cd\u590d\u4f7f\u7528\n            for (int j = half; j &gt;= num; j--) {\n                dp[j] = dp[j] || dp[j - num];\n            }\n        }\n        return dp[half];\n    }\n\n    private int sumArray(int[] nums) {\n        int res = 0;\n        for (int i : nums) {\n            res += i;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%8C%BA%E9%97%B4/","title":"\u533a\u95f4","text":""},{"location":"leetcode/%E5%8C%BA%E9%97%B4/#_2","title":"\u4e0d\u91cd\u53e0\u533a\u95f4","text":""},{"location":"leetcode/%E5%8C%BA%E9%97%B4/#435-mid","title":"435. \u65e0\u91cd\u53e0\u533a\u95f4 mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u627e\u5230\u9700\u8981\u79fb\u9664\u533a\u95f4\u7684\u6700\u5c0f\u6570\u91cf\uff0c\u4f7f\u5269\u4f59\u533a\u95f4\u4e92\u4e0d\u91cd\u53e0\u3002</p> <p>\u6ce8\u610f: \u53ef\u4ee5\u8ba4\u4e3a\u533a\u95f4\u7684\u7ec8\u70b9\u603b\u662f\u5927\u4e8e\u5b83\u7684\u8d77\u70b9\u3002 \u533a\u95f4 [1,2] \u548c [2,3] \u7684\u8fb9\u754c\u76f8\u4e92\u201c\u63a5\u89e6\u201d\uff0c\u4f46\u6ca1\u6709\u76f8\u4e92\u91cd\u53e0\u3002</p> <p>\u5148\u6309\u7167\u53f3\u4fa7\u81ea\u7136\u6392\u5e8f, \u7136\u540e\u904d\u5386, \u5982\u679c\u5f00\u59cb\u533a\u95f4\u7684\u5c0f\u4e8e\u4e0a\u4e00\u4e2a\u7ed3\u675f\u533a\u95f4, \u8ba1\u6570;</p> <pre><code>class Solution {\n    public int eraseOverlapIntervals(int[][] intervals) {\n        Arrays.sort(intervals, Comparator.comparingInt(o -&gt; o[1]));\n        Integer lastEnd = null;\n        int cnt = 0;\n        for (int[] e : intervals) {\n            if (lastEnd == null || lastEnd &lt;= e[0]) lastEnd = e[1];\n            else cnt++;\n        }\n        return cnt;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%8C%BA%E9%97%B4/#452-mid","title":"452. \u7528\u6700\u5c11\u6570\u91cf\u7684\u7bad\u5f15\u7206\u6c14\u7403 mid","text":"<p>\u6709\u4e00\u4e9b\u7403\u5f62\u6c14\u7403\u8d34\u5728\u4e00\u5835\u7528 XY \u5e73\u9762\u8868\u793a\u7684\u5899\u9762\u4e0a\u3002\u5899\u9762\u4e0a\u7684\u6c14\u7403\u8bb0\u5f55\u5728\u6574\u6570\u6570\u7ec4 points \uff0c\u5176\u4e2dpoints[i] = [xstart, xend]\u8868\u793a\u6c34\u5e73\u76f4\u5f84\u5728 xstart \u548c xend\u4e4b\u95f4\u7684\u6c14\u7403\u3002\u4f60\u4e0d\u77e5\u9053\u6c14\u7403\u7684\u786e\u5207 y \u5750\u6807\u3002</p> <p>\u4e00\u652f\u5f13\u7bad\u53ef\u4ee5\u6cbf\u7740 x \u8f74\u4ece\u4e0d\u540c\u70b9 \u5b8c\u5168\u5782\u76f4 \u5730\u5c04\u51fa\u3002\u5728\u5750\u6807 x \u5904\u5c04\u51fa\u4e00\u652f\u7bad\uff0c\u82e5\u6709\u4e00\u4e2a\u6c14\u7403\u7684\u76f4\u5f84\u7684\u5f00\u59cb\u548c\u7ed3\u675f\u5750\u6807\u4e3a xstart\uff0cxend\uff0c \u4e14\u6ee1\u8db3 xstart \u2264 x \u2264 xend\uff0c\u5219\u8be5\u6c14\u7403\u4f1a\u88ab \u5f15\u7206 \u3002\u53ef\u4ee5\u5c04\u51fa\u7684\u5f13\u7bad\u7684\u6570\u91cf \u6ca1\u6709\u9650\u5236 \u3002 \u5f13\u7bad\u4e00\u65e6\u88ab\u5c04\u51fa\u4e4b\u540e\uff0c\u53ef\u4ee5\u65e0\u9650\u5730\u524d\u8fdb\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 points \uff0c\u8fd4\u56de\u5f15\u7206\u6240\u6709\u6c14\u7403\u6240\u5fc5\u987b\u5c04\u51fa\u7684 \u6700\u5c0f \u5f13\u7bad\u6570 \u3002</p> <pre><code>class Solution {\n    public int findMinArrowShots(int[][] points) {\n        Arrays.sort(points, Comparator.comparingInt(o -&gt; o[1]));\n        int count = 1;\n        Integer lastEnd = points[0][1];\n        for (int[] e : points) {\n            if (lastEnd &lt; e[0]) {\n                count++;\n                lastEnd = e[1];\n            }\n        }\n        return count;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%8C%BA%E9%97%B4/#646-mid","title":"646. \u6700\u957f\u6570\u5bf9\u94fe mid","text":"<p>\u7ed9\u51fa n \u4e2a\u6570\u5bf9\u3002 \u5728\u6bcf\u4e00\u4e2a\u6570\u5bf9\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u6570\u5b57\u603b\u662f\u6bd4\u7b2c\u4e8c\u4e2a\u6570\u5b57\u5c0f\u3002</p> <p>\u73b0\u5728\uff0c\u6211\u4eec\u5b9a\u4e49\u4e00\u79cd\u8ddf\u968f\u5173\u7cfb\uff0c\u5f53\u4e14\u4ec5\u5f53 b &lt; c \u65f6\uff0c\u6570\u5bf9(c, d)\u624d\u53ef\u4ee5\u8ddf\u5728(a, b)\u540e\u9762\u3002\u6211\u4eec\u7528\u8fd9\u79cd\u5f62\u5f0f\u6765\u6784\u9020\u4e00\u4e2a\u6570\u5bf9\u94fe\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u5bf9\u96c6\u5408\uff0c\u627e\u51fa\u80fd\u591f\u5f62\u6210\u7684\u6700\u957f\u6570\u5bf9\u94fe\u7684\u957f\u5ea6\u3002\u4f60\u4e0d\u9700\u8981\u7528\u5230\u6240\u6709\u7684\u6570\u5bf9\uff0c\u4f60\u53ef\u4ee5\u4ee5\u4efb\u4f55\u987a\u5e8f\u9009\u62e9\u5176\u4e2d\u7684\u4e00\u4e9b\u6570\u5bf9\u6765\u6784\u9020\u3002</p> <p>\u89e3\u6cd51: \u8d2a\u5fc3</p> <p>\u6700\u591a\u4e0d\u91cd\u53e0\u533a\u95f4\u7684\u6570\u91cf</p> <pre><code>class Solution {\n    public int findLongestChain(int[][] pairs) {\n\n        Arrays.sort(pairs, Comparator.comparingInt(o -&gt; o[1]));\n\n        int cnt = 0;\n        Integer lastEnd = null;\n        for (int[] e : pairs) {\n            if (lastEnd == null || lastEnd &lt; e[0]) {\n                cnt++;\n                lastEnd = e[1];\n            }\n        }\n        return cnt;\n    }\n}\n</code></pre> <p>\u89e3\u6cd52: DP</p> <p>DP \u548c \u8d2a\u5fc3\u90fd\u53ef\u4ee5\u505a, DP\u590d\u6742\u5ea6 $O(n^2)$, \u8d2a\u5fc3\u590d\u6742\u5ea6 $O(n)$</p> <pre><code>class Solution {\n    public int findLongestChain(int[][] pairs) {\n        /*\n        b = int[j][1]\n        c = int[i][0]\n        fi = max(fj) j\u2208[0,n-1] if(b&lt;c)\n        */\n        Arrays.sort(pairs, Comparator.comparingInt(a -&gt; a[0]));\n\n        int[] dp = new int[pairs.length];\n        dp[0] = 1;\n        int max = dp[0];\n        for (int i = 1; i &lt; pairs.length; i++) {\n            dp[i] = 1;\n            for (int j = 0; j &lt; i; j++) {\n                if (pairs[j][1] &lt; pairs[i][0])\n                    dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%8C%BA%E9%97%B4/#_3","title":"\u52a8\u6001\u4e0d\u91cd\u53e0\u533a\u95f4","text":""},{"location":"leetcode/%E5%8C%BA%E9%97%B4/#729-i","title":"729. \u6211\u7684\u65e5\u7a0b\u5b89\u6392\u8868 I","text":"<p>\u5b9e\u73b0\u4e00\u4e2a MyCalendar \u7c7b\u6765\u5b58\u653e\u4f60\u7684\u65e5\u7a0b\u5b89\u6392\u3002\u5982\u679c\u8981\u6dfb\u52a0\u7684\u65e5\u7a0b\u5b89\u6392\u4e0d\u4f1a\u9020\u6210 \u91cd\u590d\u9884\u8ba2 \uff0c\u5219\u53ef\u4ee5\u5b58\u50a8\u8fd9\u4e2a\u65b0\u7684\u65e5\u7a0b\u5b89\u6392\u3002</p> <p>\u5f53\u4e24\u4e2a\u65e5\u7a0b\u5b89\u6392\u6709\u4e00\u4e9b\u65f6\u95f4\u4e0a\u7684\u4ea4\u53c9\u65f6\uff08\u4f8b\u5982\u4e24\u4e2a\u65e5\u7a0b\u5b89\u6392\u90fd\u5728\u540c\u4e00\u65f6\u95f4\u5185\uff09\uff0c\u5c31\u4f1a\u4ea7\u751f \u91cd\u590d\u9884\u8ba2 \u3002</p> <p>\u65e5\u7a0b\u53ef\u4ee5\u7528\u4e00\u5bf9\u6574\u6570 start \u548c end \u8868\u793a\uff0c\u8fd9\u91cc\u7684\u65f6\u95f4\u662f\u534a\u5f00\u533a\u95f4\uff0c\u5373 [start, end), \u5b9e\u6570 x \u7684\u8303\u56f4\u4e3a\uff0c start &lt;= x &lt; end \u3002</p> <p>\u5b9e\u73b0 MyCalendar \u7c7b\uff1a</p> <ul> <li>MyCalendar() \u521d\u59cb\u5316\u65e5\u5386\u5bf9\u8c61\u3002</li> <li>boolean book(int start, int end) \u5982\u679c\u53ef\u4ee5\u5c06\u65e5\u7a0b\u5b89\u6392\u6210\u529f\u6dfb\u52a0\u5230\u65e5\u5386\u4e2d\u800c\u4e0d\u4f1a\u5bfc\u81f4\u91cd\u590d\u9884\u8ba2\uff0c\u8fd4\u56de true \u3002\u5426\u5219\uff0c\u8fd4\u56de false \u5e76\u4e14\u4e0d\u8981\u5c06\u8be5\u65e5\u7a0b\u5b89\u6392\u6dfb\u52a0\u5230\u65e5\u5386\u4e2d\u3002</li> </ul> <p>\u66b4\u529b/\u4e8c\u5206\u67e5\u627e/\u7ebf\u6bb5\u6811/TreeMap \u505a\u6cd5\u5f88\u591a</p> <p>TreeMap</p> <pre><code>class MyCalendar {\n    private final TreeMap&lt;Integer, Integer&gt; map = new TreeMap&lt;&gt;();\n\n    public boolean book(int start, int end) {\n        Map.Entry&lt;Integer, Integer&gt; val = map.floorEntry(end - 1);\n        if (val != null &amp;&amp; val.getValue() &gt; start) return false;\n        map.put(start, end);\n        return true;\n    }\n}\n</code></pre> <p>TreeSet</p> <pre><code>class MyCalendar {\n    private final TreeSet&lt;int[]&gt; set = new TreeSet&lt;&gt;((a, b) -&gt; {\n        if (a[0] &gt;= b[1]) return 1;\n        if (a[1] &lt;= b[0]) return -1;\n        return 0;\n    });\n\n    public boolean book(int start, int end) {\n        return set.add(new int[]{start, end});\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%8C%BA%E9%97%B4/#_4","title":"\u533a\u95f4\u5806\u53e0\u9ad8\u5ea6","text":""},{"location":"leetcode/%E5%8C%BA%E9%97%B4/#2406-mid","title":"2406. \u5c06\u533a\u95f4\u5206\u4e3a\u6700\u5c11\u7ec4\u6570 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 intervals \uff0c\u5176\u4e2d intervals[i] = [lefti, righti]\u8868\u793a\u95ed\u533a\u95f4[lefti, righti]\u3002</p> <p>\u4f60\u9700\u8981\u5c06 intervals \u5212\u5206\u4e3a\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u533a\u95f4 \u7ec4 \uff0c\u6bcf\u4e2a\u533a\u95f4 \u53ea \u5c5e\u4e8e\u4e00\u4e2a\u7ec4\uff0c\u4e14\u540c\u4e00\u4e2a\u7ec4\u4e2d\u4efb\u610f\u4e24\u4e2a\u533a\u95f4 \u4e0d\u76f8\u4ea4 \u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de \u6700\u5c11 \u9700\u8981\u5212\u5206\u6210\u591a\u5c11\u4e2a\u7ec4\u3002</p> <p>\u5982\u679c\u4e24\u4e2a\u533a\u95f4\u8986\u76d6\u7684\u8303\u56f4\u6709\u91cd\u53e0\uff08\u5373\u81f3\u5c11\u6709\u4e00\u4e2a\u516c\u5171\u6570\u5b57\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u8fd9\u4e24\u4e2a\u533a\u95f4\u662f \u76f8\u4ea4 \u7684\u3002\u6bd4\u65b9\u8bf4\u533a\u95f4[1, 5] \u548c[5, 8]\u76f8\u4ea4\u3002</p> <p>\u89e3\u6cd51: \u8d2a\u5fc3</p> <p>\u8fd9\u4e2a\u8d2a\u5fc3\u662f\u8ba9\u533a\u95f4\u4e4b\u95f4\u7684\u7a7a\u9699\u6700\u5c0f\uff0c\u4f18\u5148\u653e\u8fdb\u7ed3\u675f\u533a\u95f4\u5c0f\u7684\u7ec4 \u6700\u4e3b\u8981\u7684\u662f\u904d\u5386\u7684\u987a\u5e8f\uff0c\u5f00\u59cb\u533a\u95f4\u4ece\u5c0f\u5230\u5927\u904d\u5386\uff0c\u63a5\u5230\u7ed3\u675f\u533a\u95f4\u6700\u524d\u7684\u4f4d\u7f6e\u4e0a</p> <pre><code>class Solution {\n    public int minGroups(int[][] intervals) {\n        Arrays.sort(intervals, Comparator.comparingInt(a -&gt; a[0]));\n        PriorityQueue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;();\n        for (int[] e : intervals) {\n            if (heap.size() == 0) {\n                heap.add(e[1]);\n                continue;\n            }\n            Integer min = heap.element();\n            if (min &lt; e[0]) {\n                heap.remove();\n            }\n            heap.add(e[1]);\n        }\n        return heap.size();\n    }\n}\n</code></pre> <p>\u89e3\u6cd52: \u6392\u961f\u4e0a\u8f66</p> <p>start \u4e0a\u8f66\uff0cend \u4e0b\u8f66\uff0c\u76f4\u63a5\u6c42\u9ad8\u5ea6</p> <pre><code>class Solution {\n    public int minGroups(int[][] intervals) {\n        int max = intervals[0][1];\n        for (int[] interval : intervals) {\n            max = Math.max(max, interval[1]);\n        }\n        int[] diff = new int[max + 2];\n        for (int[] interval : intervals) {\n            diff[interval[0]] += 1;\n            diff[interval[1] + 1] -= 1;\n        }\n        int sum = 0, res = 0;\n        for (int i = 1; i &lt;= max; i++) {\n            sum += diff[i];\n            res = Math.max(res, sum);\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%8C%BA%E9%97%B4/#_5","title":"\u91cd\u53e0\u533a\u95f4\u957f\u5ea6","text":""},{"location":"leetcode/%E5%8C%BA%E9%97%B4/#2409-easy","title":"2409. \u7edf\u8ba1\u5171\u540c\u5ea6\u8fc7\u7684\u65e5\u5b50\u6570 easy","text":"<p>Alice \u548c Bob \u8ba1\u5212\u5206\u522b\u53bb\u7f57\u9a6c\u5f00\u4f1a\u3002</p> <p>\u7ed9\u4f60\u56db\u4e2a\u5b57\u7b26\u4e32 arriveAlice \uff0cleaveAlice \uff0carriveBob \u548c leaveBob \u3002Alice \u4f1a\u5728\u65e5\u671f arriveAlice \u5230 leaveAlice \u4e4b\u95f4\u5728\u57ce\u5e02\u91cc\uff08\u65e5\u671f\u4e3a\u95ed\u533a\u95f4\uff09\uff0c\u800c Bob \u5728\u65e5\u671f arriveBob \u5230 leaveBob \u4e4b\u95f4\u5728\u57ce\u5e02\u91cc\uff08\u65e5\u671f\u4e3a\u95ed\u533a\u95f4\uff09\u3002\u6bcf\u4e2a\u5b57\u7b26\u4e32\u90fd\u5305\u542b 5 \u4e2a\u5b57\u7b26\uff0c\u683c\u5f0f\u4e3a\"MM-DD\"\uff0c\u5bf9\u5e94\u7740\u4e00\u4e2a\u65e5\u671f\u7684\u6708\u548c\u65e5\u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de Alice\u548c Bob \u540c\u65f6\u5728\u7f57\u9a6c\u7684\u5929\u6570\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6240\u6709\u65e5\u671f\u90fd\u5728 \u540c\u4e00\u4e2a \u81ea\u7136\u5e74\uff0c\u800c\u4e14 \u4e0d\u662f \u95f0\u5e74\u3002\u6bcf\u4e2a\u6708\u4efd\u7684\u5929\u6570\u5206\u522b\u4e3a\uff1a[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\u3002</p> <p>\u5148\u6c42\u51fa\u91cd\u53e0\u533a\u95f4\u957f\u5ea6\uff0c\u7136\u540e\u4e24\u79cd\u601d\u8def\uff1a1. \u5206\u522b\u6c42\u5f00\u59cb\u7ed3\u675f\u65f6\u95f4\u662f\u4e00\u5e74\u4e2d\u7684\u7b2c\u51e0\u5929\uff0c\u76f8\u51cf 2. \u5206\u522b\u8ba1\u7b97\u6708\u548c\u65e5</p> <pre><code>class Solution {\n    public int countDaysTogether(String arriveAlice, String leaveAlice, String arriveBob, String leaveBob) {\n        int[] arr = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\n        String start = arriveAlice.compareTo(arriveBob) &gt; 0 ? arriveAlice : arriveBob;\n        String end = leaveAlice.compareTo(leaveBob) &gt; 0 ? leaveBob : leaveAlice;\n\n        if (end.compareTo(start) &lt; 0) return 0;\n\n        String[] startarr = start.split(\"-\");\n        String[] endarr = end.split(\"-\");\n        // \u8bbe\u60f3\u53ea\u6709\u4e24\u4e2a\u6708\uff0c\u628a\u7b2c\u4e8c\u4e2a\u6708\u7684\u5929\u6570\u632a\u5230\u7b2c\u4e00\u4e2a\u6708\n        int res = 0;\n        int day = Integer.parseInt(endarr[1]) - Integer.parseInt(startarr[1]);\n        res += day;\n        for (int i = Integer.parseInt(startarr[0]); i &lt; Integer.parseInt(endarr[0]); i++) {\n            res += arr[i];\n        }\n        return res + 1;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%8C%BA%E9%97%B4/#6214-easy","title":"6214. \u5224\u65ad\u4e24\u4e2a\u4e8b\u4ef6\u662f\u5426\u5b58\u5728\u51b2\u7a81 easy","text":"<p>\u7ed9\u4f60\u4e24\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 event1 \u548c event2 \uff0c\u8868\u793a\u53d1\u751f\u5728\u540c\u4e00\u5929\u7684\u4e24\u4e2a\u95ed\u533a\u95f4\u65f6\u95f4\u6bb5\u4e8b\u4ef6\uff0c\u5176\u4e2d\uff1a</p> <ul> <li>event1 = [startTime1, endTime1] \u4e14</li> <li>event2 = [startTime2, endTime2]</li> </ul> <p>\u4e8b\u4ef6\u7684\u65f6\u95f4\u4e3a\u6709\u6548\u7684 24 \u5c0f\u65f6\u5236\u4e14\u6309 HH:MM \u683c\u5f0f\u7ed9\u51fa\u3002</p> <p>\u5f53\u4e24\u4e2a\u4e8b\u4ef6\u5b58\u5728\u67d0\u4e2a\u975e\u7a7a\u7684\u4ea4\u96c6\u65f6\uff08\u5373\uff0c\u67d0\u4e9b\u65f6\u523b\u662f\u4e24\u4e2a\u4e8b\u4ef6\u90fd\u5305\u542b\u7684\uff09\uff0c\u5219\u8ba4\u4e3a\u51fa\u73b0 \u51b2\u7a81 \u3002</p> <p>\u5982\u679c\u4e24\u4e2a\u4e8b\u4ef6\u4e4b\u95f4\u5b58\u5728\u51b2\u7a81\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002</p> <p>\u627e\u51fa\u8c01\u5148, \u6bd4\u8f83\u5373\u53ef</p> <pre><code>class Solution {\n    public boolean haveConflict(String[] event1, String[] event2) {\n        String[] zero, one;\n        if (event1[0].compareTo(event2[0]) &lt; 0) {\n            zero = event1;\n            one = event2;\n        } else {\n            zero = event2;\n            one = event1;\n        }\n        return one[0].compareTo(zero[1]) &lt;= 0;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%9B%BE/","title":"\u56fe","text":""},{"location":"leetcode/%E5%9B%BE/#_2","title":"\u4e8c\u5206\u56fe","text":"<p>\u5982\u679c\u53ef\u4ee5\u7528\u4e24\u79cd\u989c\u8272\u5bf9\u56fe\u4e2d\u7684\u8282\u70b9\u8fdb\u884c\u7740\u8272\uff0c\u5e76\u4e14\u4fdd\u8bc1\u76f8\u90bb\u7684\u8282\u70b9\u989c\u8272\u4e0d\u540c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u56fe\u5c31\u662f\u4e8c\u5206\u56fe\u3002</p> <p>\u4e8c\u5206\u56fe\u4e0d\u5b58\u5728\u957f\u5ea6\u4e3a\u5947\u6570\u7684\u73af - \u56e0\u4e3a\u6bcf\u4e00\u6761\u8fb9\u90fd\u662f\u4ece\u4e00\u4e2a\u96c6\u5408\u8d70\u5230\u53e6\u4e00\u4e2a\u96c6\u5408\uff0c\u53ea\u6709\u8d70\u5076\u6570\u6b21\u624d\u53ef\u80fd\u56de\u5230\u540c\u4e00\u4e2a\u96c6\u5408\u3002</p>"},{"location":"leetcode/%E5%9B%BE/#785-mid","title":"785. \u5224\u65ad\u4e8c\u5206\u56fe mid","text":"<p>\u5b58\u5728\u4e00\u4e2a \u65e0\u5411\u56fe \uff0c\u56fe\u4e2d\u6709 n \u4e2a\u8282\u70b9\u3002\u5176\u4e2d\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u4ecb\u4e8e 0 \u5230 n - 1 \u4e4b\u95f4\u7684\u552f\u4e00\u7f16\u53f7\u3002\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4 graph \uff0c\u5176\u4e2d graph[u] \u662f\u4e00\u4e2a\u8282\u70b9\u6570\u7ec4\uff0c\u7531\u8282\u70b9 u \u7684\u90bb\u63a5\u8282\u70b9\u7ec4\u6210\u3002\u5f62\u5f0f\u4e0a\uff0c\u5bf9\u4e8e graph[u] \u4e2d\u7684\u6bcf\u4e2a v \uff0c\u90fd\u5b58\u5728\u4e00\u6761\u4f4d\u4e8e\u8282\u70b9 u \u548c\u8282\u70b9 v \u4e4b\u95f4\u7684\u65e0\u5411\u8fb9\u3002\u8be5\u65e0\u5411\u56fe\u540c\u65f6\u5177\u6709\u4ee5\u4e0b\u5c5e\u6027\uff1a</p> <ul> <li>\u4e0d\u5b58\u5728\u81ea\u73af\uff08graph[u] \u4e0d\u5305\u542b u\uff09\u3002</li> <li>\u4e0d\u5b58\u5728\u5e73\u884c\u8fb9\uff08graph[u] \u4e0d\u5305\u542b\u91cd\u590d\u503c\uff09\u3002</li> <li>\u5982\u679c v \u5728 graph[u] \u5185\uff0c\u90a3\u4e48 u \u4e5f\u5e94\u8be5\u5728 graph[v] \u5185\uff08\u8be5\u56fe\u662f\u65e0\u5411\u56fe\uff09</li> <li>\u8fd9\u4e2a\u56fe\u53ef\u80fd\u4e0d\u662f\u8fde\u901a\u56fe\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e24\u4e2a\u8282\u70b9 u \u548c v \u4e4b\u95f4\u53ef\u80fd\u4e0d\u5b58\u5728\u4e00\u6761\u8fde\u901a\u5f7c\u6b64\u7684\u8def\u5f84\u3002</li> </ul> <p>\u4e8c\u5206\u56fe \u5b9a\u4e49\uff1a\u5982\u679c\u80fd\u5c06\u4e00\u4e2a\u56fe\u7684\u8282\u70b9\u96c6\u5408\u5206\u5272\u6210\u4e24\u4e2a\u72ec\u7acb\u7684\u5b50\u96c6 A \u548c B \uff0c\u5e76\u4f7f\u56fe\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9\u7684\u4e24\u4e2a\u8282\u70b9\u4e00\u4e2a\u6765\u81ea A \u96c6\u5408\uff0c\u4e00\u4e2a\u6765\u81ea B \u96c6\u5408\uff0c\u5c31\u5c06\u8fd9\u4e2a\u56fe\u79f0\u4e3a \u4e8c\u5206\u56fe \u3002</p> <p>\u5982\u679c\u56fe\u662f\u4e8c\u5206\u56fe\uff0c\u8fd4\u56de true\uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002</p> <pre><code>class Solution {\n    public boolean isBipartite(int[][] graph) {\n        int[] colors = new int[graph.length];\n        for (int i = 0; i &lt; graph.length; i++) {\n            // DFS \u8fc7\u7a0b\u4e2d\u5c31\u4f1a\u67d3\u8272, \u76f8\u8fde\u7684\u56fe\u4e0d\u4f1a\u56e0\u4e3a\u987a\u5e8f\u51b2\u7a81\n            if (colors[i] == 0 &amp;&amp; !isBipartite(colors, graph, i, 1)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private boolean isBipartite(int[] colors, int[][] graph,\n                                int i, int c) {\n        if (colors[i] != 0) return colors[i] == c;\n        colors[i] = c;\n        for (int g : graph[i]) {\n            if (!isBipartite(colors, graph, g, -c)) return false;\n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%9B%BE/#_3","title":"\u5e76\u67e5\u96c6","text":"<p>\u4e3b\u8981\u573a\u666f, \u65e0\u5411\u56fe\u8fde\u901a\u6027 \u627e\u73af \u5e76\u67e5\u96c6\u662f\u7ba1\u7406\u5143\u7d20\u6240\u5c5e\u96c6\u5408\u7684\u7684\u68ee\u6797, \u4e3b\u8981\u64cd\u4f5c\u662f\u67e5\u8be2 &amp; \u5408\u5e76</p> <p>\u901a\u5e38\u7528\u4e8e\u5224\u5b9a\u662f\u5426\u540c\u5c5e\u4e00\u96c6\u5408</p> <ul> <li>\u5408\u5e76: \u5408\u5e76\u4e24\u4e2a\u5143\u7d20\u6240\u5c5e\u7684\u96c6\u5408</li> <li>\u67e5\u8be2: \u67e5\u8be2\u67d0\u4e2a\u5143\u7d20\u6240\u5c5e\u7684\u96c6\u5408(\u67e5\u8be2\u6811\u7684\u6839\u8282\u70b9)</li> </ul> <p>\u521d\u59cb\u5316: \u6bcf\u4e2a\u5143\u7d20\u90fd\u5c5e\u4e8e\u4e00\u4e2a\u5355\u72ec\u7684\u96c6\u5408, \u6839\u8282\u70b9\u7684\u7236\u4eb2\u8bbe\u7f6e\u4e3a\u81ea\u5df1 \u67e5\u8be2: \u627e\u6700\u7ec8\u7684\u7236\u8282\u70b9 \u5408\u5e76: \u5c06\u4e00\u68f5\u6811\u8fde\u5728\u53e6\u4e00\u9897\u6811\u4e0a \u5220\u9664: \u5c06\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u8282\u70b9\u8bbe\u7f6e\u4e3a\u81ea\u5df1</p>"},{"location":"leetcode/%E5%9B%BE/#684-mid","title":"684. \u5197\u4f59\u8fde\u63a5 mid","text":"<p>\u5251\u6307 Offer II 118. \u591a\u4f59\u7684\u8fb9</p> <p>\u6811\u53ef\u4ee5\u770b\u6210\u662f\u4e00\u4e2a\u8fde\u901a\u4e14 \u65e0\u73af \u7684 \u65e0\u5411 \u56fe\u3002</p> <p>\u7ed9\u5b9a\u5f80\u4e00\u68f5 n \u4e2a\u8282\u70b9 (\u8282\u70b9\u503c 1\uff5en) \u7684\u6811\u4e2d\u6dfb\u52a0\u4e00\u6761\u8fb9\u540e\u7684\u56fe\u3002\u6dfb\u52a0\u7684\u8fb9\u7684\u4e24\u4e2a\u9876\u70b9\u5305\u542b\u5728 1 \u5230 n \u4e2d\u95f4\uff0c\u4e14\u8fd9\u6761\u9644\u52a0\u7684\u8fb9\u4e0d\u5c5e\u4e8e\u6811\u4e2d\u5df2\u5b58\u5728\u7684\u8fb9\u3002\u56fe\u7684\u4fe1\u606f\u8bb0\u5f55\u4e8e\u957f\u5ea6\u4e3a n \u7684\u4e8c\u7ef4\u6570\u7ec4 edges \uff0cedges[i] = [ai, bi] \u8868\u793a\u56fe\u4e2d\u5728 ai \u548c bi \u4e4b\u95f4\u5b58\u5728\u4e00\u6761\u8fb9\u3002</p> <p>\u8bf7\u627e\u51fa\u4e00\u6761\u53ef\u4ee5\u5220\u53bb\u7684\u8fb9\uff0c\u5220\u9664\u540e\u53ef\u4f7f\u5f97\u5269\u4f59\u90e8\u5206\u662f\u4e00\u4e2a\u6709\u7740 n \u4e2a\u8282\u70b9\u7684\u6811\u3002\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u5219\u8fd4\u56de\u6570\u7ec4 edges \u4e2d\u6700\u540e\u51fa\u73b0\u7684\u8fb9\u3002</p> <pre><code>class Solution {\n    // \u76f4\u63a5 mapping node ==&gt; parent\n    int[] parent;\n\n    public int[] findRedundantConnection(int[][] edges) {\n        int n = edges.length;\n        parent = new int[n + 1];\n        init(n);\n        for (int[] edge : edges) {\n            int node1 = edge[0];\n            int node2 = edge[1];\n            // \u540e\u52a0\u76842\u4e2a\u70b9\u540c\u5c5e\u4e00\u4e2aparent\n            if (find(node1) != find(node2)) {\n                union(node1, node2);\n            } else return edge;\n        }\n        return new int[]{};\n    }\n\n    private void init(int n) {\n        for (int i = 1; i &lt;= n; i++) {\n            parent[i] = i;\n        }\n    }\n\n    private int find(int idx) {\n        if (parent[idx] != idx) {\n            parent[idx] = find(parent[idx]);\n        }\n        return parent[idx];\n    }\n\n    private void union(int idx1, int idx2) {\n        int x = find(idx1);\n        int y = find(idx2);\n        parent[y] = x;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%9B%BE/#_4","title":"\u62d3\u6251\u6392\u5e8f","text":"<p>\u4e3b\u8981\u573a\u666f: \u6709\u5411\u56fe\u4f9d\u8d56\u6027 Kahn \u7b97\u6cd5</p> <ul> <li>\u7edf\u8ba1\u6240\u6709\u8282\u70b9\u7684\u5165\u5ea6, \u7edf\u8ba1\u6240\u6709\u8282\u70b9\u7684\u90bb\u63a5\u70b9</li> <li>\u904d\u5386\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u70b9, \u90fd\u53ef\u4ee5\u6392</li> <li>\u5b83\u6240\u6709\u7684\u90bb\u63a5\u70b9\u7684\u5165\u5ea6-1, \u7136\u540e\u5982\u679c\u4e3a0\u4e5f\u6392</li> </ul>"},{"location":"leetcode/%E5%9B%BE/#2392-hard","title":"2392. \u7ed9\u5b9a\u6761\u4ef6\u4e0b\u6784\u9020\u77e9\u9635 hard","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6b63\u6574\u6570 k \uff0c\u540c\u65f6\u7ed9\u4f60\uff1a</p> <ul> <li>\u4e00\u4e2a\u5927\u5c0f\u4e3a n \u7684\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 rowConditions \uff0c\u5176\u4e2d rowConditions[i] = [abovei, belowi] \u548c</li> <li>\u4e00\u4e2a\u5927\u5c0f\u4e3a m \u7684\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 colConditions \uff0c\u5176\u4e2d colConditions[i] = [lefti, righti] \u3002</li> </ul> <p>\u4e24\u4e2a\u6570\u7ec4\u91cc\u7684\u6574\u6570\u90fd\u662f 1 \u5230 k \u4e4b\u95f4\u7684\u6570\u5b57\u3002</p> <p>\u4f60\u9700\u8981\u6784\u9020\u4e00\u4e2a k x k \u7684\u77e9\u9635\uff0c1 \u5230 k \u6bcf\u4e2a\u6570\u5b57\u9700\u8981 \u6070\u597d\u51fa\u73b0\u4e00\u6b21 \u3002\u5269\u4f59\u7684\u6570\u5b57\u90fd\u662f 0 \u3002</p> <p>\u77e9\u9635\u8fd8\u9700\u8981\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a</p> <ul> <li>\u5bf9\u4e8e\u6240\u6709 0 \u5230 n - 1 \u4e4b\u95f4\u7684\u4e0b\u6807 i \uff0c\u6570\u5b57 abovei \u6240\u5728\u7684 \u884c \u5fc5\u987b\u5728\u6570\u5b57 belowi \u6240\u5728\u884c\u7684\u4e0a\u9762\u3002</li> <li>\u5bf9\u4e8e\u6240\u6709 0 \u5230 m - 1 \u4e4b\u95f4\u7684\u4e0b\u6807 i \uff0c\u6570\u5b57 lefti \u6240\u5728\u7684 \u5217 \u5fc5\u987b\u5728\u6570\u5b57 righti \u6240\u5728\u5217\u7684\u5de6\u8fb9\u3002</li> </ul> <p>\u8fd4\u56de\u6ee1\u8db3\u4e0a\u8ff0\u8981\u6c42\u7684 \u4efb\u610f \u77e9\u9635\u3002\u5982\u679c\u4e0d\u5b58\u5728\u7b54\u6848\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u7684\u77e9\u9635\u3002</p> <p>\u62d3\u6251\u6392\u5e8f \u6c34\u5e73\u548c\u5782\u76f4\u5206\u522b\u62d3\u6251\u6392\u5e8f, \u7136\u540e\u518d\u4ece\u4e00\u7ef4\u62c9\u6210\u4e8c\u7ef4</p> <pre><code>class Solution {\n    public int[][] buildMatrix(int k, int[][] rowConditions, int[][] colConditions) {\n        int[] row = topoSort(k, rowConditions);\n        if (row.length &lt; k) return new int[][]{};\n        int[] col = topoSort(k, colConditions);\n        if (col.length &lt; k) return new int[][]{};\n\n        int[] revertMap = new int[k];\n        // \u5c06\u6c34\u5e73\u7684\u62d3\u6251\u6392\u5e8f\u6620\u5c04 val &lt;==&gt; idx\n        for (int i = 0; i &lt; k; ++i) {\n            revertMap[col[i]] = i;\n        }\n        int[][] ans = new int[k][k];\n        for (int i = 0; i &lt; k; ++i) {\n            int j = revertMap[row[i]];\n            ans[i][j] = row[i] + 1;\n        }\n        return ans;\n    }\n\n    private int[] topoSort(int k, int[][] conditions) {\n        List&lt;Integer&gt;[] edges = new ArrayList[k];\n        Arrays.setAll(edges, e -&gt; new ArrayList&lt;&gt;());\n\n        int[] inDegree = new int[k];\n        for (int[] e : conditions) {\n            int x = e[0] - 1, y = e[1] - 1;\n            edges[x].add(y);\n            inDegree[y]++;\n        }\n\n        List&lt;Integer&gt; order = new ArrayList&lt;&gt;(k);\n        Deque&lt;Integer&gt; que = new LinkedList&lt;&gt;();\n        for (int i = 0; i &lt; k; ++i) {\n            if (inDegree[i] == 0) que.add(i);\n        }\n        while (!que.isEmpty()) {\n            Integer i = que.remove();\n            order.add(i);\n            for (Integer y : edges[i]) {\n                if (--inDegree[y] == 0) que.add(y);\n            }\n        }\n        return order.stream()\n                .mapToInt(x -&gt; x)\n                .toArray();\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%9B%BE/#_5","title":"\u5165\u5ea6\u51fa\u5ea6","text":""},{"location":"leetcode/%E5%9B%BE/#lcp-62-mid","title":"LCP 62. \u4ea4\u901a\u67a2\u7ebd mid","text":"<p>\u51fa\u5ea6\u4e3a0, \u5165\u5ea6\u4e3a n-1</p> <pre><code>class Solution {\n    public int transportationHub(int[][] path) {\n        int[] in = new int[1001];\n        int[] out = new int[1001];\n        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();\n        for (int[] edge : path) {\n            in[edge[1]]++;\n            out[edge[0]]++;\n            set.add(edge[0]);\n            set.add(edge[1]);\n        }\n        for (Integer i : set) {\n            if (out[i] == 0 &amp;&amp; in[i] == set.size() - 1) return i;\n        }\n        return -1;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%9C%BA%E6%99%AF%E4%BB%BF%E7%9C%9F/","title":"\u573a\u666f\u4eff\u771f","text":""},{"location":"leetcode/%E5%9C%BA%E6%99%AF%E4%BB%BF%E7%9C%9F/#2391-mid","title":"2391. \u6536\u96c6\u5783\u573e\u7684\u6700\u5c11\u603b\u65f6\u95f4 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u5b57\u7b26\u4e32\u6570\u7ec4 garbage \uff0c\u5176\u4e2d garbage[i]\u8868\u793a\u7b2c i \u4e2a\u623f\u5b50\u7684\u5783\u573e\u96c6\u5408\u3002garbage[i]\u53ea\u5305\u542b\u5b57\u7b26 'M'\uff0c'P' \u548c 'G'\uff0c\u4f46\u53ef\u80fd\u5305\u542b\u591a\u4e2a\u76f8\u540c\u5b57\u7b26\uff0c\u6bcf\u4e2a\u5b57\u7b26\u5206\u522b\u8868\u793a\u4e00\u5355\u4f4d\u7684\u91d1\u5c5e\u3001\u7eb8\u548c\u73bb\u7483\u3002\u5783\u573e\u8f66\u6536\u62fe \u4e00 \u5355\u4f4d\u7684\u4efb\u4f55\u4e00\u79cd\u5783\u573e\u90fd\u9700\u8981\u82b1\u8d39 1 \u5206\u949f\u3002</p> <p>\u540c\u65f6\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4 travel \uff0c\u5176\u4e2d travel[i]\u662f\u5783\u573e\u8f66\u4ece\u623f\u5b50 i \u884c\u9a76\u5230\u623f\u5b50 i + 1 \u9700\u8981\u7684\u5206\u949f\u6570\u3002</p> <p>\u57ce\u5e02\u91cc\u603b\u5171\u6709\u4e09\u8f86\u5783\u573e\u8f66\uff0c\u5206\u522b\u6536\u62fe\u4e09\u79cd\u5783\u573e\u3002\u6bcf\u8f86\u5783\u573e\u8f66\u90fd\u4ece\u623f\u5b50 0 \u51fa\u53d1\uff0c\u6309\u987a\u5e8f \u5230\u8fbe\u6bcf\u4e00\u680b\u623f\u5b50\u3002\u4f46\u5b83\u4eec \u4e0d\u662f\u5fc5\u987b \u5230\u8fbe\u6240\u6709\u7684\u623f\u5b50\u3002</p> <p>\u4efb\u4f55\u65f6\u523b\u53ea\u6709 \u4e00\u8f86 \u5783\u573e\u8f66\u5904\u5728\u4f7f\u7528\u72b6\u6001\u3002\u5f53\u4e00\u8f86\u5783\u573e\u8f66\u5728\u884c\u9a76\u6216\u8005\u6536\u62fe\u5783\u573e\u7684\u65f6\u5019\uff0c\u53e6\u5916\u4e24\u8f86\u8f66 \u4e0d\u80fd \u505a\u4efb\u4f55\u4e8b\u60c5\u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de\u6536\u62fe\u5b8c\u6240\u6709\u5783\u573e\u9700\u8981\u82b1\u8d39\u7684 \u6700\u5c11 \u603b\u5206\u949f\u6570\u3002</p> <p>\u53ea\u6709\u524d\u7f00\u548c\u4f18\u5316</p> <pre><code>class Solution {\n\n    // \u79fb\u52a8\u65f6\u95f4 + \u6536\u62fe\u65f6\u95f4 \u90fd\u662f\u4e32\u884c\n    public int garbageCollection(String[] garbage, int[] travel) {\n        int[] sum = new int[travel.length + 1];\n        int pre = 0;\n        for (int i = 1; i &lt;= travel.length; i++) {\n            sum[i] = pre += travel[i - 1];\n        }\n\n        int carM = 0, carP = 0, carG = 0;\n        int mIdx = 0, pIdx = 0, gIdx = 0;\n        for (int i = 0; i &lt; garbage.length; i++) {\n            String s = garbage[i];\n            boolean fm = false, fp = false, fg = false;\n            for (char c : s.toCharArray()) {\n                switch (c) {\n                    case 'M':\n                        fm = true;\n                        carM++;\n                        break;\n                    case 'P':\n                        fp = true;\n                        carP++;\n                        break;\n                    case 'G':\n                        fg = true;\n                        carG++;\n                        break;\n                }\n            }\n            if (fm) {\n                carM += sum[i] - sum[mIdx];\n                mIdx = i;\n            }\n            if (fp) {\n                carP += sum[i] - sum[pIdx];\n                pIdx = i;\n            }\n            if (fg) {\n                carG += sum[i] - sum[gIdx];\n                gIdx = i;\n            }\n        }\n        return carM + carP + carG;\n    }\n}\n</code></pre> <p>\u5927\u91cf\u4f18\u5316\u4e4b\u540e</p> <pre><code>class Solution {\n    public int garbageCollection(String[] garbage, int[] travel) {\n        // 0 \u5148\u6c42\u524d\u7f00\u548c, [i]\u8868\u793a\u5230\u7b2ci\u4e2a\u4f4d\u7f6e\u6240\u9700\u7684\u65f6\u95f4\n        final int n = garbage.length;\n        int[] sum = new int[n];\n        int t = 0;\n        for (int i = 1; i &lt; n; i++) {\n            sum[i] = t += travel[i - 1];\n        }\n        // \u79fb\u52a8\u65f6\u95f4\n        int[] ls = {0, 0, 0};\n        int res = 0;\n        // 1 \u76f4\u63a5\u8ba1\u7b97\u5355\u7eaf\u6536\u96c6\u65f6\u95f4\n        for (String s : garbage) {\n            res += s.length();\n        }\n        int color = 0;\n        // 2 \u5012\u5e8f, \u76f4\u63a5\u5229\u7528\u524d\u7f00\u548c\n        // 3 \u8fd8\u6709\u526a\u679d, \u5982\u679c\u4e09\u79cd\u989c\u8272\u7684\u8def\u5f84\u90fd\u51d1\u9f50\u4e86, \u5c31\u4e0d\u7528\u518d\u7edf\u8ba1\u4e86\n        for (int i = n - 1; i &gt;= 0 &amp;&amp; color &lt; 3; i--) {\n            String s = garbage[i];\n            for (char c : s.toCharArray()) {\n                switch (c) {\n                    case 'M':\n                        if (ls[0] == 0) {\n                            color++;\n                            ls[0] = sum[i];\n                        }\n                        break;\n                    case 'P':\n                        if (ls[1] == 0) {\n                            color++;\n                            ls[1] = sum[i];\n                        }\n                        break;\n                    case 'G':\n                        if (ls[2] == 0) {\n                            color++;\n                            ls[2] = sum[i];\n                        }\n                        break;\n                }\n            }\n        }\n        res += ls[0] + ls[1] + ls[2];\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%A4%9A%E5%B0%91%E7%A7%8D%E4%B8%8D%E5%90%8C/","title":"\u591a\u5c11\u79cd\u4e0d\u540c","text":"<p>\u679a\u4e3e\u901a\u5e38\u590d\u6742\u5ea6 $O(2^n)$ \u8003\u8651 \u80cc\u5305</p> <p>\u80cc\u5305\u5c31\u662f\u7528\u8fde\u7eed\u7684\u7a7a\u95f4, \u8bb0\u5fc6\u80fd\u586b\u6ee1\u80cc\u5305\u7684\u7ec4\u5408\u6570</p>"},{"location":"leetcode/%E5%A4%9A%E5%B0%91%E7%A7%8D%E4%B8%8D%E5%90%8C/#_2","title":"\u591a\u5c11\u79cd\u4e0d\u540c\u64cd\u4f5c","text":""},{"location":"leetcode/%E5%A4%9A%E5%B0%91%E7%A7%8D%E4%B8%8D%E5%90%8C/#2400-k-mid","title":"2400. \u6070\u597d\u79fb\u52a8 k \u6b65\u5230\u8fbe\u67d0\u4e00\u4f4d\u7f6e\u7684\u65b9\u6cd5\u6570\u76ee mid","text":"<p>\u7ed9\u4f60\u4e24\u4e2a \u6b63 \u6574\u6570 startPos \u548c endPos \u3002\u6700\u521d\uff0c\u4f60\u7ad9\u5728 \u65e0\u9650 \u6570\u8f74\u4e0a\u4f4d\u7f6e startPos \u5904\u3002\u5728\u4e00\u6b65\u79fb\u52a8\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5411\u5de6\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6b63\u6574\u6570 k \uff0c\u8fd4\u56de\u4ece startPos \u51fa\u53d1\u3001\u6070\u597d \u79fb\u52a8 k \u6b65\u5e76\u5230\u8fbe endPos \u7684 \u4e0d\u540c \u65b9\u6cd5\u6570\u76ee\u3002\u7531\u4e8e\u7b54\u6848\u53ef\u80fd\u4f1a\u5f88\u5927\uff0c\u8fd4\u56de\u5bf9 $10^9 + 7$ \u53d6\u4f59 \u7684\u7ed3\u679c\u3002</p> <p>\u5982\u679c\u6240\u6267\u884c\u79fb\u52a8\u7684\u987a\u5e8f\u4e0d\u5b8c\u5168\u76f8\u540c\uff0c\u5219\u8ba4\u4e3a\u4e24\u79cd\u65b9\u6cd5\u4e0d\u540c\u3002</p> <p>\u6ce8\u610f\uff1a\u6570\u8f74\u5305\u542b\u8d1f\u6574\u6570\u3002</p> <p>\u89e3\u6cd51: \u7ec4\u5408\u6570</p> <p>\u5de6 l \u6b65, \u53f3 r \u6b65: \u6ce8\u610f, \u662fk\u6b65, \u4e0d\u662fk\u4e2a\u4f4d\u7f6e, \u53cd\u590d\u6a2a\u8df3\u4e5f\u5141\u8bb8; \u800c\u4e14\u6b65\u4f10\u662f\u8fde\u7eed\u7684, \u6ca1\u6709\u6392\u5217 r-l = m; l+r = k; l = (k-m)/2 $ C_k^l = C_{k-1}^{l} + C_{k-1}^{l-1} $</p> <pre><code>class Solution {\n    private static final int mod = (int) 1e9 + 7;\n\n    public int numberOfWays(int startPos, int endPos, int k) {\n        // \u7edd\u5bf9\u8ddd\u79bb\n        int m = Math.abs(startPos - endPos);\n        // \u5947\u6570\u767d\u626f \n        if (((k - m) &amp; 1) == 1 || m &gt; k) return 0;\n        int l = (k - m) / 2;\n        l = Math.min(l, k - l);\n        long[][] c = new long[k + 1][l + 1];\n        for (int i = 0; i &lt;= k; i++) {\n            c[i][0] = 1;\n            for (int j = 1; i &gt; 0 &amp;&amp; j &lt;= l; j++) {\n                c[i][j] = (c[i - 1][j] + c[i - 1][j - 1]) % mod;\n            }\n        }\n        return (int) c[k][l];\n    }\n}\n</code></pre> <p>\u89e3\u6cd52: \u9006\u5143 \u8d39\u9a6c\u5c0f\u5b9a\u7406</p>"},{"location":"leetcode/%E5%A4%9A%E5%B0%91%E7%A7%8D%E4%B8%8D%E5%90%8C/#_3","title":"\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u7ed3\u6784","text":""},{"location":"leetcode/%E5%A4%9A%E5%B0%91%E7%A7%8D%E4%B8%8D%E5%90%8C/#377-iv-mid","title":"377. \u7ec4\u5408\u603b\u548c \u2163 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u7531 \u4e0d\u540c \u6574\u6570\u7ec4\u6210\u7684\u6570\u7ec4 nums \uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u6574\u6570 target \u3002\u8bf7\u4f60\u4ece nums \u4e2d\u627e\u51fa\u5e76\u8fd4\u56de\u603b\u548c\u4e3a target \u7684\u5143\u7d20\u7ec4\u5408\u7684\u4e2a\u6570\u3002</p> <p>\u80cc\u5305</p> <pre><code>class Solution {\n    public int combinationSum4(int[] nums, int target) {\n        int[] dp = new int[target + 1];\n        dp[0] = 1;\n        for (int i = 1; i &lt;= target; i++) {\n            for (int num : nums) {\n                if (num &gt; i) continue;\n                dp[i] += dp[i - num];\n            }\n        }\n        return dp[target];\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%A4%9A%E5%B0%91%E7%A7%8D%E4%B8%8D%E5%90%8C/#494-mid","title":"494. \u76ee\u6807\u548c mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570 target \u3002 \u5411\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u6574\u6570\u524d\u6dfb\u52a0 '+' \u6216 '-' \uff0c\u7136\u540e\u4e32\u8054\u8d77\u6240\u6709\u6574\u6570\uff0c\u53ef\u4ee5\u6784\u9020\u4e00\u4e2a \u8868\u8fbe\u5f0f \uff1a \u4f8b\u5982\uff0cnums = [2, 1] \uff0c\u53ef\u4ee5\u5728 2 \u4e4b\u524d\u6dfb\u52a0 '+' \uff0c\u5728 1 \u4e4b\u524d\u6dfb\u52a0 '-' \uff0c\u7136\u540e\u4e32\u8054\u8d77\u6765\u5f97\u5230\u8868\u8fbe\u5f0f \"+2-1\" \u3002 \u8fd4\u56de\u53ef\u4ee5\u901a\u8fc7\u4e0a\u8ff0\u65b9\u6cd5\u6784\u9020\u7684\u3001\u8fd0\u7b97\u7ed3\u679c\u7b49\u4e8e target \u7684\u4e0d\u540c\u8868\u8fbe\u5f0f\u7684\u6570\u76ee\u3002</p> <p>\u89e3\u6cd51: DFS</p> <p>$O(2^n)$</p> <pre><code>class Solution {\n    public int findTargetSumWays(int[] nums, int target) {\n        return findTargetSumWays(nums, 0, target);\n    }\n\n    public int findTargetSumWays(int[] nums, int start, int target) {\n        if (start == nums.length)\n            return target == 0 ? 1 : 0;\n        return findTargetSumWays(nums, start + 1, target + nums[start]) +\n                findTargetSumWays(nums, start + 1, target - nums[start]);\n    }\n}\n</code></pre> <p>\u89e3\u6cd52: \u80cc\u5305</p> <p>\u80cc\u5305 $(sum\u2212neg)\u2212neg=sum\u22122\u22c5neg=target$ $neg=(sum\u2212target)/2$</p> <p>\u524di\u4e2a\u6570\u4e2d\u4efb\u610f\u9009\u62e9, \u6ee1\u8db3\u7ec4\u5408==j\u7684\u6570\u91cf $dp[i][j] = dp[i-1][j] + dp[i-1][j-num]$ \u9006\u5e8f\u6eda\u52a8 $dp[j] = dp[j] + dp[j-num]$</p> <pre><code>class Solution {\n    public int findTargetSumWays(int[] nums, int target) {\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n        }\n        int diff = sum - target;\n        if (diff &lt; 0 || diff % 2 != 0) return 0;\n\n        int n = nums.length, neg = diff / 2;\n\n        int[][] dp = new int[n + 1][neg + 1];\n        dp[0][0] = 1;\n        for (int i = 1; i &lt;= n; i++) {\n            int num = nums[i - 1];\n            for (int j = 0; j &lt;= neg; j++) {\n                dp[i][j] = dp[i - 1][j];\n                if (j &gt;= num) dp[i][j] += dp[i - 1][j - num];\n            }\n        }\n        return dp[n][neg];\n    }\n}\n</code></pre> <p>\u6eda\u52a8\u975e\u5e38\u7b80\u7ec3, \u5012\u5e8f\u8ba1\u7b97</p> <pre><code>class Solution {\n    boolean debug = false;\n\n    public int findTargetSumWays(int[] nums, int target) {\n        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n        }\n        if (target &lt; 0) target = -target;\n        int tot = sum - target;\n        if (tot &lt; 0 || tot % 2 != 0) return 0;\n        tot /= 2;\n        if (debug) System.out.println(\"tot=\" + tot);\n        int n = nums.length;\n        int[] dp = new int[tot + 1];\n        dp[0] = 1;\n        for (int i = 1; i &lt;= n; i++) {\n            int a = nums[i - 1];\n            for (int j = tot; j &gt;= a; j--) {\n                dp[j] += dp[j - a];\n            }\n        }\n        if (debug) System.out.println(Arrays.toString(dp));\n        return dp[tot];\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%A4%9A%E5%B0%91%E7%A7%8D%E4%B8%8D%E5%90%8C/#offer-46-mid","title":"\u5251\u6307 Offer 46. \u628a\u6570\u5b57\u7ffb\u8bd1\u6210\u5b57\u7b26\u4e32 mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u5b57\uff0c\u6211\u4eec\u6309\u7167\u5982\u4e0b\u89c4\u5219\u628a\u5b83\u7ffb\u8bd1\u4e3a\u5b57\u7b26\u4e32\uff1a0 \u7ffb\u8bd1\u6210 \u201ca\u201d \uff0c1 \u7ffb\u8bd1\u6210 \u201cb\u201d\uff0c\u2026\u2026\uff0c11 \u7ffb\u8bd1\u6210 \u201cl\u201d\uff0c\u2026\u2026\uff0c25 \u7ffb\u8bd1\u6210 \u201cz\u201d\u3002\u4e00\u4e2a\u6570\u5b57\u53ef\u80fd\u6709\u591a\u4e2a\u7ffb\u8bd1\u3002\u8bf7\u7f16\u7a0b\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u6765\u8ba1\u7b97\u4e00\u4e2a\u6570\u5b57\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u7ffb\u8bd1\u65b9\u6cd5\u3002</p> <p>DP</p> <pre><code>class Solution {\n    public int translateNum(int num) {\n        if (num &lt; 10) return 1;\n        List&lt;Integer&gt; list = new LinkedList&lt;&gt;();\n        while (num != 0) {\n            list.add(0, num % 10);\n            num /= 10;\n        }\n        int[] a = list.stream().mapToInt(o -&gt; o).toArray();\n\n        int[] dp = new int[a.length];\n        dp[0] = 1;\n        dp[1] = 1 + ((a[0] * 10 + a[1]) &gt;= 10 &amp;&amp; (a[0] * 10 + a[1]) &lt;= 25 ? 1 : 0);\n        for (int i = 2; i &lt; a.length; i++) {\n            dp[i] += dp[i - 1];\n            int two = a[i - 1] * 10 + a[i];\n            if (two &gt;= 10 &amp;&amp; two &lt;= 25) dp[i] += dp[i - 2];\n        }\n        return dp[a.length - 1];\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%A4%9A%E5%B0%91%E7%A7%8D%E4%B8%8D%E5%90%8C/#6364-mid","title":"6364. \u65e0\u5e73\u65b9\u5b50\u96c6\u8ba1\u6570 mid","text":"<p>hard, \u8fd9\u540a\u6bdb\u9898\u5f88\u96be</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4 nums \u3002</p> <p>\u5982\u679c\u6570\u7ec4 nums \u7684\u5b50\u96c6\u4e2d\u7684\u5143\u7d20\u4e58\u79ef\u662f\u4e00\u4e2a \u65e0\u5e73\u65b9\u56e0\u5b50\u6570 \uff0c\u5219\u8ba4\u4e3a\u8be5\u5b50\u96c6\u662f\u4e00\u4e2a \u65e0\u5e73\u65b9 \u5b50\u96c6\u3002</p> <p>\u65e0\u5e73\u65b9\u56e0\u5b50\u6570 \u662f\u65e0\u6cd5\u88ab\u9664 1 \u4e4b\u5916\u4efb\u4f55\u5e73\u65b9\u6570\u6574\u9664\u7684\u6570\u5b57\u3002</p> <p>\u8fd4\u56de\u6570\u7ec4 nums \u4e2d \u65e0\u5e73\u65b9 \u4e14 \u975e\u7a7a \u7684\u5b50\u96c6\u6570\u76ee\u3002\u56e0\u4e3a\u7b54\u6848\u53ef\u80fd\u5f88\u5927\uff0c\u8fd4\u56de\u5bf9 1E9 + 7 \u53d6\u4f59\u7684\u7ed3\u679c\u3002</p> <ul> <li>nums \u7684 \u975e\u7a7a\u5b50\u96c6 \u662f\u53ef\u4ee5\u7531\u5220\u9664 nums \u4e2d\u4e00\u4e9b\u5143\u7d20\uff08\u53ef\u4ee5\u4e0d\u5220\u9664\uff0c\u4f46\u4e0d\u80fd\u5168\u90e8\u5220\u9664\uff09\u5f97\u5230\u7684\u4e00\u4e2a\u6570\u7ec4\u3002\u5982\u679c\u6784\u6210\u4e24\u4e2a\u5b50\u96c6\u65f6\u9009\u62e9\u5220\u9664\u7684\u4e0b\u6807\u4e0d\u540c\uff0c\u5219\u8ba4\u4e3a\u8fd9\u4e24\u4e2a\u5b50\u96c6\u4e0d\u540c\u3002</li> <li>1 &lt;= nums.length &lt;= 1000</li> <li>1 &lt;= nums[i] &lt;= 30</li> </ul> <p>\u5bb9\u6613\u60f3\u5230, \u628a\u6bcf\u4e2a\u5143\u7d20\u7684\u6240\u6709\u8d28\u56e0\u5b50\u7528\u8d28\u56e0\u5b50\u8868\u4e2d\u7684\u4f4d\u7f6e\u8868\u793a\u4e3a2\u8fdb\u5236\u6570mask \u5173\u952e\u5728\u4e8edp\u600e\u4e48\u6784\u9020</p> <p>\u89e3\u6cd51: \u80cc\u5305</p> <p>\u4ee5mask\u7684\u5168\u5206\u5e03$[0, 2^{11}-1]$\u4e3a\u80cc\u5305\u5927\u5c0f, \u6c42\u548c</p> <pre><code>class Solution {\n    private static final int MOD = (int) (1e9 + 7);\n    // \u8d28\u56e0\u5b50\u8868\n    private static final int[] prime = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n\n    public int squareFreeSubsets(int[] nums) {\n        // \u7531\u4e8e\u8d28\u56e0\u5b50 prime \u53ea\u670910\u4e2a, \u6240\u4ee5 2^10 \u79cd\u72b6\u6001\u5c31\u80fd\u8868\u793a\u8d28\u56e0\u5b50\u7684\u6240\u6709\u5206\u5e03\n        int allStatus = 1 &lt;&lt; prime.length; // 2^11\n        // dp[i][j]: \u524d i \u4e2a\u6570\u7684\u5b50\u96c6\u4e2d, \u8d28\u56e0\u5b50\u5206\u5e03\u6070\u597d\u4e3a j \u7684\u5b50\u96c6\u6570\u91cf; j \u2208[0, 2^11-1]\n        long[] dp = new long[allStatus];\n        dp[0] = 1;\n        // \u4ee5 num \u4e3a\u6700\u540e\u4e00\u4e2a\u5143\u7d20\n        for (int num : nums) {\n            int mask = getMask(num);\n            if (mask == -1) continue;\n            // \u9009\u62e9 num \u7ec4\u6210\u80cc\u5305 [j] \u7684 cnt\n            for (int j = allStatus - 1; j &gt;= mask; j--) {\n                if ((mask | j) == j) // mask \u5fc5\u987b\u5305\u542b\u5728\u5168\u5206\u5e03 j \u4e2d\n                    dp[j] = (dp[j] + dp[mask ^ j]) % MOD; // \u6572\u6389 mask, \u83b7\u5f97\u8865\u96c6\n            }\n        }\n        long res = 0;\n        for (long e : dp) {\n            res += e;\n            res %= MOD;\n        }\n        return (int) (res - 1 + MOD) % MOD;\n    }\n\n    // num \u7684\u8868\u5f81, \u7528mask\u8868\u793anum\u6709\u54ea\u4e9b\u8d28\u56e0\u5b50\n    int getMask(int n) {\n        int res = 0;\n        for (int i = 0; i &lt; prime.length; i++) {\n            int p = prime[i];\n            if (n % (p * p) == 0) return -1;\n            if (n % p == 0) res |= 1 &lt;&lt; i;\n        }\n        return res;\n    }\n}\n</code></pre> <p>\u89e3\u6cd52: \u72b6\u538bDP</p> <p>\u6572\u6389\u4e00\u4e2a\u5143\u7d20\u7684\u8865\u96c6\u7684\u6570\u91cf, \u7136\u540e\u4e58\u8be5\u5143\u7d20\u7684cnt \u6c42\u8865\u96c6\u662f\u72b6\u538bDP\u7684\u5e38\u7528\u65b9\u6cd5</p> <pre><code>class Solution {\n    private static final int MOD = (int) (1e9 + 7);\n    // \u8d28\u56e0\u5b50\u8868\n    private static final int[] prime = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n\n    public int squareFreeSubsets(int[] nums) {\n        int[] cnt = new int[31];\n        for (int num : nums) {\n            cnt[num]++;\n        }\n        int allStatus = 1 &lt;&lt; 10;\n        long[] dp = new long[allStatus];\n        dp[0] = 1;\n        // \u679a\u4e3e num, 1=num \u6700\u540e\u5904\u7406\n        for (int i = 2; i &lt;= 30; i++) {\n            if (cnt[i] == 0) continue;\n            int mask = getMask(i);\n            if (mask &lt; 0) continue;\n            // \u4ece\u5168\u5206\u5e03\u4e2d\u627e\u5230 mask \u7684\u8865\u96c6 j, dp[j|mask] += dp[j]*cnt\n            for (int j = allStatus - 1; j &gt;= 0; j--) {\n                if ((j &amp; mask) == 0) dp[j | mask] = (dp[j | mask] + dp[j] * cnt[i]) % MOD;\n            }\n        }\n        long res = 0;\n        for (long e : dp) {\n            res += e;\n            res %= MOD;\n        }\n        // \u5904\u7406 1=num\n        res = BigInteger.valueOf(res)\n                .multiply(BigInteger.valueOf(2).pow(cnt[1]))\n                .mod(BigInteger.valueOf(MOD))\n                .intValue();\n        return (int) (res - 1 + MOD) % MOD;\n    }\n\n    int getMask(int n) {\n        int res = 0;\n        for (int i = 0; i &lt; prime.length; i++) {\n            int p = prime[i];\n            if (n % (p * p) == 0) return -1;\n            if (n % p == 0) res |= 1 &lt;&lt; i;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/","title":"\u591a\u6b65\u64cd\u4f5c\u7684\u6700\u4f18\u89e3","text":""},{"location":"leetcode/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/#n","title":"n\u4e2a\u9009\u62e9\u7684\u6700\u4f18\u89e3","text":""},{"location":"leetcode/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/#offer-47-mid","title":"\u5251\u6307 Offer 47. \u793c\u7269\u7684\u6700\u5927\u4ef7\u503c mid","text":"<p>\u5728\u4e00\u4e2a m*n \u7684\u68cb\u76d8\u7684\u6bcf\u4e00\u683c\u90fd\u653e\u6709\u4e00\u4e2a\u793c\u7269\uff0c\u6bcf\u4e2a\u793c\u7269\u90fd\u6709\u4e00\u5b9a\u7684\u4ef7\u503c\uff08\u4ef7\u503c\u5927\u4e8e 0\uff09\u3002\u4f60\u53ef\u4ee5\u4ece\u68cb\u76d8\u7684\u5de6\u4e0a\u89d2\u5f00\u59cb\u62ff\u683c\u5b50\u91cc\u7684\u793c\u7269\uff0c\u5e76\u6bcf\u6b21\u5411\u53f3\u6216\u8005\u5411\u4e0b\u79fb\u52a8\u4e00\u683c\u3001\u76f4\u5230\u5230\u8fbe\u68cb\u76d8\u7684\u53f3\u4e0b\u89d2\u3002\u7ed9\u5b9a\u4e00\u4e2a\u68cb\u76d8\u53ca\u5176\u4e0a\u9762\u7684\u793c\u7269\u7684\u4ef7\u503c\uff0c\u8bf7\u8ba1\u7b97\u4f60\u6700\u591a\u80fd\u62ff\u5230\u591a\u5c11\u4ef7\u503c\u7684\u793c\u7269\uff1f</p> <pre><code>class Solution {\n    public int maxValue(int[][] grid) {\n        int r = grid.length, c = grid[0].length;\n        int[][] dp = new int[r][c];\n        dp[0][0] = grid[0][0];\n        for (int i = 1; i &lt; r; i++) {\n            dp[i][0] = dp[i - 1][0] + grid[i][0];\n        }\n        for (int i = 1; i &lt; c; i++) {\n            dp[0][i] = dp[0][i - 1] + grid[0][i];\n        }\n        for (int i = 1; i &lt; r; i++) {\n            for (int j = 1; j &lt; c; j++) {\n                dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]) + grid[i][j];\n            }\n        }\n        return dp[r - 1][c - 1];\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/#offer-ii-091-mid","title":"\u5251\u6307 Offer II 091. \u7c89\u5237\u623f\u5b50 mid","text":"<p>\u5047\u5982\u6709\u4e00\u6392\u623f\u5b50\uff0c\u5171 n \u4e2a\uff0c\u6bcf\u4e2a\u623f\u5b50\u53ef\u4ee5\u88ab\u7c89\u5237\u6210\u7ea2\u8272\u3001\u84dd\u8272\u6216\u8005\u7eff\u8272\u8fd9\u4e09\u79cd\u989c\u8272\u4e2d\u7684\u4e00\u79cd\uff0c\u4f60\u9700\u8981\u7c89\u5237\u6240\u6709\u7684\u623f\u5b50\u5e76\u4e14\u4f7f\u5176\u76f8\u90bb\u7684\u4e24\u4e2a\u623f\u5b50\u989c\u8272\u4e0d\u80fd\u76f8\u540c\u3002</p> <p>\u5f53\u7136\uff0c\u56e0\u4e3a\u5e02\u573a\u4e0a\u4e0d\u540c\u989c\u8272\u6cb9\u6f06\u7684\u4ef7\u683c\u4e0d\u540c\uff0c\u6240\u4ee5\u623f\u5b50\u7c89\u5237\u6210\u4e0d\u540c\u989c\u8272\u7684\u82b1\u8d39\u6210\u672c\u4e5f\u662f\u4e0d\u540c\u7684\u3002\u6bcf\u4e2a\u623f\u5b50\u7c89\u5237\u6210\u4e0d\u540c\u989c\u8272\u7684\u82b1\u8d39\u662f\u4ee5\u4e00\u4e2a n x 3 \u7684\u6b63\u6574\u6570\u77e9\u9635 costs \u6765\u8868\u793a\u7684\u3002</p> <p>\u4f8b\u5982\uff0ccosts[0][0] \u8868\u793a\u7b2c 0 \u53f7\u623f\u5b50\u7c89\u5237\u6210\u7ea2\u8272\u7684\u6210\u672c\u82b1\u8d39\uff1bcosts[1][2]\u8868\u793a\u7b2c 1 \u53f7\u623f\u5b50\u7c89\u5237\u6210\u7eff\u8272\u7684\u82b1\u8d39\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</p> <p>\u8bf7\u8ba1\u7b97\u51fa\u7c89\u5237\u5b8c\u6240\u6709\u623f\u5b50\u6700\u5c11\u7684\u82b1\u8d39\u6210\u672c\u3002</p> <pre><code>class Solution {\n    public int minCost(int[][] costs) {\n        // \u76f8\u90bb\u7684\u623f\u5b50\u7684\u989c\u8272\u4e0d\u80fd\u76f8\u540c\n        int cnt = costs.length;\n        int[][] dp = new int[cnt][3];\n        for (int i = 0; i &lt; cnt; i++) {\n            if (i == 0) {\n                dp[i][0] = costs[i][0];\n                dp[i][1] = costs[i][1];\n                dp[i][2] = costs[i][2];\n            } else {\n                dp[i][0] = costs[i][0] + Math.min(dp[i - 1][1], dp[i - 1][2]);\n                dp[i][1] = costs[i][1] + Math.min(dp[i - 1][0], dp[i - 1][2]);\n                dp[i][2] = costs[i][2] + Math.min(dp[i - 1][0], dp[i - 1][1]);\n            }\n        }\n        return min(dp[cnt - 1][0], dp[cnt - 1][1], dp[cnt - 1][2]);\n    }\n\n    private int min(int i, int j, int k) {\n        return Math.min(Math.min(i, j), k);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/#746-easy","title":"746. \u4f7f\u7528\u6700\u5c0f\u82b1\u8d39\u722c\u697c\u68af easy","text":"<p>\u5251\u6307 Offer II 088. \u722c\u697c\u68af\u7684\u6700\u5c11\u6210\u672c</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 cost \uff0c\u5176\u4e2d cost[i] \u662f\u4ece\u697c\u68af\u7b2c i \u4e2a\u53f0\u9636\u5411\u4e0a\u722c\u9700\u8981\u652f\u4ed8\u7684\u8d39\u7528\u3002\u4e00\u65e6\u4f60\u652f\u4ed8\u6b64\u8d39\u7528\uff0c\u5373\u53ef\u9009\u62e9\u5411\u4e0a\u722c\u4e00\u4e2a\u6216\u8005\u4e24\u4e2a\u53f0\u9636\u3002</p> <p>\u4f60\u53ef\u4ee5\u9009\u62e9\u4ece\u4e0b\u6807\u4e3a 0 \u6216\u4e0b\u6807\u4e3a 1 \u7684\u53f0\u9636\u5f00\u59cb\u722c\u697c\u68af\u3002</p> <p>\u8bf7\u4f60\u8ba1\u7b97\u5e76\u8fd4\u56de\u8fbe\u5230\u697c\u68af\u9876\u90e8\u7684\u6700\u4f4e\u82b1\u8d39\u3002</p> <pre><code>class Solution {\n    public int minCostClimbingStairs(int[] cost) {\n        int n = cost.length;\n        int[] dp = new int[n + 1];\n        for (int i = 0; i &lt;= n; i++) {\n            if (i &lt;= 1) dp[i] = cost[i];\n            else dp[i] = Math.min(dp[i - 1], dp[i - 2]) + (i == n ? 0 : cost[i]);\n        }\n        return dp[n];\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/#926-mid","title":"926. \u5c06\u5b57\u7b26\u4e32\u7ffb\u8f6c\u5230\u5355\u8c03\u9012\u589e mid","text":"<p>\u5982\u679c\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u662f\u4ee5\u4e00\u4e9b 0\uff08\u53ef\u80fd\u6ca1\u6709 0\uff09\u540e\u9762\u8ddf\u7740\u4e00\u4e9b 1\uff08\u4e5f\u53ef\u80fd\u6ca1\u6709 1\uff09\u7684\u5f62\u5f0f\u7ec4\u6210\u7684\uff0c\u90a3\u4e48\u8be5\u5b57\u7b26\u4e32\u662f \u5355\u8c03\u9012\u589e \u7684\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32 s\uff0c\u4f60\u53ef\u4ee5\u5c06\u4efb\u4f55 0 \u7ffb\u8f6c\u4e3a 1 \u6216\u8005\u5c06 1 \u7ffb\u8f6c\u4e3a 0 \u3002</p> <p>\u8fd4\u56de\u4f7f s \u5355\u8c03\u9012\u589e\u7684\u6700\u5c0f\u7ffb\u8f6c\u6b21\u6570\u3002</p> <pre><code>class Solution {\n    public int minFlipsMonoIncr(String s) {\n        int n = s.length();\n        int[][] dp = new int[2][n];\n        int i = 0;\n        for (char c : s.toCharArray()) {\n            if (i == 0) {\n                dp[0][i] = 0;\n                dp[1][i] = 0;\n            } else {\n                dp[0][i] = dp[0][i - 1];\n                dp[1][i] = Math.min(dp[0][i - 1], dp[1][i - 1]);\n            }\n            if (c == '0')\n                dp[1][i] += 1;\n            else\n                dp[0][i] += 1;\n            i++;\n        }\n        return Math.min(dp[0][n - 1], dp[1][n - 1]);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/#6231-k-mid","title":"6231. \u96c7\u4f63 K \u4f4d\u5de5\u4eba\u7684\u603b\u4ee3\u4ef7 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4 costs \uff0c\u5176\u4e2d costs[i]\u662f\u96c7\u4f63\u7b2c i \u4f4d\u5de5\u4eba\u7684\u4ee3\u4ef7\u3002</p> <p>\u540c\u65f6\u7ed9\u4f60\u4e24\u4e2a\u6574\u6570 k \u548c candidates \u3002\u6211\u4eec\u60f3\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\u6070\u597d\u96c7\u4f63 k \u4f4d\u5de5\u4eba\uff1a</p> <ul> <li>\u603b\u5171\u8fdb\u884c k \u8f6e\u96c7\u4f63\uff0c\u4e14\u6bcf\u4e00\u8f6e\u6070\u597d\u96c7\u4f63\u4e00\u4f4d\u5de5\u4eba\u3002</li> <li>\u5728\u6bcf\u4e00\u8f6e\u96c7\u4f63\u4e2d\uff0c\u4ece\u6700\u524d\u9762 candidates \u548c\u6700\u540e\u9762 candidates \u4eba\u4e2d\u9009\u51fa\u4ee3\u4ef7\u6700\u5c0f\u7684\u4e00\u4f4d\u5de5\u4eba\uff0c\u5982\u679c\u6709\u591a\u4f4d\u4ee3\u4ef7\u76f8\u540c\u4e14\u6700\u5c0f\u7684\u5de5\u4eba\uff0c\u9009\u62e9\u4e0b\u6807\u66f4\u5c0f\u7684\u4e00\u4f4d\u5de5\u4eba\u3002<ul> <li>\u6bd4\u65b9\u8bf4\uff0ccosts = [3,2,7,7,1,2] \u4e14 candidates = 2 \uff0c\u7b2c\u4e00\u8f6e\u96c7\u4f63\u4e2d\uff0c\u6211\u4eec\u9009\u62e9\u7b2c 4 \u4f4d\u5de5\u4eba\uff0c\u56e0\u4e3a\u4ed6\u7684\u4ee3\u4ef7\u6700\u5c0f[3,2,7,7,1,2]\u3002</li> <li>\u7b2c\u4e8c\u8f6e\u96c7\u4f63\uff0c\u6211\u4eec\u9009\u62e9\u7b2c 1 \u4f4d\u5de5\u4eba\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684\u4ee3\u4ef7\u4e0e\u7b2c 4 \u4f4d\u5de5\u4eba\u4e00\u6837\u90fd\u662f\u6700\u5c0f\u4ee3\u4ef7\uff0c\u800c\u4e14\u4e0b\u6807\u66f4\u5c0f\uff0c[3,2,7,7,2]\u3002\u6ce8\u610f\u6bcf\u4e00\u8f6e\u96c7\u4f63\u540e\uff0c\u5269\u4f59\u5de5\u4eba\u7684\u4e0b\u6807\u53ef\u80fd\u4f1a\u53d1\u751f\u53d8\u5316\u3002</li> </ul> </li> <li>\u5982\u679c\u5269\u4f59\u5458\u5de5\u6570\u76ee\u4e0d\u8db3 candidates \u4eba\uff0c\u90a3\u4e48\u4e0b\u4e00\u8f6e\u96c7\u4f63\u4ed6\u4eec\u4e2d\u4ee3\u4ef7\u6700\u5c0f\u7684\u4e00\u4eba\uff0c\u5982\u679c\u6709\u591a\u4f4d\u4ee3\u4ef7\u76f8\u540c\u4e14\u6700\u5c0f\u7684\u5de5\u4eba\uff0c\u9009\u62e9\u4e0b\u6807\u66f4\u5c0f\u7684\u4e00\u4f4d\u5de5\u4eba\u3002</li> <li>\u4e00\u4f4d\u5de5\u4eba\u53ea\u80fd\u88ab\u9009\u62e9\u4e00\u6b21\u3002</li> </ul> <p>\u8fd4\u56de\u96c7\u4f63\u6070\u597d k \u4f4d\u5de5\u4eba\u7684\u603b\u4ee3\u4ef7\u3002</p> <p>\u4ece\u5de6\u53f3\u4e24\u622a\u4e2d\u9009k\u4e2a\u6700\u5c0f\u503c</p> <pre><code>class Solution {\n    public long totalCost(int[] costs, int k, int candidates) {\n        int n = costs.length;\n        PriorityQueue&lt;Integer&gt; left = new PriorityQueue&lt;&gt;(Comparator.comparingInt(o -&gt; costs[o]));\n        PriorityQueue&lt;Integer&gt; right = new PriorityQueue&lt;&gt;(Comparator.comparingInt(o -&gt; costs[o]));\n        int l = 0, r = n - 1;\n        for (int i = 0; l &lt;= r &amp;&amp; i &lt; candidates; i++) {\n            if (l == r) {\n                left.add(l++);\n            } else {\n                left.add(l++);\n                right.add(r--);\n            }\n        }\n        long res = 0;\n        for (int i = 0; i &lt; k; i++) {\n            // \u53f3\u7a7a\n            if (right.isEmpty()) {\n                res += costs[left.remove()];\n                if (l &lt;= r) left.add(l++);\n            }\n            // \u5de6\u7a7a\n            else if (left.isEmpty()) {\n                res += costs[right.remove()];\n                if (l &lt;= r) right.add(r--);\n            }\n            // \u90fd\u4e0d\u4e3a\u7a7a\n            else {\n                if (costs[left.element()] &lt;= costs[right.element()]) {\n                    res += costs[left.remove()];\n                    if (l &lt;= r) left.add(l++);\n                } else {\n                    res += costs[right.remove()];\n                    if (l &lt;= r) right.add(r--);\n                }\n            }\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/#_2","title":"\u6700\u591a\u6700\u5c11","text":"<p>\u901a\u5e38\u4f7f\u7528\u8d2a\u5fc3</p>"},{"location":"leetcode/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/#455-easy","title":"455. \u5206\u53d1\u997c\u5e72 easy","text":"<p>\u5047\u8bbe\u4f60\u662f\u4e00\u4f4d\u5f88\u68d2\u7684\u5bb6\u957f\uff0c\u60f3\u8981\u7ed9\u4f60\u7684\u5b69\u5b50\u4eec\u4e00\u4e9b\u5c0f\u997c\u5e72\u3002\u4f46\u662f\uff0c\u6bcf\u4e2a\u5b69\u5b50\u6700\u591a\u53ea\u80fd\u7ed9\u4e00\u5757\u997c\u5e72\u3002</p> <p>\u5bf9\u6bcf\u4e2a\u5b69\u5b50 i\uff0c\u90fd\u6709\u4e00\u4e2a\u80c3\u53e3\u503cg[i]\uff0c\u8fd9\u662f\u80fd\u8ba9\u5b69\u5b50\u4eec\u6ee1\u8db3\u80c3\u53e3\u7684\u997c\u5e72\u7684\u6700\u5c0f\u5c3a\u5bf8\uff1b\u5e76\u4e14\u6bcf\u5757\u997c\u5e72 j\uff0c\u90fd\u6709\u4e00\u4e2a\u5c3a\u5bf8 s[j]\u3002\u5982\u679c s[j]&gt;= g[i]\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u997c\u5e72 j \u5206\u914d\u7ed9\u5b69\u5b50 i \uff0c\u8fd9\u4e2a\u5b69\u5b50\u4f1a\u5f97\u5230\u6ee1\u8db3\u3002\u4f60\u7684\u76ee\u6807\u662f\u5c3d\u53ef\u80fd\u6ee1\u8db3\u8d8a\u591a\u6570\u91cf\u7684\u5b69\u5b50\uff0c\u5e76\u8f93\u51fa\u8fd9\u4e2a\u6700\u5927\u6570\u503c\u3002</p> <pre><code>class Solution {\n    public int findContentChildren(int[] g, int[] s) {\n        Arrays.sort(g);\n        Arrays.sort(s);\n        int ig = 0;//\u80c3\u53e3\n        int is = 0;//\u5c3a\u5bf8\n        while (ig &lt;= g.length - 1 &amp;&amp; is &lt;= s.length - 1) {\n            if (s[is] &gt;= g[ig]) ig++;\n            is++;\n        }\n        return ig;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/#605-easy","title":"605 \u79cd\u82b1\u95ee\u9898 easy","text":"<p>\u5047\u8bbe\u6709\u4e00\u4e2a\u5f88\u957f\u7684\u82b1\u575b\uff0c\u4e00\u90e8\u5206\u5730\u5757\u79cd\u690d\u4e86\u82b1\uff0c\u53e6\u4e00\u90e8\u5206\u5374\u6ca1\u6709\u3002\u53ef\u662f\uff0c\u82b1\u4e0d\u80fd\u79cd\u690d\u5728\u76f8\u90bb\u7684\u5730\u5757\u4e0a\uff0c\u5b83\u4eec\u4f1a\u4e89\u593a\u6c34\u6e90\uff0c\u4e24\u8005\u90fd\u4f1a\u6b7b\u53bb\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 flowerbed \u8868\u793a\u82b1\u575b\uff0c\u7531\u82e5\u5e72 0 \u548c 1 \u7ec4\u6210\uff0c\u5176\u4e2d 0 \u8868\u793a\u6ca1\u79cd\u690d\u82b1\uff0c1 \u8868\u793a\u79cd\u690d\u4e86\u82b1\u3002\u53e6\u6709\u4e00\u4e2a\u6570 n \uff0c\u80fd\u5426\u5728\u4e0d\u6253\u7834\u79cd\u690d\u89c4\u5219\u7684\u60c5\u51b5\u4e0b\u79cd\u5165 n \u6735\u82b1\uff1f\u80fd\u5219\u8fd4\u56de true \uff0c\u4e0d\u80fd\u5219\u8fd4\u56de false\u3002</p> <p>\u8d2a\u5fc3</p> <pre><code>class Solution {\n    public boolean canPlaceFlowers(int[] flowerbed, int n) {\n        if (n == 0) return true;\n        int len = flowerbed.length;\n        int pre;\n        int next;\n        for (int i = 0; i &lt; flowerbed.length &amp;&amp; n &gt; 0; i++) {\n            if (1 == flowerbed[i]) continue;\n            pre = i == 0 ? 0 : flowerbed[i - 1];\n            next = i == len - 1 ? 0 : flowerbed[i + 1];\n            if (pre == 0 &amp;&amp; next == 0) {\n                n--;\n                flowerbed[i] = 1;\n            }\n        }\n        return n &lt;= 0;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/#2383-easy","title":"2383. \u8d62\u5f97\u6bd4\u8d5b\u9700\u8981\u7684\u6700\u5c11\u8bad\u7ec3\u65f6\u957f easy","text":"<p>\u4f60\u6b63\u5728\u53c2\u52a0\u4e00\u573a\u6bd4\u8d5b\uff0c\u7ed9\u4f60\u4e24\u4e2a \u6b63 \u6574\u6570 initialEnergy \u548c initialExperience \u5206\u522b\u8868\u793a\u4f60\u7684\u521d\u59cb\u7cbe\u529b\u548c\u521d\u59cb\u7ecf\u9a8c\u3002</p> <p>\u53e6\u7ed9\u4f60\u4e24\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4 energy \u548c experience\uff0c\u957f\u5ea6\u5747\u4e3a n \u3002</p> <p>\u4f60\u5c06\u4f1a **\u4f9d\u6b21 ** \u5bf9\u4e0a n \u4e2a\u5bf9\u624b\u3002\u7b2c i \u4e2a\u5bf9\u624b\u7684\u7cbe\u529b\u548c\u7ecf\u9a8c\u5206\u522b\u7528 energy[i] \u548c experience[i] \u8868\u793a\u3002\u5f53\u4f60\u5bf9\u4e0a\u5bf9\u624b\u65f6\uff0c\u9700\u8981\u5728\u7ecf\u9a8c\u548c\u7cbe\u529b\u4e0a\u90fd \u4e25\u683c \u8d85\u8fc7\u5bf9\u624b\u624d\u80fd\u51fb\u8d25\u4ed6\u4eec\uff0c\u7136\u540e\u5728\u53ef\u80fd\u7684\u60c5\u51b5\u4e0b\u7ee7\u7eed\u5bf9\u4e0a\u4e0b\u4e00\u4e2a\u5bf9\u624b\u3002</p> <p>\u51fb\u8d25\u7b2c i \u4e2a\u5bf9\u624b\u4f1a\u4f7f\u4f60\u7684\u7ecf\u9a8c \u589e\u52a0 experience[i]\uff0c\u4f46\u4f1a\u5c06\u4f60\u7684\u7cbe\u529b \u51cf\u5c11 energy[i] \u3002</p> <p>\u5728\u5f00\u59cb\u6bd4\u8d5b\u524d\uff0c\u4f60\u53ef\u4ee5\u8bad\u7ec3\u51e0\u4e2a\u5c0f\u65f6\u3002\u6bcf\u8bad\u7ec3\u4e00\u4e2a\u5c0f\u65f6\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u5c06\u589e\u52a0\u7ecf\u9a8c\u589e\u52a0 1 \u6216\u8005 \u5c06\u7cbe\u529b\u589e\u52a0 1 \u3002</p> <p>\u8fd4\u56de\u51fb\u8d25\u5168\u90e8 n \u4e2a\u5bf9\u624b\u9700\u8981\u8bad\u7ec3\u7684 \u6700\u5c11 \u5c0f\u65f6\u6570\u76ee\u3002</p> <p>\u5fc5\u987b\u4f9d\u6b21\u9762\u5bf9\u5bf9\u624b \u5f00\u8d5b\u524d\u5f00\u6302</p> <pre><code>class Solution {\n    public int minNumberOfHours(int en, int ex, int[] energy, int[] experience) {\n        int cnt = 0;\n        for (int i = 0; i &lt; energy.length; i++) {\n            if (en &lt;= energy[i]) {\n                cnt += energy[i] - en + 1;\n                en = 1;\n            } else en -= energy[i];\n\n            if (ex &lt;= experience[i]) {\n                cnt += experience[i] - ex + 1;\n                ex = experience[i] + 1;\n            }\n            ex += experience[i];\n        }\n        return cnt;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/#2410-mid","title":"2410. \u8fd0\u52a8\u5458\u548c\u8bad\u7ec3\u5e08\u7684\u6700\u5927\u5339\u914d\u6570 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4 players \uff0c\u5176\u4e2d players[i]\u8868\u793a\u7b2c i \u540d\u8fd0\u52a8\u5458\u7684 \u80fd\u529b \u503c\uff0c\u540c\u65f6\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4 trainers \uff0c\u5176\u4e2d trainers[j]\u8868\u793a\u7b2c j \u540d\u8bad\u7ec3\u5e08\u7684 \u8bad\u7ec3\u80fd\u529b\u503c \u3002</p> <p>\u5982\u679c\u7b2c i \u540d\u8fd0\u52a8\u5458\u7684\u80fd\u529b\u503c \u5c0f\u4e8e\u7b49\u4e8e \u7b2c j \u540d\u8bad\u7ec3\u5e08\u7684\u80fd\u529b\u503c\uff0c\u90a3\u4e48\u7b2c i \u540d\u8fd0\u52a8\u5458\u53ef\u4ee5 \u5339\u914d \u7b2c j \u540d\u8bad\u7ec3\u5e08\u3002\u9664\u6b64\u4ee5\u5916\uff0c\u6bcf\u540d\u8fd0\u52a8\u5458\u81f3\u591a\u53ef\u4ee5\u5339\u914d\u4e00\u4f4d\u8bad\u7ec3\u5e08\uff0c\u6bcf\u4f4d\u8bad\u7ec3\u5e08\u6700\u591a\u53ef\u4ee5\u5339\u914d\u4e00\u4f4d\u8fd0\u52a8\u5458\u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de\u6ee1\u8db3\u4e0a\u8ff0\u8981\u6c42 players \u548c trainers \u7684 \u6700\u5927 \u5339\u914d\u6570\u3002</p> <pre><code>class Solution {\n    public int matchPlayersAndTrainers(int[] players, int[] trainers) {\n        Arrays.sort(players);\n        Arrays.sort(trainers);\n        int p1 = 0, p2 = 0;\n        while (p1 &lt; players.length &amp;&amp; p2 &lt; trainers.length) {\n            if (players[p1] &lt;= trainers[p2])\n                p1++;\n            p2++;\n        }\n        return p1;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/#6367-mid","title":"6367. \u6c42\u51fa\u6700\u591a\u6807\u8bb0\u4e0b\u6807 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4 nums \u3002</p> <p>\u4e00\u5f00\u59cb\uff0c\u6240\u6709\u4e0b\u6807\u90fd\u6ca1\u6709\u88ab\u6807\u8bb0\u3002\u4f60\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u4efb\u610f\u6b21\uff1a</p> <ul> <li>\u9009\u62e9\u4e24\u4e2a \u4e92\u4e0d\u76f8\u540c\u4e14\u672a\u6807\u8bb0 \u7684\u4e0b\u6807 i \u548c j \uff0c\u6ee1\u8db3 2 * nums[i] &lt;= nums[j]\uff0c\u6807\u8bb0\u4e0b\u6807 i \u548c j \u3002</li> </ul> <p>\u8bf7\u4f60\u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\u4efb\u610f\u6b21\uff0c\u8fd4\u56de nums \u4e2d\u6700\u591a\u53ef\u4ee5\u6807\u8bb0\u7684\u4e0b\u6807\u6570\u76ee\u3002</p> <p>\u601d\u7ef4\u9898\uff0c\u4ece\u4e2d\u95f4\u8d2a\u5fc3</p> <pre><code>class Solution {\n    public int maxNumOfMarkedIndices(int[] nums) {\n        int n = nums.length;\n        Arrays.sort(nums);\n        int res = 0;\n        int i = 0, j = (n + 1) / 2;\n        while (j &lt; n) {\n            if (2 * nums[i] &lt;= nums[j]) {\n                res += 2;\n                i++;\n            }\n            j++;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/#n_1","title":"\u76f8\u540c\u5143\u7d20\u95f4\u9694\u5fc5\u987b\u5927\u4e8en\u7684\u6700\u77ed\u6392\u5217","text":""},{"location":"leetcode/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/#621-mid","title":"621. \u4efb\u52a1\u8c03\u5ea6\u5668 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u7528\u5b57\u7b26\u6570\u7ec4 tasks \u8868\u793a\u7684 CPU \u9700\u8981\u6267\u884c\u7684\u4efb\u52a1\u5217\u8868\u3002\u5176\u4e2d\u6bcf\u4e2a\u5b57\u6bcd\u8868\u793a\u4e00\u79cd\u4e0d\u540c\u79cd\u7c7b\u7684\u4efb\u52a1\u3002\u4efb\u52a1\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u6267\u884c\uff0c\u5e76\u4e14\u6bcf\u4e2a\u4efb\u52a1\u90fd\u53ef\u4ee5\u5728 1 \u4e2a\u5355\u4f4d\u65f6\u95f4\u5185\u6267\u884c\u5b8c\u3002\u5728\u4efb\u4f55\u4e00\u4e2a\u5355\u4f4d\u65f6\u95f4\uff0cCPU \u53ef\u4ee5\u5b8c\u6210\u4e00\u4e2a\u4efb\u52a1\uff0c\u6216\u8005\u5904\u4e8e\u5f85\u547d\u72b6\u6001\u3002</p> <p>\u7136\u800c\uff0c\u4e24\u4e2a \u76f8\u540c\u79cd\u7c7b \u7684\u4efb\u52a1\u4e4b\u95f4\u5fc5\u987b\u6709\u957f\u5ea6\u4e3a\u6574\u6570 n \u7684\u51b7\u5374\u65f6\u95f4\uff0c\u56e0\u6b64\u81f3\u5c11\u6709\u8fde\u7eed n \u4e2a\u5355\u4f4d\u65f6\u95f4\u5185 CPU \u5728\u6267\u884c\u4e0d\u540c\u7684\u4efb\u52a1\uff0c\u6216\u8005\u5728\u5f85\u547d\u72b6\u6001\u3002</p> <p>\u4f60\u9700\u8981\u8ba1\u7b97\u5b8c\u6210\u6240\u6709\u4efb\u52a1\u6240\u9700\u8981\u7684 \u6700\u77ed\u65f6\u95f4 \u3002</p> <p>\u5efa\u7acb\u5927\u5c0f\u4e3a n+1 \u7684\u6876 \u6709\u7a7a\u7a97\u671f\u7684\u60c5\u51b5: (\u6700\u591a\u4efb\u52a1\u6570-1) * (n+1) + \u6700\u591a\u4efb\u52a1\u4e2a\u6570 \u65e0\u7a7a\u7a97\u671f\u7684\u60c5\u51b5: task.size</p> pos0 pos1 pos2 A B C A B A B <pre><code>class Solution {\n    public int leastInterval(char[] tasks, int n) {\n        int[] temp = new int[26];\n        int lastBatch = 0;\n        int maxTask = 0;\n        // \u7edf\u8ba1\u4efb\u52a1\u6570\n        for (char c : tasks) {\n            temp[c - 'A']++;\n            maxTask = Math.max(temp[c - 'A'], maxTask);\n        }\n        // \u7edf\u8ba1\u6700\u591a\u6b21\u51fa\u73b0\u7684\u4efb\u52a1\u7684\u4e2a\u6570\n        for (int i = 0; i &lt; 26; i++) {\n            if (temp[i] == maxTask) {\n                lastBatch++;\n            }\n        }\n        return Math.max(\n                tasks.length,\n                (maxTask - 1) * (n + 1) + lastBatch\n        );\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/#_3","title":"\u672a\u5206\u7c7b","text":""},{"location":"leetcode/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/#650-mid","title":"650. \u53ea\u6709\u4e24\u4e2a\u952e\u7684\u952e\u76d8 mid","text":"<p>\u6700\u521d\u8bb0\u4e8b\u672c\u4e0a\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26 'A' \u3002\u4f60\u6bcf\u6b21\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u8bb0\u4e8b\u672c\u8fdb\u884c\u4e24\u79cd\u64cd\u4f5c\uff1a</p> <ul> <li>Copy All\uff08\u590d\u5236\u5168\u90e8\uff09\uff1a\u590d\u5236\u8fd9\u4e2a\u8bb0\u4e8b\u672c\u4e2d\u7684\u6240\u6709\u5b57\u7b26\uff08\u4e0d\u5141\u8bb8\u4ec5\u590d\u5236\u90e8\u5206\u5b57\u7b26\uff09\u3002</li> <li>Paste\uff08\u7c98\u8d34\uff09\uff1a\u7c98\u8d34 \u4e0a\u4e00\u6b21 \u590d\u5236\u7684\u5b57\u7b26\u3002</li> </ul> <p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u5b57 n \uff0c\u4f60\u9700\u8981\u4f7f\u7528\u6700\u5c11\u7684\u64cd\u4f5c\u6b21\u6570\uff0c\u5728\u8bb0\u4e8b\u672c\u4e0a\u8f93\u51fa \u6070\u597d n \u4e2a 'A' \u3002\u8fd4\u56de\u80fd\u591f\u6253\u5370\u51fa n \u4e2a 'A' \u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u3002</p> <p>\u5982\u679c\u662f\u8d28\u6570, \u90a3\u5c31\u53ea\u80fd\u4e00\u4e2a\u4e2a\u7684 V \u5982\u679c\u4e0d\u662f\u8d28\u6570, = minSteps(i) + n/i</p> <p>\u672c\u8d28\u4e0a\u662f\u56e0\u6570\u6c42\u548c</p> <p>\u6570\u5b66\u6cd5</p> <p>\u9012\u5f52</p> <pre><code>class Solution {\n    int minSteps(int n) {\n        if (n == 1) return 0;\n        for (int i = 2; i * i &lt;= n; i++) {\n            if (n % i == 0) {\n                return i + minSteps(n / i);\n            }\n        }\n        return n;\n    }\n}\n</code></pre> <p>\u5faa\u73af1</p> <pre><code>class Solution {\n    public int minSteps(int n) {\n        int ans = 0;\n        for (int i = 2; i * i &lt;= n; ) {\n            if (n % i == 0) {\n                ans += i;\n                n /= i;\n            } else i++;\n        }\n        if (n != 1) ans += n;\n        return ans;\n    }\n}\n</code></pre> <p>\u5faa\u73af2</p> <pre><code>class Solution {\n    public int minSteps(int n) {\n        int ans = 0;\n        for (int i = 2; i * i &lt;= n; i++) {\n            while (n % i == 0) {\n                ans += i;\n                n /= i;\n            }\n        }\n        if (n != 1) ans += n;\n        return ans;\n    }\n}\n</code></pre> <p>DP</p> <p>\u865a\u5047\u7684DP dp[i] = dp[\u6700\u5c0f\u56e0\u5b50] + dp[n/\u6700\u5c0f\u56e0\u5b50]</p> <pre><code>class Solution {\n    public int minSteps(int n) {\n        int[] dp = new int[n + 1];\n        for (int i = 2; i &lt;= n; i++) {\n            dp[i] = i;\n            // \u627e i \u7684\u6700\u5c0f\u56e0\u5b50 j\n            for (int j = 2; j * j &lt;= i; j++) {\n                if (i % j == 0) {\n                    dp[i] = dp[j] + dp[i / j];\n                    break;\n                }\n            }\n        }\n        return dp[n];\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%97%E5%85%B8%E5%BA%8F%E6%8E%92%E5%88%97/","title":"\u5b57\u5178\u5e8f\u6392\u5217","text":""},{"location":"leetcode/%E5%AD%97%E5%85%B8%E5%BA%8F%E6%8E%92%E5%88%97/#953-easy","title":"953. \u9a8c\u8bc1\u5916\u661f\u8bed\u8bcd\u5178 easy","text":"<p>\u5251\u6307 Offer II 034. \u5916\u661f\u8bed\u8a00\u662f\u5426\u6392\u5e8f</p> <p>\u67d0\u79cd\u5916\u661f\u8bed\u4e5f\u4f7f\u7528\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd\uff0c\u4f46\u53ef\u80fd\u987a\u5e8f order \u4e0d\u540c\u3002\u5b57\u6bcd\u8868\u7684\u987a\u5e8f\uff08order\uff09\u662f\u4e00\u4e9b\u5c0f\u5199\u5b57\u6bcd\u7684\u6392\u5217\u3002</p> <p>\u7ed9\u5b9a\u4e00\u7ec4\u7528\u5916\u661f\u8bed\u4e66\u5199\u7684\u5355\u8bcd words\uff0c\u4ee5\u53ca\u5176\u5b57\u6bcd\u8868\u7684\u987a\u5e8f order\uff0c\u53ea\u6709\u5f53\u7ed9\u5b9a\u7684\u5355\u8bcd\u5728\u8fd9\u79cd\u5916\u661f\u8bed\u4e2d\u6309\u5b57\u5178\u5e8f\u6392\u5217\u65f6\uff0c\u8fd4\u56de true\uff1b\u5426\u5219\uff0c\u8fd4\u56de false\u3002</p> <pre><code>class Solution {\n    int[] map = new int[128];\n\n    public boolean isAlienSorted(String[] words, String order) {\n        char[] arr = order.toCharArray();\n        for (int i = 0; i &lt; arr.length; i++) {\n            map[arr[i]] = i;\n        }\n        for (int i = 1; i &lt; words.length; i++) {\n            if (!less(words[i - 1], words[i])) return false;\n        }\n        return true;\n    }\n\n    boolean less(String s1, String s2) {\n        int i = 0, j = 0;\n        while (i &lt; s1.length() &amp;&amp; j &lt; s2.length()) {\n            char c1 = s1.charAt(i);\n            char c2 = s2.charAt(j);\n            if (map[c1] &lt; map[c2]) return true;\n            if (map[c1] &gt; map[c2]) return false;\n            i++;\n            j++;\n        }\n        return s1.length() &lt;= s2.length();\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/","title":"\u5b57\u7b26\u4e32","text":""},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_2","title":"\u662f\u5426\u76f8\u7b49","text":""},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#1662-easy","title":"1662. \u68c0\u67e5\u4e24\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\u662f\u5426\u76f8\u7b49 easy","text":"<p>\u7ed9\u4f60\u4e24\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 word1 \u548c word2 \u3002\u5982\u679c\u4e24\u4e2a\u6570\u7ec4\u8868\u793a\u7684\u5b57\u7b26\u4e32\u76f8\u540c\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002</p> <p>\u6570\u7ec4\u8868\u793a\u7684\u5b57\u7b26\u4e32 \u662f\u7531\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20 \u6309\u987a\u5e8f \u8fde\u63a5\u5f62\u6210\u7684\u5b57\u7b26\u4e32\u3002</p> <pre><code>class Solution {\n    public boolean arrayStringsAreEqual(String[] word1, String[] word2) {\n        return Objects.equals(\n                Stream.of(word1).reduce(\"\", (a, b) -&gt; a + b),\n                Stream.of(word2).reduce(\"\", (a, b) -&gt; a + b)\n        );\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_3","title":"\u6784\u9020\u56de\u6587\u4e32","text":""},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#394-mid","title":"394. \u5b57\u7b26\u4e32\u89e3\u7801 mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u7ecf\u8fc7\u7f16\u7801\u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5b83\u89e3\u7801\u540e\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u7f16\u7801\u89c4\u5219\u4e3a: k[encoded_string]\uff0c\u8868\u793a\u5176\u4e2d\u65b9\u62ec\u53f7\u5185\u90e8\u7684 encoded_string \u6b63\u597d\u91cd\u590d k \u6b21\u3002\u6ce8\u610f k \u4fdd\u8bc1\u4e3a\u6b63\u6574\u6570\u3002</p> <p>\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u8f93\u5165\u5b57\u7b26\u4e32\u603b\u662f\u6709\u6548\u7684\uff1b\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u989d\u5916\u7684\u7a7a\u683c\uff0c\u4e14\u8f93\u5165\u7684\u65b9\u62ec\u53f7\u603b\u662f\u7b26\u5408\u683c\u5f0f\u8981\u6c42\u7684\u3002</p> <p>\u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u539f\u59cb\u6570\u636e\u4e0d\u5305\u542b\u6570\u5b57\uff0c\u6240\u6709\u7684\u6570\u5b57\u53ea\u8868\u793a\u91cd\u590d\u7684\u6b21\u6570 k \uff0c\u4f8b\u5982\u4e0d\u4f1a\u51fa\u73b0\u50cf 3a \u6216 2[4]\u7684\u8f93\u5165\u3002</p> <pre><code>class Solution {\n    public String decodeString(String s) {\n        StringBuilder res = new StringBuilder();\n        Deque&lt;Integer&gt; stackMulti = new LinkedList&lt;&gt;();\n        Deque&lt;String&gt; stackPre = new LinkedList&lt;&gt;();\n        int multi = 0;\n        for (char c : s.toCharArray()) {\n            // \u4fdd\u5b58\u4e4b\u524d\u5185\u5bb9\n            if (c == '[') {\n                stackMulti.push(multi);\n                stackPre.push(res.toString());\n                multi = 0;\n                res = new StringBuilder();\n            }\n            // \u590d\u5236\u4e2d\u95f4\u90e8\u5206\n            else if (c == ']') {\n                int currMulti = stackMulti.pop();\n                StringBuilder temp = new StringBuilder(stackPre.pop());\n                for (int i = 0; i &lt; currMulti; i++) {\n                    temp.append(res);\n                }\n                res = temp;\n            }\n            // \u8ba1\u6570\u51c6\u5907\n            else if (c &gt;= '0' &amp;&amp; c &lt;= '9') {\n                multi = multi * 10 + c - '0';\n            }\n            // \u76f4\u63a5 append\n            else res.append(c);\n        }\n        return res.toString();\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#409-easy","title":"409. \u6700\u957f\u56de\u6587\u4e32 easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u5927\u5199\u5b57\u6bcd\u548c\u5c0f\u5199\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32 s \uff0c\u8fd4\u56de \u901a\u8fc7\u8fd9\u4e9b\u5b57\u6bcd\u6784\u9020\u6210\u7684 \u6700\u957f\u7684\u56de\u6587\u4e32 \u3002</p> <p>\u5728\u6784\u9020\u8fc7\u7a0b\u4e2d\uff0c\u8bf7\u6ce8\u610f \u533a\u5206\u5927\u5c0f\u5199 \u3002\u6bd4\u5982 \"Aa\" \u4e0d\u80fd\u5f53\u505a\u4e00\u4e2a\u56de\u6587\u5b57\u7b26\u4e32\u3002</p> <p>\u7edf\u8ba1\u4e00\u4e0b\u5947\u6570\u6b21\u7684char, \u7edf\u8ba1\u4e00\u4e0b\u5076\u6570\u6b21\u7684char, \u5947\u6570\u6b21\u7684&gt;=3\u7684\u53ef\u4ee5\u5f53\u4f5c\u5076\u6570\u6b21\u7684</p> <pre><code>class Solution {\n    public int longestPalindrome(String s) {\n        int[] arr1 = new int[26];\n        int[] arr2 = new int[26];\n\n        for (int i = 0; i &lt; s.length(); i++) {\n            char c = s.charAt(i);\n            if (c &lt; 'a') \n                arr1[c - 'A']++;\n            else\n                arr2[c - 'a']++;\n        }\n\n        int sum = 0;\n        boolean flag = false;\n        for (int i = 0; i &lt; 26; i++) {\n            if ((arr1[i] &amp; 1) == 0) \n                sum += arr1[i];\n            else if (arr1[i] - 1 &gt;= 0) {\n                flag = true;\n                sum += arr1[i] - 1;\n            }\n            if ((arr2[i] &amp; 1) == 0) \n                sum += arr2[i];\n            else if (arr2[i] - 1 &gt;= 0) {\n                flag = true;\n                sum += arr2[i] - 1;\n            }\n        }\n\n        return sum + (flag ? 1 : 0);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_4","title":"\u4e24\u4e2a\u5b57\u7b26\u4e32\u6620\u5c04","text":""},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_5","title":"\u5b50\u4e32\u7edf\u8ba1","text":""},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#647-mid","title":"647. \u56de\u6587\u5b50\u4e32 mid","text":"<p>\u5251\u6307 Offer II 020. \u56de\u6587\u5b50\u5b57\u7b26\u4e32\u7684\u4e2a\u6570</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u8bf7\u4f60\u7edf\u8ba1\u5e76\u8fd4\u56de\u8fd9\u4e2a\u5b57\u7b26\u4e32\u4e2d \u56de\u6587\u5b50\u4e32 \u7684\u6570\u76ee\u3002</p> <p>\u56de\u6587\u5b57\u7b26\u4e32 \u662f\u6b63\u7740\u8bfb\u548c\u5012\u8fc7\u6765\u8bfb\u4e00\u6837\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u5b50\u5b57\u7b26\u4e32 \u662f\u5b57\u7b26\u4e32\u4e2d\u7684\u7531\u8fde\u7eed\u5b57\u7b26\u7ec4\u6210\u7684\u4e00\u4e2a\u5e8f\u5217\u3002</p> <p>\u5177\u6709\u4e0d\u540c\u5f00\u59cb\u4f4d\u7f6e\u6216\u7ed3\u675f\u4f4d\u7f6e\u7684\u5b50\u4e32\uff0c\u5373\u4f7f\u662f\u7531\u76f8\u540c\u7684\u5b57\u7b26\u7ec4\u6210\uff0c\u4e5f\u4f1a\u88ab\u89c6\u4f5c\u4e0d\u540c\u7684\u5b50\u4e32\u3002</p> <p>\u89e3\u6cd51: \u66b4\u529b</p> <pre><code>class Solution {\n    public int countSubstrings(String s) {\n        int sum = 0;\n        for (int i = 0; i &lt; s.length(); i++) {\n            sum += len(s, i);\n        }\n        return sum;\n    }\n\n    private int len(String s, int idx) {\n        int p1 = idx, p2 = idx;\n        int cnt = 0;\n        while (p1 &gt;= 0 &amp;&amp; p2 &lt; s.length()) {\n            if (s.charAt(p1--) == s.charAt(p2++)) cnt++;\n            else break;\n        }\n        p1 = idx;\n        p2 = idx + 1;\n        while (p1 &gt;= 0 &amp;&amp; p2 &lt; s.length()) {\n            if (s.charAt(p1--) == s.charAt(p2++)) cnt++;\n            else break;\n        }\n        return cnt;\n    }\n}\n</code></pre> <p>\u89e3\u6cd52: Manacher \u7b97\u6cd5</p>"},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#696-easy","title":"696. \u8ba1\u6570\u4e8c\u8fdb\u5236\u5b50\u4e32 easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u7edf\u8ba1\u5e76\u8fd4\u56de\u5177\u6709\u76f8\u540c\u6570\u91cf 0 \u548c 1 \u7684\u975e\u7a7a\uff08\u8fde\u7eed\uff09\u5b50\u5b57\u7b26\u4e32\u7684\u6570\u91cf\uff0c\u5e76\u4e14\u8fd9\u4e9b\u5b50\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709 0 \u548c\u6240\u6709 1 \u90fd\u662f\u6210\u7ec4\u8fde\u7eed\u7684\u3002</p> <p>\u91cd\u590d\u51fa\u73b0\uff08\u4e0d\u540c\u4f4d\u7f6e\uff09\u7684\u5b50\u4e32\u4e5f\u8981\u7edf\u8ba1\u5b83\u4eec\u51fa\u73b0\u7684\u6b21\u6570\u3002</p> <p>\u89e3\u6cd51: \u4e2d\u5fc3\u6269\u5c55</p> <pre><code>class Solution {\n    public int countBinarySubstrings(String s) {\n        if (s.length() &lt; 2) return 0;\n\n        int cnt = 0;\n        for (int i = 0; i &lt; s.length() - 1; i++) {\n            int j = i;\n            int k = i + 1;\n            char c1 = s.charAt(j);\n            char c2 = s.charAt(k);\n            if (c1 == c2) continue;\n            while (j &gt;= 0 &amp;&amp; k &lt; s.length() &amp;&amp; s.charAt(j) == c1 &amp;&amp; s.charAt(k) == c2) {\n                cnt++;\n                j--;\n                k++;\n            }\n        }\n        return cnt;\n    }\n}\n</code></pre> <p>\u89e3\u6cd52: \u91cd\u590d\u5b57\u7b26\u8ba1\u6570, += min{cnt_pre, cnt_curr}</p> <pre><code>class Solution {\n    public int countBinarySubstrings(String s) {\n        int i = 0, n = s.length();\n        // lastCnt: \u4e0a\u4e00\u4e2a\u5b57\u7b26\u7684\u91cd\u590d\u6570\n        int lastCnt = 0, ans = 0;\n\n        while (i &lt; n) {\n            char c = s.charAt(i);\n            int cnt = 0;\n            while (i &lt; n &amp;&amp; s.charAt(i) == c) {\n                ++i;\n                ++cnt;\n            }\n            ans += Math.min(cnt, lastCnt);\n            lastCnt = cnt;\n        }\n        return ans;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_6","title":"\u5212\u5206\u5b50\u4e32","text":""},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#763-mid","title":"763. \u5212\u5206\u5b57\u6bcd\u533a\u95f4 mid","text":"<p>\u5b57\u7b26\u4e32 S \u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002\u6211\u4eec\u8981\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5212\u5206\u4e3a\u5c3d\u53ef\u80fd\u591a\u7684\u7247\u6bb5\uff0c\u540c\u4e00\u5b57\u6bcd\u6700\u591a\u51fa\u73b0\u5728\u4e00\u4e2a\u7247\u6bb5\u4e2d\u3002\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u6bcf\u4e2a\u5b57\u7b26\u4e32\u7247\u6bb5\u7684\u957f\u5ea6\u7684\u5217\u8868\u3002</p> <p>\u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\u7684\u7ed3\u675f\u4f4d\u7f6e \u904d\u5386\u6570\u7ec4\uff0c\u7ef4\u62a4\u4e00\u4e2aend=max(end, idx_of_element), if end = i, \u53e6\u8d77\u4e00\u6bb5</p> <pre><code>class Solution {\n    // \u9996\u5148\u77e5\u9053\u6bcf\u4e2a\u5b57\u6bcd\u7684\u6700\u672bindex, \u7136\u540e\u5b9a\u4e49\u6bcf\u6bb5\u7684\u5f00\u59cb\u548c\u7ed3\u675findex, \u904d\u5386\u7684\u65f6\u5019\u6bb5\u4e2d\u6700\u5927\u7684\u6700\u672bindex\u4f5c\u4e3aend.\n    // \u5f53end==i\u7684\u65f6\u5019\u7ed3\u675f\u8fd9\u4e00\u6bb5. \u5c06\u8fd9\u4e00\u6bb5\u7684\u957f\u5ea6\u8bb0\u5f55\uff0c\u518d\u4ee4start=end+1\n    public List&lt;Integer&gt; partitionLabels(String s) {\n        int[] arr = new int[26];\n        for (int i = 0; i &lt; s.length(); i++) {\n            arr[s.charAt(i) - 'a'] = i;\n        }\n        int start = 0;\n        int end = 0;\n        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();\n\n        for (int i = 0; i &lt; s.length(); i++) {\n            // \u5f53\u524d\u5143\u7d20\u7684\u6700\u672b\u4f4d\u7f6e &amp;&amp; \u6bb5\u843d\u4e2d\u6240\u6709\u5143\u7d20\u7684\u6700\u672b\u4f4d\u7f6e\n            end = Math.max(end, arr[s.charAt(i) - 'a']);\n            if (end == i) {\n                res.add(end + 1 - start);\n                start = i + 1;\n            }\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#2405-mid","title":"2405. \u5b50\u5b57\u7b26\u4e32\u7684\u6700\u4f18\u5212\u5206 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u8bf7\u4f60\u5c06\u8be5\u5b57\u7b26\u4e32\u5212\u5206\u6210\u4e00\u4e2a\u6216\u591a\u4e2a \u5b50\u5b57\u7b26\u4e32 \uff0c\u5e76\u6ee1\u8db3\u6bcf\u4e2a\u5b50\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u90fd\u662f \u552f\u4e00 \u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u5355\u4e2a\u5b50\u5b57\u7b26\u4e32\u4e2d\uff0c\u5b57\u6bcd\u7684\u51fa\u73b0\u6b21\u6570\u90fd\u4e0d\u8d85\u8fc7 \u4e00\u6b21 \u3002</p> <p>\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd4\u56de \u6700\u5c11 \u9700\u8981\u5212\u5206\u591a\u5c11\u4e2a\u5b50\u5b57\u7b26\u4e32\u3002</p> <p>\u6ce8\u610f\uff0c\u5212\u5206\u540e\uff0c\u539f\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u90fd\u5e94\u8be5\u6070\u597d\u5c5e\u4e8e\u4e00\u4e2a\u5b50\u5b57\u7b26\u4e32\u3002</p> <p>\u6ed1\u52a8\u7a97\u53e3; mapping \u5143\u7d20\u4e0a\u6b21\u51fa\u73b0\u7684 idx</p> <pre><code>class Solution {\n    public int partitionString(String s) {\n        int n = s.length();\n        int res = 1;\n        int[] map = new int[26];\n        Arrays.fill(map, -1);\n        int start = 0;\n        for (int i = 0; i &lt; n; i++) {\n            char c = s.charAt(i);\n            int last = map[c - 'a'];\n            map[c - 'a'] = i;\n            if (i == start || last &lt; start) continue;\n            start = i;\n            res++;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_7","title":"\u56de\u6587\u5b50\u4e32\u5224\u5b9a","text":""},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#680-ii-easy","title":"680. \u9a8c\u8bc1\u56de\u6587\u5b57\u7b26\u4e32 \u2161 easy","text":"<p>\u5251\u6307 Offer II 019. \u6700\u591a\u5220\u9664\u4e00\u4e2a\u5b57\u7b26\u5f97\u5230\u56de\u6587</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e32 s\uff0c\u6700\u591a\u5220\u9664\u4e00\u4e2a\u5b57\u7b26\u3002\u5224\u65ad\u662f\u5426\u80fd\u6210\u4e3a\u56de\u6587\u5b57\u7b26\u4e32\u3002</p> <pre><code>class Solution {\n    public boolean validPalindrome(String s) {\n        for (int i = 0, j = s.length() - 1; i &lt; j; i++, j--) {\n            if (s.charAt(i) != s.charAt(j)) \n                return validPalindrome(s, i + 1, j) || validPalindrome(s, i, j - 1);\n        }\n        return true;\n    }\n\n    private boolean validPalindrome(String s, int i, int j) {\n        for (; i &lt; j; i++, j--) {\n            if (s.charAt(i) != s.charAt(j)) return false;\n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#2396-mid","title":"2396. \u4e25\u683c\u56de\u6587\u7684\u6570\u5b57 mid","text":"<p>\u5982\u679c\u4e00\u4e2a\u6574\u6570 n \u5728 b \u8fdb\u5236\u4e0b\uff08b \u4e3a 2 \u5230 n - 2 \u4e4b\u95f4\u7684\u6240\u6709\u6574\u6570\uff09\u5bf9\u5e94\u7684\u5b57\u7b26\u4e32 \u5168\u90e8 \u90fd\u662f \u56de\u6587\u7684 \uff0c\u90a3\u4e48\u6211\u4eec\u79f0 n \u662f \u4e25\u683c\u56de\u6587 \u7684\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n \uff0c\u5982\u679c n \u662f \u4e25\u683c\u56de\u6587 \u7684\uff0c\u8bf7\u8fd4\u56de true \uff0c\u5426\u5219\u8fd4\u56de false\u3002</p> <p>\u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u4ece\u524d\u5f80\u540e\u8bfb\u548c\u4ece\u540e\u5f80\u524d\u8bfb\u5b8c\u5168\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5b57\u7b26\u4e32\u662f \u56de\u6587\u7684\u3002 4 &lt;= n \u89e3\u6cd51: toString</p> <p>Integer.toString(int i, int radix)</p> <pre><code>class Solution {\n    public boolean isStrictlyPalindromic(int n) {\n        for (int i = 2; i &lt;= n - 2; i++) {\n            String s = Integer.toString(n, i);\n            int p1 = 0;\n            int p2 = s.length()-1;\n            while (p1 &lt; p2) {\n                if (s.charAt(p1++) != s.charAt(p2--)) return false;\n            }\n        }\n        return true;\n    }\n}\n</code></pre> <p>\u89e3\u6cd52: \u8f6c int</p> <p>\u8fdb\u5236\u5c31\u662fmod\u7684\u4f59\u6570\u7684\u6392\u5217</p> <pre><code>class Solution {\n    public boolean isStrictlyPalindromic(int n) {\n        for (int i = 2; i &lt;= n - 2; i++) {\n            StringBuilder sb = new StringBuilder();\n            int num = n;\n            while (num != 0) {\n                int mod = num % i;\n                sb.append(mod);\n                num /= i;\n            }\n            if (!check(sb)) return false;\n        }\n        return true;\n    }\n\n    boolean check(StringBuilder sb) {\n        int p0 = 0, p1 = sb.length() - 1;\n        while (p0 &lt; p1) {\n            if (sb.charAt(p0) != sb.charAt(p1)) return false;\n            p0++;\n            p1--;\n        }\n        return true;\n    }\n}\n</code></pre> <p>\u89e3\u6cd53: \u63a8\u5bfc</p> <p>n\u22655\uff0c\u5b83\u4eec\u7684 (n\u22122) \u8fdb\u5236\u8868\u793a\u90fd\u662f 12\uff0c\u90fd\u4e0d\u662f\u56de\u6587\u7684 n=4, 2\u8fdb\u5236\u4e5f\u4e0d\u662f\u56de\u6587 \u4e4b\u6240\u4ee5\u8981\u8003\u8651n=4\u662f\u56e0\u4e3a\u4f59\u65702\u6700\u5c0f\u662f3\u8fdb\u5236</p> <pre><code>class Solution {\n    public boolean isStrictlyPalindromic(int n) {\n        return false;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_8","title":"\u7f16\u8f91\u5b57\u7b26\u4e32","text":""},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#offer-05-easy","title":"\u5251\u6307 Offer 05. \u66ff\u6362\u7a7a\u683c easy","text":"<p>\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\uff0c\u628a\u5b57\u7b26\u4e32 s \u4e2d\u7684\u6bcf\u4e2a\u7a7a\u683c\u66ff\u6362\u6210\"%20\"\u3002</p> <pre><code>class Solution {\n    public String replaceSpace(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i &lt; s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == ' ') sb.append(\"%20\");\n            else sb.append(c);\n        }\n        return sb.toString();\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#2390-mid","title":"2390. \u4ece\u5b57\u7b26\u4e32\u4e2d\u79fb\u9664\u661f\u53f7 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5305\u542b\u82e5\u5e72\u661f\u53f7 * \u7684\u5b57\u7b26\u4e32 s \u3002</p> <p>\u5728\u4e00\u6b65\u64cd\u4f5c\u4e2d\uff0c\u4f60\u53ef\u4ee5\uff1a</p> <ul> <li>\u9009\u4e2d s \u4e2d\u7684\u4e00\u4e2a\u661f\u53f7\u3002</li> <li>\u79fb\u9664\u661f\u53f7 \u5de6\u4fa7 \u6700\u8fd1\u7684\u90a3\u4e2a \u975e\u661f\u53f7 \u5b57\u7b26\uff0c\u5e76\u79fb\u9664\u8be5\u661f\u53f7\u81ea\u8eab\u3002</li> </ul> <p>\u8fd4\u56de\u79fb\u9664 \u6240\u6709 \u661f\u53f7\u4e4b\u540e\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u5f53\u6808\u505a</p> <pre><code>class Solution {\n    public String removeStars(String s) {\n        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n            if (c == '*') {\n                sb.deleteCharAt(sb.length() - 1);\n            } else sb.append(c);\n        }\n        return sb.toString();\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#_9","title":"\u53cd\u8f6c","text":""},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2/#557-iii-easy","title":"557. \u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd III easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u4f60\u9700\u8981\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u6bcf\u4e2a\u5355\u8bcd\u7684\u5b57\u7b26\u987a\u5e8f\uff0c\u540c\u65f6\u4ecd\u4fdd\u7559\u7a7a\u683c\u548c\u5355\u8bcd\u7684\u521d\u59cb\u987a\u5e8f\u3002</p> <pre><code>class Solution {\n    public String reverseWords(String s) {\n        int l = 0, r = 0;\n        char[] arr = s.toCharArray();\n        for (int i = 0; i &lt; arr.length; i++) {\n            if (arr[i] != ' ') {\n                r = i;\n            } else {\n                reverse(arr, l, r);\n                l = i + 1;\n                r = l;\n            }\n        }\n        reverse(arr, l, r);\n        return new String(arr);\n    }\n\n    public void reverse(char[] s, int l, int r) {\n        while (l &lt; r) {\n            char c = s[l];\n            s[l] = s[r];\n            s[r] = c;\n            l++;\n            r--;\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/","title":"\u5339\u914d\u5b57\u7b26\u4e32","text":""},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/#_2","title":"\u72b6\u6001\u673a","text":""},{"location":"leetcode/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/#offer-20-mid","title":"\u5251\u6307 Offer 20. \u8868\u793a\u6570\u503c\u7684\u5b57\u7b26\u4e32 mid","text":"<p>\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u7528\u6765\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u8868\u793a\u6570\u503c\uff08\u5305\u62ec\u6574\u6570\u548c\u5c0f\u6570\uff09\u3002</p> <p>\u6570\u503c\uff08\u6309\u987a\u5e8f\uff09\u53ef\u4ee5\u5206\u6210\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a</p> <ol> <li>\u82e5\u5e72\u7a7a\u683c</li> <li>\u4e00\u4e2a \u5c0f\u6570 \u6216\u8005 \u6574\u6570</li> <li>\uff08\u53ef\u9009\uff09\u4e00\u4e2a 'e'\u6216 'E'\uff0c\u540e\u9762\u8ddf\u7740\u4e00\u4e2a \u6574\u6570</li> <li>\u82e5\u5e72\u7a7a\u683c</li> </ol> <p>\u5c0f\u6570\uff08\u6309\u987a\u5e8f\uff09\u53ef\u4ee5\u5206\u6210\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a</p> <ol> <li>\uff08\u53ef\u9009\uff09\u4e00\u4e2a\u7b26\u53f7\u5b57\u7b26\uff08'+' \u6216 '-'\uff09</li> <li>\u4e0b\u8ff0\u683c\u5f0f\u4e4b\u4e00\uff1a<ul> <li>\u81f3\u5c11\u4e00\u4f4d\u6570\u5b57\uff0c\u540e\u9762\u8ddf\u7740\u4e00\u4e2a\u70b9 '.'</li> <li>\u81f3\u5c11\u4e00\u4f4d\u6570\u5b57\uff0c\u540e\u9762\u8ddf\u7740\u4e00\u4e2a\u70b9 '.' \uff0c\u540e\u9762\u518d\u8ddf\u7740\u81f3\u5c11\u4e00\u4f4d\u6570\u5b57</li> <li>\u4e00\u4e2a\u70b9 '.' \uff0c\u540e\u9762\u8ddf\u7740\u81f3\u5c11\u4e00\u4f4d\u6570\u5b57</li> </ul> </li> </ol> <p>\u6574\u6570\uff08\u6309\u987a\u5e8f\uff09\u53ef\u4ee5\u5206\u6210\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a</p> <ol> <li>\uff08\u53ef\u9009\uff09\u4e00\u4e2a\u7b26\u53f7\u5b57\u7b26\uff08'+' \u6216 '-'\uff09</li> <li>\u81f3\u5c11\u4e00\u4f4d\u6570\u5b57</li> </ol> <p>\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a</p> <pre><code>class Solution {\n    public boolean isNumber(String s) {\n        // \u6709\u9650\u81ea\u52a8\u72b6\u6001\u673a\n        Map[] states = {\n                Map.of(' ', 0, '+', 1, '0', 2, '.', 3), //0 start\n                Map.of('0', 2, '.', 3),                 //1 +-\n                Map.of('0', 2, '.', 4, 'e', 5, ' ', 8), //2 num \u6574\u6570\u90e8\u5206\n                Map.of('0', 4),                         //3 \u6ca1\u6709\u524d\u5bfcnum .\u7684\u5c0f\u6570\u90e8\u5206\n                Map.of('0', 4, 'e', 5, ' ', 8),         //4 . &amp; num \u5c0f\u6570\u90e8\u5206\n                Map.of('+', 6, '0', 7),                 //5 e\n                Map.of('0', 7),                         //6 +-\n                Map.of('0', 7, ' ', 8),                 //7 num\n                Map.of(' ', 8)                          //8\n        };\n        int idx = 0;\n        char type;\n        for (char c : s.toCharArray()) {\n            if (c &gt;= '0' &amp;&amp; c &lt;= '9') type = '0';\n            else if (c == '+' || c == '-') type = '+';\n            else if (c == 'e' || c == 'E') type = 'e';\n            else if (c == '.' || c == ' ') type = c;\n            else type = '?';\n            Map state = states[idx];\n            // \u5f53\u524d\u72b6\u6001\u4e0d\u5408\u6cd5\n            if (!state.containsKey(type)) return false;\n            // \u4e0b\u4e00\u4e2a\u72b6\u6001\n            idx = (int) state.get(type);\n        }\n        return idx == 2 || idx == 4 || idx == 7 || idx == 8;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E5%BE%AA%E7%8E%AF%E6%95%B0%E7%BB%84%E6%89%BE%E6%9C%80%E5%B0%8F%E5%B7%AE/","title":"\u5faa\u73af\u6570\u7ec4\u627e\u6700\u5c0f\u5dee","text":""},{"location":"leetcode/%E5%BE%AA%E7%8E%AF%E6%95%B0%E7%BB%84%E6%89%BE%E6%9C%80%E5%B0%8F%E5%B7%AE/#_1","title":"\u5faa\u73af\u6570\u7ec4\u627e\u6700\u5c0f\u5dee","text":""},{"location":"leetcode/%E5%BE%AA%E7%8E%AF%E6%95%B0%E7%BB%84%E6%89%BE%E6%9C%80%E5%B0%8F%E5%B7%AE/#539-mid","title":"539. \u6700\u5c0f\u65f6\u95f4\u5dee mid","text":"<p>\u5251\u6307 Offer II 035. \u6700\u5c0f\u65f6\u95f4\u5dee</p> <p>\u7ed9\u5b9a\u4e00\u4e2a 24 \u5c0f\u65f6\u5236\uff08\u5c0f\u65f6:\u5206\u949f \"HH:MM\"\uff09\u7684\u65f6\u95f4\u5217\u8868\uff0c\u627e\u51fa\u5217\u8868\u4e2d\u4efb\u610f\u4e24\u4e2a\u65f6\u95f4\u7684\u6700\u5c0f\u65f6\u95f4\u5dee\u5e76\u4ee5\u5206\u949f\u6570\u8868\u793a\u3002</p> <pre><code>class Solution {\n    public int findMinDifference(List&lt;String&gt; timePoints) {\n        if (timePoints.size() &gt; 1440) return 0;\n        // 00:00 -&gt; 23:59\n        int[] arr = new int[timePoints.size()];\n        for (int i = 0; i &lt; timePoints.size(); i++) {\n            String s = timePoints.get(i);\n            String[] ss = s.split(\":\");\n            arr[i] = Integer.parseInt(ss[0]) * 60 + Integer.parseInt(ss[1]);\n        }\n        Arrays.sort(arr);\n        int res = arr[0] + 24 * 60 - arr[arr.length - 1];\n        for (int i = 1; i &lt; arr.length; i++) {\n            res = Math.min(res, arr[i] - arr[i - 1]);\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%90%9C%E7%B4%A2/","title":"\u641c\u7d22","text":"<p>Breadth First Search</p>"},{"location":"leetcode/%E6%90%9C%E7%B4%A2/#_2","title":"\u6700\u77ed\u8def\u5f84","text":""},{"location":"leetcode/%E6%90%9C%E7%B4%A2/#752-mid","title":"752. \u6253\u5f00\u8f6c\u76d8\u9501 mid","text":"<p>\u5251\u6307 Offer II 109. \u5f00\u5bc6\u7801\u9501</p> <p>\u4f60\u6709\u4e00\u4e2a\u5e26\u6709\u56db\u4e2a\u5706\u5f62\u62e8\u8f6e\u7684\u8f6c\u76d8\u9501\u3002\u6bcf\u4e2a\u62e8\u8f6e\u90fd\u670910\u4e2a\u6570\u5b57\uff1a '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' \u3002\u6bcf\u4e2a\u62e8\u8f6e\u53ef\u4ee5\u81ea\u7531\u65cb\u8f6c\uff1a\u4f8b\u5982\u628a '9' \u53d8\u4e3a '0'\uff0c'0' \u53d8\u4e3a '9' \u3002\u6bcf\u6b21\u65cb\u8f6c\u90fd\u53ea\u80fd\u65cb\u8f6c\u4e00\u4e2a\u62e8\u8f6e\u7684\u4e00\u4f4d\u6570\u5b57\u3002</p> <p>\u9501\u7684\u521d\u59cb\u6570\u5b57\u4e3a '0000' \uff0c\u4e00\u4e2a\u4ee3\u8868\u56db\u4e2a\u62e8\u8f6e\u7684\u6570\u5b57\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u5217\u8868 deadends \u5305\u542b\u4e86\u4e00\u7ec4\u6b7b\u4ea1\u6570\u5b57\uff0c\u4e00\u65e6\u62e8\u8f6e\u7684\u6570\u5b57\u548c\u5217\u8868\u91cc\u7684\u4efb\u4f55\u4e00\u4e2a\u5143\u7d20\u76f8\u540c\uff0c\u8fd9\u4e2a\u9501\u5c06\u4f1a\u88ab\u6c38\u4e45\u9501\u5b9a\uff0c\u65e0\u6cd5\u518d\u88ab\u65cb\u8f6c\u3002</p> <p>\u5b57\u7b26\u4e32 target \u4ee3\u8868\u53ef\u4ee5\u89e3\u9501\u7684\u6570\u5b57\uff0c\u4f60\u9700\u8981\u7ed9\u51fa\u89e3\u9501\u9700\u8981\u7684\u6700\u5c0f\u65cb\u8f6c\u6b21\u6570\uff0c\u5982\u679c\u65e0\u8bba\u5982\u4f55\u4e0d\u80fd\u89e3\u9501\uff0c\u8fd4\u56de -1 \u3002</p> <p>\u5355\u8bcd\u63a5\u9f99 BFS \u8fd8\u80fd\u7528 A* \u7b97\u6cd5</p> <pre><code>class Solution {\n    public int openLock(String[] deadends, String target) {\n        if (\"0000\".equals(target)) return 0;\n        Set&lt;String&gt; deadSet = new HashSet&lt;&gt;();\n        Collections.addAll(deadSet, deadends);\n        if (deadSet.contains(\"0000\")) return -1;\n        Set&lt;String&gt; visit = new HashSet&lt;&gt;();\n        Queue&lt;String&gt; que = new ArrayDeque&lt;&gt;();\n        que.add(\"0000\");\n        visit.add(\"0000\");\n        int res = 0;\n        while (!que.isEmpty()) {\n            int size = que.size();\n            while (size-- &gt; 0) {\n                String s = que.remove();\n                if (s.equals(target)) return res;\n                add(que, visit, s, deadSet);\n            }\n            res++;\n        }\n        return -1;\n    }\n\n    private void add(Queue&lt;String&gt; que, Set&lt;String&gt; visit, String s, Set&lt;String&gt; deadSet) {\n        StringBuilder sb = new StringBuilder(s);\n        for (int i = 0; i &lt; 4; i++) {\n            char c = s.charAt(i);\n            // \u4e0a\n            sb.setCharAt(i, (char) (c == '9' ? '0' : c + 1));\n            String t = sb.toString();\n            if (!deadSet.contains(t) &amp;&amp; !visit.contains(t)) {\n                que.add(t);\n                visit.add(t);\n            }\n            // \u4e0b\n            sb.setCharAt(i, (char) (c == '0' ? '9' : c - 1));\n            t = sb.toString();\n            if (!deadSet.contains(t) &amp;&amp; !visit.contains(t)) {\n                que.add(t);\n                visit.add(t);\n            }\n            // \u590d\u4f4d\n            sb.setCharAt(i, c);\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%90%9C%E7%B4%A2/#_3","title":"\u77e9\u9635\u6700\u77ed\u8def\u5f84","text":""},{"location":"leetcode/%E6%90%9C%E7%B4%A2/#542-01-mid","title":"542. 01 \u77e9\u9635 mid","text":"<p>\u5251\u6307 Offer II 107. \u77e9\u9635\u4e2d\u7684\u8ddd\u79bb</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u7531 0 \u548c 1 \u7ec4\u6210\u7684\u77e9\u9635 mat \uff0c\u8bf7\u8f93\u51fa\u4e00\u4e2a\u5927\u5c0f\u76f8\u540c\u7684\u77e9\u9635\uff0c\u5176\u4e2d\u6bcf\u4e00\u4e2a\u683c\u5b50\u662f mat \u4e2d\u5bf9\u5e94\u4f4d\u7f6e\u5143\u7d20\u5230\u6700\u8fd1\u7684 0 \u7684\u8ddd\u79bb\u3002</p> <p>\u4e24\u4e2a\u76f8\u90bb\u5143\u7d20\u95f4\u7684\u8ddd\u79bb\u4e3a 1 \u3002</p> <p>\u4ece0\u5f00\u59cb BFS \u6ce8\u610f, visit\u5e94\u8be5add\u7684\u65f6\u5019\u53d8\u66f4, \u8ddd\u79bb\u53ef\u4ee5remove\u7684\u65f6\u5019\u66f4\u65b0</p> <pre><code>class Solution {\n    public int[][] updateMatrix(int[][] mat) {\n        int[][] dic = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n        int r = mat.length, c = mat[0].length;\n        Queue&lt;int[]&gt; que = new LinkedList&lt;&gt;();\n        // add \u7acb\u523b visit[][]=true\n        boolean[][] visit = new boolean[r][c];\n        for (int i = 0; i &lt; r; i++) {\n            for (int j = 0; j &lt; c; j++) {\n                if (mat[i][j] == 0) {\n                    que.add(new int[]{i, j});\n                    visit[i][j] = true;\n                }\n            }\n        }\n        int[][] res = new int[r][c];\n        // \u53d6\u51fa\u6765\u540e\u786e\u5b9a\u8ddd\u79bb, \u4e5f\u53ef\u4ee5\u653e\u7684\u65f6\u5019\u786e\u5b9a\n        int distance = 0;\n        while (!que.isEmpty()) {\n            int size = que.size();\n            while (size-- &gt; 0) {\n                int[] loc = que.remove();\n                int i = loc[0], j = loc[1];\n                res[i][j] = distance;\n                for (int[] d : dic) {\n                    int x = i + d[0], y = j + d[1];\n                    if (x &gt;= 0 &amp;&amp; x &lt; r &amp;&amp;\n                            y &gt;= 0 &amp;&amp; y &lt; c &amp;&amp;\n                            !visit[x][y]) {\n                        que.add(new int[]{x, y});\n                        visit[x][y] = true;\n                    }\n                }\n            }\n            distance++;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%90%9C%E7%B4%A2/#1091-mid","title":"1091. \u4e8c\u8fdb\u5236\u77e9\u9635\u4e2d\u7684\u6700\u77ed\u8def\u5f84 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a n x n \u7684\u4e8c\u8fdb\u5236\u77e9\u9635 grid \u4e2d\uff0c\u8fd4\u56de\u77e9\u9635\u4e2d\u6700\u77ed \u7545\u901a\u8def\u5f84 \u7684\u957f\u5ea6\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8def\u5f84\uff0c\u8fd4\u56de -1 \u3002 \u4e8c\u8fdb\u5236\u77e9\u9635\u4e2d\u7684 \u7545\u901a\u8def\u5f84 \u662f\u4e00\u6761\u4ece \u5de6\u4e0a\u89d2 \u5355\u5143\u683c\uff08\u5373\uff0c(0, 0)\uff09\u5230 \u53f3\u4e0b\u89d2 \u5355\u5143\u683c\uff08\u5373\uff0c(n - 1, n - 1)\uff09\u7684\u8def\u5f84\uff0c\u8be5\u8def\u5f84\u540c\u65f6\u6ee1\u8db3\u4e0b\u8ff0\u8981\u6c42\uff1a</p> <p>\u8def\u5f84\u9014\u7ecf\u7684\u6240\u6709\u5355\u5143\u683c\u90fd\u7684\u503c\u90fd\u662f 0 \u3002 \u8def\u5f84\u4e2d\u6240\u6709\u76f8\u90bb\u7684\u5355\u5143\u683c\u5e94\u5f53\u5728 8 \u4e2a\u65b9\u5411\u4e4b\u4e00 \u4e0a\u8fde\u901a\uff08\u5373\uff0c\u76f8\u90bb\u4e24\u5355\u5143\u4e4b\u95f4\u5f7c\u6b64\u4e0d\u540c\u4e14\u5171\u4eab\u4e00\u6761\u8fb9\u6216\u8005\u4e00\u4e2a\u89d2\uff09\u3002</p> <pre><code>class Solution {\n    public int shortestPathBinaryMatrix(int[][] grid) {\n        if (grid[0][0] == 1) return -1;\n        int deep = grid.length - 1;\n        int length = grid[0].length - 1;\n        int[][] dir = {{1, -1}, {1, 0}, {1, 1}, {0, -1}, {0, 1}, {-1, -1}, {-1, 0}, {-1, 1}};\n\n        int cnt = 0;\n        Queue&lt;int[]&gt; que = new LinkedList&lt;&gt;();\n        que.add(new int[]{0, 0});\n        grid[0][0] = 1;\n\n        while (!que.isEmpty()) {\n            cnt++;\n            int size = que.size();\n            while (size-- &gt; 0) {\n                int[] o = que.remove();\n                if (o[0] == deep &amp;&amp; o[1] == length) return cnt;\n\n                for (int[] d : dir) {\n                    int x = d[0];\n                    int y = d[1];\n                    // \u51fa\u754c | \u4e0d\u80fd\u8d70\n                    if (o[0] + x &lt; 0\n                            || o[1] + y &lt; 0\n                            || o[0] + x &gt; deep\n                            || o[1] + y &gt; length\n                            || grid[o[0] + x][o[1] + y] == 1) continue;\n\n                    que.add(new int[]{o[0] + x, o[1] + y});\n                    grid[o[0] + x][o[1] + y] = 1;\n                }\n            }\n        }\n        return -1;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%90%9C%E7%B4%A2/#_4","title":"\u6240\u6709\u8def\u5f84","text":""},{"location":"leetcode/%E6%90%9C%E7%B4%A2/#797-mid","title":"797. \u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84 mid","text":"<p>\u5251\u6307 Offer II 110. \u6240\u6709\u8def\u5f84</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6709 n \u4e2a\u8282\u70b9\u7684 \u6709\u5411\u65e0\u73af\u56fe\uff08DAG\uff09\uff0c\u8bf7\u4f60\u627e\u51fa\u6240\u6709\u4ece\u8282\u70b9 0 \u5230\u8282\u70b9 n-1 \u7684\u8def\u5f84\u5e76\u8f93\u51fa\uff08\u4e0d\u8981\u6c42\u6309\u7279\u5b9a\u987a\u5e8f\uff09 graph[i]\u662f\u4e00\u4e2a\u4ece\u8282\u70b9 i \u53ef\u4ee5\u8bbf\u95ee\u7684\u6240\u6709\u8282\u70b9\u7684\u5217\u8868\uff08\u5373\u4ece\u8282\u70b9 i \u5230\u8282\u70b9 graph[i][j]\u5b58\u5728\u4e00\u6761\u6709\u5411\u8fb9\uff09\u3002</p> <pre><code>class Solution {\n    public List&lt;List&lt;Integer&gt;&gt; allPathsSourceTarget(int[][] graph) {\n        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\n        dfs(graph, res, new ArrayList&lt;&gt;(), 0);\n        return res;\n    }\n\n    private void dfs(int[][] graph, List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; list,\n                     int i) {\n        list.add(i);\n        if (i == graph.length - 1) {\n            res.add(new ArrayList&lt;&gt;(list));\n            list.remove(list.size() - 1);\n            return;\n        }\n        for (int e : graph[i]) {\n            dfs(graph, res, list, e);\n        }\n        list.remove(list.size() - 1);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%90%9C%E7%B4%A2/#_5","title":"\u56fe\u4e4b\u95f4\u7684\u8fde\u901a\u6027\u5224\u5b9a","text":""},{"location":"leetcode/%E6%90%9C%E7%B4%A2/#13-mid","title":"\u9762\u8bd5\u989813. \u673a\u5668\u4eba\u7684\u8fd0\u52a8\u8303\u56f4 mid","text":"<p>\u5730\u4e0a\u6709\u4e00\u4e2am\u884cn\u5217\u7684\u65b9\u683c\uff0c\u4ece\u5750\u6807 [0,0] \u5230\u5750\u6807 [m-1,n-1] \u3002\u4e00\u4e2a\u673a\u5668\u4eba\u4ece\u5750\u6807 [0, 0] \u7684\u683c\u5b50\u5f00\u59cb\u79fb\u52a8\uff0c\u5b83\u6bcf\u6b21\u53ef\u4ee5\u5411\u5de6\u3001\u53f3\u3001\u4e0a\u3001\u4e0b\u79fb\u52a8\u4e00\u683c\uff08\u4e0d\u80fd\u79fb\u52a8\u5230\u65b9\u683c\u5916\uff09\uff0c\u4e5f\u4e0d\u80fd\u8fdb\u5165\u884c\u5750\u6807\u548c\u5217\u5750\u6807\u7684\u6570\u4f4d\u4e4b\u548c\u5927\u4e8ek\u7684\u683c\u5b50\u3002\u4f8b\u5982\uff0c\u5f53k\u4e3a18\u65f6\uff0c\u673a\u5668\u4eba\u80fd\u591f\u8fdb\u5165\u65b9\u683c [35, 37] \uff0c\u56e0\u4e3a3+5+3+7=18\u3002\u4f46\u5b83\u4e0d\u80fd\u8fdb\u5165\u65b9\u683c [35, 38]\uff0c\u56e0\u4e3a3+5+3+8=19\u3002\u8bf7\u95ee\u8be5\u673a\u5668\u4eba\u80fd\u591f\u5230\u8fbe\u591a\u5c11\u4e2a\u683c\u5b50\uff1f</p> <p>\u8bc1\u660e\u53ea\u5728\u4e24\u4e2a\u65b9\u5411\u641c\u7d22\u6709\u6548</p> <pre><code>class Solution {\n    public int movingCount(int m, int n, int k) {\n        int cnt = 0;\n        boolean[][] dp = new boolean[m][n];\n        for (int i = 0; i &lt; m; i++) {\n            for (int j = 0; j &lt; n; j++) {\n                if (i == 0 &amp;&amp; j == 0) {\n                    dp[i][j] = true;\n                    cnt++;\n                    continue;\n                }\n                int sum = 0;\n                int a = i, b = j;\n                while (a != 0) {\n                    sum += a % 10;\n                    a /= 10;\n                }\n                while (b != 0) {\n                    sum += b % 10;\n                    b /= 10;\n                }\n                if (sum &lt;= k\n                        &amp;&amp; (i - 1 &gt;= 0 &amp;&amp; dp[i - 1][j] || j - 1 &gt;= 0 &amp;&amp; dp[i][j - 1])\n                ) {\n                    dp[i][j] = true;\n                    cnt++;\n                }\n            }\n        }\n        return cnt;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%90%9C%E7%B4%A2/#547-mid","title":"547. \u7701\u4efd\u6570\u91cf mid","text":"<p>\u6709 n \u4e2a\u57ce\u5e02\uff0c\u5176\u4e2d\u4e00\u4e9b\u5f7c\u6b64\u76f8\u8fde\uff0c\u53e6\u4e00\u4e9b\u6ca1\u6709\u76f8\u8fde\u3002\u5982\u679c\u57ce\u5e02 a \u4e0e\u57ce\u5e02 b \u76f4\u63a5\u76f8\u8fde\uff0c\u4e14\u57ce\u5e02 b \u4e0e\u57ce\u5e02 c \u76f4\u63a5\u76f8\u8fde\uff0c\u90a3\u4e48\u57ce\u5e02 a \u4e0e\u57ce\u5e02 c \u95f4\u63a5\u76f8\u8fde\u3002 \u7701\u4efd \u662f\u4e00\u7ec4\u76f4\u63a5\u6216\u95f4\u63a5\u76f8\u8fde\u7684\u57ce\u5e02\uff0c\u7ec4\u5185\u4e0d\u542b\u5176\u4ed6\u6ca1\u6709\u76f8\u8fde\u7684\u57ce\u5e02\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a n x n \u7684\u77e9\u9635 isConnected \uff0c\u5176\u4e2d isConnected[i][j] = 1 \u8868\u793a\u7b2c i \u4e2a\u57ce\u5e02\u548c\u7b2c j \u4e2a\u57ce\u5e02\u76f4\u63a5\u76f8\u8fde\uff0c\u800c isConnected[i][j] = 0 \u8868\u793a\u4e8c\u8005\u4e0d\u76f4\u63a5\u76f8\u8fde\u3002 \u8fd4\u56de\u77e9\u9635\u4e2d \u7701\u4efd \u7684\u6570\u91cf\u3002</p> <p>\u89e3\u6cd51: DFS</p> <pre><code>class Solution {\n    private int n;\n\n    public int findCircleNum(int[][] isConnected) {\n        n = isConnected.length;\n        int cnt = 0;\n        boolean[] visited = new boolean[n];\n        for (int i = 0; i &lt; n; i++) {\n            if (!visited[i]) {\n                dfs(isConnected, i, visited);\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n\n    // \u5904\u7406\u7b2c i \u884c\u7684\u5173\u7cfb\n    private void dfs(int[][] isConnected, int i, boolean[] visited) {\n        visited[i] = true;\n        for (int j = 0; j &lt; n; j++) {\n            if (isConnected[i][j] == 1 &amp;&amp; !visited[j]) {\n                dfs(isConnected, j, visited);\n            }\n        }\n    }\n}\n</code></pre> <p>\u89e3\u6cd52: \u5e76\u67e5\u96c6</p> <pre><code>class Solution {\n    public int findCircleNum(int[][] isConnected) {\n        int n = isConnected.length;\n        int[] parent = new int[n];\n        for (int i = 0; i &lt; n; i++) {\n            parent[i] = i;\n        }\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = i + 1; j &lt; n; j++) {\n                if (isConnected[i][j] == 1) {\n                    union(parent, i, j);\n                }\n            }\n        }\n        int res = 0;\n        for (int i = 0; i &lt; n; i++) {\n            // \u8fd9\u91cc\u5c24\u5176\u6ce8\u610f, \u4e00\u4e2a\u96c6\u4e2d\u53ef\u80fd\u5c5e\u4e8e\u4e0d\u540c parent\n            if (parent[i] == i) res++;\n        }\n        return res;\n    }\n\n    public void union(int[] parent, int i, int j) {\n        parent[find(parent, i)] = find(parent, j);\n    }\n\n    public int find(int[] parent, int i) {\n        if (parent[i] != i) {\n            parent[i] = find(parent, parent[i]);\n        }\n        return parent[i];\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%90%9C%E7%B4%A2/#695-mid","title":"695. \u5c9b\u5c7f\u7684\u6700\u5927\u9762\u79ef mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5927\u5c0f\u4e3a m x n \u7684\u4e8c\u8fdb\u5236\u77e9\u9635 grid \u3002 \u5c9b\u5c7f \u662f\u7531\u4e00\u4e9b\u76f8\u90bb\u7684 1 (\u4ee3\u8868\u571f\u5730) \u6784\u6210\u7684\u7ec4\u5408\uff0c\u8fd9\u91cc\u7684\u300c\u76f8\u90bb\u300d\u8981\u6c42\u4e24\u4e2a 1 \u5fc5\u987b\u5728 \u6c34\u5e73\u6216\u8005\u7ad6\u76f4\u7684\u56db\u4e2a\u65b9\u5411\u4e0a \u76f8\u90bb\u3002\u4f60\u53ef\u4ee5\u5047\u8bbe grid \u7684\u56db\u4e2a\u8fb9\u7f18\u90fd\u88ab 0\uff08\u4ee3\u8868\u6c34\uff09\u5305\u56f4\u7740\u3002 \u5c9b\u5c7f\u7684\u9762\u79ef\u662f\u5c9b\u4e0a\u503c\u4e3a 1 \u7684\u5355\u5143\u683c\u7684\u6570\u76ee\u3002 \u8ba1\u7b97\u5e76\u8fd4\u56de grid \u4e2d\u6700\u5927\u7684\u5c9b\u5c7f\u9762\u79ef\u3002\u5982\u679c\u6ca1\u6709\u5c9b\u5c7f\uff0c\u5219\u8fd4\u56de\u9762\u79ef\u4e3a 0 \u3002</p> <pre><code>class Solution {\n    int r, c;\n    int[][] dir = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n\n    public int maxAreaOfIsland(int[][] grid) {\n        if (grid == null || grid.length == 0) return 0;\n        r = grid.length;\n        c = grid[0].length;\n        int res = 0;\n        for (int i = 0; i &lt; r; i++) {\n            for (int j = 0; j &lt; c; j++) {\n                if (grid[i][j] == 0) continue;\n                res = Math.max(res, dfs(grid, i, j));\n            }\n        }\n        return res;\n    }\n\n    int dfs(int[][] grid, int i, int j) {\n        if (i &lt; 0 || i &gt;= r || j &lt; 0 || j &gt;= c || grid[i][j] == 0) return 0;\n        // \u6807\u8bb0\u8d70\u8fc7\u7684\u4f4d\u7f6e\n        grid[i][j] = 0;\n        int area = 1;\n        for (int[] d : dir) {\n            area += dfs(grid, i + d[0], j + d[1]);\n        }\n        return area;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%90%9C%E7%B4%A2/#_6","title":"\u77e9\u9635\u4e2d\u6700\u5916\u5c42\u7684\u8fde\u901a\u6027","text":""},{"location":"leetcode/%E6%90%9C%E7%B4%A2/#417-mid","title":"417. \u592a\u5e73\u6d0b\u5927\u897f\u6d0b\u6c34\u6d41\u95ee\u9898 mid","text":"<p>\u6709\u4e00\u4e2a m \u00d7 n \u7684\u77e9\u5f62\u5c9b\u5c7f\uff0c\u4e0e \u592a\u5e73\u6d0b \u548c \u5927\u897f\u6d0b \u76f8\u90bb\u3002 \u201c\u592a\u5e73\u6d0b\u201d \u5904\u4e8e\u5927\u9646\u7684\u5de6\u8fb9\u754c\u548c\u4e0a\u8fb9\u754c\uff0c\u800c \u201c\u5927\u897f\u6d0b\u201d \u5904\u4e8e\u5927\u9646\u7684\u53f3\u8fb9\u754c\u548c\u4e0b\u8fb9\u754c\u3002</p> <p>\u8fd9\u4e2a\u5c9b\u88ab\u5206\u5272\u6210\u4e00\u4e2a\u7531\u82e5\u5e72\u65b9\u5f62\u5355\u5143\u683c\u7ec4\u6210\u7684\u7f51\u683c\u3002\u7ed9\u5b9a\u4e00\u4e2a m x n \u7684\u6574\u6570\u77e9\u9635 heights \uff0c heights[r][c] \u8868\u793a\u5750\u6807 (r, c) \u4e0a\u5355\u5143\u683c \u9ad8\u4e8e\u6d77\u5e73\u9762\u7684\u9ad8\u5ea6 \u3002</p> <p>\u5c9b\u4e0a\u96e8\u6c34\u8f83\u591a\uff0c\u5982\u679c\u76f8\u90bb\u5355\u5143\u683c\u7684\u9ad8\u5ea6 \u5c0f\u4e8e\u6216\u7b49\u4e8e \u5f53\u524d\u5355\u5143\u683c\u7684\u9ad8\u5ea6\uff0c\u96e8\u6c34\u53ef\u4ee5\u76f4\u63a5\u5411\u5317\u3001\u5357\u3001\u4e1c\u3001\u897f\u6d41\u5411\u76f8\u90bb\u5355\u5143\u683c\u3002\u6c34\u53ef\u4ee5\u4ece\u6d77\u6d0b\u9644\u8fd1\u7684\u4efb\u4f55\u5355\u5143\u683c\u6d41\u5165\u6d77\u6d0b\u3002</p> <p>\u8fd4\u56de\u7f51\u683c\u5750\u6807 result \u7684 2D \u5217\u8868 \uff0c\u5176\u4e2d result[i] = [ri, ci] \u8868\u793a\u96e8\u6c34\u4ece\u5355\u5143\u683c (ri, ci) \u6d41\u52a8 \u65e2\u53ef\u6d41\u5411\u592a\u5e73\u6d0b\u4e5f\u53ef\u6d41\u5411\u5927\u897f\u6d0b</p> <p>\u4ece\u56db\u8fb9\u5f80\u91cc\u8fdb\u884cDFS, \u7528\u4e24\u4e2a\u77e9\u9635\u6807\u8bb0, \u5176\u4e2d\u91cd\u5408\u7684\u5c31\u662f</p> <pre><code>class Solution {\n    private int rc, cc;\n    private int[][] matrix;\n    private int[][] direction = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n\n    public List&lt;List&lt;Integer&gt;&gt; pacificAtlantic(int[][] matrix) {\n        List&lt;List&lt;Integer&gt;&gt; ret = new ArrayList&lt;&gt;();\n\n        rc = matrix.length;\n        cc = matrix[0].length;\n        this.matrix = matrix;\n        boolean[][] canReachP = new boolean[rc][cc];// Pacific Ocean\n        boolean[][] canReachA = new boolean[rc][cc];// Atlantic Ocean\n\n        for (int i = 0; i &lt; rc; i++) {\n            dfs(i, 0, canReachP);\n            dfs(i, cc - 1, canReachA);\n        }\n        for (int i = 0; i &lt; cc; i++) {\n            dfs(0, i, canReachP);\n            dfs(rc - 1, i, canReachA);\n        }\n\n        for (int i = 0; i &lt; rc; i++) {\n            for (int j = 0; j &lt; cc; j++) {\n                if (canReachP[i][j] &amp;&amp; canReachA[i][j]) {\n                    ret.add(Arrays.asList(i, j));\n                }\n            }\n        }\n\n        return ret;\n    }\n\n    private void dfs(int r, int c, boolean[][] canReach) {\n        if (canReach[r][c]) return;\n        canReach[r][c] = true;\n        for (int[] d : direction) {\n            int nextR = d[0] + r;\n            int nextC = d[1] + c;\n            if (nextR &lt; 0 || nextR &gt;= rc || nextC &lt; 0 || nextC &gt;= cc\n                    || matrix[r][c] &gt; matrix[nextR][nextC]) continue;\n            dfs(nextR, nextC, canReach);\n        }\n    }\n\n}\n</code></pre>"},{"location":"leetcode/%E6%90%9C%E7%B4%A2/#994-mid","title":"994. \u8150\u70c2\u7684\u6a58\u5b50 mid","text":"<p>\u5728\u7ed9\u5b9a\u7684 m x n \u7f51\u683c grid \u4e2d\uff0c\u6bcf\u4e2a\u5355\u5143\u683c\u53ef\u4ee5\u6709\u4ee5\u4e0b\u4e09\u4e2a\u503c\u4e4b\u4e00\uff1a</p> <ul> <li>\u503c 0 \u4ee3\u8868\u7a7a\u5355\u5143\u683c\uff1b</li> <li>\u503c 1 \u4ee3\u8868\u65b0\u9c9c\u6a58\u5b50\uff1b</li> <li>\u503c 2 \u4ee3\u8868\u8150\u70c2\u7684\u6a58\u5b50\u3002</li> </ul> <p>\u6bcf\u5206\u949f\uff0c\u8150\u70c2\u7684\u6a58\u5b50 \u5468\u56f4 4 \u4e2a\u65b9\u5411\u4e0a\u76f8\u90bb \u7684\u65b0\u9c9c\u6a58\u5b50\u90fd\u4f1a\u8150\u70c2\u3002</p> <p>\u8fd4\u56de \u76f4\u5230\u5355\u5143\u683c\u4e2d\u6ca1\u6709\u65b0\u9c9c\u6a58\u5b50\u4e3a\u6b62\u6240\u5fc5\u987b\u7ecf\u8fc7\u7684\u6700\u5c0f\u5206\u949f\u6570\u3002\u5982\u679c\u4e0d\u53ef\u80fd\uff0c\u8fd4\u56de -1 \u3002</p> <ol> <li>\u53d6\u51fa\u624d\u7b97\u4f5c\u6269\u6563</li> <li>\u641c\u7d22 2 \u4f5c\u4e3a -1\u4f4d\u7f6e(root \u53d6\u51fa,\u6269\u6563\u6570\u6b63\u597d==0), \u7edf\u8ba1\u65b0\u9c9c\u7684\u6570\u91cf</li> <li>\u5982\u679c\u65b0\u9c9c\u6570\u91cf==0 return 0</li> <li>BFS \u6269\u6563, \u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u7b97\u6269\u6563\u5230, \u5c06\u65b0\u9c9c\u4f4d\u7f6e\u52a0\u5165que, \u540c\u65f6\u65b0\u9c9c\u6570\u91cf--, \u6807\u8bb0\u5df2\u8bbf\u95ee</li> <li>\u5982\u679c\u65b0\u9c9c\u6570\u91cf&gt;0 return -1</li> </ol> <pre><code>class Solution {\n    public int orangesRotting(int[][] grid) {\n        // 2 -&gt; 1\n        int[][] dic = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n        int r = grid.length, c = grid[0].length;\n        Queue&lt;int[]&gt; que = new LinkedList&lt;&gt;();\n        boolean[][] visit = new boolean[r][c];\n        int fresh = 0;\n        for (int i = 0; i &lt; r; i++) {\n            for (int j = 0; j &lt; c; j++) {\n                if (grid[i][j] == 2) {\n                    que.add(new int[]{i, j});\n                    visit[i][j] = true;\n                } else if (grid[i][j] == 1) fresh++;\n            }\n        }\n        if (fresh == 0) return 0;\n        // \u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u7b97\u6269\u6563\n        int day = -1;\n        while (!que.isEmpty()) {\n            int size = que.size();\n            while (size-- &gt; 0) {\n                int[] loc = que.remove();\n                int i = loc[0], j = loc[1];\n                if (grid[i][j] == 1) fresh--;\n                for (int[] d : dic) {\n                    int x = i + d[0], y = j + d[1];\n                    if (x &gt;= 0 &amp;&amp; y &gt;= 0 &amp;&amp; x &lt; r &amp;&amp; y &lt; c &amp;&amp; !visit[x][y]) {\n                        visit[x][y] = true;\n                        if (grid[x][y] == 1) que.add(new int[]{x, y});\n                    }\n                }\n            }\n            day++;\n        }\n        if (fresh &gt; 0) return -1;\n        return day;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%90%9C%E7%B4%A2/#_7","title":"\u6570\u7ec4\u53ef\u8fbe\u6027\u641c\u7d22","text":""},{"location":"leetcode/%E6%90%9C%E7%B4%A2/#448-easy","title":"448. \u627e\u5230\u6240\u6709\u6570\u7ec4\u4e2d\u6d88\u5931\u7684\u6570\u5b57 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u542b n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums \uff0c\u5176\u4e2d nums[i] \u5728\u533a\u95f4 [1, n] \u5185\u3002\u8bf7\u4f60\u627e\u51fa\u6240\u6709\u5728 [1, n] \u8303\u56f4\u5185\u4f46\u6ca1\u6709\u51fa\u73b0\u5728 nums \u4e2d\u7684\u6570\u5b57\uff0c\u5e76\u4ee5\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u7ed3\u679c\u3002</p> <pre><code>class Solution {\n    public List&lt;Integer&gt; findDisappearedNumbers(int[] nums) {\n        // idx \u2208 (0,n-1)\n        // num \u2208 (1,n)\n        // \u628a\u503c\u6620\u5c04\u5230idx, \u5c06idx\u5bf9\u5e94\u4f4d\u7f6e\u7684\u503c\u7f6e\u4e3a\u8d1f \n        for (int o : nums) {\n            int i = Math.abs(o);\n            nums[i - 1] = -Math.abs(nums[i - 1]);\n        }\n        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();\n        for (int i = 0; i &lt; nums.length; i++) {\n            // \u6b63\u6570\u8bf4\u660e\u6ca1\u8bbf\u95ee\u8fc7, \u76f8\u5e94\u7684idx\u5c31\u662f\u7ed3\u679c\n            if (nums[i] &gt; 0) res.add(i + 1);\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%90%9C%E7%B4%A2/#565-mid","title":"565. \u6570\u7ec4\u5d4c\u5957 mid","text":"<p>\u7d22\u5f15\u4ece 0 \u5f00\u59cb\u957f\u5ea6\u4e3a N \u7684\u6570\u7ec4 A\uff0c\u5305\u542b 0 \u5230 N-1 \u7684\u6240\u6709\u6574\u6570\u3002\u627e\u5230\u6700\u5927\u7684\u96c6\u5408 S \u5e76\u8fd4\u56de\u5176\u5927\u5c0f\uff0c\u5176\u4e2d S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } \u4e14\u9075\u5b88\u4ee5\u4e0b\u7684\u89c4\u5219:</p> <p>\u5047\u8bbe\u9009\u62e9\u7d22\u5f15\u4e3a i \u7684\u5143\u7d20 A[i] \u4e3a S \u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0cS \u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u5e94\u8be5\u662f A[A[i]]\uff0c\u4e4b\u540e\u662f A[A[A[i]]]... \u4ee5\u6b64\u7c7b\u63a8\uff0c\u4e0d\u65ad\u6dfb\u52a0\u76f4\u5230S\u51fa\u73b0\u91cd\u590d\u7684\u5143\u7d20\u3002</p> <p>\u6709\u5411\u56fe\u5fc5\u7136\u7531\u4e00\u4e2a\u6216\u591a\u4e2a\u73af\u7ec4\u6210, \u800c\u4e14\u8d77\u59cb\u8282\u70b9\u5fc5\u7136\u662f\u6210\u73af\u8282\u70b9</p> <pre><code>class Solution {\n    public int arrayNesting(int[] nums) {\n        int ans = 0, n = nums.length;\n        boolean[] visit = new boolean[n];\n        for (int i = 0; i &lt; n; ++i) {\n            int cnt = 0;\n            // \u8fd9\u91cc\u7528 i, \u7ed3\u675f\u65f6\u8fd8\u4f1a\u505c\u7559\u5728\u539f\u4f4d\u7f6e\n            while (!visit[i]) {\n                visit[i] = true;\n                i = nums[i];\n                ++cnt;\n            }\n\n            ans = Math.max(ans, cnt);\n        }\n        return ans;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%90%9C%E7%B4%A2/#733-easy","title":"733. \u56fe\u50cf\u6e32\u67d3 easy","text":"<p>\u6709\u4e00\u5e45\u4ee5 m x n \u7684\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4\u8868\u793a\u7684\u56fe\u753b image \uff0c\u5176\u4e2d image[i][j]\u8868\u793a\u8be5\u56fe\u753b\u7684\u50cf\u7d20\u503c\u5927\u5c0f\u3002</p> <p>\u4f60\u4e5f\u88ab\u7ed9\u4e88\u4e09\u4e2a\u6574\u6570 sr , sc \u548c newColor \u3002\u4f60\u5e94\u8be5\u4ece\u50cf\u7d20 image[sr][sc]\u5f00\u59cb\u5bf9\u56fe\u50cf\u8fdb\u884c \u4e0a\u8272\u586b\u5145 \u3002</p> <p>\u4e3a\u4e86\u5b8c\u6210 \u4e0a\u8272\u5de5\u4f5c \uff0c\u4ece\u521d\u59cb\u50cf\u7d20\u5f00\u59cb\uff0c\u8bb0\u5f55\u521d\u59cb\u5750\u6807\u7684 \u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u65b9\u5411\u4e0a \u50cf\u7d20\u503c\u4e0e\u521d\u59cb\u5750\u6807\u76f8\u540c\u7684\u76f8\u8fde\u50cf\u7d20\u70b9\uff0c\u63a5\u7740\u518d\u8bb0\u5f55\u8fd9\u56db\u4e2a\u65b9\u5411\u4e0a\u7b26\u5408\u6761\u4ef6\u7684\u50cf\u7d20\u70b9\u4e0e\u4ed6\u4eec\u5bf9\u5e94 \u56db\u4e2a\u65b9\u5411\u4e0a \u50cf\u7d20\u503c\u4e0e\u521d\u59cb\u5750\u6807\u76f8\u540c\u7684\u76f8\u8fde\u50cf\u7d20\u70b9\uff0c\u2026\u2026\uff0c\u91cd\u590d\u8be5\u8fc7\u7a0b\u3002\u5c06\u6240\u6709\u6709\u8bb0\u5f55\u7684\u50cf\u7d20\u70b9\u7684\u989c\u8272\u503c\u6539\u4e3a newColor \u3002</p> <p>\u6700\u540e\u8fd4\u56de \u7ecf\u8fc7\u4e0a\u8272\u6e32\u67d3\u540e\u7684\u56fe\u50cf\u3002</p> <p>BFS</p> <pre><code>class Solution {\n    public int[][] floodFill(int[][] image, int sr, int sc, int color) {\n        // BFS\n        int[][] dic = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n        int r = image.length, c = image[0].length;\n        boolean[][] visit = new boolean[r][c];\n        Queue&lt;int[]&gt; que = new ArrayDeque&lt;&gt;();\n        que.add(new int[]{sr, sc});\n        while (!que.isEmpty()) {\n            int[] arr = que.remove();\n            int x = arr[0], y = arr[1];\n            visit[x][y] = true;\n            for (int[] d : dic) {\n                if (x + d[0] &lt; 0 || x + d[0] &gt;= r) continue;\n                if (y + d[1] &lt; 0 || y + d[1] &gt;= c) continue;\n                if (!visit[x + d[0]][y + d[1]] &amp;&amp; image[x][y] == image[x + d[0]][y + d[1]])\n                    que.add(new int[]{x + d[0], y + d[1]});\n            }\n            image[x][y] = color;\n        }\n        return image;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E5%AD%A6/","title":"\u6570\u5b66","text":""},{"location":"leetcode/%E6%95%B0%E5%AD%A6/#_1","title":"\u6570\u5b66","text":""},{"location":"leetcode/%E6%95%B0%E5%AD%A6/#6368-mid","title":"6368. \u627e\u51fa\u5b57\u7b26\u4e32\u7684\u53ef\u6574\u9664\u6570\u7ec4 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u5b57\u7b26\u4e32 word\uff0c\u957f\u5ea6\u4e3a n\uff0c\u7531\u4ece 0 \u5230 9 \u7684\u6570\u5b57\u7ec4\u6210\u3002\u53e6\u7ed9\u4f60\u4e00\u4e2a\u6b63\u6574\u6570 m\u3002 word \u7684 \u53ef\u6574\u9664\u6570\u7ec4 div \u662f\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u6570\u7ec4\uff0c\u5e76\u6ee1\u8db3\uff1a</p> <ul> <li>\u5982\u679c word[0,...,i] \u6240\u8868\u793a\u7684 \u6570\u503c \u80fd\u88ab m \u6574\u9664\uff0cdiv[i] = 1</li> <li>\u5426\u5219\uff0cdiv[i] = 0</li> </ul> <p>\u8fd4\u56de word \u7684\u53ef\u6574\u9664\u6570\u7ec4\u3002</p> <pre><code>class Solution {\n    public int[] divisibilityArray(String word, int m) {\n        int n = word.length();\n        int[] res = new int[n];\n        long a = 0;\n        for (int i = 0; i &lt; n; i++) {\n            a *= 10;\n            a += word.charAt(i) - '0';\n            a %= m;\n            if (a == 0) res[i] = 1;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E5%AD%A6/#offer-10-i-easy","title":"\u5251\u6307 Offer 10- I. \u6590\u6ce2\u90a3\u5951\u6570\u5217 easy","text":"<p>\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u8f93\u5165 n \uff0c\u6c42\u6590\u6ce2\u90a3\u5951\uff08Fibonacci\uff09\u6570\u5217\u7684\u7b2c n \u9879\uff08\u5373 F(N)\uff09\u3002\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <p>F(0) = 0,\u00a0 \u00a0F(1)\u00a0= 1 F(N) = F(N - 1) + F(N - 2), \u5176\u4e2d N &gt; 1.</p> <p>\u6590\u6ce2\u90a3\u5951\u6570\u5217\u7531 0 \u548c 1 \u5f00\u59cb\uff0c\u4e4b\u540e\u7684\u6590\u6ce2\u90a3\u5951\u6570\u5c31\u662f\u7531\u4e4b\u524d\u7684\u4e24\u6570\u76f8\u52a0\u800c\u5f97\u51fa\u3002</p> <p>\u7b54\u6848\u9700\u8981\u53d6\u6a21 1e9+7\uff081000000007\uff09\uff0c\u5982\u8ba1\u7b97\u521d\u59cb\u7ed3\u679c\u4e3a\uff1a1000000008\uff0c\u8bf7\u8fd4\u56de 1\u3002</p> <pre><code>class Solution {\n    public int fib(int n) {\n        if (n &lt; 2) return n;\n        int a = 0, b = 1, c = 0;\n        for (int i = 2; i &lt;= n; i++) {\n            c = (a + b) % 1000000007;\n            a = b;\n            b = c;\n        }\n        return c;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E5%AD%A6/#offer-44","title":"\u5251\u6307 Offer 44. \u6570\u5b57\u5e8f\u5217\u4e2d\u67d0\u4e00\u4f4d\u7684\u6570\u5b57","text":"<p>\u6570\u5b57\u4ee50123456789101112131415\u2026\u7684\u683c\u5f0f\u5e8f\u5217\u5316\u5230\u4e00\u4e2a\u5b57\u7b26\u5e8f\u5217\u4e2d\u3002\u5728\u8fd9\u4e2a\u5e8f\u5217\u4e2d\uff0c\u7b2c5\u4f4d\uff08\u4ece\u4e0b\u68070\u5f00\u59cb\u8ba1\u6570\uff09\u662f5\uff0c\u7b2c13\u4f4d\u662f1\uff0c\u7b2c19\u4f4d\u662f4\uff0c\u7b49\u7b49\u3002</p> <p>\u8bf7\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u6c42\u4efb\u610f\u7b2cn\u4f4d\u5bf9\u5e94\u7684\u6570\u5b57\u3002</p> <p>1\u4f4d\u6570: 9\u4e2a 19\u4f4d 2\u4f4d\u6570: 90\u4e2a 290\u4f4d 3\u4f4d\u6570: 900\u4e2a 3*900\u4f4d</p> <ol> <li>\u8ba9 n \u5148\u51cf\u6389\u524d\u9762\u7684\u5e8f\u5217\u957f\u5ea6;</li> <li>\u6c42i\u4f4d\u5e8f\u5217\u4e2d\u7b2c(n-1)\u4e2a\u4f4d\u7684\u503c;      &gt; \u7279\u522b\u6ce8\u610f n-1, \u4ece1\u5f00\u59cb\u7684\u7b2cn\u4e2a \u8981\u8f6c\u53d8\u6210 \u4ece0\u5f00\u59cb</li> </ol> <pre><code>class Solution {\n    public int findNthDigit(int n) {\n        // i \u4f4d\u6570\n        int i = 1;\n        // \u5e42\n        long mi = 1;\n        // \u6bcf\u79cd\u4f4d\u6570\u7684\u5e8f\u5217\u957f\u5ea6\n        long internal = 9;\n        while (n &gt; internal) {\n            n -= internal;\n            mi *= 10;\n            i++;\n            internal = i * mi * 9;\n        }\n        // \u6b64\u65f6, n \u662fi\u4f4d\u6570\u5e8f\u5217\u7684\u7b2cn\u4e2a\u4f4d(\u4ece1\u5f00\u59cb)\n        n -= 1; // \u4ece\u7b2c0\u4f4d\u5f00\u59cb\n        long num = mi + n / i;\n        return Long.toString(num).charAt(n % i) - '0';\n        // \u6216\u8005\u5982\u4e0b: \u8ba9\u4ece\u9ad8\u4f4d\u6570\u7b2c(n%i)\u4f4d\u6210\u4e3a\u4e2a\u4f4d, \u6700\u9ad8\u4f4d\u7684\u5e42=(i-1), \u4ece\u6700\u9ad8\u4f4d\u504f\u79fb(n%i)\n        return (int) (num / Math.pow(10, i - 1 - n % i)) % 10;\n\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E5%AD%A6/#6338-mid","title":"6338. \u7334\u5b50\u78b0\u649e\u7684\u65b9\u6cd5\u6570 mid","text":"<p>\u5927\u5e42\u6a21\u4e58</p> <p>\u89e3\u6cd51: \u5feb\u901f\u5e42</p> <pre><code>class Solution {\n    private static final int MOD = (int) (1E9 + 7);\n\n    public int monkeyMove(int n) {\n        // \u8fd9\u91cc\n        return (int) (pow(2, n) - 2 + MOD) % MOD;\n    }\n\n    private long pow(int a, int b) {\n        if (b == 0) return 1;\n        if (b == 1) return a;\n        long t = pow(a, b / 2);\n        if (b % 2 == 0)\n            // \u8fd9\u91cc\n            return t * t % MOD;\n        else\n            return t * t * a % MOD;\n    }\n}\n</code></pre> <p>\u89e3\u6cd52: \u8c03\u51fd\u6570</p> <pre><code>class Solution {\n    private static final int MOD = (int) (1E9 + 7);\n\n    public int monkeyMove(int n) {\n        return (BigInteger.valueOf(2).modPow(BigInteger.valueOf(n), BigInteger.valueOf(MOD)).intValue() + MOD - 2) % MOD;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E5%AD%A6/#offer-14-ii-ii-mid","title":"\u5251\u6307 Offer 14- II. \u526a\u7ef3\u5b50 II mid","text":"<p>\u7b54\u6848\u9700\u8981\u53d6\u6a21 1e9+7\uff081000000007\uff09\uff0c\u5982\u8ba1\u7b97\u521d\u59cb\u7ed3\u679c\u4e3a\uff1a1000000008\uff0c\u8bf7\u8fd4\u56de 1\u3002</p> <p>DP\u4e5f\u4e0d\u80fd\u7528\u4e86</p> <pre><code>class Solution {\n    public int cuttingRope(int n) {\n        if (n == 2) return 1;\n        if (n == 3) return 2;\n        long res = 1;\n        while (n &gt; 4) {\n            res *= 3;\n            res %= 1000000007;\n            n -= 3;\n        }\n        return (int) (res * n % 1000000007);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E5%AD%A6/#633-mid","title":"633. \u5e73\u65b9\u6570\u4e4b\u548c mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 c \uff0c\u4f60\u8981\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u6574\u6570 a \u548c b\uff0c\u4f7f\u5f97 $a^2 + b^2 = c$\u3002</p> <p>\u53cc\u6307\u9488</p> <pre><code>class Solution {\n    public boolean judgeSquareSum(int c) {\n        int a = 0;\n        int b = (int) Math.sqrt(c);\n        while (a &lt;= b) {\n            int sum = a * a + b * b;\n            if (sum == c) return true;\n            else if (sum &lt; c) a++;\n            else b--;\n        }\n        return false;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E5%AD%A6/#2413-easy","title":"2413. \u6700\u5c0f\u5076\u500d\u6570 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u8fd4\u56de 2 \u548c n \u7684\u6700\u5c0f\u516c\u500d\u6570\uff08\u6b63\u6574\u6570\uff09\u3002</p> <pre><code>class Solution {\n    public int smallestEvenMultiple(int n) {\n        if (n % 2 == 0) return n;\n        else return n * 2;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E5%AD%A6/#6220-easy","title":"6220. \u53ef\u88ab\u4e09\u6574\u9664\u7684\u5076\u6570\u7684\u5e73\u5747\u503c easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u7531\u6b63\u6574\u6570\u7ec4\u6210\u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u8fd4\u56de\u5176\u4e2d\u53ef\u88ab 3 \u6574\u9664\u7684\u6240\u6709\u5076\u6570\u7684\u5e73\u5747\u503c\u3002</p> <p>\u6ce8\u610f\uff1an \u4e2a\u5143\u7d20\u7684\u5e73\u5747\u503c\u7b49\u4e8e n \u4e2a\u5143\u7d20 \u6c42\u548c \u518d\u9664\u4ee5 n \uff0c\u7ed3\u679c \u5411\u4e0b\u53d6\u6574 \u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u3002</p> <p>Stream</p> <pre><code>class Solution {\n    public int averageValue(int[] nums) {\n        return (int) IntStream.of(nums).filter(t -&gt; t % 6 == 0).average().orElse(0);\n    }\n}\n</code></pre> <p>\u4f20\u7edf\u89e3\u6cd5</p> <pre><code>class Solution {\n    public int averageValue(int[] nums) {\n        int res = 0;\n        int cnt = 0;\n        for (int num : nums) {\n            if (num % 6 == 0) {\n                res += num;\n                cnt++;\n            }\n        }\n        if (cnt == 0) return 0;\n        res /= cnt;\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E5%AD%A6/#6222-mid","title":"6222. \u7f8e\u4e3d\u6574\u6570\u7684\u6700\u5c0f\u589e\u91cf mid","text":"<p>\u7ed9\u4f60\u4e24\u4e2a\u6b63\u6574\u6570 n \u548c target \u3002</p> <p>\u5982\u679c\u67d0\u4e2a\u6574\u6570\u6bcf\u4e00\u4f4d\u4e0a\u7684\u6570\u5b57\u76f8\u52a0\u5c0f\u4e8e\u6216\u7b49\u4e8e target \uff0c\u5219\u8ba4\u4e3a\u8fd9\u4e2a\u6574\u6570\u662f\u4e00\u4e2a \u7f8e\u4e3d\u6574\u6570 \u3002</p> <p>\u627e\u51fa\u5e76\u8fd4\u56de\u6ee1\u8db3 n + x \u662f \u7f8e\u4e3d\u6574\u6570 \u7684\u6700\u5c0f\u975e\u8d1f\u6574\u6570 x \u3002\u751f\u6210\u7684\u8f93\u5165\u4fdd\u8bc1\u603b\u53ef\u4ee5\u4f7f n \u53d8\u6210\u4e00\u4e2a\u7f8e\u4e3d\u6574\u6570\u3002</p> <p>\u6309\u4f4d\u586b, \u60f3\u8ba9\u4f4d\u4e0a\u7684\u6570\u5b57\u51cf\u5c0f, \u8981\u52a0\u523010 \u8fd9\u91cc\u6709\u4e00\u70b9\u9006\u5411\u7684\u601d\u60f3, \u4ece\u4f4e\u4f4d\u5f80\u9ad8\u4f4d\u586b\u662f\u4e00\u5b9a\u80fd\u5f97\u5230\u7b54\u6848\u7684</p> <pre><code>class Solution {\n    public long makeIntegerBeautiful(long n, int target) {\n        long res = 0;\n        // pos \u4f4d\u6807\n        for (long pos = 1; String.valueOf(n).chars().map(o -&gt; o - '0').sum() &gt; target; pos *= 10) {\n            // \u6700\u4f4e\u7684\u975e0\u4f4d\u7684\u503c: n / pos % 10\n            long gap = pos * (10 - n / pos % 10);\n            res += gap;\n            n += gap;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/","title":"\u6570\u7ec4","text":""},{"location":"leetcode/%E6%95%B0%E7%BB%84/#_2","title":"\u524d\u7f00\u548c","text":""},{"location":"leetcode/%E6%95%B0%E7%BB%84/#724-easy","title":"724. \u5bfb\u627e\u6570\u7ec4\u7684\u4e2d\u5fc3\u4e0b\u6807 easy","text":"<p>\u5251\u6307 Offer II 012. \u5de6\u53f3\u4e24\u8fb9\u5b50\u6570\u7ec4\u7684\u548c\u76f8\u7b49</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u8bf7\u8ba1\u7b97\u6570\u7ec4\u7684 \u4e2d\u5fc3\u4e0b\u6807 \u3002</p> <p>\u6570\u7ec4 \u4e2d\u5fc3\u4e0b\u6807 \u662f\u6570\u7ec4\u7684\u4e00\u4e2a\u4e0b\u6807\uff0c\u5176\u5de6\u4fa7\u6240\u6709\u5143\u7d20\u76f8\u52a0\u7684\u548c\u7b49\u4e8e\u53f3\u4fa7\u6240\u6709\u5143\u7d20\u76f8\u52a0\u7684\u548c\u3002</p> <pre><code>class Solution {\n    public int pivotIndex(int[] nums) {\n        int n = nums.length;\n        int[] arr = new int[n];\n        for (int i = 1; i &lt; n; i++) {\n            arr[i] = arr[i - 1] + nums[i - 1];\n        }\n        int sum = 0;\n        int res = -1;\n        for (int i = n - 1; i &gt;= 0; i--) {\n            if (sum == arr[i]) res = i;\n            sum += nums[i];\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#_3","title":"\u5143\u7d20\u79fb\u52a8","text":""},{"location":"leetcode/%E6%95%B0%E7%BB%84/#2380-easy","title":"2380. \u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u91cd\u65b0\u5b89\u6392\u987a\u5e8f\u9700\u8981\u7684\u65f6\u95f4 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32 s \u3002\u5728\u4e00\u79d2\u4e4b\u4e2d\uff0c\u6240\u6709 \u5b50\u5b57\u7b26\u4e32\"01\" \u540c\u65f6 \u88ab\u66ff\u6362\u6210\"10\"\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u6301\u7eed\u8fdb\u884c\u5230\u6ca1\u6709\"01\"\u5b58\u5728\u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de\u5b8c\u6210\u8fd9\u4e2a\u8fc7\u7a0b\u6240\u9700\u8981\u7684\u79d2\u6570\u3002</p> <p>\u89e3\u6cd51: \u66b4\u529b\u6a21\u62df</p> <pre><code>class Solution {\n\n    public int secondsToRemoveOccurrences(String s) {\n        if (s.length() &lt; 2) return 0;\n        char[] chars = s.toCharArray();\n        int cnt = 0;\n        while (trans(chars)) {\n            cnt++;\n        }\n        return cnt;\n    }\n\n    private boolean trans(char[] chars) {\n        boolean flag = false;\n        for (int i = 1; i &lt; chars.length; i++) {\n            if (chars[i - 1] == '0' &amp;&amp; chars[i] == '1') {\n                chars[i - 1] = '1';\n                chars[i] = '0';\n                flag = true;\n                i++;\n            }\n        }\n        return flag;\n    }\n}\n</code></pre> <p>\u89e3\u6cd52: DP</p> <p>\u7406\u89e3\u4e3a\u8f66\u79fb\u52a8\u95ee\u9898, \u8f66\u8ddd\u4e3a1\u65b9\u53ef\u79fb\u52a8 \u5b9a\u4e49 dp[i] \u4e3a\u7d22\u5f15\u4e3a i \u79fb\u52a8\u6240\u9700\u5929\u6570 \u5982\u679c i \u79fb\u52a8\u8fc7\u7a0b\u4e2d\u4e0d\u585e\u8f66, \u90a3\u5c31\u662f\u524d\u97620\u7684\u4e2a\u6570 \u5982\u679c i \u79fb\u52a8\u8fc7\u7a0b\u4e2d\u585e\u8f66, \u90a3\u5c31\u5f97\u6bd4\u524d\u4e00\u4e2a+1</p> <pre><code>class Solution {\n    public int secondsToRemoveOccurrences(String s) {\n        int n = s.length();\n        int[] dp = new int[n];\n        int pre0 = s.charAt(0) == '0' ? 1 : 0;\n        for (int i = 1; i &lt; n; i++) {\n            if (s.charAt(i) == '0') {\n                pre0++;\n                dp[i] = dp[i - 1];\n            } else {\n                if (pre0 &gt; 0) dp[i] = Math.max(dp[i - 1] + 1, pre0);\n            }\n        }\n        return dp[n - 1];\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#_4","title":"\u6570\u7ec4\u627e\u503c","text":""},{"location":"leetcode/%E6%95%B0%E7%BB%84/#offer-03-easy","title":"\u5251\u6307 Offer 03. \u6570\u7ec4\u4e2d\u91cd\u590d\u7684\u6570\u5b57 easy","text":"<pre><code>class Solution {\n    public int findRepeatNumber(int[] nums) {\n        for (int i = 0; i &lt; nums.length; i++) {\n            if (nums[i] != i) {\n                if (nums[i] != nums[nums[i]]) {\n                    swap(nums, i, nums[i]);\n                } else {\n                    return nums[i];\n                }\n            }\n        }\n        return 0;\n    }\n\n    private void swap(int[] nums, int a, int b) {\n        int temp = nums[a];\n        nums[a] = nums[b];\n        nums[b] = temp;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#_5","title":"\u6570\u7ec4\u6392\u5217","text":""},{"location":"leetcode/%E6%95%B0%E7%BB%84/#offer-21-easy","title":"\u5251\u6307 Offer 21. \u8c03\u6574\u6570\u7ec4\u987a\u5e8f\u4f7f\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u524d\u9762 easy","text":"<p>\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u8c03\u6574\u8be5\u6570\u7ec4\u4e2d\u6570\u5b57\u7684\u987a\u5e8f\uff0c\u4f7f\u5f97\u6240\u6709\u5947\u6570\u5728\u6570\u7ec4\u7684\u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u5076\u6570\u5728\u6570\u7ec4\u7684\u540e\u534a\u90e8\u5206\u3002</p> <pre><code>class Solution {\n    public int[] exchange(int[] nums) {\n        int n = nums.length;\n        for (int i = 0, j = n - 1; i &lt; j; i++, j--) {\n            while (i &lt; n &amp;&amp; nums[i] % 2 == 1) i++;\n            while (j &gt;= 0 &amp;&amp; nums[j] % 2 == 0) j--;\n            if (i &gt;= j) break;\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n        }\n        return nums;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#406-mid","title":"406. \u6839\u636e\u8eab\u9ad8\u91cd\u5efa\u961f\u5217 mid","text":"<p>\u5047\u8bbe\u6709\u6253\u4e71\u987a\u5e8f\u7684\u4e00\u7fa4\u4eba\u7ad9\u6210\u4e00\u4e2a\u961f\u5217\uff0c\u6570\u7ec4 people \u8868\u793a\u961f\u5217\u4e2d\u4e00\u4e9b\u4eba\u7684\u5c5e\u6027\uff08\u4e0d\u4e00\u5b9a\u6309\u987a\u5e8f\uff09\u3002\u6bcf\u4e2a people[i] = [hi, ki] \u8868\u793a\u7b2c i \u4e2a\u4eba\u7684\u8eab\u9ad8\u4e3a hi \uff0c\u524d\u9762 \u6b63\u597d \u6709 ki \u4e2a\u8eab\u9ad8\u5927\u4e8e\u6216\u7b49\u4e8e hi \u7684\u4eba\u3002</p> <p>\u8bf7\u4f60\u91cd\u65b0\u6784\u9020\u5e76\u8fd4\u56de\u8f93\u5165\u6570\u7ec4 people \u6240\u8868\u793a\u7684\u961f\u5217\u3002\u8fd4\u56de\u7684\u961f\u5217\u5e94\u8be5\u683c\u5f0f\u5316\u4e3a\u6570\u7ec4 queue \uff0c\u5176\u4e2d queue[j] = [hj, kj] \u662f\u961f\u5217\u4e2d\u7b2c j \u4e2a\u4eba\u7684\u5c5e\u6027\uff08queue[0] \u662f\u6392\u5728\u961f\u5217\u524d\u9762\u7684\u4eba\uff09\u3002</p> <p>\u63d2\u5165\u6cd5 \u9996\u5148, \u6309k\u4ece\u5c0f\u5230\u5927\u6392\u5e8f(\u8fd9\u6837\u904d\u5386\u63d2\u5165\u7684\u65f6\u5019\u4e0d\u4f1a\u51fa\u73b0\u7a7a\u63d2) k \u4e00\u6837\u7684\u6309h\u4ece\u5927\u5230\u5c0f\u6392\u5e8f(\u8fd9\u6837\u904d\u5386\u63d2\u5165\u7684\u65f6\u5019\u9ad8\u7684\u5148\u63d2, \u540e\u9762\u63d2\u77ee\u7684\u4e0d\u4f1a\u5f71\u54cd\u9ad8\u7684\u76f8\u5bf9\u987a\u5e8f)</p> <pre><code>class Solution {\n    public int[][] reconstructQueue(int[][] people) {\n        Arrays.sort(people, (o1, o2) -&gt; o1[0] == o2[0]\n                ? o1[1] - o2[1]\n                : o2[0] - o1[0]);\n\n        List&lt;int[]&gt; list = new ArrayList&lt;&gt;(people.length);\n        for (int[] o : people) {\n            list.add(o[1], o);\n        }\n        return list.toArray(new int[people.length][]);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#667-ii-mid","title":"667. \u4f18\u7f8e\u7684\u6392\u5217 II mid","text":"<p>\u7ed9\u4f60\u4e24\u4e2a\u6574\u6570 n \u548c k \uff0c\u8bf7\u4f60\u6784\u9020\u4e00\u4e2a\u7b54\u6848\u5217\u8868 answer \uff0c\u8be5\u5217\u8868\u5e94\u5f53\u5305\u542b\u4ece 1 \u5230 n \u7684 n \u4e2a\u4e0d\u540c\u6b63\u6574\u6570\uff0c\u5e76\u540c\u65f6\u6ee1\u8db3\u4e0b\u8ff0\u6761\u4ef6\uff1a</p> <ul> <li>\u5047\u8bbe\u8be5\u5217\u8868\u662f answer = [a1, a2, a3, ... , an] \uff0c\u90a3\u4e48\u5217\u8868 [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] \u4e2d\u5e94\u8be5\u6709\u4e14\u4ec5\u6709 k \u4e2a\u4e0d\u540c\u6574\u6570\u3002</li> </ul> <p>\u8fd4\u56de\u5217\u8868 answer \u3002\u5982\u679c\u5b58\u5728\u591a\u79cd\u7b54\u6848\uff0c\u53ea\u9700\u8fd4\u56de\u5176\u4e2d \u4efb\u610f\u4e00\u79cd \u3002</p> <p>k+1\u4e2a\u6570\u4ea7\u751fk\u4e2a\u95f4\u9694: 1, k+1, 2, k, ... \u95f4\u9694 interval: k-&gt;1 \u540e\u9762\u7684\u5e8f\u5217\u4fdd\u8bc1\u95f4\u96941</p> <pre><code>class Solution {\n    public int[] constructArray(int n, int k) {\n        int[] res = new int[n];\n        res[0] = 1;\n        for (int i = 1, interval = k; i &lt;= k; i++, interval--) {\n            res[i] = (i &amp; 1) == 1\n                    ? res[i - 1] + interval\n                    : res[i - 1] - interval;\n        }\n        // [0]-&gt;[k] \u5360\u7528\n        for (int i = k + 1; i &lt; n; i++) {\n            res[i] = i + 1;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#977-easy","title":"977. \u6709\u5e8f\u6570\u7ec4\u7684\u5e73\u65b9 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6309 \u975e\u9012\u51cf\u987a\u5e8f \u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4 nums\uff0c\u8fd4\u56de \u6bcf\u4e2a\u6570\u5b57\u7684\u5e73\u65b9 \u7ec4\u6210\u7684\u65b0\u6570\u7ec4\uff0c\u8981\u6c42\u4e5f\u6309 \u975e\u9012\u51cf\u987a\u5e8f \u6392\u5e8f\u3002</p> <p>\u53cc\u6307\u9488</p> <pre><code>class Solution {\n    public int[] sortedSquares(int[] nums) {\n        int n = nums.length;\n        int[] res = new int[n];\n        int p1 = 0, p2 = n - 1;\n        int idx = n - 1;\n        while (p1 &lt;= p2) {\n            int pow1 = nums[p1] * nums[p1], pow2 = nums[p2] * nums[p2];\n            if (pow1 &gt; pow2) {\n                res[idx] = pow1;\n                p1++;\n            } else {\n                res[idx] = pow2;\n                p2--;\n            }\n            idx--;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#_6","title":"\u6700\u957f\u5b50\u6570\u7ec4","text":""},{"location":"leetcode/%E6%95%B0%E7%BB%84/#525-mid","title":"525. \u8fde\u7eed\u6570\u7ec4 mid","text":"<p>\u5251\u6307 Offer II 011. 0 \u548c 1 \u4e2a\u6570\u76f8\u540c\u7684\u5b50\u6570\u7ec4</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u7ec4 nums , \u627e\u5230\u542b\u6709\u76f8\u540c\u6570\u91cf\u7684 0 \u548c 1 \u7684\u6700\u957f\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u5e76\u8fd4\u56de\u8be5\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002</p> <p>\u6c42\u548c\u4e3a0\u7684\u6700\u957f\u5b50\u6570\u7ec4, \u524d\u7f00\u548c</p> <pre><code>class Solution {\n    public int findMaxLength(int[] nums) {\n        int n = nums.length;\n        int len = 0;\n        int sum = 0;\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n        map.put(0, -1);\n        for (int i = 0; i &lt; n; i++) {\n            sum += nums[i] == 0 ? -1 : 1;\n            Integer idx = map.get(sum);\n            if (idx != null) len = Math.max(len, i - idx);\n            else map.put(sum, i);\n        }\n        return len;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#_7","title":"\u6709\u591a\u5c11\u5b50\u6570\u7ec4","text":""},{"location":"leetcode/%E6%95%B0%E7%BB%84/#413-mid","title":"413. \u7b49\u5dee\u6570\u5217\u5212\u5206 mid","text":"<p>\u5982\u679c\u4e00\u4e2a\u6570\u5217 \u81f3\u5c11\u6709\u4e09\u4e2a\u5143\u7d20 \uff0c\u5e76\u4e14\u4efb\u610f\u4e24\u4e2a\u76f8\u90bb\u5143\u7d20\u4e4b\u5dee\u76f8\u540c\uff0c\u5219\u79f0\u8be5\u6570\u5217\u4e3a\u7b49\u5dee\u6570\u5217\u3002</p> <ul> <li>\u4f8b\u5982\uff0c[1,3,5,7,9]\u3001[7,7,7,7] \u548c [3,-1,-5,-9] \u90fd\u662f\u7b49\u5dee\u6570\u5217\u3002</li> </ul> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u8fd4\u56de\u6570\u7ec4 nums \u4e2d\u6240\u6709\u4e3a\u7b49\u5dee\u6570\u7ec4\u7684 \u5b50\u6570\u7ec4 \u4e2a\u6570\u3002</p> <p>\u5b50\u6570\u7ec4 \u662f\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u8fde\u7eed\u5e8f\u5217\u3002</p> <p>\u89e3\u6cd51:</p> <p>\u6ed1\u52a8\u7a97\u53e3 \u627e\u5230\u6bcf\u4e2a\u6700\u957f\u7684\u7b49\u5dee\u6570\u5217, \u8ba1\u7b97 C(1,n-2)+C(1,n-3)+...+C(1,1)</p> <pre><code>class Solution {\n    public int numberOfArithmeticSlices(int[] nums) {\n        if (nums.length &lt; 3) return 0;\n\n        int res = 0;\n        int p = 1;\n        int dis = nums[1] - nums[0];\n        // \u8282\u70b9\u6570\n        int num = 1;\n        while (p &lt; nums.length) {\n            if (nums[p] - nums[p - 1] == dis) {\n                num++;\n                p++;\n                continue;\n            }\n            res += calculate(num);\n            // \u91cd\u7f6e\n            num = 2;\n            dis = nums[p] - nums[p - 1];\n            p++;\n        }\n        // \u6700\u672b\u4e00\u6bb5\n        res += calculate(num);\n        return res;\n    }\n\n\n    private int calculate(int n) {\n        if (n &lt; 3) return 0;\n        int sum = 0;\n        for (int i = n - 2; i &gt;= 1; i--) {\n            sum += i;\n        }\n        return sum;\n    }\n\n}\n</code></pre> <p>\u89e3\u6cd52:</p> <p>DP pd[i]: \u4ee5 nums[i] \u4e3a\u7ed3\u5c3e\u7684\u6570\u5217\u6570\u91cf</p> <pre><code>dp[2] = 1\n    [0, 1, 2]\ndp[3] = dp[2] + 1 = 2\n    [0, 1, 2, 3], // [0, 1, 2] \u4e4b\u540e\u52a0\u4e00\u4e2a 3\n    [1, 2, 3]     // \u65b0\u7684\u9012\u589e\u5b50\u533a\u95f4\ndp[4] = dp[3] + 1 = 3\n    [0, 1, 2, 3, 4], // [0, 1, 2, 3] \u4e4b\u540e\u52a0\u4e00\u4e2a 4\n    [1, 2, 3, 4],    // [1, 2, 3] \u4e4b\u540e\u52a0\u4e00\u4e2a 4\n    [2, 3, 4]        // \u65b0\u7684\u9012\u589e\u5b50\u533a\u95f4\n</code></pre> <pre><code>class Solution {\n    public int numberOfArithmeticSlices(int[] nums) {\n        if (nums.length &lt; 3) return 0;\n        int[] dp = new int[nums.length];\n\n        for (int i = 2; i &lt; nums.length; i++) {\n            if (nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]) {\n                dp[i] = dp[i - 1] + 1;\n            }\n        }\n        int res = 0;\n        for (int i : dp) {\n            res += i;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#560-k-mid","title":"560. \u548c\u4e3a K \u7684\u5b50\u6570\u7ec4 mid","text":"<p>\u5251\u6307 Offer II 010. \u548c\u4e3a k \u7684\u5b50\u6570\u7ec4</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570 k \uff0c\u8bf7\u4f60\u7edf\u8ba1\u5e76\u8fd4\u56de \u8be5\u6570\u7ec4\u4e2d\u548c\u4e3a k \u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u4e2a\u6570 \u3002</p> <p>\u524d\u7f00\u548c \u6ee1\u8db3: \u5f53\u524d\u524d\u7f00\u548c-\u4efb\u610f\u524d\u7f00\u548c=k</p> <pre><code>class Solution {\n    public int subarraySum(int[] nums, int k) {\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n        map.put(0, 1);\n        int sum = 0;\n        int res = 0;\n        for (int num : nums) {\n            sum += num;\n            Integer cnt = map.get(sum - k);\n            if (cnt != null) res += cnt;\n            map.merge(sum, 1, Integer::sum);\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#713-k-mid","title":"713. \u4e58\u79ef\u5c0f\u4e8e K \u7684\u5b50\u6570\u7ec4 mid","text":"<p>\u5251\u6307 Offer II 009. \u4e58\u79ef\u5c0f\u4e8e K \u7684\u5b50\u6570\u7ec4</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570 k \uff0c\u8bf7\u4f60\u8fd4\u56de\u5b50\u6570\u7ec4\u5185\u6240\u6709\u5143\u7d20\u7684\u4e58\u79ef\u4e25\u683c\u5c0f\u4e8e k \u7684\u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6570\u76ee\u3002</p> <pre><code>class Solution {\n    public int numSubarrayProductLessThanK(int[] nums, int k) {\n        int n = nums.length;\n        long prod = 1;\n        int l = 0;\n        int res = 0;\n        for (int r = 0; r &lt; n; r++) {\n            prod *= nums[r];\n            // \u662f\u5426 l==r, \u76f8\u7b49\u7684\u65f6\u5019\u662f\u7a7a\u6570\u7ec4, \u4e4b\u540e l=r+1, \u6070\u597d\u6ee1\u8db3\n            while (prod &gt;= k &amp;&amp; l &lt;= r) prod /= nums[l++];\n            res += r - l + 1;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#769-mid","title":"769. \u6700\u591a\u80fd\u5b8c\u6210\u6392\u5e8f\u7684\u5757 mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u6570\u7ec4 arr \uff0c\u5b83\u8868\u793a\u5728 [0, n - 1] \u8303\u56f4\u5185\u7684\u6574\u6570\u7684\u6392\u5217\u3002</p> <p>\u6211\u4eec\u5c06 arr \u5206\u5272\u6210\u82e5\u5e72 \u5757 (\u5373\u5206\u533a)\uff0c\u5e76\u5bf9\u6bcf\u4e2a\u5757\u5355\u72ec\u6392\u5e8f\u3002\u5c06\u5b83\u4eec\u8fde\u63a5\u8d77\u6765\u540e\uff0c\u4f7f\u5f97\u8fde\u63a5\u7684\u7ed3\u679c\u548c\u6309\u5347\u5e8f\u6392\u5e8f\u540e\u7684\u539f\u6570\u7ec4\u76f8\u540c\u3002</p> <p>\u8fd4\u56de\u6570\u7ec4\u80fd\u5206\u6210\u7684\u6700\u591a\u5757\u6570\u91cf\u3002</p> <p>\u6ce8\u610f\u5230\u503c\u548c\u7d22\u5f15\u662f\u5bf9\u5e94\u7684 [0,k]\u7684\u6700\u5927\u503c\u5e94\u5728k\u4f4d\u7f6e, \u53ea\u8981 max==k, \u5219 cnt++</p> <pre><code>class Solution {\n    public int maxChunksToSorted(int[] arr) {\n        int ans = 0, max = 0;\n        for (int i = 0; i &lt; arr.length; ++i) {\n            max = Math.max(max, arr[i]);\n            if (max == i) ans++;\n        }\n        return ans;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#6293-mid","title":"6293. \u7edf\u8ba1\u597d\u5b50\u6570\u7ec4\u7684\u6570\u76ee mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570 k \uff0c\u8bf7\u4f60\u8fd4\u56de nums \u4e2d \u597d \u5b50\u6570\u7ec4\u7684\u6570\u76ee\u3002</p> <p>\u4e00\u4e2a\u5b50\u6570\u7ec4 arr \u5982\u679c\u6709 \u81f3\u5c11 k \u5bf9\u4e0b\u6807 (i, j)\u6ee1\u8db3 i &lt; j \u4e14 arr[i] == arr[j]\uff0c\u90a3\u4e48\u79f0\u5b83\u662f\u4e00\u4e2a \u597d \u5b50\u6570\u7ec4\u3002</p> <p>\u6ed1\u52a8\u7a97\u53e3, \u6709\u8ba1\u6570\u6280\u5de7</p> <pre><code>class Solution {\n    public long countGood(int[] nums, int k) {\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n        long res = 0;\n        int j = 0;\n        int tot = 0;\n        for (int i = 0; i &lt; nums.length; i++) {\n            tot += map.merge(nums[i], 1, Integer::sum) - 1;\n            while (tot &gt;= k) {\n                tot -= map.merge(nums[j], -1, Integer::sum);\n                j++;// start\u2208[0,j-1] \u90fd\u662f\u5b50\u6570\u7ec4\n            }\n            // \u8fd9\u91cc\u6211\u60f3\u4e0d\u5230\n            res += j;// end==i \u7684\u5b50\u6570\u7ec4\u4e4b\u548c, start\u2208[0,j-1] \u7684\u5168\u90fd\u6ee1\u8db3\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#6224-k-mid","title":"6224. \u6700\u5927\u516c\u56e0\u6570\u7b49\u4e8e K \u7684\u5b50\u6570\u7ec4\u6570\u76ee mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570 k \uff0c\u8bf7\u4f60\u7edf\u8ba1\u5e76\u8fd4\u56de nums \u7684\u5b50\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u6700\u5927\u516c\u56e0\u6570\u7b49\u4e8e k \u7684\u5b50\u6570\u7ec4\u6570\u76ee\u3002</p> <p>\u6570\u7ec4\u7684\u6700\u5927\u516c\u56e0\u6570 \u662f\u80fd\u6574\u9664\u6570\u7ec4\u4e2d\u6240\u6709\u5143\u7d20\u7684\u6700\u5927\u6574\u6570\u3002</p> <p>\u66b4\u529b\u679a\u4e3e, \u5f80\u524d\u636f </p> <pre><code>class Solution {\n    public int subarrayGCD(int[] nums, int k) {\n        int n = nums.length;\n        int[][] check = new int[n][n];\n        int res = 0;\n        for (int i = 0; i &lt; n; i++) {\n            check[i][i] = gcd(nums[i], nums[i]);\n            if (check[i][i] == k) res++;\n            for (int j = i - 1; j &gt;= 0; j--) {\n                check[j][i] = gcd(check[j][i - 1], check[i][i]);\n                if (check[j][i] == k) res++;\n                else if (check[j][i] &lt; k) break;\n            }\n        }\n        return res;\n    }\n\n    public int gcd(int a, int b) {\n        if (b == 0) return a;\n        else return gcd(b, a % b);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#_8","title":"\u627e\u7d22\u5f15","text":""},{"location":"leetcode/%E6%95%B0%E7%BB%84/#697-easy","title":"697. \u6570\u7ec4\u7684\u5ea6 easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u4e14\u53ea\u5305\u542b\u975e\u8d1f\u6570\u7684\u6574\u6570\u6570\u7ec4 nums\uff0c\u6570\u7ec4\u7684 \u5ea6 \u7684\u5b9a\u4e49\u662f\u6307\u6570\u7ec4\u91cc\u4efb\u4e00\u5143\u7d20\u51fa\u73b0\u9891\u6570\u7684\u6700\u5927\u503c\u3002</p> <p>\u4f60\u7684\u4efb\u52a1\u662f\u5728 nums \u4e2d\u627e\u5230\u4e0e nums \u62e5\u6709 \u76f8\u540c\u7684\u5ea6 \u7684\u6700\u77ed\u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u8fd4\u56de\u5176\u957f\u5ea6\u3002</p> <p>\u627e\u7d22\u5f15</p> <pre><code>class Solution {\n    public int findShortestSubArray(int[] nums) {\n        Map&lt;Integer, Integer&gt; cntMap = new HashMap&lt;&gt;();\n        Map&lt;Integer, Integer&gt; lastIndexMap = new HashMap&lt;&gt;();\n        Map&lt;Integer, Integer&gt; firstIndexMap = new HashMap&lt;&gt;();\n        int maxCnt = 0;\n\n        for (int i = 0; i &lt; nums.length; i++) {\n            int num = nums[i];\n            int cnt = 1 + cntMap.getOrDefault(num, 0);\n            cntMap.put(num, cnt);\n            maxCnt = Math.max(maxCnt, cnt);\n            lastIndexMap.put(num, i);\n            if (!firstIndexMap.containsKey(num)) firstIndexMap.put(num, i);\n        }\n        int res = nums.length;\n\n        for (int num : nums) {\n            int cnt = cntMap.get(num);\n            if (cnt != maxCnt) continue;\n            res = Math.min(res, lastIndexMap.get(num) - firstIndexMap.get(num) + 1);\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#_9","title":"\u5224\u5b9a\u4e0a\u5347\u5e8f\u5217","text":""},{"location":"leetcode/%E6%95%B0%E7%BB%84/#581-mid","title":"581. \u6700\u77ed\u65e0\u5e8f\u8fde\u7eed\u5b50\u6570\u7ec4 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u4f60\u9700\u8981\u627e\u51fa\u4e00\u4e2a \u8fde\u7eed\u5b50\u6570\u7ec4 \uff0c\u5982\u679c\u5bf9\u8fd9\u4e2a\u5b50\u6570\u7ec4\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\uff0c\u90a3\u4e48\u6574\u4e2a\u6570\u7ec4\u90fd\u4f1a\u53d8\u4e3a\u5347\u5e8f\u6392\u5e8f\u3002</p> <p>\u8bf7\u4f60\u627e\u51fa\u7b26\u5408\u9898\u610f\u7684 \u6700\u77ed \u5b50\u6570\u7ec4\uff0c\u5e76\u8f93\u51fa\u5b83\u7684\u957f\u5ea6\u3002</p> <p>\u56fa\u5b9a\u5957\u8def, \u8111\u7b4b\u6025\u8f6c\u5f2f</p> <p>\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6570\u7ec4\u5206\u6210\u4e09\u6bb5\uff0c\u5de6\u6bb5\u548c\u53f3\u6bb5\u662f\u6807\u51c6\u7684\u5347\u5e8f\u6570\u7ec4\uff0c\u4e2d\u6bb5\u6570\u7ec4\u6ee1\u8db3: \u6700\u5c0f\u503c\u5927\u4e8e\u5de6\u6bb5\u7684\u6700\u5927\u503c\uff0c\u6700\u5927\u503c\u5c0f\u4e8e\u53f3\u6bb5\u7684\u6700\u5c0f\u503c\u3002 - \u4ece\u5de6\u5230\u53f3\u7ef4\u62a4\u4e00\u4e2a\u6700\u5927\u503cmax, \u5728\u8fdb\u5165\u53f3\u6bb5\u4e4b\u524d\uff0c\u904d\u5386\u5230\u7684nums[i]\u90fd\u662f\u5c0f\u4e8emax\u7684\uff0c\u8981\u6c42\u7684 end \u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5c0f\u4e8emax\u5143\u7d20\u7684\u4f4d\u7f6e\uff1b - \u4ece\u53f3\u5230\u5de6\u7ef4\u62a4\u4e00\u4e2a\u6700\u5c0f\u503cmin, \u5728\u8fdb\u5165\u5de6\u6bb5\u4e4b\u524d\uff0c\u904d\u5386\u5230\u7684nums[i]\u90fd\u662f\u5927\u4e8emin\u7684\uff0c\u8981\u6c42\u7684 begin \u5c31\u662f\u6700\u540e\u4e00\u4e2a\u5927\u4e8emin\u5143\u7d20\u7684\u4f4d\u7f6e\u3002</p> <pre><code>class Solution {\n    public int findUnsortedSubarray(int[] nums) {\n        int n = nums.length;\n        int left = -1;\n        int right = -2;\n        int max = nums[0];\n        int min = nums[n - 1];\n        for (int i = 0; i &lt; nums.length; i++) {\n            // \u4ece\u5de6\u5230\u53f3, \u627e\u53f3\u8fb9\u754c, \u53f3\u8fb9\u754c\u662f\u4e2a\u76f8\u5bf9\u5c0f\u7684\u503c, \u5b83\u7684\u53f3\u8fb9\u90fd\u5927\u4e8e\u5b83\n            if (nums[i] &lt; max) {\n                right = i;\n            } else {\n                max = nums[i];\n            }\n            // \u4ece\u53f3\u5230\u5de6, \u627e\u5de6\u8fb9\u754c, \u5de6\u8fb9\u754c\u662f\u4e2a\u76f8\u5bf9\u5927\u7684\u503c, \u5b83\u7684\u5de6\u8fb9\u90fd\u5c0f\u4e8e\u5b83\n            if (nums[n - 1 - i] &gt; min) {\n                left = n - 1 - i;\n            } else {\n                min = nums[n - 1 - i];\n            }\n        }\n        return right - left + 1;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#665-mid","title":"665. \u975e\u9012\u51cf\u6570\u5217 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u6570\u7ec4\uff0c\u8bf7\u4f60\u5224\u65ad\u5728 \u6700\u591a \u6539\u53d8 1 \u4e2a\u5143\u7d20\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u6570\u7ec4\u80fd\u5426\u53d8\u6210\u4e00\u4e2a\u975e\u9012\u51cf\u6570\u5217\u3002</p> <p>\u6211\u4eec\u662f\u8fd9\u6837\u5b9a\u4e49\u4e00\u4e2a\u975e\u9012\u51cf\u6570\u5217\u7684\uff1a \u5bf9\u4e8e\u6570\u7ec4\u4e2d\u4efb\u610f\u7684 i (0 &lt;= i &lt;= n-2)\uff0c\u603b\u6ee1\u8db3 nums[i] &lt;= nums[i + 1]\u3002</p> <pre><code>class Solution {\n    public boolean checkPossibility(int[] nums) {\n        if (nums.length &lt;= 2) return true;\n        int count = 0;\n        // \u6838\u5fc3\u76ee\u6807: \u8ba9\u8fed\u4ee3\u4e2d\u7684\u5c3e\u90e8\u5c3d\u53ef\u80fd\u5c0f\n        for (int i = 1; i &lt; nums.length &amp;&amp; count &lt;= 1; i++) {\n            if (nums[i] &gt;= nums[i - 1]) continue;\n            count++;\n            if (i &lt; 2)\n                // \u524d\u4e24\u4e2a \u6539\u5c0f\u7aef\n                nums[i - 1] = Integer.MIN_VALUE;\n            else if (nums[i] &gt;= nums[i - 2])\n                // \u4e09\u4e2a \u5982\u679c[0]&gt;[2] \u6539[1]\n                // 2 4 3 =&gt; 2 3 3\n                nums[i - 1] = nums[i];\n            else\n                // \u4e09\u4e2a [0]&lt;=[2] \u6539[2]\n                // 2 4 1 =&gt; 2 4 4\n                nums[i] = nums[i - 1];\n        }\n        return count &lt;= 1;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#lcp-61-easy","title":"LCP 61. \u6c14\u6e29\u53d8\u5316\u8d8b\u52bf easy","text":"<p>\u529b\u6263\u57ce\u8ba1\u5212\u5728\u4e24\u5730\u8bbe\u7acb\u300c\u529b\u6263\u5609\u5e74\u534e\u300d\u7684\u5206\u4f1a\u573a\uff0c\u6c14\u8c61\u5c0f\u7ec4\u6b63\u5728\u5206\u6790\u4e24\u5730\u533a\u7684\u6c14\u6e29\u53d8\u5316\u8d8b\u52bf\uff0c\u5bf9\u4e8e\u7b2c i ~ (i+1) \u5929\u7684\u6c14\u6e29\u53d8\u5316\u8d8b\u52bf\uff0c\u5c06\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\u5224\u65ad\uff1a</p> <ul> <li>\u82e5\u7b2c i+1 \u5929\u7684\u6c14\u6e29 \u9ad8\u4e8e \u7b2c i \u5929\uff0c\u4e3a \u4e0a\u5347 \u8d8b\u52bf</li> <li>\u82e5\u7b2c i+1 \u5929\u7684\u6c14\u6e29 \u7b49\u4e8e \u7b2c i \u5929\uff0c\u4e3a \u5e73\u7a33 \u8d8b\u52bf</li> <li>\u82e5\u7b2c i+1 \u5929\u7684\u6c14\u6e29 \u4f4e\u4e8e \u7b2c i \u5929\uff0c\u4e3a \u4e0b\u964d \u8d8b\u52bf</li> </ul> <p>\u5df2\u77e5 temperatureA[i] \u548c temperatureB[i] \u5206\u522b\u8868\u793a\u7b2c i \u5929\u4e24\u5730\u533a\u7684\u6c14\u6e29\u3002 \u7ec4\u59d4\u4f1a\u5e0c\u671b\u627e\u5230\u4e00\u6bb5\u5929\u6570\u5c3d\u53ef\u80fd\u591a\uff0c\u4e14\u4e24\u5730\u6c14\u6e29\u53d8\u5316\u8d8b\u52bf\u76f8\u540c\u7684\u65f6\u95f4\u4e3e\u529e\u5609\u5e74\u534e\u6d3b\u52a8\u3002\u8bf7\u5206\u6790\u5e76\u8fd4\u56de\u4e24\u5730\u6c14\u6e29\u53d8\u5316\u8d8b\u52bf\u76f8\u540c\u7684\u6700\u5927\u8fde\u7eed\u5929\u6570\u3002</p> <ul> <li>\u5373\u6700\u5927\u7684 n\uff0c\u4f7f\u5f97\u7b2c i~i+n \u5929\u4e4b\u95f4\uff0c\u4e24\u5730\u6c14\u6e29\u53d8\u5316\u8d8b\u52bf\u76f8\u540c</li> </ul> <pre><code>class Solution {\n    public int temperatureTrend(int[] temperatureA, int[] temperatureB) {\n        int n = temperatureA.length;\n        int res = 0;\n        int cnt = 0;\n        for (int i = 1; i &lt; n; i++) {\n            int a = temperatureA[i] - temperatureA[i - 1];\n            int b = temperatureB[i] - temperatureB[i - 1];\n            if ((a &gt; 0 &amp;&amp; b &gt; 0) || (a == 0 &amp;&amp; b == 0) || (a &lt; 0 &amp;&amp; b &lt; 0)) {\n                cnt++;\n                res = Math.max(res, cnt);\n            } else {\n                cnt = 0;\n            }\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#_10","title":"\u6570\u7ec4\u6c42\u548c","text":""},{"location":"leetcode/%E6%95%B0%E7%BB%84/#1672-easy","title":"1672. \u6700\u5bcc\u6709\u5ba2\u6237\u7684\u8d44\u4ea7\u603b\u91cf easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a m x n \u7684\u6574\u6570\u7f51\u683c accounts\uff0c\u5176\u4e2d accounts[i][j] \u662f\u7b2c i\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b \u4f4d\u5ba2\u6237\u5728\u7b2c j \u5bb6\u94f6\u884c\u6258\u7ba1\u7684\u8d44\u4ea7\u6570\u91cf\u3002\u8fd4\u56de\u6700\u5bcc\u6709\u5ba2\u6237\u6240\u62e5\u6709\u7684 \u8d44\u4ea7\u603b\u91cf\u3002</p> <p>\u5ba2\u6237\u7684 \u8d44\u4ea7\u603b\u91cf \u5c31\u662f\u4ed6\u4eec\u5728\u5404\u5bb6\u94f6\u884c\u6258\u7ba1\u7684\u8d44\u4ea7\u6570\u91cf\u4e4b\u548c\u3002\u6700\u5bcc\u6709\u5ba2\u6237\u5c31\u662f \u8d44\u4ea7\u603b\u91cf \u6700\u5927\u7684\u5ba2\u6237\u3002</p> <pre><code>class Solution {\n    public int maximumWealth(int[][] accounts) {\n        int max = 0;\n        for (int i = 0; i &lt; accounts.length; i++) {\n            int sum = 0;\n            for (int j = 0; j &lt; accounts[i].length; j++) {\n                sum += accounts[i][j];\n            }\n            max = Math.max(max, sum);\n        }\n        return max;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#2395-easy","title":"2395. \u548c\u76f8\u7b49\u7684\u5b50\u6570\u7ec4 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728 \u4e24\u4e2a \u957f\u5ea6\u4e3a 2 \u7684\u5b50\u6570\u7ec4\u4e14\u5b83\u4eec\u7684 \u548c \u76f8\u7b49\u3002\u6ce8\u610f\uff0c\u8fd9\u4e24\u4e2a\u5b50\u6570\u7ec4\u8d77\u59cb\u4f4d\u7f6e\u7684\u4e0b\u6807\u5fc5\u987b \u4e0d\u76f8\u540c\u3002</p> <p>\u5982\u679c\u8fd9\u6837\u7684\u5b50\u6570\u7ec4\u5b58\u5728\uff0c\u8bf7\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false\u3002</p> <pre><code>class Solution {\n    public boolean findSubarrays(int[] nums) {\n        if (nums.length &lt; 3) return false;\n        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();\n        for (int i = 1; i &lt; nums.length; i++) {\n            int sum = nums[i - 1] + nums[i];\n            if (set.contains(sum)) return true;\n            set.add(sum);\n        }\n        return false;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#6230-k-mid","title":"6230. \u957f\u5ea6\u4e3a K \u5b50\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u548c mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570 k \u3002\u8bf7\u4f60\u4ece nums \u4e2d\u6ee1\u8db3\u4e0b\u8ff0\u6761\u4ef6\u7684\u5168\u90e8\u5b50\u6570\u7ec4\u4e2d\u627e\u51fa\u6700\u5927\u5b50\u6570\u7ec4\u548c\uff1a</p> <ul> <li>\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u662f k\uff0c\u4e14</li> <li>\u5b50\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20 \u5404\u4e0d\u76f8\u540c \u3002</li> </ul> <p>\u8fd4\u56de\u6ee1\u8db3\u9898\u9762\u8981\u6c42\u7684\u6700\u5927\u5b50\u6570\u7ec4\u548c\u3002\u5982\u679c\u4e0d\u5b58\u5728\u5b50\u6570\u7ec4\u6ee1\u8db3\u8fd9\u4e9b\u6761\u4ef6\uff0c\u8fd4\u56de 0\u3002</p> <p>\u5b50\u6570\u7ec4 \u662f\u6570\u7ec4\u4e2d\u4e00\u6bb5\u8fde\u7eed\u975e\u7a7a\u7684\u5143\u7d20\u5e8f\u5217\u3002</p> <p>\u53cc\u6307\u9488\u6c42\u5f97\u957f\u5ea6\u4e3ak\u7684\u65e0\u91cd\u590d\u5b50\u6570\u7ec4\u7684\u540c\u65f6\u8fdb\u884c\u5224\u5b9a(\u7ef4\u62a4\u4e00\u4e2asum)</p> <pre><code>class Solution {\n    public long maximumSubarraySum(int[] nums, int k) {\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n        long res = 0;\n        int l = 0;\n        long sum = 0;\n        for (int r = 0; r &lt; nums.length; r++) {\n            sum += nums[r];\n            Integer idx = map.get(nums[r]);\n            if (idx == null || idx &lt; l) {\n                if (r - l + 1 == k) {\n                    res = Math.max(res, sum);\n                    sum -= nums[l];\n                    l++;\n                }\n            } else {\n                for (int i = l; i &lt;= idx; i++) {\n                    sum -= nums[i];\n                }\n                l = idx + 1;\n            }\n            map.put(nums[r], r);\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#offer-57-ii-s-easy","title":"\u5251\u6307 Offer 57 - II. \u548c\u4e3as\u7684\u8fde\u7eed\u6b63\u6570\u5e8f\u5217 easy","text":"<p>\u8f93\u5165\u4e00\u4e2a\u6b63\u6574\u6570 target \uff0c\u8f93\u51fa\u6240\u6709\u548c\u4e3a target \u7684\u8fde\u7eed\u6b63\u6574\u6570\u5e8f\u5217\uff08\u81f3\u5c11\u542b\u6709\u4e24\u4e2a\u6570\uff09\u3002</p> <p>\u5e8f\u5217\u5185\u7684\u6570\u5b57\u7531\u5c0f\u5230\u5927\u6392\u5217\uff0c\u4e0d\u540c\u5e8f\u5217\u6309\u7167\u9996\u4e2a\u6570\u5b57\u4ece\u5c0f\u5230\u5927\u6392\u5217\u3002</p> <pre><code>class Solution {\n    public int[][] findContinuousSequence(int target) {\n        int l = 1;\n        int r = 1;\n        int sum = 0;\n        List&lt;int[]&gt; res = new ArrayList&lt;&gt;();\n\n        while (l &lt;= target / 2) {\n            if (sum &lt; target) {\n                sum += r;\n                r++;\n            } else if (sum &gt; target) {\n                sum -= l;\n                l++;\n            } else {\n                // [l,r)\n                int[] arr = new int[r - l];\n                int idx = 0;\n                for (int k = l; k &lt; r; k++) {\n                    arr[idx++] = k;\n                }\n                res.add(arr);\n                sum -= l;\n                l++;\n            }\n        }\n        return res.toArray(new int[res.size()][]);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#_11","title":"\u533a\u95f4\u5185\u7684\u5143\u7d20","text":""},{"location":"leetcode/%E6%95%B0%E7%BB%84/#2379-k-easy","title":"2379. \u5f97\u5230 K \u4e2a\u9ed1\u5757\u7684\u6700\u5c11\u6d82\u8272\u6b21\u6570 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u5b57\u7b26\u4e32 blocks \uff0cblocks[i]\u8981\u4e48\u662f 'W'\u8981\u4e48\u662f 'B'\uff0c\u8868\u793a\u7b2c i \u5757\u7684\u989c\u8272\u3002\u5b57\u7b26 'W' \u548c 'B'\u5206\u522b\u8868\u793a\u767d\u8272\u548c\u9ed1\u8272\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 k \uff0c\u8868\u793a\u60f3\u8981 \u8fde\u7eed \u9ed1\u8272\u5757\u7684\u6570\u76ee\u3002</p> <p>\u6bcf\u4e00\u6b21\u64cd\u4f5c\u4e2d\uff0c\u4f60\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u767d\u8272\u5757\u5c06\u5b83 \u6d82\u6210 \u9ed1\u8272\u5757\u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de\u81f3\u5c11\u51fa\u73b0 \u4e00\u6b21 \u8fde\u7eed k \u4e2a\u9ed1\u8272\u5757\u7684 \u6700\u5c11 \u64cd\u4f5c\u6b21\u6570\u3002</p> <p>\u89e3\u6cd51: \u66b4\u529b\u641c</p> <pre><code>class Solution {\n    public int minimumRecolors(String blocks, int k) {\n        int res = blocks.length();\n        for (int i = 0; i &lt; blocks.length(); i++) {\n            res = Math.min(res, find(blocks, i, k));\n        }\n        return res;\n    }\n\n    // \u5411\u524d\u627e\n    private int find(String blocks, int idx, int k) {\n        if (idx &lt; k - 1) return Integer.MAX_VALUE;\n        int cnt = 0;\n        for (int i = idx; i &gt;= 0 &amp;&amp; k &gt; 0; i--, k--) {\n            if (blocks.charAt(i) != 'B') cnt++;\n        }\n        return cnt;\n    }\n}\n</code></pre> <p>\u89e3\u6cd52: \u6ed1\u52a8\u7a97\u53e3</p> <pre><code>class Solution {\n    public int minimumRecolors(String blocks, int k) {\n        int res = blocks.length();\n        int p0 = 0, p1 = k - 1;\n        int wCnt = 0;\n        for (int i = p0; i &lt;= p1; i++) {\n            if (blocks.charAt(i) == 'W') wCnt++;\n        }\n        res = Math.min(res, wCnt);\n        while (++p1 &lt; blocks.length()) {\n            if (blocks.charAt(p0) == 'W') wCnt--;\n            if (blocks.charAt(p1) == 'W') wCnt++;\n            res = Math.min(res, wCnt);\n            p0++;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#_12","title":"\u9012\u63a8","text":""},{"location":"leetcode/%E6%95%B0%E7%BB%84/#2433-mid","title":"2433. \u627e\u51fa\u524d\u7f00\u5f02\u6216\u7684\u539f\u59cb\u6570\u7ec4 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684 \u6574\u6570 \u6570\u7ec4 pref \u3002\u627e\u51fa\u5e76\u8fd4\u56de\u6ee1\u8db3\u4e0b\u8ff0\u6761\u4ef6\u4e14\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4 arr \uff1a</p> <ul> <li>pref[i] = arr[0] ^ arr[1] ^ ... ^ arr[i].</li> </ul> <p>\u6ce8\u610f ^ \u8868\u793a \u6309\u4f4d\u5f02\u6216\uff08bitwise-xor\uff09\u8fd0\u7b97\u3002</p> <p>\u53ef\u4ee5\u8bc1\u660e\u7b54\u6848\u662f \u552f\u4e00 \u7684\u3002</p> <pre><code>class Solution {\n    public int[] findArray(int[] pref) {\n        int n = pref.length;\n        int[] res = new int[n];\n        res[0] = pref[0];\n        for (int i = 1; i &lt; n; i++) {\n            res[i] = pref[i] ^ pref[i - 1];\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84/#_13","title":"\u6253\u5370","text":""},{"location":"leetcode/%E6%95%B0%E7%BB%84/#offer-17-1n-easy","title":"\u5251\u6307 Offer 17. \u6253\u5370\u4ece1\u5230\u6700\u5927\u7684n\u4f4d\u6570 easy","text":"<p>\u8f93\u5165\u6570\u5b57 n\uff0c\u6309\u987a\u5e8f\u6253\u5370\u51fa\u4ece 1 \u5230\u6700\u5927\u7684 n \u4f4d\u5341\u8fdb\u5236\u6570\u3002</p> <ul> <li>\u6bd4\u5982\u8f93\u5165 3\uff0c\u5219\u6253\u5370\u51fa 1\u30012\u30013 \u4e00\u76f4\u5230\u6700\u5927\u7684 3 \u4f4d\u6570 999\u3002</li> </ul> <pre><code>class Solution {\n    public int[] printNumbers(int n) {\n        int len = 1;\n        for (int i = 0; i &lt; n; i++) {\n            len *= 10;\n        }\n        len--;\n        int[] res = new int[len];\n        for (int i = 0; i &lt; len; i++) {\n            res[i] = i + 1;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E7%89%B9%E5%AE%9A%E5%85%83%E7%B4%A0/","title":"\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u7279\u5b9a\u5143\u7d20","text":""},{"location":"leetcode/%E6%95%B0%E7%BB%84%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E7%89%B9%E5%AE%9A%E5%85%83%E7%B4%A0/#_1","title":"\u6570\u7ec4\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u7279\u5b9a\u5143\u7d20","text":"<p>\u5355\u8c03\u6808 \u6307\u7684\u662f\u6808\u4e2d\u5143\u7d20\u662f\u5355\u8c03\u7684, \u4e0d\u5355\u8c03\u7684\u65f6\u5019pop</p>"},{"location":"leetcode/%E6%95%B0%E7%BB%84%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E7%89%B9%E5%AE%9A%E5%85%83%E7%B4%A0/#739-mid","title":"739. \u6bcf\u65e5\u6e29\u5ea6 mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 temperatures \uff0c\u8868\u793a\u6bcf\u5929\u7684\u6e29\u5ea6\uff0c\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4 answer \uff0c\u5176\u4e2d answer[i] \u662f\u6307\u5bf9\u4e8e\u7b2c i \u5929\uff0c\u4e0b\u4e00\u4e2a\u66f4\u9ad8\u6e29\u5ea6\u51fa\u73b0\u5728\u51e0\u5929\u540e\u3002\u5982\u679c\u6c14\u6e29\u5728\u8fd9\u4e4b\u540e\u90fd\u4e0d\u4f1a\u5347\u9ad8\uff0c\u8bf7\u5728\u8be5\u4f4d\u7f6e\u7528 0 \u6765\u4ee3\u66ff\u3002</p> <p>\u66b4\u529b\u89e3\u6ca1\u610f\u601d, \u770b\u770b\u5355\u8c03\u6808\u7684\u89e3\u6cd5</p> <pre><code>class Solution {\n    public int[] dailyTemperatures(int[] temperatures) {\n        int length = temperatures.length;\n        int[] ans = new int[length];\n        // \u5b58\u653e idx\n        Deque&lt;Integer&gt; stack = new LinkedList&lt;&gt;();\n\n        for (int i = 0; i &lt; length; i++) {\n            int tem = temperatures[i];\n            // \u5927\u4e8e\u6808\u9876\n            while (!stack.isEmpty() &amp;&amp; tem &gt; temperatures[stack.peek()]) {\n                int preIndex = stack.pop();\n                ans[preIndex] = i - preIndex;\n            }\n            stack.push(i);\n        }\n        return ans;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84%E4%B8%AD%E6%AF%8F%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E7%89%B9%E5%AE%9A%E5%85%83%E7%B4%A0/#503-ii-mid","title":"503. \u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20 II mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5faa\u73af\u6570\u7ec4 nums \uff08 nums[nums.length - 1] \u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u662f nums[0] \uff09\uff0c\u8fd4\u56de nums \u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684 \u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20\u3002</p> <p>\u6570\u5b57 x \u7684 \u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u5143\u7d20 \u662f\u6309\u6570\u7ec4\u904d\u5386\u987a\u5e8f\uff0c\u8fd9\u4e2a\u6570\u5b57\u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u6bd4\u5b83\u66f4\u5927\u7684\u6570\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u5e94\u8be5\u5faa\u73af\u5730\u641c\u7d22\u5b83\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6570\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8f93\u51fa -1\u3002</p> <p>\u5355\u8c03\u6808 \u770b\u4ee3\u7801\u5427</p> <pre><code>class Solution {\n    public int[] nextGreaterElements(int[] nums) {\n        int n = nums.length;\n        int[] ret = new int[n];\n        Arrays.fill(ret, -1);\n        Deque&lt;Integer&gt; stack = new LinkedList&lt;&gt;();\n        // \u5faa\u73af\u6570\u7ec4\u7684\u65f6\u5019\u8fd9\u6837\u5904\u7406\n        for (int i = 0; i &lt; n * 2; i++) {\n            int idx = i % n;\n            while (!stack.isEmpty() &amp;&amp; nums[stack.peek()] &lt; nums[idx]) {\n                // \u8bf4\u660e\u627e\u5230\u4e86\u6808\u4e2d\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u66f4\u5927\u5143\u7d20\n                Integer preIdx = stack.pop();\n                ret[preIdx] = nums[idx];\n            }\n            stack.push(idx);\n        }\n        return ret;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84%E4%BF%AE%E6%94%B9/","title":"\u6570\u7ec4\u4fee\u6539","text":""},{"location":"leetcode/%E6%95%B0%E7%BB%84%E4%BF%AE%E6%94%B9/#_2","title":"\u5dee\u5206\u6570\u7ec4","text":""},{"location":"leetcode/%E6%95%B0%E7%BB%84%E4%BF%AE%E6%94%B9/#848-mid","title":"848. \u5b57\u6bcd\u79fb\u4f4d mid","text":"<p>\u6709\u4e00\u4e2a\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 s\uff0c\u548c\u4e00\u4e2a\u957f\u5ea6\u76f8\u540c\u7684\u6574\u6570\u6570\u7ec4 shifts\u3002</p> <p>\u6211\u4eec\u5c06\u5b57\u6bcd\u8868\u4e2d\u7684\u4e0b\u4e00\u4e2a\u5b57\u6bcd\u79f0\u4e3a\u539f\u5b57\u6bcd\u7684 \u79fb\u4f4d shift() \uff08\u7531\u4e8e\u5b57\u6bcd\u8868\u662f\u73af\u7ed5\u7684\uff0c 'z' \u5c06\u4f1a\u53d8\u6210 'a'\uff09\u3002</p> <p>\u4f8b\u5982\uff0cshift('a') = 'b', shift('t') = 'u', \u4ee5\u53ca shift('z') = 'a'\u3002 \u5bf9\u4e8e\u6bcf\u4e2a shifts[i] = x \uff0c \u6211\u4eec\u4f1a\u5c06 s \u4e2d\u7684\u524d i + 1 \u4e2a\u5b57\u6bcd\u79fb\u4f4d x \u6b21\u3002</p> <p>\u8fd4\u56de \u5c06\u6240\u6709\u8fd9\u4e9b\u79fb\u4f4d\u90fd\u5e94\u7528\u5230 s \u540e\u6700\u7ec8\u5f97\u5230\u7684\u5b57\u7b26\u4e32 \u3002</p> <pre><code>class Solution {\n    public String shiftingLetters(String s, int[] shifts) {\n        int n = shifts.length;\n        int[] arr = new int[s.length() + 1];\n\n        // \u597d\u597d\u7406\u89e3\u4e00\u4e0b\u5dee\u5206\u6570\u7ec4\u5982\u4f55\u521d\u59cb\u5316\u7684\n        for (int i = 0; i &lt; n; i++) {\n            arr[0] += shifts[i] % 26;\n            arr[i + 1] -= shifts[i] % 26;\n        }\n\n        StringBuilder sb = new StringBuilder(s);\n        int sum = 0;\n        for (int i = 0; i &lt; sb.length(); i++) {\n            sum += arr[i];\n            sum %= 26;\n            char c = sb.charAt(i);\n            c += sum;\n            if (c &lt; 'a') c += 26;\n            else if (c &gt; 'z') c -= 26;\n            sb.setCharAt(i, c);\n        }\n        return sb.toString();\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84%E4%BF%AE%E6%94%B9/#2381-ii-mid","title":"2381. \u5b57\u6bcd\u79fb\u4f4d II mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 shifts \uff0c\u5176\u4e2d shifts[i] = [starti, endi, directioni] \u3002\u5bf9\u4e8e\u6bcf\u4e2a i \uff0c\u5c06 s \u4e2d\u4ece\u4e0b\u6807 starti \u5230\u4e0b\u6807 endi\uff08\u4e24\u8005\u90fd\u5305\u542b\uff09\u6240\u6709\u5b57\u7b26\u90fd\u8fdb\u884c\u79fb\u4f4d\u8fd0\u7b97\uff0c\u5982\u679c directioni = 1 \u5c06\u5b57\u7b26\u5411\u540e\u79fb\u4f4d\uff0c\u5982\u679c directioni = 0 \u5c06\u5b57\u7b26\u5411\u524d\u79fb\u4f4d\u3002</p> <p>\u5c06\u4e00\u4e2a\u5b57\u7b26 \u5411\u540e \u79fb\u4f4d\u7684\u610f\u601d\u662f\u5c06\u8fd9\u4e2a\u5b57\u7b26\u7528\u5b57\u6bcd\u8868\u4e2d \u4e0b\u4e00\u4e2a \u5b57\u6bcd\u66ff\u6362\uff08\u5b57\u6bcd\u8868\u89c6\u4e3a\u73af\u7ed5\u7684\uff0c\u6240\u4ee5 'z' \u53d8\u6210 'a'\uff09\u3002\u7c7b\u4f3c\u7684\uff0c\u5c06\u4e00\u4e2a\u5b57\u7b26 \u5411\u524d \u79fb\u4f4d\u7684\u610f\u601d\u662f\u5c06\u8fd9\u4e2a\u5b57\u7b26\u7528\u5b57\u6bcd\u8868\u4e2d \u524d\u4e00\u4e2a \u5b57\u6bcd\u66ff\u6362\uff08\u5b57\u6bcd\u8868\u662f\u73af\u7ed5\u7684\uff0c\u6240\u4ee5 'a' \u53d8\u6210 'z'\uff09\u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de\u5bf9 s \u8fdb\u884c\u6240\u6709\u79fb\u4f4d\u64cd\u4f5c\u4ee5\u540e\u5f97\u5230\u7684\u6700\u7ec8\u5b57\u7b26\u4e32\u3002</p> <pre><code>class Solution {\n    public String shiftingLetters(String s, int[][] shifts) {\n        int n = s.length();\n        //\u957f\u5ea6\u4e3as.length+1 \u65b9\u4fbf\u540e\u7eedend+1\u4e0d\u4f1a\u6ea2\u51fa\n        int[] arr = new int[n + 1];\n        for (int[] shift : shifts) {\n            int dir = shift[2] == 1 ? 1 : -1;\n            arr[shift[0]] += dir;\n            arr[shift[1] + 1] -= dir;\n        }\n\n        int sum = 0;\n        char[] res = s.toCharArray();\n        for (int i = 0; i &lt; n; i++) {\n            sum += arr[i];\n            sum %= 26;\n            res[i] += sum;\n            if (res[i] &gt; 'z') res[i] -= 26;\n            else if (res[i] &lt; 'a') res[i] += 26;\n        }\n        return String.valueOf(res);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84%E4%BF%AE%E6%94%B9/#_3","title":"\u4fee\u6539\u6570\u7ec4\u4f7f\u5143\u7d20\u76f8\u7b49","text":""},{"location":"leetcode/%E6%95%B0%E7%BB%84%E4%BF%AE%E6%94%B9/#6216-hard","title":"6216. \u4f7f\u6570\u7ec4\u76f8\u7b49\u7684\u6700\u5c0f\u5f00\u9500 hard","text":"<p>\u7ed9\u4f60\u4e24\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6570\u7ec4 nums \u548c cost \uff0c\u5206\u522b\u5305\u542b n \u4e2a \u6b63 \u6574\u6570\u3002 \u4f60\u53ef\u4ee5\u6267\u884c\u4e0b\u9762\u64cd\u4f5c \u4efb\u610f \u6b21\uff1a</p> <ul> <li>\u5c06 nums \u4e2d \u4efb\u610f \u5143\u7d20\u589e\u52a0\u6216\u8005\u51cf\u5c0f 1 \u3002</li> </ul> <p>\u5bf9\u7b2c i \u4e2a\u5143\u7d20\u6267\u884c\u4e00\u6b21\u64cd\u4f5c\u7684\u5f00\u9500\u662f cost[i]\u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de\u4f7f nums \u4e2d\u6240\u6709\u5143\u7d20 \u76f8\u7b49 \u7684 \u6700\u5c11 \u603b\u5f00\u9500\u3002</p> <p>\u89e3\u6cd51:</p> <p>\u5148\u6309\u5927\u5c0f\u6392\u5e8f, \u7136\u540e\u8ba9\u6240\u6709\u5143\u7d20\u7b49\u4e8emin\u4f5c\u4e3a\u57fa\u51c6\u7ebf, \u9010\u6e10\u5f80\u4e0a\u62ac \u62ac\u7684\u8fc7\u7a0b\u79cd\u6839\u636ecost\u7684\u524d\u7f00\u548c\u8ba1\u7b97\u6bcf\u6b21\u62ac\u7684\u5dee\u503c $O(nlogn)$</p> <pre><code>class Solution {\n    public long minCost(int[] nums, int[] cost) {\n        int n = nums.length;\n        int[][] arr = new int[n][2];\n        for (int i = 0; i &lt; n; i++) {\n            arr[i][0] = nums[i];\n            arr[i][1] = cost[i];\n        }\n        Arrays.sort(arr, Comparator.comparingInt(a -&gt; a[0]));\n        for (int i = 0; i &lt; n; i++) {\n            nums[i] = arr[i][0];\n            cost[i] = arr[i][1];\n        }\n\n        long sum = 0;\n        long costsum = 0;\n        for (int i = 0; i &lt; n; i++) {\n            sum += cost[i] * (long) (nums[i] - nums[0]);\n            costsum += cost[i];\n        }\n        long res = sum;\n\n        // \u62ac\u5230 i\n        long precost = cost[0];\n        for (int i = 1; i &lt; n; i++) {\n            long diff = nums[i] - nums[i - 1];\n            sum += precost * diff;\n            sum -= (costsum - precost) * diff;\n            res = Math.min(res, sum);\n            precost += cost[i];\n        }\n        return res;\n    }\n}\n</code></pre> <p>\u89e3\u6cd52:</p> <p>\u6700\u5c0f\u503c\u51fa\u73b0\u5728\u4e2d\u4f4d\u6570, cost\u53ef\u4ee5\u89c6\u4e3a\u51fa\u73b0\u6b21\u6570</p> <pre><code>class Solution {\n    public long minCost(int[] nums, int[] cost) {\n        int n = nums.length;\n        int[][] arr = new int[n][2];\n        for (int i = 0; i &lt; n; i++) {\n            arr[i][0] = nums[i];\n            arr[i][1] = cost[i];\n        }\n        Arrays.sort(arr, Comparator.comparingInt(a -&gt; a[0]));\n        int[] costtemp = new int[n];\n        for (int i = 0; i &lt; n; i++) {\n            nums[i] = arr[i][0];\n            cost[i] = arr[i][1];\n            costtemp[i] = arr[i][1];\n        }\n        // \u6c42\u4e2d\u4f4d\u6570\n        int l = 0, r = n - 1;\n        while (l &lt; r) {\n            int cnt1 = costtemp[l];\n            int cnt2 = costtemp[r];\n            if (cnt1 == cnt2) {\n                l++;\n                r--;\n            } else if (cnt1 &gt; cnt2) {\n                r--;\n                costtemp[l] -= cnt2;\n            } else {\n                l++;\n                costtemp[r] -= cnt1;\n            }\n        }\n        int mid = nums[l];\n\n        long sum = 0;\n        for (int i = 0; i &lt; n; i++) {\n            long diff = Math.abs(mid - nums[i]);\n            sum += diff * cost[i];\n        }\n        return sum;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%95%B0%E7%BB%84%E4%BF%AE%E6%94%B9/#_4","title":"\u4fee\u6539\u6570\u7ec4","text":""},{"location":"leetcode/%E6%95%B0%E7%BB%84%E4%BF%AE%E6%94%B9/#6229-easy","title":"6229. \u5bf9\u6570\u7ec4\u6267\u884c\u64cd\u4f5c easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6570\u7ec4 nums \uff0c\u6570\u7ec4\u5927\u5c0f\u4e3a n \uff0c\u4e14\u7531 \u975e\u8d1f \u6574\u6570\u7ec4\u6210\u3002</p> <p>\u4f60\u9700\u8981\u5bf9\u6570\u7ec4\u6267\u884c n - 1 \u6b65\u64cd\u4f5c\uff0c\u5176\u4e2d\u7b2c i \u6b65\u64cd\u4f5c\uff08\u4ece 0 \u5f00\u59cb\u8ba1\u6570\uff09\u8981\u6c42\u5bf9 nums \u4e2d\u7b2c i \u4e2a\u5143\u7d20\u6267\u884c\u4e0b\u8ff0\u6307\u4ee4\uff1a</p> <ul> <li>\u5982\u679c nums[i] == nums[i + 1] \uff0c\u5219 nums[i] \u7684\u503c\u53d8\u6210\u539f\u6765\u7684 2 \u500d\uff0cnums[i + 1] \u7684\u503c\u53d8\u6210 0 \u3002\u5426\u5219\uff0c\u8df3\u8fc7\u8fd9\u6b65\u64cd\u4f5c\u3002</li> </ul> <p>\u5728\u6267\u884c\u5b8c \u5168\u90e8 \u64cd\u4f5c\u540e\uff0c\u5c06\u6240\u6709 0 \u79fb\u52a8 \u5230\u6570\u7ec4\u7684 \u672b\u5c3e\u3002</p> <ul> <li>\u4f8b\u5982\uff0c\u6570\u7ec4 [1,0,2,0,0,1] \u5c06\u6240\u6709 0 \u79fb\u52a8\u5230\u672b\u5c3e\u540e\u53d8\u4e3a [1,2,1,0,0,0]\u3002</li> </ul> <p>\u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\u3002</p> <p>\u6ce8\u610f \u64cd\u4f5c\u5e94\u5f53 \u4f9d\u6b21\u6709\u5e8f \u6267\u884c\uff0c\u800c\u4e0d\u662f\u4e00\u6b21\u6027\u5168\u90e8\u6267\u884c\u3002</p> <p>\u679a\u4e3e+\u79fb\u52a80</p> <pre><code>class Solution {\n    public int[] applyOperations(int[] nums) {\n        for (int i = 0; i &lt; nums.length - 1; i++) {\n            if (nums[i] == nums[i + 1]) {\n                nums[i] *= 2;\n                nums[i + 1] = 0;\n            }\n        }\n        // \u5e9f\u5f03\u4f4d\u6807\u8bb0\n        int idx = 0;\n        for (int i = 0; i &lt; nums.length; i++) {\n            if (nums[i] != 0)\n                nums[idx++] = nums[i];\n        }\n        for (int i = idx; i &lt; nums.length; i++) {\n            nums[i] = 0;\n        }\n        return nums;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%98%A0%E5%B0%84/","title":"\u6620\u5c04","text":""},{"location":"leetcode/%E6%98%A0%E5%B0%84/#_2","title":"\u53d6\u4f59","text":""},{"location":"leetcode/%E6%98%A0%E5%B0%84/#6226-mid","title":"6226. \u6467\u6bc1\u4e00\u7cfb\u5217\u76ee\u6807 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6570\u7ec4 nums \uff0c\u5b83\u5305\u542b\u82e5\u5e72\u6b63\u6574\u6570\uff0c\u8868\u793a\u6570\u8f74\u4e0a\u4f60\u9700\u8981\u6467\u6bc1\u7684\u76ee\u6807\u6240\u5728\u7684\u4f4d\u7f6e\u3002\u540c\u65f6\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 space \u3002</p> <p>\u4f60\u6709\u4e00\u53f0\u673a\u5668\u53ef\u4ee5\u6467\u6bc1\u76ee\u6807\u3002\u7ed9\u673a\u5668 \u8f93\u5165 nums[i]\uff0c\u8fd9\u53f0\u673a\u5668\u4f1a\u6467\u6bc1\u6240\u6709\u4f4d\u7f6e\u5728 nums[i] + c * space \u7684\u76ee\u6807\uff0c\u5176\u4e2d c \u662f\u4efb\u610f\u975e\u8d1f\u6574\u6570\u3002\u4f60\u60f3\u6467\u6bc1 nums \u4e2d \u5c3d\u53ef\u80fd\u591a \u7684\u76ee\u6807\u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de\u5728\u6467\u6bc1\u6570\u76ee\u6700\u591a\u7684\u524d\u63d0\u4e0b\uff0cnums[i]\u7684 \u6700\u5c0f\u503c \u3002</p> <pre><code>class Solution {\n    public int destroyTargets(int[] nums, int space) {\n        Map&lt;Integer, Integer&gt; cntMap = new HashMap&lt;&gt;();\n        int max = 0, min = Integer.MAX_VALUE;\n        for (int num : nums) {\n            Integer key = num % space;\n            cntMap.merge(key, 1, Integer::sum);\n            max = Math.max(max, cntMap.get(key));\n        }\n        for (int num : nums) {\n            Integer key = num % space;\n            if (cntMap.get(key) == max) min = Math.min(min, num);\n        }\n        return min;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%9C%80%E5%B0%8F%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/","title":"\u6700\u5c0f\u7684\u6700\u5927\u503c","text":""},{"location":"leetcode/%E6%9C%80%E5%B0%8F%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/#_1","title":"\u6700\u5c0f\u7684\u6700\u5927\u503c","text":""},{"location":"leetcode/%E6%9C%80%E5%B0%8F%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/#2560-iv-mid","title":"2560. \u6253\u5bb6\u52ab\u820d IV mid","text":"<p>\u6cbf\u8857\u6709\u4e00\u6392\u8fde\u7eed\u7684\u623f\u5c4b\u3002\u6bcf\u95f4\u623f\u5c4b\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\u3002\u73b0\u5728\u6709\u4e00\u4f4d\u5c0f\u5077\u8ba1\u5212\u4ece\u8fd9\u4e9b\u623f\u5c4b\u4e2d\u7a83\u53d6\u73b0\u91d1\u3002</p> <p>\u7531\u4e8e\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c\u6240\u4ee5\u5c0f\u5077 \u4e0d\u4f1a\u7a83\u53d6\u76f8\u90bb\u7684\u623f\u5c4b \u3002</p> <p>\u5c0f\u5077\u7684 \u7a83\u53d6\u80fd\u529b \u5b9a\u4e49\u4e3a\u4ed6\u5728\u7a83\u53d6\u8fc7\u7a0b\u4e2d\u80fd\u4ece\u5355\u95f4\u623f\u5c4b\u4e2d\u7a83\u53d6\u7684 \u6700\u5927\u91d1\u989d \u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u8868\u793a\u6bcf\u95f4\u623f\u5c4b\u5b58\u653e\u7684\u73b0\u91d1\u91d1\u989d\u3002\u5f62\u5f0f\u4e0a\uff0c\u4ece\u5de6\u8d77\u7b2c i \u95f4\u623f\u5c4b\u4e2d\u653e\u6709 nums[i] \u7f8e\u5143\u3002</p> <p>\u53e6\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 k \uff0c\u8868\u793a\u7a83\u8d3c\u5c06\u4f1a\u7a83\u53d6\u7684 \u6700\u5c11 \u623f\u5c4b\u6570\u3002\u5c0f\u5077\u603b\u80fd\u7a83\u53d6\u81f3\u5c11 k \u95f4\u623f\u5c4b\u3002</p> <p>\u8fd4\u56de\u5c0f\u5077\u7684 \u6700\u5c0f \u7a83\u53d6\u80fd\u529b\u3002</p> <p>\u770b\u4f3cDP, \u5b9e\u5219\u4e8c\u5206</p> <pre><code>class Solution {\n    public int minCapability(int[] nums, int k) {\n        int l = 1, r = 1_000_000_000;\n        while (l &lt; r) {\n            int m = l + (r - l &gt;&gt; 1);\n            int cnt = 0;\n            for (int i = 0; i &lt; nums.length; i += nums[i] &gt; m ? 1 : 2) {\n                if (nums[i] &lt;= m) cnt++;\n            }\n            // \u5de6\u8fb9\u754c\n            if (cnt &gt;= k)\n                r = m;\n            else\n                l = m + 1;\n        }\n        return l;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%9C%80%E9%95%BF%E5%BA%8F%E5%88%97/","title":"\u5e8f\u5217","text":""},{"location":"leetcode/%E6%9C%80%E9%95%BF%E5%BA%8F%E5%88%97/#_2","title":"\u6700\u957f\u67d0\u7c7b\u5b50\u5e8f\u5217","text":""},{"location":"leetcode/%E6%9C%80%E9%95%BF%E5%BA%8F%E5%88%97/#376-mid","title":"376. \u6446\u52a8\u5e8f\u5217 mid","text":"<p>\u5982\u679c\u8fde\u7eed\u6570\u5b57\u4e4b\u95f4\u7684\u5dee\u4e25\u683c\u5730\u5728\u6b63\u6570\u548c\u8d1f\u6570\u4e4b\u95f4\u4ea4\u66ff\uff0c\u5219\u6570\u5b57\u5e8f\u5217\u79f0\u4e3a \u6446\u52a8\u5e8f\u5217 \u3002\u7b2c\u4e00\u4e2a\u5dee\uff08\u5982\u679c\u5b58\u5728\u7684\u8bdd\uff09\u53ef\u80fd\u662f\u6b63\u6570\u6216\u8d1f\u6570\u3002\u4ec5\u6709\u4e00\u4e2a\u5143\u7d20\u6216\u8005\u542b\u4e24\u4e2a\u4e0d\u7b49\u5143\u7d20\u7684\u5e8f\u5217\u4e5f\u89c6\u4f5c\u6446\u52a8\u5e8f\u5217\u3002</p> <ul> <li> <p>\u4f8b\u5982\uff0c [1, 7, 4, 9, 2, 5] \u662f\u4e00\u4e2a \u6446\u52a8\u5e8f\u5217 \uff0c\u56e0\u4e3a\u5dee\u503c (6, -3, 5, -7, 3) \u662f\u6b63\u8d1f\u4ea4\u66ff\u51fa\u73b0\u7684\u3002</p> </li> <li> <p>\u76f8\u53cd\uff0c[1, 4, 7, 2, 5] \u548c [1, 7, 4, 5, 5] \u4e0d\u662f\u6446\u52a8\u5e8f\u5217\uff0c\u7b2c\u4e00\u4e2a\u5e8f\u5217\u662f\u56e0\u4e3a\u5b83\u7684\u524d\u4e24\u4e2a\u5dee\u503c\u90fd\u662f\u6b63\u6570\uff0c\u7b2c\u4e8c\u4e2a\u5e8f\u5217\u662f\u56e0\u4e3a\u5b83\u7684\u6700\u540e\u4e00\u4e2a\u5dee\u503c\u4e3a\u96f6\u3002</p> </li> </ul> <p>\u5b50\u5e8f\u5217 \u53ef\u4ee5\u901a\u8fc7\u4ece\u539f\u59cb\u5e8f\u5217\u4e2d\u5220\u9664\u4e00\u4e9b\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\uff09\u5143\u7d20\u6765\u83b7\u5f97\uff0c\u5269\u4e0b\u7684\u5143\u7d20\u4fdd\u6301\u5176\u539f\u59cb\u987a\u5e8f\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u8fd4\u56de nums \u4e2d\u4f5c\u4e3a \u6446\u52a8\u5e8f\u5217 \u7684 \u6700\u957f\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 \u3002</p> <p>\u8fd9\u9898\u4e4d\u770b\u4e0d\u77e5\u9053\u600e\u4e48\u505a, \u56e0\u4e3a\u5b83\u662f\u4e2a\u8111\u7b4b\u6025\u8f6c\u5f2f \u6838\u5fc3\u601d\u8def\u662f\u8fde\u7eed\u9012\u589e\u7684\u5e8f\u5217\u53ea\u8ba1\u7b97\u4e3a2, \u4e5f\u5c31\u662f\u4e2d\u95f4\u7684\u70b9\u62ff\u6389 \u53ea\u770b\u904d\u5386\u4e2d, \u5c3e\u90e8\u4e24\u4e2a\u8282\u70b9</p> <pre><code>class Solution {\n    public int wiggleMaxLength(int[] nums) {\n        if (nums == null || nums.length == 0) return 0;\n        int up = 1, down = 1;\n        for (int i = 1; i &lt; nums.length; i++) {\n            if (nums[i] &gt; nums[i - 1])\n                up = down + 1;\n            else if (nums[i] &lt; nums[i - 1])\n                down = up + 1;\n        }\n        return Math.max(up, down);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%9C%80%E9%95%BF%E5%BA%8F%E5%88%97/#2389-easy","title":"2389. \u548c\u6709\u9650\u7684\u6700\u957f\u5b50\u5e8f\u5217 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u548c\u4e00\u4e2a\u957f\u5ea6\u4e3a m \u7684\u6574\u6570\u6570\u7ec4 queries \u3002</p> <p>\u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e3a m \u7684\u6570\u7ec4 answer \uff0c\u5176\u4e2d answer[i] \u662f nums \u4e2d \u5143\u7d20\u4e4b\u548c\u5c0f\u4e8e\u7b49\u4e8e queries[i] \u7684 \u5b50\u5e8f\u5217 \u7684 \u6700\u5927 \u957f\u5ea6 \u3002</p> <p>\u5b50\u5e8f\u5217 \u662f\u7531\u4e00\u4e2a\u6570\u7ec4\u5220\u9664\u67d0\u4e9b\u5143\u7d20\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\uff09\u4f46\u4e0d\u6539\u53d8\u5269\u4f59\u5143\u7d20\u987a\u5e8f\u5f97\u5230\u7684\u4e00\u4e2a\u6570\u7ec4\u3002</p> <p>\u6392\u5e8f\u540e\u6c42\u524d\u7f00\u548c, \u8d2a\u5fc3</p> <pre><code>class Solution {\n    public int[] answerQueries(int[] nums, int[] queries) {\n        int m = queries.length;\n        int[] res = new int[m];\n        Arrays.sort(nums);\n        int n = nums.length;\n        int[] sumarr = new int[n];\n        int presum = 0;\n        for (int i = 0; i &lt; n; i++) {\n            sumarr[i] = presum += nums[i];\n        }\n        for (int i = 0; i &lt; m; i++) {\n            int query = queries[i];\n            // \u4e5f\u53ef\u4ee5\u7ebf\u6027\u67e5\u627e\n            res[i] = 1 + biSearch(sumarr, query);\n        }\n        return res;\n    }\n\n    int biSearch(int[] sumarr, int query) {\n        // \u8fd4idx\n        // &lt;=query\u7684\u53f3\u8fb9\u754c\n        int l = 0, r = sumarr.length - 1;\n        while (l &lt; r) {\n            int m = l + (r - l + 1 &gt;&gt; 1);\n            if (sumarr[m] &gt; query) {\n                r = m - 1;\n            } else {\n                l = m;\n            }\n        }\n        return sumarr[l] &lt;= query ? l : -1;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%9C%80%E9%95%BF%E5%BA%8F%E5%88%97/#873-mid","title":"873. \u6700\u957f\u7684\u6590\u6ce2\u90a3\u5951\u5b50\u5e8f\u5217\u7684\u957f\u5ea6 mid","text":"<p>\u5251\u6307 Offer II 093. \u6700\u957f\u6590\u6ce2\u90a3\u5951\u6570\u5217</p> <p>\u5982\u679c\u5e8f\u5217 $X_1, X_2, ..., X_n$ \u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\uff0c\u5c31\u8bf4\u5b83\u662f \u6590\u6ce2\u90a3\u5951\u5f0f \u7684\uff1a</p> <ul> <li>$n &gt;= 3$</li> <li>\u5bf9\u4e8e\u6240\u6709 $i + 2 &lt;= n$\uff0c\u90fd\u6709 $X_i + X_{i+1} = X_{i+2}$</li> </ul> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4e25\u683c\u9012\u589e\u7684\u6b63\u6574\u6570\u6570\u7ec4\u5f62\u6210\u5e8f\u5217 arr \uff0c\u627e\u5230 arr \u4e2d\u6700\u957f\u7684\u6590\u6ce2\u90a3\u5951\u5f0f\u7684\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u5982\u679c\u4e00\u4e2a\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de 0\u3002</p> <p>\u4e00\u4e2a\u6590\u6ce2\u90a3\u5951\u6570\u5217\u53ef\u4ee5\u7531\u6700\u540e2\u4e2a\u5143\u7d20\u8868\u5f81 \u601d\u8def\u7c7b\u4f3c\u4e8e3\u6570\u4e4b\u548c</p> <pre><code>class Solution {\n    public int lenLongestFibSubseq(int[] arr) {\n        int n = arr.length;\n        int[][] dp = new int[n][n];\n        int max = 0;\n        for (int i = 2; i &lt; n; i++) {\n            int j = i - 1;\n            int k = 0;\n            while (k &lt; j) {\n                if (arr[k] + arr[j] == arr[i]) {\n                    int m;\n                    if (dp[k][j] == 0)\n                        m = dp[j][i] = 3;\n                    else\n                        m = dp[j][i] = Math.max(dp[j][i], dp[k][j] + 1);\n                    max = Math.max(max, m);\n                    j--;\n                    k++;\n                } else if (arr[k] + arr[j] &lt; arr[i]) k++;\n                else j--;\n            }\n        }\n        return max;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%9C%80%E9%95%BF%E5%BA%8F%E5%88%97/#1312-hard","title":"1312. \u8ba9\u5b57\u7b26\u4e32\u6210\u4e3a\u56de\u6587\u4e32\u7684\u6700\u5c11\u63d2\u5165\u6b21\u6570 hard","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u6bcf\u4e00\u6b21\u64cd\u4f5c\u4f60\u90fd\u53ef\u4ee5\u5728\u5b57\u7b26\u4e32\u7684\u4efb\u610f\u4f4d\u7f6e\u63d2\u5165\u4efb\u610f\u5b57\u7b26\u3002 \u8bf7\u4f60\u8fd4\u56de\u8ba9 s \u6210\u4e3a\u56de\u6587\u4e32\u7684 \u6700\u5c11\u64cd\u4f5c\u6b21\u6570 \u3002</p> <p>\u5c31\u662f\u6c42\u6700\u957f\u56de\u6587\u5b50\u5e8f\u5217</p> <pre><code>class Solution {\n    public int minInsertions(String s) {\n        int n = s.length();\n        char[] arr = s.toCharArray();\n        int[][] dp = new int[n][n];\n        for (int i = n - 1; i &gt;= 0; i--) {\n            dp[i][i] = 1;\n            for (int j = i + 1; j &lt; n; j++) {\n                if (arr[i] == arr[j])\n                    dp[i][j] = 2 + dp[i + 1][j - 1];\n                else\n                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);\n            }\n        }\n        return n - dp[0][n - 1];\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%9C%80%E9%95%BF%E5%BA%8F%E5%88%97/#_3","title":"\u6700\u957f\u67d0\u7c7b\u516c\u5171\u5b50\u5e8f\u5217","text":""},{"location":"leetcode/%E6%9C%80%E9%95%BF%E5%BA%8F%E5%88%97/#392-easy","title":"392 \u5224\u65ad\u5b50\u5e8f\u5217 easy","text":"<p>\u7ed9\u5b9a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u5224\u65ad s \u662f\u5426\u4e3a t \u7684\u5b50\u5e8f\u5217\u3002 \u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\u662f\u539f\u59cb\u5b57\u7b26\u4e32\u5220\u9664\u4e00\u4e9b\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\uff09\u5b57\u7b26\u800c\u4e0d\u6539\u53d8\u5269\u4f59\u5b57\u7b26\u76f8\u5bf9\u4f4d\u7f6e\u5f62\u6210\u7684\u65b0\u5b57\u7b26\u4e32\u3002\uff08\u4f8b\u5982\uff0c\"ace\"\u662f\"abcde\"\u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u800c\"aec\"\u4e0d\u662f\uff09\u3002</p> <p>\u8fdb\u9636\uff1a \u5982\u679c\u6709\u5927\u91cf\u8f93\u5165\u7684 S\uff0c\u79f0\u4f5c S1, S2, ... , Sk \u5176\u4e2d k &gt;= 10\u4ebf\uff0c\u4f60\u9700\u8981\u4f9d\u6b21\u68c0\u67e5\u5b83\u4eec\u662f\u5426\u4e3a T \u7684\u5b50\u5e8f\u5217\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u4f1a\u600e\u6837\u6539\u53d8\u4ee3\u7801\uff1f</p> <p>\u66b4\u529b\u679a\u4e3e</p> <pre><code>class Solution {\n    public boolean isSubsequence(String s, String t) {\n        if (s.length() == 0) return true;\n        int i = 0;\n        for (int j = 0; i &lt; s.length() &amp;&amp; j &lt; t.length(); j++) {\n            if (s.charAt(i) == t.charAt(j)) i++;\n        }\n        return i &gt;= s.length();\n    }\n}\n\n\nclass Solution {\n    public boolean isSubsequence(String s, String t) {\n        int index = -1;\n        for (char c : s.toCharArray()) {\n            index = t.indexOf(c, index + 1);\n            if (index == -1) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%9C%80%E9%95%BF%E5%BA%8F%E5%88%97/#524-mid","title":"524. \u901a\u8fc7\u5220\u9664\u5b57\u6bcd\u5339\u914d\u5230\u5b57\u5178\u91cc\u6700\u957f\u5355\u8bcd mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 dictionary \uff0c\u627e\u51fa\u5e76\u8fd4\u56de dictionary \u4e2d\u6700\u957f\u7684\u5b57\u7b26\u4e32\uff0c\u8be5\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7\u5220\u9664 s \u4e2d\u7684\u67d0\u4e9b\u5b57\u7b26\u5f97\u5230\u3002</p> <p>\u5982\u679c\u7b54\u6848\u4e0d\u6b62\u4e00\u4e2a\uff0c\u8fd4\u56de\u957f\u5ea6\u6700\u957f\u4e14\u5b57\u6bcd\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32\u3002\u5982\u679c\u7b54\u6848\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002</p> <p>\u66b4\u529b</p> <pre><code>class Solution {\n    public String findLongestWord(String s, List&lt;String&gt; dictionary) {\n        String res = \"\";\n        for (String d : dictionary) {\n            // \u5148\u5224\u65ad\u8fd9\u4e2a, \u590d\u6742\u5ea6\u4f4e\n            if (d.length() &lt; res.length() || d.length() == res.length() &amp;&amp; d.compareTo(res) &gt; 0) continue;\n            res = isSubString(s, d) ? d : res;\n        }\n        return res;\n    }\n\n    private boolean isSubString(String s, String d) {\n        // s &gt; d\n        int i = 0;\n        int j = 0;\n        while (i &lt; s.length() &amp;&amp; j &lt; d.length()) {\n            if (s.charAt(i) == d.charAt(j)) j++;\n            i++;\n        }\n        return j == d.length();\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%9C%80%E9%95%BF%E5%BA%8F%E5%88%97/#583-mid","title":"583. \u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5220\u9664\u64cd\u4f5c mid","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5355\u8bcd word1 \u548c word2 \uff0c\u8fd4\u56de\u4f7f\u5f97 word1 \u548c word2 \u76f8\u540c\u6240\u9700\u7684\u6700\u5c0f\u6b65\u6570\u3002 \u6bcf\u6b65 \u53ef\u4ee5\u5220\u9664\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u7684\u4e00\u4e2a\u5b57\u7b26\u3002</p> <p>\u8f6c\u6210\u6c42\u89e3\u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217</p> <pre><code>class Solution {\n    public int minDistance(String word1, String word2) {\n        int n1 = word1.length();\n        int n2 = word2.length();\n        int[][] dp = new int[n1 + 1][n2 + 1];\n        for (int i = 0; i &lt;= n1; i++) {\n            dp[i][0] = i;\n        }\n        for (int i = 0; i &lt;= n2; i++) {\n            dp[0][i] = i;\n        }\n        // \u957f\u5ea6\u4e3ai,j\u7684\u4e24\u4e2a\u6570\u7ec4\u9700\u8981\u5220\u9664\u7684\u6570\u91cf\n        for (int i = 1; i &lt;= n1; i++) {\n            for (int j = 1; j &lt;= n2; j++) {\n                boolean flag = word1.charAt(i - 1) == word2.charAt(j - 1);\n                if (flag) dp[i][j] = dp[i - 1][j - 1];\n                else dp[i][j] = Math.min(\n                        2 + dp[i - 1][j - 1],\n                        1 + Math.min(dp[i][j - 1], dp[i - 1][j]));\n            }\n        }\n        return dp[n1][n2];\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%9C%80%E9%95%BF%E5%BA%8F%E5%88%97/#1143-mid","title":"1143. \u6700\u957f\u516c\u5171\u5b50\u5e8f\u5217 mid","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 text1 \u548c text2\uff0c\u8fd4\u56de\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u6700\u957f \u516c\u5171\u5b50\u5e8f\u5217 \u7684\u957f\u5ea6\u3002\u5982\u679c\u4e0d\u5b58\u5728 \u516c\u5171\u5b50\u5e8f\u5217 \uff0c\u8fd4\u56de 0 \u3002 \u4e00\u4e2a\u5b57\u7b26\u4e32\u7684 \u5b50\u5e8f\u5217 \u662f\u6307\u8fd9\u6837\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff1a\u5b83\u662f\u7531\u539f\u5b57\u7b26\u4e32\u5728\u4e0d\u6539\u53d8\u5b57\u7b26\u7684\u76f8\u5bf9\u987a\u5e8f\u7684\u60c5\u51b5\u4e0b\u5220\u9664\u67d0\u4e9b\u5b57\u7b26\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\u4efb\u4f55\u5b57\u7b26\uff09\u540e\u7ec4\u6210\u7684\u65b0\u5b57\u7b26\u4e32\u3002 \u4f8b\u5982\uff0c\"ace\" \u662f \"abcde\" \u7684\u5b50\u5e8f\u5217\uff0c\u4f46 \"aec\" \u4e0d\u662f \"abcde\" \u7684\u5b50\u5e8f\u5217\u3002 \u4e24\u4e2a\u5b57\u7b26\u4e32\u7684 \u516c\u5171\u5b50\u5e8f\u5217 \u662f\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u6240\u5171\u540c\u62e5\u6709\u7684\u5b50\u5e8f\u5217\u3002</p> <p>\u9700\u8981\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4, \u7528\u4e8e\u5b58\u50a8s1.charAt\u548cs2.charAt\u5904\u7684\u6700\u957f\u5b50\u5e8f\u5217\u957f\u5ea6 \u53e6\u5916\u5982\u679c\u4e0d\u60f3\u521d\u59cb\u5316 dp[0][0], dp[1][0], dp[0][1] \u7684\u503c\u7684\u8bdd, \u53ef\u4ee5\u4ecedp[1][1]\u4f5c\u4e3a\u8d77\u59cb\u4f4d\u7f6e, \u5177\u4f53\u5904\u7406\u89c1\u4ee3\u7801</p> <pre><code>class Solution {\n    // dp[i][j] =\n//            1: dp[i-1][j-1] +1\n//            2: max{ dp[i-1][j] ,dp[i][j-1] }\n    public int longestCommonSubsequence(String text1, String text2) {\n        int n1 = text1.length();\n        int n2 = text2.length();\n        int[][] dp = new int[n1 + 1][n2 + 1];\n\n        for (int i = 1; i &lt;= n1; i++) {\n            for (int j = 1; j &lt;= n2; j++) {\n                if (text1.charAt(i - 1) == text2.charAt(j - 1))\n                    dp[i][j] = dp[i - 1][j - 1] + 1;\n                else\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n        return dp[n1][n2];\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%9C%80%E9%95%BF%E5%BA%8F%E5%88%97/#_4","title":"\u6700\u957f\u8fde\u7eed\u5b50\u5e8f\u5217","text":""},{"location":"leetcode/%E6%9C%80%E9%95%BF%E5%BA%8F%E5%88%97/#485-1-easy","title":"485. \u6700\u5927\u8fde\u7eed 1 \u7684\u4e2a\u6570 easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6570\u7ec4 nums \uff0c \u8ba1\u7b97\u5176\u4e2d\u6700\u5927\u8fde\u7eed 1 \u7684\u4e2a\u6570\u3002</p> <pre><code>class Solution {\n    public int findMaxConsecutiveOnes(int[] nums) {\n        int max = 0, cnt = 0;\n        for (int x : nums) {\n            if (x != 1) cnt = 0;\n            else cnt++;\n            max = Math.max(max, cnt);\n        }\n        return max;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%9C%80%E9%95%BF%E5%BA%8F%E5%88%97/#1446-easy","title":"1446. \u8fde\u7eed\u5b57\u7b26 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u5b57\u7b26\u4e32\u7684\u300c\u80fd\u91cf\u300d\u5b9a\u4e49\u4e3a\uff1a\u53ea\u5305\u542b\u4e00\u79cd\u5b57\u7b26\u7684\u6700\u957f\u975e\u7a7a\u5b50\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002 \u8bf7\u4f60\u8fd4\u56de\u5b57\u7b26\u4e32 s \u7684 \u80fd\u91cf\u3002 easy</p> <pre><code>class Solution {\n    public int maxPower(String s) {\n        int max = 0;\n        int cnt = 1;\n        Character pre = null;\n        for (char c : s.toCharArray()) {\n            if (pre != null &amp;&amp; c == pre)\n                cnt++;\n            else\n                cnt = 1;\n            max = Math.max(max, cnt);\n            pre = c;\n        }\n        return max;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%9C%80%E9%95%BF%E5%BA%8F%E5%88%97/#2401-mid","title":"2401. \u6700\u957f\u4f18\u96c5\u5b50\u6570\u7ec4 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u7531 \u6b63 \u6574\u6570\u7ec4\u6210\u7684\u6570\u7ec4 nums \u3002</p> <p>\u5982\u679c nums \u7684\u5b50\u6570\u7ec4\u4e2d\u4f4d\u4e8e \u4e0d\u540c \u4f4d\u7f6e\u7684\u6bcf\u5bf9\u5143\u7d20\u6309\u4f4d \u4e0e\uff08AND\uff09\u8fd0\u7b97\u7684\u7ed3\u679c\u7b49\u4e8e 0 \uff0c\u5219\u79f0\u8be5\u5b50\u6570\u7ec4\u4e3a \u4f18\u96c5 \u5b50\u6570\u7ec4\u3002</p> <p>\u8fd4\u56de \u6700\u957f \u7684\u4f18\u96c5\u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002</p> <p>\u6ce8\u610f\uff1a\u957f\u5ea6\u4e3a 1 \u7684\u5b50\u6570\u7ec4\u59cb\u7ec8\u89c6\u4f5c\u4f18\u96c5\u5b50\u6570\u7ec4\u3002</p> <p>\u89e3\u6cd51:\u66b4\u529b</p> <p>\u66b4\u529b\u5f80\u524d\u636f</p> <pre><code>class Solution {\n    public int longestNiceSubarray(int[] nums) {\n        int res = 0;\n        for (int i = 0; i &lt; nums.length; i++) {\n            // \u76f8\u4e92 &amp; \u7b49\u4e8e 0, \u90a3\u4e48\u6bcf\u4e2a bit \u4e0a\u6700\u591a\u53ea\u67091\u4e2a1\n            int or = 0;\n            // \u5f80\u524d\u636f\n            for (int j = i; j &gt;= 0 &amp;&amp; (nums[j] &amp; or) == 0; j--) {\n                or |= nums[j];\n                res = Math.max(res, i - j + 1);\n            }\n        }\n        return res;\n    }\n}\n</code></pre> <p>\u89e3\u6cd52: \u6ed1\u52a8\u7a97\u53e3</p> <p>\u653e\u8fdb\u53bb\u600e\u4e48\u53d6\u51fa\u6765\uff1f</p> <pre><code>class Solution {\n    public int longestNiceSubarray(int[] nums) {\n        int res = 0;\n        int or = 0;\n        int left = 0;\n        for (int right = 0; right &lt; nums.length; right++) {\n            while ((nums[right] &amp; or) != 0) {\n                or ^= nums[left++];\n            }\n            or |= nums[right];\n            res = Math.max(res, right - left + 1);\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%9C%80%E9%95%BF%E5%BA%8F%E5%88%97/#2414-mid","title":"2414. \u6700\u957f\u7684\u5b57\u6bcd\u5e8f\u8fde\u7eed\u5b50\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 mid","text":"<p>\u5b57\u6bcd\u5e8f\u8fde\u7eed\u5b57\u7b26\u4e32 \u662f\u7531\u5b57\u6bcd\u8868\u4e2d\u8fde\u7eed\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5b57\u7b26\u4e32 \"abcdefghijklmnopqrstuvwxyz\" \u7684\u4efb\u610f\u5b50\u5b57\u7b26\u4e32\u90fd\u662f \u5b57\u6bcd\u5e8f\u8fde\u7eed\u5b57\u7b26\u4e32 \u3002</p> <ul> <li>\u4f8b\u5982\uff0c\"abc\" \u662f\u4e00\u4e2a\u5b57\u6bcd\u5e8f\u8fde\u7eed\u5b57\u7b26\u4e32\uff0c\u800c \"acb\" \u548c \"za\" \u4e0d\u662f\u3002</li> </ul> <p>\u7ed9\u4f60\u4e00\u4e2a\u4ec5\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 s \uff0c\u8fd4\u56de\u5176 \u6700\u957f \u7684 \u5b57\u6bcd\u5e8f\u8fde\u7eed\u5b50\u5b57\u7b26\u4e32 \u7684\u957f\u5ea6\u3002</p> <p>\u4e0b\u4e00\u4e2a\u5143\u7d20\u662f\u524d\u4e00\u4e2a\u5143\u7d20+1, len++</p> <pre><code>class Solution {\n    public int longestContinuousSubstring(String s) {\n        int n = s.length();\n        int res = 1;\n        int len = 1;\n        int pre = 0;\n        for (int i = 1; i &lt; n; i++) {\n            if (s.charAt(pre) + 1 == s.charAt(i)) {\n                len++;\n                res = Math.max(res, len);\n            } else {\n                len = 1;\n            }\n            pre = i;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%9C%80%E9%95%BF%E5%BA%8F%E5%88%97/#2419-mid","title":"2419. \u6309\u4f4d\u4e0e\u6700\u5927\u7684\u6700\u957f\u5b50\u6570\u7ec4 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u6570\u7ec4 nums \u3002</p> <p>\u8003\u8651 nums \u4e2d\u8fdb\u884c \u6309\u4f4d\u4e0e\uff08bitwise AND\uff09\u8fd0\u7b97\u5f97\u5230\u7684\u503c \u6700\u5927 \u7684 \u975e\u7a7a \u5b50\u6570\u7ec4\u3002</p> <ul> <li>\u6362\u53e5\u8bdd\u8bf4\uff0c\u4ee4 k \u662f nums \u4efb\u610f \u5b50\u6570\u7ec4\u6267\u884c\u6309\u4f4d\u4e0e\u8fd0\u7b97\u6240\u80fd\u5f97\u5230\u7684\u6700\u5927\u503c\u3002\u90a3\u4e48\uff0c\u53ea\u9700\u8981\u8003\u8651\u90a3\u4e9b\u6267\u884c\u4e00\u6b21\u6309\u4f4d\u4e0e\u8fd0\u7b97\u540e\u7b49\u4e8e k \u7684\u5b50\u6570\u7ec4\u3002</li> </ul> <p>\u8fd4\u56de\u6ee1\u8db3\u8981\u6c42\u7684 \u6700\u957f \u5b50\u6570\u7ec4\u7684\u957f\u5ea6\u3002</p> <p>\u6570\u7ec4\u7684\u6309\u4f4d\u4e0e\u5c31\u662f\u5bf9\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u6570\u5b57\u8fdb\u884c\u6309\u4f4d\u4e0e\u8fd0\u7b97\u3002</p> <p>\u5b50\u6570\u7ec4 \u662f\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u8fde\u7eed\u5143\u7d20\u5e8f\u5217\u3002</p> <p>\u5c31\u662f\u6c42\u6700\u5927\u503c\u7684\u91cd\u590d\u957f\u5ea6</p> <pre><code>class Solution {\n    public int longestSubarray(int[] nums) {\n        int n = nums.length;\n        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();\n        int max = nums[0];\n        set.add(0);\n        for (int i = 1; i &lt; n; i++) {\n            if (max &lt; nums[i]) {\n                max = nums[i];\n                set.clear();\n                set.add(i);\n            } else if (max == nums[i]) {\n                set.add(i);\n            }\n        }\n        int cnt;\n        max = 0;\n        for (Integer idx : set) {\n            if (!set.contains(idx - 1)) {\n                cnt = 0;\n                int start = idx;\n                while (set.contains(start)) {\n                    start++;\n                    cnt++;\n                }\n                max = Math.max(max, cnt);\n            }\n        }\n        return max;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%88/","title":"\u6808","text":""},{"location":"leetcode/%E6%A0%88/#_2","title":"\u5165\u6808\u51fa\u6808","text":""},{"location":"leetcode/%E6%A0%88/#2434-mid","title":"2434. \u4f7f\u7528\u673a\u5668\u4eba\u6253\u5370\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u673a\u5668\u4eba\uff0c\u673a\u5668\u4eba\u5f53\u524d\u6709\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32 t\u3002\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u4e4b\u4e00\uff0c\u76f4\u5230 s \u548c t \u90fd\u53d8\u6210\u7a7a\u5b57\u7b26\u4e32\uff1a</p> <ul> <li>\u5220\u9664\u5b57\u7b26\u4e32 s \u7684 \u7b2c\u4e00\u4e2a \u5b57\u7b26\uff0c\u5e76\u5c06\u8be5\u5b57\u7b26\u7ed9\u673a\u5668\u4eba\u3002\u673a\u5668\u4eba\u628a\u8fd9\u4e2a\u5b57\u7b26\u6dfb\u52a0\u5230 t \u7684\u5c3e\u90e8\u3002</li> <li>\u5220\u9664\u5b57\u7b26\u4e32 t \u7684 \u6700\u540e\u4e00\u4e2a \u5b57\u7b26\uff0c\u5e76\u5c06\u8be5\u5b57\u7b26\u7ed9\u673a\u5668\u4eba\u3002\u673a\u5668\u4eba\u5c06\u8be5\u5b57\u7b26\u5199\u5230\u7eb8\u4e0a\u3002</li> </ul> <p>\u8bf7\u4f60\u8fd4\u56de\u7eb8\u4e0a\u80fd\u5199\u51fa\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u5165\u6808\u987a\u5e8f, \u6c42\u51fa\u6808\u6700\u5c0f\u5b57\u5178\u5e8f \u7ef4\u62a4\u5269\u4f59\u7684\u6700\u5c0f\u5143\u7d20min, \u5982\u679c\u6808\u9876\u5143\u7d20&gt;min, \u5165\u6808</p> <p>1 \u5806</p> <p>\u96be\u70b9\u5728\u5982\u4f55\u7ef4\u62a4\u5269\u4f59\u6700\u5c0f\u5143\u7d20, \u5806\u4f1a\u8d85\u65f6</p> <pre><code>class Solution {\n    public String robotWithString(String s) {\n        char[] arr = s.toCharArray();\n        int n = s.length();\n        StringBuilder res = new StringBuilder();\n\n        PriorityQueue&lt;Character&gt; heap = new PriorityQueue&lt;&gt;();\n        for (int i = 0; i &lt; n; i++) {\n            heap.add(arr[i]);\n        }\n\n        Deque&lt;Character&gt; stack = new ArrayDeque&lt;&gt;();\n        for (char c : arr) {\n            heap.remove(c);\n            stack.push(c);\n            while (!stack.isEmpty() &amp;&amp; stack.element() &lt;= heap.element()) {\n                res.append(stack.pop());\n            }\n        }\n        return res.toString();\n    }\n}\n</code></pre> <p>2 \u5012\u5e8f\u7ef4\u62a4\u5269\u4f59\u7684\u6700\u5c0f\u5143\u7d20</p> <p>\u8fd9\u4e2a\u6700\u597d</p> <pre><code>class Solution {\n    public String robotWithString(String s) {\n        char[] arr = s.toCharArray();\n        int n = s.length();\n        StringBuilder res = new StringBuilder();\n\n        char[] minArr = new char[n + 1];\n        minArr[n] = ('z' + 1);\n        for (int i = n - 1; i &gt;= 0; i--) {\n            minArr[i] = (char) Math.min(minArr[i + 1], s.charAt(i));\n        }\n\n        Deque&lt;Character&gt; stack = new ArrayDeque&lt;&gt;();\n        for (int i = 0; i &lt; n; i++) {\n            stack.push(arr[i]);\n            while (!stack.isEmpty() &amp;&amp; (stack.element()) &lt;= minArr[i + 1]) {\n                res.append(stack.pop());\n            }\n        }\n        return res.toString();\n    }\n}\n</code></pre> <p>3 \u8ba1\u6570\u7ef4\u62a4\u5269\u4f59\u6700\u5c0f\u5143\u7d20</p> <pre><code>class Solution {\n    public String robotWithString(String s) {\n        char[] arr = s.toCharArray();\n        StringBuilder res = new StringBuilder();\n\n        int[] cnt = new int[26];\n        for (char c : arr) {\n            cnt[c - 'a']++;\n        }\n\n        int min = 0;\n        Deque&lt;Character&gt; stack = new ArrayDeque&lt;&gt;();\n        for (char c : arr) {\n            cnt[c - 'a']--;\n            while (min &lt; 25 &amp;&amp; cnt[min] == 0) {\n                min++;\n            }\n            stack.push(c);\n            while (!stack.isEmpty() &amp;&amp; stack.element() - 'a' &lt;= min) {\n                res.append(stack.pop());\n            }\n        }\n        return res.toString();\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%88/#946-mid","title":"946. \u9a8c\u8bc1\u6808\u5e8f\u5217 mid","text":"<p>\u5251\u6307 Offer 31. \u6808\u7684\u538b\u5165\u3001\u5f39\u51fa\u5e8f\u5217</p> <p>\u7ed9\u5b9a pushed \u548c popped \u4e24\u4e2a\u5e8f\u5217\uff0c\u6bcf\u4e2a\u5e8f\u5217\u4e2d\u7684 \u503c\u90fd\u4e0d\u91cd\u590d\uff0c\u53ea\u6709\u5f53\u5b83\u4eec\u53ef\u80fd\u662f\u5728\u6700\u521d\u7a7a\u6808\u4e0a\u8fdb\u884c\u7684\u63a8\u5165 push \u548c\u5f39\u51fa pop \u64cd\u4f5c\u5e8f\u5217\u7684\u7ed3\u679c\u65f6\uff0c\u8fd4\u56de true\uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002</p> <p>\u6808\u6a21\u62df, \u8fd8\u6709\u79cd\u904d\u5386\u5165\u6808\u987a\u5e8f\u7684\u89e3\u6cd5, \u5927\u5dee\u4e0d\u5dee</p> <pre><code>class Solution {\n    public boolean validateStackSequences(int[] pushed, int[] popped) {\n        Deque&lt;Integer&gt; stack = new ArrayDeque&lt;&gt;();\n        int j = 0;\n        for (int e : popped) {\n            while (stack.isEmpty() || stack.element() != e) {\n                if (j == popped.length) return false;\n                stack.push(pushed[j++]);\n            }\n            stack.pop();\n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%88/#735-mid","title":"735. \u884c\u661f\u78b0\u649e mid","text":"<p>\u5251\u6307 Offer II 037. \u5c0f\u884c\u661f\u78b0\u649e</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 asteroids\uff0c\u8868\u793a\u5728\u540c\u4e00\u884c\u7684\u884c\u661f\u3002</p> <p>\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u5176\u7edd\u5bf9\u503c\u8868\u793a\u884c\u661f\u7684\u5927\u5c0f\uff0c\u6b63\u8d1f\u8868\u793a\u884c\u661f\u7684\u79fb\u52a8\u65b9\u5411\uff08\u6b63\u8868\u793a\u5411\u53f3\u79fb\u52a8\uff0c\u8d1f\u8868\u793a\u5411\u5de6\u79fb\u52a8\uff09\u3002\u6bcf\u4e00\u9897\u884c\u661f\u4ee5\u76f8\u540c\u7684\u901f\u5ea6\u79fb\u52a8\u3002</p> <p>\u627e\u51fa\u78b0\u649e\u540e\u5269\u4e0b\u7684\u6240\u6709\u884c\u661f\u3002\u78b0\u649e\u89c4\u5219\uff1a\u4e24\u4e2a\u884c\u661f\u76f8\u4e92\u78b0\u649e\uff0c\u8f83\u5c0f\u7684\u884c\u661f\u4f1a\u7206\u70b8\u3002\u5982\u679c\u4e24\u9897\u884c\u661f\u5927\u5c0f\u76f8\u540c\uff0c\u5219\u4e24\u9897\u884c\u661f\u90fd\u4f1a\u7206\u70b8\u3002\u4e24\u9897\u79fb\u52a8\u65b9\u5411\u76f8\u540c\u7684\u884c\u661f\uff0c\u6c38\u8fdc\u4e0d\u4f1a\u53d1\u751f\u78b0\u649e\u3002</p> <p>\u6808\u6a21\u62df</p> <pre><code>class Solution {\n    public int[] asteroidCollision(int[] asteroids) {\n        LinkedList&lt;Integer&gt; stack = new LinkedList&lt;&gt;();\n        int p = 0;\n        while (p &lt; asteroids.length) {\n            if (stack.isEmpty() || stack.element() &lt; 0 || asteroids[p] &gt; 0)\n                stack.push(asteroids[p]);\n            else if (stack.element() &lt;= -asteroids[p]) {\n                Integer top = stack.pop();\n                // \u649e\u51fb\u4e4b\u540e\u4f59\u5a01\u4e0d\u51cf\n                if (top &lt; -asteroids[p]) continue;\n            }\n            p++;\n        }\n        Collections.reverse(stack);\n        return stack.stream().mapToInt(o -&gt; o).toArray();\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/","title":"\u6811","text":""},{"location":"leetcode/%E6%A0%91/#_1","title":"\u6784\u9020","text":""},{"location":"leetcode/%E6%A0%91/#617-easy","title":"617. \u5408\u5e76\u4e8c\u53c9\u6811 easy","text":"<p>\u7ed9\u4f60\u4e24\u68f5\u4e8c\u53c9\u6811\uff1a root1 \u548c root2 \u3002</p> <p>\u60f3\u8c61\u4e00\u4e0b\uff0c\u5f53\u4f60\u5c06\u5176\u4e2d\u4e00\u68f5\u8986\u76d6\u5230\u53e6\u4e00\u68f5\u4e4b\u4e0a\u65f6\uff0c\u4e24\u68f5\u6811\u4e0a\u7684\u4e00\u4e9b\u8282\u70b9\u5c06\u4f1a\u91cd\u53e0\uff08\u800c\u53e6\u4e00\u4e9b\u4e0d\u4f1a\uff09\u3002\u4f60\u9700\u8981\u5c06\u8fd9\u4e24\u68f5\u6811\u5408\u5e76\u6210\u4e00\u68f5\u65b0\u4e8c\u53c9\u6811\u3002\u5408\u5e76\u7684\u89c4\u5219\u662f\uff1a\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u91cd\u53e0\uff0c\u90a3\u4e48\u5c06\u8fd9\u4e24\u4e2a\u8282\u70b9\u7684\u503c\u76f8\u52a0\u4f5c\u4e3a\u5408\u5e76\u540e\u8282\u70b9\u7684\u65b0\u503c\uff1b\u5426\u5219\uff0c\u4e0d\u4e3a null \u7684\u8282\u70b9\u5c06\u76f4\u63a5\u4f5c\u4e3a\u65b0\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u3002</p> <p>\u8fd4\u56de\u5408\u5e76\u540e\u7684\u4e8c\u53c9\u6811\u3002</p> <pre><code>class Solution {\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\n        if (root1 == null) return root2;\n        if (root2 == null) return root1;\n        root1.val += root2.val;\n        root1.left = mergeTrees(root1.left, root2.left);\n        root1.right = mergeTrees(root1.right, root2.right);\n        return root1;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#offer-ii-043-mid","title":"\u5251\u6307 Offer II 043. \u5f80\u5b8c\u5168\u4e8c\u53c9\u6811\u6dfb\u52a0\u8282\u70b9 mid","text":"<p>\u5b8c\u5168\u4e8c\u53c9\u6811\u662f\u6bcf\u4e00\u5c42\uff08\u9664\u6700\u540e\u4e00\u5c42\u5916\uff09\u90fd\u662f\u5b8c\u5168\u586b\u5145\uff08\u5373\uff0c\u8282\u70b9\u6570\u8fbe\u5230\u6700\u5927\uff0c\u7b2c n \u5c42\u6709 2n-1 \u4e2a\u8282\u70b9\uff09\u7684\uff0c\u5e76\u4e14\u6240\u6709\u7684\u8282\u70b9\u90fd\u5c3d\u53ef\u80fd\u5730\u96c6\u4e2d\u5728\u5de6\u4fa7\u3002</p> <p>\u8bbe\u8ba1\u4e00\u4e2a\u7528\u5b8c\u5168\u4e8c\u53c9\u6811\u521d\u59cb\u5316\u7684\u6570\u636e\u7ed3\u6784 CBTInserter\uff0c\u5b83\u652f\u6301\u4ee5\u4e0b\u51e0\u79cd\u64cd\u4f5c\uff1a</p> <ul> <li>CBTInserter(TreeNode root)\u4f7f\u7528\u6839\u8282\u70b9\u4e3a root \u7684\u7ed9\u5b9a\u6811\u521d\u59cb\u5316\u8be5\u6570\u636e\u7ed3\u6784\uff1b</li> <li>CBTInserter.insert(int v)\u5411\u6811\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u8282\u70b9\uff0c\u8282\u70b9\u7c7b\u578b\u4e3a TreeNode\uff0c\u503c\u4e3a v \u3002\u4f7f\u6811\u4fdd\u6301\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u72b6\u6001\uff0c\u5e76\u8fd4\u56de\u63d2\u5165\u7684\u65b0\u8282\u70b9\u7684\u7236\u8282\u70b9\u7684\u503c\uff1b</li> <li>CBTInserter.get_root() \u5c06\u8fd4\u56de\u6811\u7684\u6839\u8282\u70b9\u3002</li> </ul> <p>\u7528\u4e00\u4e2a\u5bb9\u5668\u5b58\u653e\u5907\u9009\u7684 parent</p> <pre><code>class CBTInserter {\n\n    Queue&lt;TreeNode&gt; notFull = new LinkedList&lt;&gt;();\n    TreeNode root;\n\n    public CBTInserter(TreeNode root) {\n        this.root = root;\n        Queue&lt;TreeNode&gt; que = new LinkedList&lt;&gt;();\n        que.add(root);\n        TreeNode node;\n        while (!que.isEmpty()) {\n            node = que.remove();\n            if (node.left != null) que.add(node.left);\n            if (node.right != null) que.add(node.right);\n            if (node.left == null || node.right == null) notFull.add(node);\n        }\n    }\n\n    public int insert(int v) {\n        TreeNode child = new TreeNode(v);\n        TreeNode parent = notFull.element();\n        if (parent.left == null)\n            parent.left = child;\n        else {\n            parent.right = child;\n            notFull.remove();\n        }\n        notFull.add(child);\n        return parent.val;\n    }\n\n    public TreeNode get_root() {\n        return root;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#_2","title":"\u627e\u503c","text":""},{"location":"leetcode/%E6%A0%91/#437-iii-mid","title":"437. \u8def\u5f84\u603b\u548c III mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u548c\u4e00\u4e2a\u6574\u6570(\u6709\u8d1f\u6570) targetSum \uff0c\u6c42\u8be5\u4e8c\u53c9\u6811\u91cc\u8282\u70b9\u503c\u4e4b\u548c\u7b49\u4e8e targetSum \u7684 \u8def\u5f84 \u7684\u6570\u76ee\u3002</p> <p>\u8def\u5f84 \u4e0d\u9700\u8981\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u4e5f\u4e0d\u9700\u8981\u5728\u53f6\u5b50\u8282\u70b9\u7ed3\u675f\uff0c\u4f46\u662f\u8def\u5f84\u65b9\u5411\u5fc5\u987b\u662f\u5411\u4e0b\u7684\uff08\u53ea\u80fd\u4ece\u7236\u8282\u70b9\u5230\u5b50\u8282\u70b9\uff09\u3002</p> <p>\u56de\u6eaf + \u524d\u7f00\u548c \u5728\u5f53\u524d\u8def\u5f84\u4e2d: \u4fdd\u5b58\u6240\u6709\u7684\u524d\u7f00\u548c &amp; \u7ef4\u62a4\u4ece\u6839\u8282\u70b9\u5230\u5f53\u524d\u8282\u70b9\u7684\u524d\u7f00\u548c</p> <pre><code>class Solution {\n    private final Map&lt;Long, Integer&gt; prefix = new HashMap&lt;&gt;();\n    private int targetSum;\n\n    public int pathSum(TreeNode root, int targetSum) {\n        this.targetSum = targetSum;\n        prefix.put(0L, 1);\n        return dfs(root, 0);\n    }\n\n    // \u8fd4\u56de \u5b50\u6811\u4e2d\u6ee1\u8db3\u7684\u6570\u91cf\n    public int dfs(TreeNode root, long total) {\n        if (root == null) return 0;\n        total += root.val;\n        // \u6839\u8282\u70b9\u5230\u5f53\u524d\u503c\u7684\u524d\u7f00\u548c - \u76ee\u6807\u503c\n        int res = prefix.getOrDefault(total - targetSum, 0);\n        prefix.merge(total, 1, Integer::sum);\n        res += dfs(root.left, total);\n        res += dfs(root.right, total);\n        // \u6d88\u9664\u5f53\u524d\u8def\u5f84\u5bf9\u5176\u4ed6\u8def\u5f84\u7684\u5f71\u54cd\n        prefix.merge(total, -1, Integer::sum);\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#501-easy","title":"501. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4f17\u6570 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u542b\u91cd\u590d\u503c\u7684\u4e8c\u53c9\u641c\u7d22\u6811\uff08BST\uff09\u7684\u6839\u8282\u70b9 root \uff0c\u627e\u51fa\u5e76\u8fd4\u56de BST \u4e2d\u7684\u6240\u6709 \u4f17\u6570\uff08\u5373\uff0c\u51fa\u73b0\u9891\u7387\u6700\u9ad8\u7684\u5143\u7d20\uff09\u3002</p> <p>\u5982\u679c\u6811\u4e2d\u6709\u4e0d\u6b62\u4e00\u4e2a\u4f17\u6570\uff0c\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u3002</p> <p>\u4e2d\u5e8f\u904d\u5386BST \u4ece\u5c0f\u5230\u5927 \u7ef4\u62a4pre, pre\u7684\u91cd\u590d\u6570, \u6700\u5927\u91cd\u590d\u6570, \u7ed3\u679c\u96c6</p> <pre><code>public class Solution {\n    List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n    // \u524d\u503c\n    Integer pre;\n    // \u5f53\u524d\u503c\u7684\u91cd\u590d\u6570\n    int cnt = 0;\n    // \u6700\u5927\u91cd\u590d\u6570\n    int max = 0;\n\n    public int[] findMode(TreeNode root) {\n        this.find(root);\n        int[] res = new int[list.size()];\n        for (int i = 0; i &lt; list.size(); i++) {\n            res[i] = list.get(i);\n        }\n        return res;\n    }\n\n    private void find(TreeNode root) {\n        if (root == null) return;\n        find(root.left);\n        if (pre != null &amp;&amp; pre == root.val)\n            ++cnt;\n        else {\n            cnt = 1;\n            pre = root.val;\n        }\n        if (cnt == max)\n            list.add(pre);\n        else if (cnt &gt; max) {\n            max = cnt;\n            list.clear();\n            list.add(root.val);\n        }\n        find(root.right);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#653-iv-easy","title":"653. \u4e24\u6570\u4e4b\u548c IV easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811 root \u548c\u4e00\u4e2a\u76ee\u6807\u7ed3\u679c k\uff0c\u5982\u679c BST \u4e2d\u5b58\u5728\u4e24\u4e2a\u5143\u7d20\u4e14\u5b83\u4eec\u7684\u548c\u7b49\u4e8e\u7ed9\u5b9a\u7684\u76ee\u6807\u7ed3\u679c\uff0c\u5219\u8fd4\u56de true\u3002</p> <p>\u5229\u7528 BST \u4e5f\u9700\u8981\u989d\u5916\u7684\u7a7a\u95f4, \u76f4\u63a5\u7528 set \u7b80\u5355\u65b9\u4fbf</p> <pre><code>public class Solution {\n    Set&lt;Integer&gt; set = new HashSet&lt;&gt;();\n\n    public boolean findTarget(TreeNode root, int k) {\n        if (root == null) return false;\n        if (set.contains(k - root.val)) return true;\n        set.add(root.val);\n        return findTarget(root.left, k) || findTarget(root.right, k);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#671-easy","title":"671. \u4e8c\u53c9\u6811\u4e2d\u7b2c\u4e8c\u5c0f\u7684\u8282\u70b9 easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u7279\u6b8a\u7684\u4e8c\u53c9\u6811\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u662f\u6b63\u6570\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u7684\u5b50\u8282\u70b9\u6570\u91cf\u53ea\u80fd\u4e3a 2 \u6216 0\u3002\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u7684\u8bdd\uff0c\u90a3\u4e48\u8be5\u8282\u70b9\u7684\u503c\u7b49\u4e8e\u4e24\u4e2a\u5b50\u8282\u70b9\u4e2d\u8f83\u5c0f\u7684\u4e00\u4e2a\u3002</p> <p>\u66f4\u6b63\u5f0f\u5730\u8bf4\uff0c\u5373 root.val = min(root.left.val, root.right.val) \u603b\u6210\u7acb\u3002</p> <p>\u7ed9\u51fa\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u4f60\u9700\u8981\u8f93\u51fa\u6240\u6709\u8282\u70b9\u4e2d\u7684 \u7b2c\u4e8c\u5c0f\u7684\u503c \u3002</p> <p>\u5982\u679c\u7b2c\u4e8c\u5c0f\u7684\u503c\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u8f93\u51fa -1 \u3002</p> <p>\u6839\u8282\u70b9\u7684\u4e24\u4e2a\u5b50\u8282\u70b9\u81f3\u5c11\u6709\u4e00\u4e2a\u8ddf\u6839\u8282\u70b9\u4e00\u6837, \u8981\u904d\u5386\u51e0\u4e4e\u6240\u6709\u8282\u70b9, \u6709\u526a\u679d</p> <pre><code>class Solution {\n    int min;\n    int res = -1;\n\n    public int findSecondMinimumValue(TreeNode root) {\n        min = root.val;\n        dfs(root);\n        return res;\n    }\n\n    // \u8fd9\u91cc\u9762\u5f88\u6709\u6280\u5de7\n    private void dfs(TreeNode node) {\n        if (node == null) return;\n        if (res != -1 &amp;&amp; node.val &gt;= res) return;\n        // \u6b64\u65f6, \u672a\u8d4b\u503c \u6216\u8005 val &lt; res\n        if (node.val &gt; min) {\n            res = node.val;\n            return;\n        }\n        // val == min\n        dfs(node.left);\n        dfs(node.right);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#700-easy","title":"700. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u641c\u7d22 easy","text":"<p>\u7ed9\u5b9a\u4e8c\u53c9\u641c\u7d22\u6811\uff08BST\uff09\u7684\u6839\u8282\u70b9 root \u548c\u4e00\u4e2a\u6574\u6570\u503c val\u3002</p> <p>\u4f60\u9700\u8981\u5728 BST \u4e2d\u627e\u5230\u8282\u70b9\u503c\u7b49\u4e8e val \u7684\u8282\u70b9\u3002 \u8fd4\u56de\u4ee5\u8be5\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u3002 \u5982\u679c\u8282\u70b9\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de null \u3002</p> <pre><code>class Solution {\n    public TreeNode searchBST(TreeNode root, int val) {\n        return search(root, val);\n    }\n\n    private TreeNode search(TreeNode node, int val) {\n        if (node == null) return null;\n        if (node.val == val)\n            return node;\n        if (node.val &lt; val)\n            return search(node.right, val);\n        else\n            return search(node.left, val);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#offer-54-k-easy","title":"\u5251\u6307 Offer 54. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u7b2ck\u5927\u8282\u70b9 easy","text":"<p>\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u8bf7\u627e\u51fa\u5176\u4e2d\u7b2c k \u5927\u7684\u8282\u70b9\u7684\u503c\u3002</p> <pre><code>class Solution {\n    int cnt;\n    int res;\n\n    public int kthLargest(TreeNode root, int k) {\n        cnt = k;\n        count(root);\n        return res;\n    }\n\n    public void count(TreeNode root) {\n        if (root == null) return;\n        count(root.right);\n        cnt--;\n        if (cnt == 0) {\n            res = root.val;\n            return;\n        }\n        count(root.left);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#_3","title":"\u6c42\u81c2\u5c55","text":""},{"location":"leetcode/%E6%A0%91/#543-easy","title":"543. \u4e8c\u53c9\u6811\u7684\u76f4\u5f84 easy","text":"<p>\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\uff0c\u4f60\u9700\u8981\u8ba1\u7b97\u5b83\u7684\u76f4\u5f84\u957f\u5ea6\u3002\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u76f4\u5f84\u957f\u5ea6\u662f\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u8def\u5f84\u957f\u5ea6\u4e2d\u7684\u6700\u5927\u503c\u3002\u8fd9\u6761\u8def\u5f84\u53ef\u80fd\u7a7f\u8fc7\u4e5f\u53ef\u80fd\u4e0d\u7a7f\u8fc7\u6839\u7ed3\u70b9\u3002</p> <p>\u7ef4\u62a4\u5168\u5c40max, \u51fd\u6570\u8fd4\u56de\u6700\u5927\u6df1\u5ea6</p> <pre><code>class Solution {\n    int max = 0;\n\n    public int diameterOfBinaryTree(TreeNode root) {\n        deep(root);\n        return max;\n    }\n\n    private int deep(TreeNode node) {\n        if (node == null) return 0;\n        int left = deep(node.left);\n        int right = deep(node.right);\n        int len = left + right;\n        max = Math.max(max, len);\n        return 1 + Math.max(left, right);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#687-mid","title":"687. \u6700\u957f\u540c\u503c\u8def\u5f84 mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684 root \uff0c\u8fd4\u56de \u6700\u957f\u7684\u8def\u5f84\u7684\u957f\u5ea6 \uff0c\u8fd9\u4e2a\u8def\u5f84\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u5177\u6709\u76f8\u540c\u503c\u3002 \u8fd9\u6761\u8def\u5f84\u53ef\u4ee5\u7ecf\u8fc7\u4e5f\u53ef\u4ee5\u4e0d\u7ecf\u8fc7\u6839\u8282\u70b9\u3002</p> <p>\u4e24\u4e2a\u8282\u70b9\u4e4b\u95f4\u7684\u8def\u5f84\u957f\u5ea6 \u7531\u5b83\u4eec\u4e4b\u95f4\u7684\u8fb9\u6570\u8868\u793a\u3002</p> <p>\u5728\u9012\u5f52\u4e2d, \u6bcf\u4e2a\u8282\u70b9\u90fd\u4f5c\u4e3a\u4e24\u4e2a\u89d2\u8272: \u4e00\u4e2a\u662f\u6839\u8282\u70b9, \u4e00\u4e2a\u662f\u94fe\u8def\u4e2d\u7684\u8282\u70b9. \u9700\u8981\u4e24\u4e2a\u503c, \u4e00\u4e2a\u662f\u5355\u8fb9\u94fe\u8def\u957f\u5ea6, \u4e00\u4e2a\u662f\u4f5c\u4e3a\u6839\u8282\u70b9\u7684\u81c2\u5c55. \u6240\u4ee5\u9700\u8981\u7ef4\u62a4\u5168\u5c40 ans</p> <p>\u53ea\u5173\u6ce8\u81c2\u5c55\u5373\u53ef, \u4e0d\u9700\u8981\u5173\u6ce8\u8282\u70b9\u6570</p> <pre><code>class Solution {\n    int ans;\n\n    public int longestUnivaluePath(TreeNode root) {\n        arrowLength(root);\n        return ans;\n    }\n\n    public int arrowLength(TreeNode node) {\n        if (node == null) return 0;\n        // \u6ce8\u610f, \u5fc5\u987b\u540e\u7eed\u904d\u5386, \u5de6\u53f3\u7684\u904d\u5386\u5148, \u5426\u5219ans\u4e0d\u662f\u6700\u65b0\u7684\n        int left = arrowLength(node.left);\n        int right = arrowLength(node.right);\n        int arrowLeft = 0;\n        int arrowRight = 0;\n        if (node.left != null &amp;&amp; node.left.val == node.val) arrowLeft = left + 1;\n        if (node.right != null &amp;&amp; node.right.val == node.val) arrowRight = right + 1;\n        ans = Math.max(ans, arrowLeft + arrowRight);\n        return Math.max(arrowLeft, arrowRight);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#2385-mid","title":"2385. \u611f\u67d3\u4e8c\u53c9\u6811\u9700\u8981\u7684\u603b\u65f6\u95f4 mid","text":"<p>\u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u4e8c\u53c9\u6811\u4e2d\u8282\u70b9\u7684\u503c \u4e92\u4e0d\u76f8\u540c \u3002\u53e6\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 start \u3002\u5728\u7b2c 0 \u5206\u949f\uff0c\u611f\u67d3 \u5c06\u4f1a\u4ece\u503c\u4e3a start \u7684\u8282\u70b9\u5f00\u59cb\u7206\u53d1\u3002</p> <p>\u6bcf\u5206\u949f\uff0c\u5982\u679c\u8282\u70b9\u6ee1\u8db3\u4ee5\u4e0b\u5168\u90e8\u6761\u4ef6\uff0c\u5c31\u4f1a\u88ab\u611f\u67d3\uff1a</p> <ul> <li>\u8282\u70b9\u6b64\u524d\u8fd8\u6ca1\u6709\u611f\u67d3\u3002</li> <li>\u8282\u70b9\u4e0e\u4e00\u4e2a\u5df2\u611f\u67d3\u8282\u70b9\u76f8\u90bb\u3002</li> </ul> <p>\u8fd4\u56de\u611f\u67d3\u6574\u68f5\u6811\u9700\u8981\u7684\u5206\u949f\u6570\u3002</p> <p>max(start\u7684\u6df1\u5ea6, \u6240\u6709start\u7236\u8282\u70b9\u5230start\u7684\u6df1\u5ea6+\u7236\u8282\u70b9\u53e6\u4e00\u5b50\u6811\u7684\u6df1\u5ea6) \u901a\u5e38\u4f1a\u60f3\u5230, \u5148BFS\u627e\u5230start, \u540c\u65f6\u6807\u8bb0\u6240\u6709\u7236\u8282\u70b9, \u7136\u540e\u518d\u8ba1\u7b97; \u8fd9\u6837\u4f1a\u6709\u91cd\u590d\u8ba1\u7b97</p> <p>\u66f4\u5de7\u5999\u4e00\u70b9, \u540e\u7eed\u904d\u5386\u6574\u4e2a\u6811, \u5728\u6bcf\u4e2a\u8282\u70b9\u4e2d, \u5982\u679c\u5b50\u6811\u627e\u5230\u4e86start, \u8fd4\u56de\u6df1\u5ea6\u7684\u8d1f\u6570, \u66f4\u65b0 max</p> <pre><code>class Solution {\n    int res = 0, start = 0;\n\n    public int amountOfTime(TreeNode root, int start) {\n        this.start = start;\n        goNext(root);\n        return res;\n    }\n\n    int goNext(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        int left = goNext(root.left);\n        int right = goNext(root.right);\n        if (root.val == start) {\n            res = Math.max(res, Math.max(left, right));\n            return -1;\n        }\n        if (left &lt; 0) {\n            res = Math.max(res, right - left);\n            return left - 1;\n        }\n        if (right &lt; 0) {\n            res = Math.max(res, left - right);\n            return right - 1;\n        }\n        return Math.max(left, right) + 1;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#_4","title":"\u7ffb\u8f6c","text":""},{"location":"leetcode/%E6%A0%91/#2415-mid","title":"2415. \u53cd\u8f6c\u4e8c\u53c9\u6811\u7684\u5947\u6570\u5c42 mid","text":"<p>\u7ed9\u4f60\u4e00\u68f5 \u5b8c\u7f8e \u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u8bf7\u4f60\u53cd\u8f6c\u8fd9\u68f5\u6811\u4e2d\u6bcf\u4e2a \u5947\u6570 \u5c42\u7684\u8282\u70b9\u503c\u3002</p> <ul> <li>\u4f8b\u5982\uff0c\u5047\u8bbe\u7b2c 3 \u5c42\u7684\u8282\u70b9\u503c\u662f [2,1,3,4,7,11,29,18] \uff0c\u90a3\u4e48\u53cd\u8f6c\u540e\u5b83\u5e94\u8be5\u53d8\u6210 [18,29,11,7,4,3,1,2] \u3002</li> </ul> <p>\u53cd\u8f6c\u540e\uff0c\u8fd4\u56de\u6811\u7684\u6839\u8282\u70b9\u3002</p> <p>\u5b8c\u7f8e \u4e8c\u53c9\u6811\u9700\u6ee1\u8db3\uff1a\u4e8c\u53c9\u6811\u7684\u6240\u6709\u7236\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\uff0c\u4e14\u6240\u6709\u53f6\u5b50\u8282\u70b9\u90fd\u5728\u540c\u4e00\u5c42\u3002</p> <p>\u8282\u70b9\u7684 \u5c42\u6570 \u7b49\u4e8e\u8be5\u8282\u70b9\u5230\u6839\u8282\u70b9\u4e4b\u95f4\u7684\u8fb9\u6570\u3002</p> <p>\u89e3\u6cd51: DFS</p> <p>DFS \u9012\u5f52</p> <pre><code>class Solution {\n    public TreeNode reverseOddLevels(TreeNode root) {\n        reverseOddLevels(root.left, root.right, 1);\n        return root;\n    }\n\n    public void reverseOddLevels(TreeNode l, TreeNode r, int level) {\n        if (l == null) return;\n        if (level % 2 == 1) {\n            int tmp = l.val;\n            l.val = r.val;\n            r.val = tmp;\n        }\n        reverseOddLevels(l.left, r.right, level + 1);\n        reverseOddLevels(l.right, r.left, level + 1);\n    }\n}\n</code></pre> <p>\u89e3\u6cd52: BFS</p> <p>BFS</p> <pre><code>class Solution {\n    public TreeNode reverseOddLevels(TreeNode root) {\n        Deque&lt;TreeNode&gt; que = new LinkedList&lt;&gt;();\n        que.add(root);\n        int flag = -1;\n        while (!que.isEmpty()) {\n            int size = que.size();\n            flag++;\n            List&lt;TreeNode&gt; list = new ArrayList&lt;&gt;();\n            while (size-- &gt; 0) {\n                TreeNode node = que.remove();\n                list.add(node);\n                if (node.left == null) continue;\n                que.add(node.left);\n                que.add(node.right);\n            }\n            if (flag % 2 == 1) revert(list);\n        }\n        return root;\n    }\n\n    private void revert(List&lt;TreeNode&gt; list) {\n        for (int i = 0, j = list.size() - 1; i &lt; j; i++, j--) {\n            int t = list.get(i).val;\n            list.get(i).val = list.get(j).val;\n            list.get(j).val = t;\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#_5","title":"\u9012\u5f52","text":""},{"location":"leetcode/%E6%A0%91/#572-easy","title":"572. \u53e6\u4e00\u68f5\u6811\u7684\u5b50\u6811 easy","text":"<p>\u7ed9\u4f60\u4e24\u68f5\u4e8c\u53c9\u6811 root \u548c subRoot\u3002\u68c0\u9a8c root \u4e2d\u662f\u5426\u5305\u542b\u548c subRoot \u5177\u6709\u76f8\u540c\u7ed3\u6784\u548c\u8282\u70b9\u503c\u7684\u5b50\u6811\u3002\u5982\u679c\u5b58\u5728\uff0c\u8fd4\u56de true\uff1b\u5426\u5219\uff0c\u8fd4\u56de false\u3002</p> <p>\u4e8c\u53c9\u6811 tree \u7684\u4e00\u68f5\u5b50\u6811\u5305\u62ec tree \u7684\u67d0\u4e2a\u8282\u70b9\u548c\u8fd9\u4e2a\u8282\u70b9\u7684\u6240\u6709\u540e\u4ee3\u8282\u70b9\u3002tree \u4e5f\u53ef\u4ee5\u770b\u505a\u5b83\u81ea\u8eab\u7684\u4e00\u68f5\u5b50\u6811\u3002</p> <p>\u5f53\u524d\u8282\u70b9\u662f\u5426\u76f8\u7b49, \u5de6\u5b50\u6811\u662f\u5426\u5305\u542b\u76f8\u7b49, \u53f3\u5b50\u6811\u662f\u5426\u5305\u542b\u76f8\u7b49 \u76f8\u7b49: \u9012\u5f52\u76f8\u7b49</p> <pre><code>class Solution {\n    public boolean isSubtree(TreeNode root, TreeNode subRoot) {\n        return isEqual(root, subRoot) || isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);\n    }\n\n    public boolean isEqual(TreeNode root, TreeNode subRoot) {\n        if (root == subRoot) return true;\n        if (root == null || subRoot == null) return false;\n        if (root.val != subRoot.val) return false;\n        return isEqual(root.left, subRoot.left) &amp;&amp; isEqual(root.right, subRoot.right);\n    }\n\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#offer-26-mid","title":"\u5251\u6307 Offer 26. \u6811\u7684\u5b50\u7ed3\u6784 mid","text":"<p>\u8f93\u5165\u4e24\u68f5\u4e8c\u53c9\u6811A\u548cB\uff0c\u5224\u65adB\u662f\u4e0d\u662fA\u7684\u5b50\u7ed3\u6784\u3002(\u7ea6\u5b9a\u7a7a\u6811\u4e0d\u662f\u4efb\u610f\u4e00\u4e2a\u6811\u7684\u5b50\u7ed3\u6784)</p> <p>B\u662fA\u7684\u5b50\u7ed3\u6784\uff0c \u5373 A\u4e2d\u6709\u51fa\u73b0\u548cB\u76f8\u540c\u7684\u7ed3\u6784\u548c\u8282\u70b9\u503c\u3002</p> <pre><code>class Solution {\n    public boolean isSubStructure(TreeNode A, TreeNode B) {\n        if (B == null) return false;\n        if (A == null) return false;\n        if (judge(A, B)) return true;\n        return isSubStructure(A.left, B) || isSubStructure(A.right, B);\n    }\n\n    public boolean judge(TreeNode A, TreeNode B) {\n        if (A == B) return true;\n        if (B == null) return true;\n        if (A == null) return false;\n        if (A.val == B.val) return judge(A.left, B.left) &amp;&amp; judge(A.right, B.right);\n        return false;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#404-easy","title":"404. \u5de6\u53f6\u5b50\u4e4b\u548c easy","text":"<p>\u7ed9\u5b9a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u8fd4\u56de\u6240\u6709\u5de6\u53f6\u5b50\u4e4b\u548c\u3002</p> <pre><code>class Solution {\n    public int sumOfLeftLeaves(TreeNode root) {\n        return sumOfLeftLeaves(root.left, true) + sumOfLeftLeaves(root.right, false);\n    }\n\n    public int sumOfLeftLeaves(TreeNode root, boolean isLeft) {\n        if (root == null) return 0;\n        if (isLeft &amp;&amp; root.left == null &amp;&amp; root.right == null) return root.val;\n        return sumOfLeftLeaves(root.left, true) + sumOfLeftLeaves(root.right, false);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#814-mid","title":"814. \u4e8c\u53c9\u6811\u526a\u679d mid","text":"<p>\u7ed9\u4f60\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9 root \uff0c\u6b64\u5916\u6811\u7684\u6bcf\u4e2a\u7ed3\u70b9\u7684\u503c\u8981\u4e48\u662f 0 \uff0c\u8981\u4e48\u662f 1 \u3002</p> <p>\u8fd4\u56de\u79fb\u9664\u4e86\u6240\u6709\u4e0d\u5305\u542b 1 \u7684\u5b50\u6811\u7684\u539f\u4e8c\u53c9\u6811\u3002</p> <p>\u8282\u70b9 node \u7684\u5b50\u6811\u4e3a node \u672c\u8eab\u52a0\u4e0a\u6240\u6709 node \u7684\u540e\u4ee3\u3002</p> <p>\u81ea\u5e95\u5411\u4e0a</p> <pre><code>class Solution {\n    public TreeNode pruneTree(TreeNode root) {\n        if (root == null) return null;\n        root.left = pruneTree(root.left);\n        root.right = pruneTree(root.right);\n        if (root.left == null &amp;&amp; root.right == null &amp;&amp; root.val == 0) return null;\n        else return root;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#_6","title":"\u5c42\u5e8f\u904d\u5386","text":""},{"location":"leetcode/%E6%A0%91/#offer-32-iii-iii-mid","title":"\u5251\u6307 Offer 32 - III. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 III mid","text":"<p>\u8bf7\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6309\u7167\u4e4b\u5b57\u5f62\u987a\u5e8f\u6253\u5370\u4e8c\u53c9\u6811\uff0c\u5373\u7b2c\u4e00\u884c\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e8c\u5c42\u6309\u7167\u4ece\u53f3\u5230\u5de6\u7684\u987a\u5e8f\u6253\u5370\uff0c\u7b2c\u4e09\u884c\u518d\u6309\u7167\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f\u6253\u5370\uff0c\u5176\u4ed6\u884c\u4ee5\u6b64\u7c7b\u63a8\u3002</p> <pre><code>class Solution {\n    public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {\n        if (root == null) return new ArrayList&lt;&gt;();\n        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\n        Queue&lt;TreeNode&gt; que = new ArrayDeque&lt;&gt;();\n        que.add(root);\n        boolean odd = true;\n        while (!que.isEmpty()) {\n            int size = que.size();\n            List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n            res.add(list);\n            while (size-- &gt; 0) {\n                TreeNode node = que.remove();\n                list.add(node.val);\n                if (node.left != null) que.add(node.left);\n                if (node.right != null) que.add(node.right);\n            }\n            if (odd ^= true) reverse(list);\n        }\n        return res;\n    }\n\n    void reverse(List&lt;Integer&gt; list) {\n        for (int i = 0, j = list.size() - 1; i &lt; j; i++, j--) {\n            Integer temp = list.get(i);\n            list.set(i, list.get(j));\n            list.set(j, temp);\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#637-easy","title":"637. \u4e8c\u53c9\u6811\u7684\u5c42\u5e73\u5747\u503c easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root , \u4ee5\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u6bcf\u4e00\u5c42\u8282\u70b9\u7684\u5e73\u5747\u503c\u3002\u4e0e\u5b9e\u9645\u7b54\u6848\u76f8\u5dee 10-5 \u4ee5\u5185\u7684\u7b54\u6848\u53ef\u4ee5\u88ab\u63a5\u53d7\u3002</p> <pre><code>class Solution {\n    public List&lt;Double&gt; averageOfLevels(TreeNode root) {\n        List&lt;Double&gt; res = new ArrayList&lt;&gt;();\n\n        Queue&lt;TreeNode&gt; que = new LinkedList&lt;&gt;();\n        que.add(root);\n\n        while (!que.isEmpty()) {\n            int size = que.size();\n            double sum = 0;\n            int cnt = 0;\n            while (size &gt; 0) {\n                TreeNode node = que.remove();\n                size--;\n                sum += node.val;\n                cnt++;\n                if (node.left != null) que.add(node.left);\n                if (node.right != null) que.add(node.right);\n\n            }\n            res.add(sum / cnt);\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#513-mid","title":"513. \u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684 \u6839\u8282\u70b9 root\uff0c\u8bf7\u627e\u51fa\u8be5\u4e8c\u53c9\u6811\u7684 \u6700\u5e95\u5c42 \u6700\u5de6\u8fb9 \u8282\u70b9\u7684\u503c\u3002</p> <p>\u5047\u8bbe\u4e8c\u53c9\u6811\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u8282\u70b9\u3002</p> <p>\u5c42\u5e8f\u904d\u5386, \u4e0d\u7528\u7ba1\u90a3\u4e00\u5c42</p> <pre><code>class Solution {\n    public int findBottomLeftValue(TreeNode root) {\n        Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;();\n        queue.add(root);\n        TreeNode p = root;\n        while (!queue.isEmpty()) {\n            p = queue.remove();\n            if (p.right != null) queue.add(p.right);\n            if (p.left != null) queue.add(p.left);\n        }\n        return p.val;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#515-mid","title":"515. \u5728\u6bcf\u4e2a\u6811\u884c\u4e2d\u627e\u6700\u5927\u503c mid","text":"<p>\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u8bf7\u627e\u51fa\u8be5\u4e8c\u53c9\u6811\u4e2d\u6bcf\u4e00\u5c42\u7684\u6700\u5927\u503c\u3002</p> <pre><code>class Solution {\n    public List&lt;Integer&gt; largestValues(TreeNode root) {\n        List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n        if (root == null) return list;\n        Queue&lt;TreeNode&gt; que = new LinkedList&lt;&gt;();\n        que.add(root);\n        while (!que.isEmpty()) {\n            int size = que.size();\n            int max = Integer.MIN_VALUE;\n            while (size-- &gt; 0) {\n                TreeNode node = que.remove();\n                max = Math.max(max, node.val);\n                if (node.left != null) que.add(node.left);\n                if (node.right != null) que.add(node.right);\n            }\n            list.add(max);\n        }\n        return list;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#_7","title":"\u524d\u4e2d\u540e\u5e8f\u904d\u5386","text":"<p>\u9012\u5f52\u5b9e\u73b0</p>"},{"location":"leetcode/%E6%A0%91/#897-easy","title":"897. \u9012\u589e\u987a\u5e8f\u641c\u7d22\u6811 easy","text":"<p>\u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u7684 root \uff0c\u8bf7\u4f60 \u6309\u4e2d\u5e8f\u904d\u5386 \u5c06\u5176\u91cd\u65b0\u6392\u5217\u4e3a\u4e00\u68f5\u9012\u589e\u987a\u5e8f\u641c\u7d22\u6811\uff0c\u4f7f\u6811\u4e2d\u6700\u5de6\u8fb9\u7684\u8282\u70b9\u6210\u4e3a\u6811\u7684\u6839\u8282\u70b9\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u6ca1\u6709\u5de6\u5b50\u8282\u70b9\uff0c\u53ea\u6709\u4e00\u4e2a\u53f3\u5b50\u8282\u70b9\u3002</p> <p>\u4e2d\u5e8f\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u8bb0\u4e00\u4e0b\u524d\u4e00\u4e2a\u8282\u70b9\u5373\u53ef</p> <pre><code>class Solution {\n    private TreeNode pre;\n\n    public TreeNode increasingBST(TreeNode root) {\n        TreeNode zero = new TreeNode();\n        pre = zero;\n        midTraverse(root);\n        return zero.right;\n    }\n\n    private void midTraverse(TreeNode node) {\n        if (node == null) return;\n        midTraverse(node.left);\n        pre.right = node;\n        node.left = null;\n        pre = node;\n        midTraverse(node.right);\n    }\n}\n</code></pre> <p>\u975e\u9012\u5f52\u7528\u6808, Deque</p>"},{"location":"leetcode/%E6%A0%91/#590-n-easy","title":"590. N \u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386 easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a n \u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u8fd4\u56de \u5176\u8282\u70b9\u503c\u7684 \u540e\u5e8f\u904d\u5386 \u3002</p> <p>n \u53c9\u6811 \u5728\u8f93\u5165\u4e2d\u6309\u5c42\u5e8f\u904d\u5386\u8fdb\u884c\u5e8f\u5217\u5316\u8868\u793a\uff0c\u6bcf\u7ec4\u5b50\u8282\u70b9\u7531\u7a7a\u503c null \u5206\u9694\uff08\u8bf7\u53c2\u89c1\u793a\u4f8b\uff09\u3002</p> <pre><code>class Solution {\n\n    public List&lt;Integer&gt; postorder(Node root) {\n        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();\n        postorder(root, res);\n        return res;\n    }\n\n    public void postorder(Node root, List&lt;Integer&gt; res) {\n        if (root == null) return;\n        for (Node n : root.children) {\n            postorder(n, res);\n        }\n        res.add(root.val);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#bst","title":"\u4e8c\u53c9\u67e5\u627e\u6811 BST","text":""},{"location":"leetcode/%E6%A0%91/#offer-ii-053-mid","title":"\u5251\u6307 Offer II 053. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u4e2d\u5e8f\u540e\u7ee7 mid","text":"<p>\u7ed9\u5b9a\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\u548c\u5176\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9 p \uff0c\u627e\u5230\u8be5\u8282\u70b9\u5728\u6811\u4e2d\u7684\u4e2d\u5e8f\u540e\u7ee7\u3002\u5982\u679c\u8282\u70b9\u6ca1\u6709\u4e2d\u5e8f\u540e\u7ee7\uff0c\u8bf7\u8fd4\u56de null \u3002</p> <p>\u8282\u70b9 p \u7684\u540e\u7ee7\u662f\u503c\u6bd4 p.val \u5927\u7684\u8282\u70b9\u4e2d\u952e\u503c\u6700\u5c0f\u7684\u8282\u70b9\uff0c\u5373\u6309\u4e2d\u5e8f\u904d\u5386\u7684\u987a\u5e8f\u8282\u70b9 p \u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002</p> <pre><code>class Solution {\n    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {\n        if (p.right != null) {\n            // \u5982\u679c\u6709\u53f3\u5b50\u6811, \u4e00\u5b9a\u5728\u53f3\u5b50\u6811\u7684\u6700\u5de6\u8fb9\n            p = p.right;\n            while (p.left != null) {\n                p = p.left;\n            }\n            return p;\n        }\n        TreeNode res = null;\n        // \u4e8c\u53c9\u641c\u7d22\u6811\u5c31\u8fd9\u4e48\u7528\n        while (root != null) {\n            if (root.val &gt; p.val) {\n                res = root;\n                root = root.left;\n            } else {\n                root = root.right;\n            }\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#_8","title":"\u9a8c\u8bc1\u904d\u5386\u987a\u5e8f\u5408\u6cd5\u6027","text":""},{"location":"leetcode/%E6%A0%91/#offer-33-mid","title":"\u5251\u6307 Offer 33. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u5e8f\u5217 mid","text":"<p>\u8f93\u5165\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u8be5\u6570\u7ec4\u662f\u4e0d\u662f\u67d0\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u540e\u5e8f\u904d\u5386\u7ed3\u679c\u3002\u5982\u679c\u662f\u5219\u8fd4\u56de true\uff0c\u5426\u5219\u8fd4\u56de false\u3002\u5047\u8bbe\u8f93\u5165\u7684\u6570\u7ec4\u7684\u4efb\u610f\u4e24\u4e2a\u6570\u5b57\u90fd\u4e92\u4e0d\u76f8\u540c\u3002 \u89e3\u6cd51: \u9012\u5f52</p> <p>\u6839\u636e\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e8c\u5206\u524d\u9762\u7684\u5143\u7d20</p> <pre><code>class Solution {\n    public boolean verifyPostorder(int[] postorder) {\n        return verifyPostorder(postorder, 0, postorder.length - 1);\n    }\n\n    public boolean verifyPostorder(int[] postorder, int start, int end) {\n        if (end &lt;= start) return true;\n        int mid = postorder[end];\n        int p = start;\n        while (postorder[p] &lt; postorder[end]) p++;\n        int m = p;// \u7b2c\u4e00\u4e2a\u5927\u7684\u503c\n        while (postorder[p] &gt; postorder[end]) p++;\n        return p == end &amp;&amp; verifyPostorder(postorder, start, p - 1) &amp;&amp; verifyPostorder(postorder, p, end - 1);\n    }\n}\n</code></pre> <p>\u89e3\u6cd52:\u5355\u8c03\u6808</p> <p>left-&gt;right-&gt;root \u9006\u5e8f root-&gt;right-&gt;left, \u5373 \u4e2d-&gt;\u5927-&gt;\u5c0f \u90a3\u4e48\u53ef\u4ee5\u7528\u5355\u8c03\u6808\u6c42\u89e3, \u6808\u4e2d\u5143\u7d20\u5355\u8c03\u589e, \u6808\u5e95\u5143\u7d20\u4e3a root</p> <pre><code>class Solution {\n    public boolean verifyPostorder(int[] postorder) {\n        int n = postorder.length;\n        Deque&lt;Integer&gt; stack = new ArrayDeque&lt;&gt;();\n        int root = Integer.MAX_VALUE;\n        // \u4e2d \u5927 \u5c0f\n        for (int i = n - 1; i &gt;= 0; i--) {\n            // \u6bd4root\u5927\u7684\u5143\u7d20\u5df2\u7ecf\u4ece\u6808\u4e2d\u79fb\u9664\u4e86\n            if (root &lt; postorder[i]) return false;\n            while (!stack.isEmpty() &amp;&amp; postorder[i] &lt; stack.element()) {\n                root = stack.pop();\n            }\n            stack.push(postorder[i]);\n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#669-mid","title":"669. \u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811 mid","text":"<p>\u7ed9\u4f60\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9 root\uff0c\u540c\u65f6\u7ed9\u5b9a\u6700\u5c0f\u8fb9\u754c low \u548c\u6700\u5927\u8fb9\u754c high\u3002\u901a\u8fc7\u4fee\u526a\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u4f7f\u5f97\u6240\u6709\u8282\u70b9\u7684\u503c\u5728 [low, high] \u4e2d\u3002\u4fee\u526a\u6811 \u4e0d\u5e94\u8be5 \u6539\u53d8\u4fdd\u7559\u5728\u6811\u4e2d\u7684\u5143\u7d20\u7684\u76f8\u5bf9\u7ed3\u6784 (\u5373\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u79fb\u9664\uff0c\u539f\u6709\u7684\u7236\u4ee3\u5b50\u4ee3\u5173\u7cfb\u90fd\u5e94\u5f53\u4fdd\u7559)\u3002 \u53ef\u4ee5\u8bc1\u660e\uff0c\u5b58\u5728 \u552f\u4e00\u7684\u7b54\u6848 \u3002</p> <p>\u6240\u4ee5\u7ed3\u679c\u5e94\u5f53\u8fd4\u56de\u4fee\u526a\u597d\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u65b0\u7684\u6839\u8282\u70b9\u3002\u6ce8\u610f\uff0c\u6839\u8282\u70b9\u53ef\u80fd\u4f1a\u6839\u636e\u7ed9\u5b9a\u7684\u8fb9\u754c\u53d1\u751f\u6539\u53d8\u3002</p> <ol> <li>\u6839\u8282\u70b9\u5728\u8303\u56f4\u5185</li> <li>\u6839\u8282\u70b9\u4e0d\u5728\u8303\u56f4\u5185</li> </ol> <pre><code>class Solution {\n    public TreeNode trimBST(TreeNode root, int low, int high) {\n        if (root == null) return root;\n        if (root.val &gt; high) return trimBST(root.left, low, high);\n        if (root.val &lt; low) return trimBST(root.right, low, high);\n\n        root.left = trimBST(root.left, low, high);\n        root.right = trimBST(root.right, low, high);\n        return root;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#538-1038-mid","title":"538. 1038. \u628a\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811 mid","text":"<p>\u7ed9\u51fa\u4e8c\u53c9 \u641c\u7d22 \u6811\u7684\u6839\u8282\u70b9\uff0c\u8be5\u6811\u7684\u8282\u70b9\u503c\u5404\u4e0d\u76f8\u540c\uff0c\u8bf7\u4f60\u5c06\u5176\u8f6c\u6362\u4e3a\u7d2f\u52a0\u6811\uff08Greater Sum Tree\uff09\uff0c\u4f7f\u6bcf\u4e2a\u8282\u70b9 node \u7684\u65b0\u503c\u7b49\u4e8e\u539f\u6811\u4e2d\u5927\u4e8e\u6216\u7b49\u4e8e node.val \u7684\u503c\u4e4b\u548c\u3002</p> <p>\u63d0\u9192\u4e00\u4e0b\uff0c\u4e8c\u53c9\u641c\u7d22\u6811\u6ee1\u8db3\u4e0b\u5217\u7ea6\u675f\u6761\u4ef6\uff1a</p> <ul> <li>\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4ec5\u5305\u542b\u952e \u5c0f\u4e8e \u8282\u70b9\u952e\u7684\u8282\u70b9\u3002</li> <li>\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4ec5\u5305\u542b\u952e \u5927\u4e8e \u8282\u70b9\u952e\u7684\u8282\u70b9\u3002</li> <li>\u5de6\u53f3\u5b50\u6811\u4e5f\u5fc5\u987b\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002</li> </ul> <p>\u53f3\u6839\u5de6\u5c31\u662f\u5012\u5e8f</p> <pre><code>class Solution {\n    int sum = 0;\n\n    public TreeNode convertBST(TreeNode root) {\n        sum(root);\n        return root;\n    }\n\n    private void sum(TreeNode node) {\n        if (node == null) return;\n        // \u53f3 \u6839 \u5de6\n        sum(node.right);\n        node.val = sum += node.val;\n        sum(node.left);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#530-easy","title":"530. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u5c0f\u7edd\u5bf9\u5dee easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u8fd4\u56de \u6811\u4e2d\u4efb\u610f\u4e24\u4e0d\u540c\u8282\u70b9\u503c\u4e4b\u95f4\u7684\u6700\u5c0f\u5dee\u503c \u3002</p> <p>\u5dee\u503c\u662f\u4e00\u4e2a\u6b63\u6570\uff0c\u5176\u6570\u503c\u7b49\u4e8e\u4e24\u503c\u4e4b\u5dee\u7684\u7edd\u5bf9\u503c\u3002</p> <p>\u4e2d\u5e8f\u904d\u5386\u5c31\u662f\u6709\u5e8f\u7684</p> <pre><code>public class Solution {\n    int min = Integer.MAX_VALUE;\n    Integer pre;\n\n    public int getMinimumDifference(TreeNode root) {\n        pre = null;\n        dfs(root);\n        return min;\n    }\n\n    // \u4e2d\u5e8f\u904d\u5386 \u5168\u5c40 pre\n    private void dfs(TreeNode node) {\n        if (node == null) return;\n        dfs(node.left);\n        if (pre != null) {\n            min = Math.min(min, node.val - pre);\n        }\n        pre = node.val;\n        dfs(node.right);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E6%A0%91/#_9","title":"\u4fee\u6539\u6811","text":""},{"location":"leetcode/%E6%A0%91/#offer-36-mid","title":"\u5251\u6307 Offer 36. \u4e8c\u53c9\u641c\u7d22\u6811\u4e0e\u53cc\u5411\u94fe\u8868 mid","text":"<p>\u8f93\u5165\u4e00\u68f5\u4e8c\u53c9\u641c\u7d22\u6811\uff0c\u5c06\u8be5\u4e8c\u53c9\u641c\u7d22\u6811\u8f6c\u6362\u6210\u4e00\u4e2a\u6392\u5e8f\u7684\u5faa\u73af\u53cc\u5411\u94fe\u8868\u3002\u8981\u6c42\u4e0d\u80fd\u521b\u5efa\u4efb\u4f55\u65b0\u7684\u8282\u70b9\uff0c\u53ea\u80fd\u8c03\u6574\u6811\u4e2d\u8282\u70b9\u6307\u9488\u7684\u6307\u5411\u3002</p> <p>\u89e3\u6cd51:\u4e2d\u5e8f\u904d\u5386</p> <p>\u5168\u5c40\u7ef4\u62a4 tail \u548c head</p> <pre><code>class Solution {\n    Node tail, head;\n\n    public Node treeToDoublyList(Node root) {\n        if (root == null) return null;\n        traversal(root);\n        head.left = tail;\n        tail.right = head;\n        return head;\n    }\n\n    void traversal(Node node) {\n        if (node == null) return;\n        traversal(node.left);\n        if (tail == null) head = node;\n        else {\n            node.left = tail;\n            tail.right = node;\n        }\n        tail = node;\n        traversal(node.right);\n    }\n}\n</code></pre> <p>\u89e3\u6cd52:\u540e\u7eed\u904d\u5386</p> <p>\u628a\u5de6\u53f3\u8fde\u8d77\u6765</p> <pre><code>class Solution {\n    public Node treeToDoublyList(Node root) {\n        if (root == null) return null;\n        Node[] res = traversal(root);\n        res[0].left = res[1];\n        res[1].right = res[0];\n        return res[0];\n    }\n\n    // \u5934\u5c3e\n    Node[] traversal(Node root) {\n        Node head = root, tail = root;\n        Node[] leftList = null;\n        if (root.left != null) {\n            leftList = traversal(root.left);\n            head = leftList[0];\n        }\n        Node[] rightList = null;\n        if (root.right != null) {\n            rightList = traversal(root.right);\n            tail = rightList[1];\n        }\n\n        if (leftList != null) {\n            leftList[1].right = root;\n            root.left = leftList[1];\n        }\n        if (rightList != null) {\n            rightList[0].left = root;\n            root.right = rightList[0];\n        }\n        return new Node[]{head, tail};\n    }\n}\n</code></pre>"},{"location":"leetcode/%E7%89%B9%E6%AE%8A%E6%8E%92%E5%BA%8F/","title":"\u7279\u6b8a\u6392\u5e8f","text":""},{"location":"leetcode/%E7%89%B9%E6%AE%8A%E6%8E%92%E5%BA%8F/#k","title":"\u7b2cK\u4e2a","text":""},{"location":"leetcode/%E7%89%B9%E6%AE%8A%E6%8E%92%E5%BA%8F/#k_1","title":"\u524dK\u4e2a","text":""},{"location":"leetcode/%E7%89%B9%E6%AE%8A%E6%8E%92%E5%BA%8F/#offer-40-k-easy","title":"\u5251\u6307 Offer 40. \u6700\u5c0f\u7684k\u4e2a\u6570 easy","text":"<p>\u8f93\u5165\u6574\u6570\u6570\u7ec4 arr \uff0c\u627e\u51fa\u5176\u4e2d\u6700\u5c0f\u7684 k \u4e2a\u6570\u3002\u4f8b\u5982\uff0c\u8f93\u51654\u30015\u30011\u30016\u30012\u30017\u30013\u30018\u8fd98\u4e2a\u6570\u5b57\uff0c\u5219\u6700\u5c0f\u76844\u4e2a\u6570\u5b57\u662f1\u30012\u30013\u30014\u3002</p> <pre><code>class Solution {\n    public int[] getLeastNumbers(int[] arr, int k) {\n        PriorityQueue&lt;Integer&gt; que = new PriorityQueue&lt;&gt;((a, b) -&gt; b - a);\n        for (int e : arr) {\n            que.add(e);\n            if (que.size() &gt; k) {\n                que.remove();\n            }\n        }\n        return que.stream().limit(k).mapToInt(a -&gt; a).toArray();\n    }\n}\n</code></pre>"},{"location":"leetcode/%E7%89%B9%E6%AE%8A%E6%8E%92%E5%BA%8F/#_1","title":"\u6392\u5e8f","text":""},{"location":"leetcode/%E7%89%B9%E6%AE%8A%E6%8E%92%E5%BA%8F/#451-mid","title":"451. \u6839\u636e\u5b57\u7b26\u51fa\u73b0\u9891\u7387\u6392\u5e8f mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u5c06\u5b57\u7b26\u4e32\u91cc\u7684\u5b57\u7b26\u6309\u7167\u51fa\u73b0\u7684\u9891\u7387\u964d\u5e8f\u6392\u5217\u3002</p> <p>\u7edf\u8ba1\u4e4b\u540e\u6309\u6b21\u6570\u653e\u8fdbarray\u6876\u4e2d</p> <pre><code>class Solution {\n    public String frequencySort(String s) {\n        Map&lt;Character, Integer&gt; cntMap = new HashMap&lt;&gt;();\n        for (int i = 0; i &lt; s.length(); i++) {\n            cntMap.put(s.charAt(i), 1 + cntMap.getOrDefault(s.charAt(i), 0));\n        }\n        // idx:cnt\n        // arr[idx]:charList\n        List&lt;Character&gt;[] charListArr = new List[s.length() + 1];\n        cntMap.forEach((e, cnt) -&gt; {\n            if (charListArr[cnt] == null) {\n                charListArr[cnt] = new ArrayList&lt;&gt;();\n            }\n            charListArr[cnt].add(e);\n        });\n        StringBuilder stb = new StringBuilder();\n\n        for (int i = charListArr.length - 1; i &gt;= 0; i--) {\n            if (charListArr[i] == null) continue;\n            for (Character e : charListArr[i]) {\n                for (int j = 0; j &lt; i; j++) {\n                    stb.append(e);\n                }\n            }\n        }\n        return stb.toString();\n    }\n}\n</code></pre>"},{"location":"leetcode/%E7%89%B9%E6%AE%8A%E6%8E%92%E5%BA%8F/#2418-easy","title":"2418. \u6309\u8eab\u9ad8\u6392\u5e8f easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 names \uff0c\u548c\u4e00\u4e2a\u7531 \u4e92\u4e0d\u76f8\u540c \u7684\u6b63\u6574\u6570\u7ec4\u6210\u7684\u6570\u7ec4 heights \u3002\u4e24\u4e2a\u6570\u7ec4\u7684\u957f\u5ea6\u5747\u4e3a n \u3002</p> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u4e0b\u6807 i\uff0cnames[i] \u548c heights[i] \u8868\u793a\u7b2c i \u4e2a\u4eba\u7684\u540d\u5b57\u548c\u8eab\u9ad8\u3002</p> <p>\u8bf7\u6309\u8eab\u9ad8 \u964d\u5e8f \u987a\u5e8f\u8fd4\u56de\u5bf9\u5e94\u7684\u540d\u5b57\u6570\u7ec4 names \u3002</p> <p>\u89e3\u6cd51: mapping</p> <pre><code>class Solution {\n    public String[] sortPeople(String[] names, int[] heights) {\n        int n = heights.length;\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n        for (int i = 0; i &lt; n; i++) {\n            map.put(heights[i], i);\n        }\n        Arrays.sort(heights);\n        String[] res = new String[n];\n        for (int i = 0; i &lt; n; i++) {\n            res[n - 1 - i] = names[map.get(heights[i])];\n        }\n        return res;\n    }\n}\n</code></pre> <p>\u89e3\u6cd52: \u4e8c\u5143\u7ec4</p> <p>```java {.line-numbers} class Solution {     public String[] sortPeople(String[] names, int[] heights) {         int n = names.length;         int[][] arr = new int[n][];         for (int i = 0; i &lt; n; i++) {             arr[i] = new int[]{heights[i], i};         }         Arrays.sort(arr, (a, b) -&gt; b[0] - a[0]);         String[] res = new String[n];         for (int i = 0; i &lt; n; i++) {             res[i] = names[arr[i][1]];         }         return res;     } } <pre><code>### \u5251\u6307 Offer 45. \u628a\u6570\u7ec4\u6392\u6210\u6700\u5c0f\u7684\u6570 mid\n\n\u8f93\u5165\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u628a\u6570\u7ec4\u91cc\u6240\u6709\u6570\u5b57\u62fc\u63a5\u8d77\u6765\u6392\u6210\u4e00\u4e2a\u6570\uff0c\u6253\u5370\u80fd\u62fc\u63a5\u51fa\u7684\u6240\u6709\u6570\u5b57\u4e2d\u6700\u5c0f\u7684\u4e00\u4e2a\u3002\n\n```java {.line-numbers}\nclass Solution {\n    public String minNumber(int[] nums) {\n        return IntStream.of(nums).boxed().map(String::valueOf).sorted((a, b) -&gt; (a + b).compareTo(b + a)).reduce(\"\", (a, b) -&gt; a + b);\n    }\n}\n</code></pre></p>"},{"location":"leetcode/%E7%89%B9%E6%AE%8A%E6%8E%92%E5%BA%8F/#1122-easy","title":"1122. \u6570\u7ec4\u7684\u76f8\u5bf9\u6392\u5e8f easy","text":"<p>\u5251\u6307 Offer II 075. \u6570\u7ec4\u76f8\u5bf9\u6392\u5e8f</p> <p>\u7ed9\u4f60\u4e24\u4e2a\u6570\u7ec4\uff0carr1 \u548c arr2\uff0carr2 \u4e2d\u7684\u5143\u7d20\u5404\u4e0d\u76f8\u540c\uff0carr2 \u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u51fa\u73b0\u5728 arr1 \u4e2d\u3002</p> <p>\u5bf9 arr1 \u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u6392\u5e8f; \u4f7f arr1 \u4e2d\u9879\u7684\u76f8\u5bf9\u987a\u5e8f\u548c arr2 \u4e2d\u7684\u76f8\u5bf9\u987a\u5e8f\u76f8\u540c\u3002\u672a\u5728 arr2 \u4e2d\u51fa\u73b0\u8fc7\u7684\u5143\u7d20\u9700\u8981\u6309\u7167\u5347\u5e8f\u653e\u5728 arr1 \u7684\u672b\u5c3e\u3002</p> <p>\u6876\u8ba1\u6570, \u611f\u89c9\u4e0d\u662f\u5f88 easy</p> <pre><code>class Solution {\n    public int[] relativeSortArray(int[] arr1, int[] arr2) {\n        int[] map = new int[1001];\n        for (int i : arr1) {\n            map[i]++;\n        }\n        int idx = 0;\n        // \u6309 arr2 \u586b\n        for (int i : arr2) {\n            while (map[i]-- &gt; 0) arr1[idx++] = i;\n        }\n        // \u6309\u81ea\u7136\u5e8f\u586b\n        for (int i = 0; i &lt; map.length; i++) {\n            while (map[i]-- &gt; 0) arr1[idx++] = i;\n        }\n        return arr1;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E7%8A%B6%E6%80%81%E6%9C%BA/","title":"\u72b6\u6001\u673a","text":"<p>\u72b6\u6001\u673a\u5c31\u662f\u7ed9\u5b9a\u4e00\u4e2a\u6761\u4ef6\u5e8f\u5217, \u4ece\u521d\u59cb\u72b6\u6001\u987a\u5e8f\u8fdb\u884c\u72b6\u6001\u8f6c\u79fb\u5230\u6700\u7ec8\u72b6\u6001\u7684\u8fc7\u7a0b</p>"},{"location":"leetcode/%E7%8A%B6%E6%80%81%E6%9C%BA/#offer-67-mid","title":"\u5251\u6307 Offer 67. \u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570 mid","text":"<p>\u5199\u4e00\u4e2a\u51fd\u6570 StrToInt\uff0c\u5b9e\u73b0\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u8fd9\u4e2a\u529f\u80fd\u3002\u4e0d\u80fd\u4f7f\u7528 atoi \u6216\u8005\u5176\u4ed6\u7c7b\u4f3c\u7684\u5e93\u51fd\u6570\u3002</p> <p>\u9996\u5148\uff0c\u8be5\u51fd\u6570\u4f1a\u6839\u636e\u9700\u8981\u4e22\u5f03\u65e0\u7528\u7684\u5f00\u5934\u7a7a\u683c\u5b57\u7b26\uff0c\u76f4\u5230\u5bfb\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u7684\u5b57\u7b26\u4e3a\u6b62\u3002</p> <p>\u5f53\u6211\u4eec\u5bfb\u627e\u5230\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e3a\u6b63\u6216\u8005\u8d1f\u53f7\u65f6\uff0c\u5219\u5c06\u8be5\u7b26\u53f7\u4e0e\u4e4b\u540e\u9762\u5c3d\u53ef\u80fd\u591a\u7684\u8fde\u7eed\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u4f5c\u4e3a\u8be5\u6574\u6570\u7684\u6b63\u8d1f\u53f7\uff1b\u5047\u5982\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u4e0e\u4e4b\u540e\u8fde\u7eed\u7684\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u6574\u6570\u3002</p> <p>\u8be5\u5b57\u7b26\u4e32\u9664\u4e86\u6709\u6548\u7684\u6574\u6570\u90e8\u5206\u4e4b\u540e\u4e5f\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4f59\u7684\u5b57\u7b26\uff0c\u8fd9\u4e9b\u5b57\u7b26\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u5b83\u4eec\u5bf9\u4e8e\u51fd\u6570\u4e0d\u5e94\u8be5\u9020\u6210\u5f71\u54cd\u3002</p> <p>\u6ce8\u610f\uff1a\u5047\u5982\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u6574\u6570\u5b57\u7b26\u3001\u5b57\u7b26\u4e32\u4e3a\u7a7a\u6216\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5219\u4f60\u7684\u51fd\u6570\u4e0d\u9700\u8981\u8fdb\u884c\u8f6c\u6362\u3002</p> <p>\u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u82e5\u51fd\u6570\u4e0d\u80fd\u8fdb\u884c\u6709\u6548\u7684\u8f6c\u6362\u65f6\uff0c\u8bf7\u8fd4\u56de 0\u3002</p> <p>\u8bf4\u660e\uff1a</p> <p>\u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u5927\u5c0f\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u90a3\u4e48\u5176\u6570\u503c\u8303\u56f4\u4e3a int\u3002\u5982\u679c\u6570\u503c\u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\uff0c\u8bf7\u8fd4\u56de INT_MAX \u6216 INT_MIN\u3002</p> <pre><code>class Solution {\n    public int strToInt(String str) {\n        Automaton automaton = new Automaton();\n        int len = str.length();\n        for (int i = 0; i &lt; len; ++i) {\n            automaton.trans(str.charAt(i));\n        }\n        return (int) (automaton.sign * automaton.res);\n    }\n}\n\nclass Automaton {\n    public int sign = 1;\n    public long res = 0;\n    private String state = \"s\";\n    // {\u72b6\u6001 -&gt; \u6761\u4ef6:\u72b6\u6001}\n    private Map&lt;String, String[]&gt; table = Map.of(\n            \"s\",    new String[]{\"s\", \"sign\", \"num\", \"e\"},\n            \"sign\", new String[]{\"e\", \"e\", \"num\", \"e\"},\n            \"num\",  new String[]{\"e\", \"e\", \"num\", \"e\"},\n            \"e\",    new String[]{\"e\", \"e\", \"e\", \"e\"}\n    );\n\n    public void trans(char c) {\n        state = table.get(state)[getIdx(c)];\n        switch (state) {\n            case \"sign\" -&gt; sign = c == '+' ? 1 : -1;\n            case \"num\" -&gt; {\n                res = res * 10 + c - '0';\n                res = sign == 1 ? Math.min(res, Integer.MAX_VALUE) : Math.min(res, -(long) Integer.MIN_VALUE);\n            }\n        }\n    }\n\n    private int getIdx(char c) {\n        if (c == ' ') return 0;\n        if (c == '+' || c == '-') return 1;\n        if (Character.isDigit(c)) return 2;\n        return 3;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E7%95%AA%E5%A4%96%E7%AF%87%20%E8%82%A1%E7%A5%A8%E4%BA%A4%E6%98%93/","title":"\u80a1\u7968\u4ea4\u6613","text":""},{"location":"leetcode/%E7%95%AA%E5%A4%96%E7%AF%87%20%E8%82%A1%E7%A5%A8%E4%BA%A4%E6%98%93/#714-mid","title":"714. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a\u542b\u624b\u7eed\u8d39 mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 prices\uff0c\u5176\u4e2d prices[i]\u8868\u793a\u7b2c i \u5929\u7684\u80a1\u7968\u4ef7\u683c \uff1b\u6574\u6570 fee \u4ee3\u8868\u4e86\u4ea4\u6613\u80a1\u7968\u7684\u624b\u7eed\u8d39\u7528\u3002</p> <p>\u4f60\u53ef\u4ee5\u65e0\u9650\u6b21\u5730\u5b8c\u6210\u4ea4\u6613\uff0c\u4f46\u662f\u4f60\u6bcf\u7b14\u4ea4\u6613\u90fd\u9700\u8981\u4ed8\u624b\u7eed\u8d39\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u8d2d\u4e70\u4e86\u4e00\u4e2a\u80a1\u7968\uff0c\u5728\u5356\u51fa\u5b83\u4e4b\u524d\u4f60\u5c31\u4e0d\u80fd\u518d\u7ee7\u7eed\u8d2d\u4e70\u80a1\u7968\u4e86\u3002</p> <p>\u8fd4\u56de\u83b7\u5f97\u5229\u6da6\u7684\u6700\u5927\u503c\u3002</p> <p>\u6ce8\u610f\uff1a\u8fd9\u91cc\u7684\u4e00\u7b14\u4ea4\u6613\u6307\u4e70\u5165\u6301\u6709\u5e76\u5356\u51fa\u80a1\u7968\u7684\u6574\u4e2a\u8fc7\u7a0b\uff0c\u6bcf\u7b14\u4ea4\u6613\u4f60\u53ea\u9700\u8981\u4e3a\u652f\u4ed8\u4e00\u6b21\u624b\u7eed\u8d39\u3002</p> <pre><code>class Solution {\n    public int maxProfit(int[] prices, int fee) {\n\n        int length = prices.length;\n        int[][] income = new int[length][2];\n        // 0:\u6301\u4ed3 1:\u5e73\u4ed3\n        income[0][0] = -prices[0];\n        income[0][1] = 0;\n\n        for (int i = 1; i &lt; length; i++) {\n            income[i][0] = Math.max(income[i - 1][0], income[i - 1][1] - prices[i]);\n            income[i][1] = Math.max(income[i - 1][0] - fee + prices[i], income[i - 1][1]);\n        }\n        return Math.max(income[length - 1][0], income[length - 1][1]);\n    }\n}\n</code></pre>"},{"location":"leetcode/%E7%9F%A9%E9%98%B5/","title":"\u77e9\u9635","text":""},{"location":"leetcode/%E7%9F%A9%E9%98%B5/#_1","title":"\u77e9\u9635","text":""},{"location":"leetcode/%E7%9F%A9%E9%98%B5/#566-easy","title":"566. \u91cd\u5851\u77e9\u9635 easy","text":"<p>\u5728 MATLAB \u4e2d\uff0c\u6709\u4e00\u4e2a\u975e\u5e38\u6709\u7528\u7684\u51fd\u6570 reshape \uff0c\u5b83\u53ef\u4ee5\u5c06\u4e00\u4e2a m x n \u77e9\u9635\u91cd\u5851\u4e3a\u53e6\u4e00\u4e2a\u5927\u5c0f\u4e0d\u540c\uff08r x c\uff09\u7684\u65b0\u77e9\u9635\uff0c\u4f46\u4fdd\u7559\u5176\u539f\u59cb\u6570\u636e\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u7531\u4e8c\u7ef4\u6570\u7ec4 mat \u8868\u793a\u7684 m x n \u77e9\u9635\uff0c\u4ee5\u53ca\u4e24\u4e2a\u6b63\u6574\u6570 r \u548c c \uff0c\u5206\u522b\u8868\u793a\u60f3\u8981\u7684\u91cd\u6784\u7684\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\u3002</p> <p>\u91cd\u6784\u540e\u7684\u77e9\u9635\u9700\u8981\u5c06\u539f\u59cb\u77e9\u9635\u7684\u6240\u6709\u5143\u7d20\u4ee5\u76f8\u540c\u7684 \u884c\u904d\u5386\u987a\u5e8f \u586b\u5145\u3002</p> <p>\u5982\u679c\u5177\u6709\u7ed9\u5b9a\u53c2\u6570\u7684 reshape \u64cd\u4f5c\u662f\u53ef\u884c\u4e14\u5408\u7406\u7684\uff0c\u5219\u8f93\u51fa\u65b0\u7684\u91cd\u5851\u77e9\u9635\uff1b\u5426\u5219\uff0c\u8f93\u51fa\u539f\u59cb\u77e9\u9635\u3002</p> <p>\u4e24\u4e2a\u77e9\u9635\u4e2d\u7b2c\u51e0\u4e2a\u5143\u7d20\u53bbmapping \u7b2cidx\u4e2a\u5143\u7d20, \u5b83\u7684i,j\u662f\u5565</p> <pre><code>class Solution {\n    public int[][] matrixReshape(int[][] nums, int r, int c) {\n        int m = nums.length, n = nums[0].length;\n        if (m * n != r * c) return nums;\n\n        int[][] reshapedNums = new int[r][c];\n        int index = 0;\n        for (int i = 0; i &lt; r; i++) {\n            for (int j = 0; j &lt; c; j++) {\n                // \u53ea\u770b\u8fd9\u4e00\u884c\u5c31\u884c\n                reshapedNums[i][j] = nums[index / n][index % n];\n                index++;\n            }\n        }\n        return reshapedNums;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E7%9F%A9%E9%98%B5/#378-k-mid","title":"378. \u6709\u5e8f\u77e9\u9635\u4e2d\u7b2c K \u5c0f\u7684\u5143\u7d20 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a n x n \u77e9\u9635 matrix \uff0c\u5176\u4e2d\u6bcf\u884c\u548c\u6bcf\u5217\u5143\u7d20\u5747\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u627e\u5230\u77e9\u9635\u4e2d\u7b2c k \u5c0f\u7684\u5143\u7d20\u3002 \u8bf7\u6ce8\u610f\uff0c\u5b83\u662f \u6392\u5e8f\u540e \u7684\u7b2c k \u5c0f\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u7b2c k \u4e2a \u4e0d\u540c \u7684\u5143\u7d20\u3002</p> <p>\u4f60\u5fc5\u987b\u627e\u5230\u4e00\u4e2a\u5185\u5b58\u590d\u6742\u5ea6\u4f18\u4e8e O(n2) \u7684\u89e3\u51b3\u65b9\u6848\u3002</p> <ul> <li>\u4f60\u80fd\u5426\u7528\u4e00\u4e2a\u6052\u5b9a\u7684\u5185\u5b58(\u5373 O(1) \u5185\u5b58\u590d\u6742\u5ea6)\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898?</li> <li>\u4f60\u80fd\u5728 O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417?</li> </ul> <p>\u627e\u5230\u4e00\u4e2a\u5143\u7d20e, \u5c0f\u4e8ee\u7684\u5143\u7d20\u7684\u6570\u91cf &lt; k &amp;&amp; \u5c0f\u4e8e\u7b49\u4e8ee\u7684\u5143\u7d20\u7684\u6570\u91cf &gt;= k</p> <p>\u5f88\u96be\u60f3\u7684\u4e8c\u5206\u67e5\u627e: min ==&gt; max \u5982\u679c \u5c0f\u4e8e\u7b49\u4e8emid\u7684\u5143\u7d20\u7684\u6570\u91cf \u2265 k, \u90a3\u4e48e\u2208[l,mid] \u5982\u679c \u5c0f\u4e8e\u7b49\u4e8emid\u7684\u5143\u7d20\u7684\u6570\u91cf &lt;  k, \u90a3\u4e48e\u2208(mid,h]</p> <pre><code>class Solution {\n    public int kthSmallest(int[][] matrix, int k) {\n        int r = matrix.length, c = matrix[0].length;\n        int l = matrix[0][0], h = matrix[r - 1][c - 1];\n        while (l &lt; h) {\n            // \u865a\u62df\u4e00\u4e2amid\n            int mid = l + (h - l &gt;&gt; 1);\n            int cnt = cnt(matrix, mid);\n            if (cnt &lt; k)\n                l = mid + 1;\n            else\n                h = mid;\n        }\n        return l;\n    }\n\n    // \u7edf\u8ba1\u4e0d\u5927\u4e8emid\u7684\u5143\u7d20\u6570\u91cf\n    private int cnt(int[][] matrix, int mid) {\n        int i = 0;\n        int j = matrix[0].length - 1;\n        int cnt = 0;\n        while (i &lt; matrix.length &amp;&amp; j &gt;= 0) {\n            if (matrix[i][j] &lt;= mid) {\n                cnt += j + 1;\n                i++;\n            } else {\n                j--;\n            }\n        }\n        return cnt;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E7%9F%A9%E9%98%B5/#766-easy","title":"766. \u6258\u666e\u5229\u8328\u77e9\u9635 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a m x n \u7684\u77e9\u9635 matrix \u3002\u5982\u679c\u8fd9\u4e2a\u77e9\u9635\u662f\u6258\u666e\u5229\u8328\u77e9\u9635\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002</p> <p>\u5982\u679c\u77e9\u9635\u4e0a\u6bcf\u4e00\u6761\u7531\u5de6\u4e0a\u5230\u53f3\u4e0b\u7684\u5bf9\u89d2\u7ebf\u4e0a\u7684\u5143\u7d20\u90fd\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u77e9\u9635\u662f \u6258\u666e\u5229\u8328\u77e9\u9635 \u3002</p> <p>\u5f00\u59cb\u8282\u70b9: \u53f3\u4e0a\u89d2\u5f00\u59cb\u5f80\u5de6, \u7136\u540e\u5f80\u4e0b</p> <pre><code>class Solution {\n    public boolean isToeplitzMatrix(int[][] matrix) {\n        int r = matrix.length - 1, c = matrix[0].length - 1;\n        boolean res = true;\n        int i = 0, j = c;\n        while (j &gt;= 0 &amp;&amp; i &lt;= r) {\n            int rr = i;\n            int cc = j;\n            int start = matrix[rr++][cc++];\n            while (rr &lt;= r &amp;&amp; cc &lt;= c) {\n                if (start != matrix[rr++][cc++]) return false;\n            }\n            if (j == 0) i++;\n            else j--;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E7%BB%84%E5%90%88/","title":"\u7ec4\u5408","text":""},{"location":"leetcode/%E7%BB%84%E5%90%88/#_2","title":"\u5168\u90e8\u7ec4\u5408","text":""},{"location":"leetcode/%E7%BB%84%E5%90%88/#offer-38-mid","title":"\u5251\u6307 Offer 38. \u5b57\u7b26\u4e32\u7684\u6392\u5217 mid","text":"<p>\u8f93\u5165\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u6253\u5370\u51fa\u8be5\u5b57\u7b26\u4e32\u4e2d\u5b57\u7b26\u7684\u6240\u6709\u6392\u5217\u3002</p> <p>\u4f60\u53ef\u4ee5\u4ee5\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u8fd9\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u4f46\u91cc\u9762\u4e0d\u80fd\u6709\u91cd\u590d\u5143\u7d20\u3002</p> <p>\u5168\u5e8f</p> <pre><code>class Solution {\n    char[] arr;\n    boolean[] visit;\n    List&lt;String&gt; res = new ArrayList&lt;&gt;();\n\n    public String[] permutation(String s) {\n        arr = s.toCharArray();\n        visit = new boolean[arr.length];\n        Arrays.sort(arr);\n        StringBuilder sb = new StringBuilder();\n        backtrace(sb);\n        return res.toArray(new String[]{});\n    }\n\n    void backtrace(StringBuilder sb) {\n        if (sb.length() == arr.length) {\n            res.add(sb.toString());\n            return;\n        }\n        for (int i = 0; i &lt; arr.length; i++) {\n            if (visit[i]) continue;\n            // \u5904\u7406\u76f8\u540c\u503c \u4e0a\u4e00\u4e2a\u6ca1\u9009\u4e2d\u610f\u5473\u7740\u4e0d\u662f\u9012\u5f52\u8fdb\u5165\u7684, \u53ea\u6709\u9012\u5f52\u8fdb\u5165\u7684\u624d\u80fd\u9009\n            if (i &gt; 0 &amp;&amp; arr[i] == arr[i - 1] &amp;&amp; !visit[i - 1]) continue;\n            sb.append(arr[i]);\n            visit[i] = true;\n            backtrace(sb);\n            sb.deleteCharAt(sb.length() - 1);\n            visit[i] = false;\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/%E7%BB%84%E5%90%88/#784-mid","title":"784. \u5b57\u6bcd\u5927\u5c0f\u5199\u5168\u6392\u5217 mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u901a\u8fc7\u5c06\u5b57\u7b26\u4e32 s \u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u8f6c\u53d8\u5927\u5c0f\u5199\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u5f97\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u8fd4\u56de \u6240\u6709\u53ef\u80fd\u5f97\u5230\u7684\u5b57\u7b26\u4e32\u96c6\u5408 \u3002\u4ee5 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u8f93\u51fa\u3002</p> <p>\u4e00\u6b21\u53ea\u5904\u7406\u4e00\u4e2a\u4f4d, \u9012\u5f52\u5904\u7406\u4e0b\u4e00\u4e2a\u4f4d</p> <pre><code>class Solution {\n    private List&lt;String&gt; res = new ArrayList&lt;&gt;();\n    private StringBuilder sb;\n\n    public List&lt;String&gt; letterCasePermutation(String s) {\n        sb = new StringBuilder(s);\n        backtrace(0);\n        return res;\n    }\n\n    private void backtrace(int i) {\n        if (i == sb.length()) {\n            res.add(sb.toString());\n            return;\n        }\n        char c = sb.charAt(i);\n        if (c &gt;= 'A') {\n            sb.setCharAt(i, Character.toUpperCase(c));\n            backtrace(i + 1);\n            sb.setCharAt(i, Character.toLowerCase(c));\n            backtrace(i + 1);\n        } else {\n            backtrace(i + 1);\n        }\n    }\n}\n</code></pre> <p>\u8fd8\u6709\u4e00\u79cd bitmap \u63a9\u7801\u7684\u65b9\u6cd5, \u53ef\u4ee5\u770b\u9898\u89e3</p>"},{"location":"leetcode/%E7%BB%84%E5%90%88/#_3","title":"\u7ec4\u5408\u7684\u6700\u4f18\u89e3","text":""},{"location":"leetcode/%E7%BB%84%E5%90%88/#2397-mid","title":"2397. \u88ab\u5217\u8986\u76d6\u7684\u6700\u591a\u884c\u6570 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684 m x n \u4e8c\u8fdb\u5236\u77e9\u9635 mat \u548c\u4e00\u4e2a\u6574\u6570 cols \uff0c\u8868\u793a\u4f60\u9700\u8981\u9009\u51fa\u7684\u5217\u6570\u3002</p> <p>\u5982\u679c\u4e00\u884c\u4e2d\uff0c\u6240\u6709\u7684 1 \u90fd\u88ab\u4f60\u9009\u4e2d\u7684\u5217\u6240\u8986\u76d6\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u8fd9\u4e00\u884c \u88ab\u8986\u76d6 \u4e86\u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de\u5728\u9009\u62e9 cols \u5217\u7684\u60c5\u51b5\u4e0b\uff0c\u88ab\u8986\u76d6 \u7684\u884c\u6570 \u6700\u5927 \u4e3a\u591a\u5c11\u3002</p> <p>\u89e3\u6cd5: 2\u8fdb\u5236\u679a\u4e3e</p> <p>2\u8fdb\u5236\u679a\u4e3e\u662f\u8868\u5f81\u96c6\u5408\u4e2d\u9009\u62e9n\u4e2a\u5143\u7d20\u7684\u5e38\u7528\u65b9\u6cd5 2\u8fdb\u5236\u4e0e\u96c6\u5408\u7684\u5173\u7cfb: \u4ece \u7a7a\u96c6 \u5230 \u5168\u96c6, \u53ef\u4ee5\u7528\u4e8c\u8fdb\u5236\u7684\u4f4d\u8868\u793a, \u5168\u96c6\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u6700\u9ad8\u4f4d1==&gt;\u7d22\u5f15 $2^n-1$</p> <pre><code>class Solution {\n    public int maximumRows(int[][] mat, int cols) {\n        int col = mat[0].length;\n        int res = 0;\n        /* \u6240\u6709\u7ec4\u5408\u4e2d\u7b5b\u9009\u51fa cols */\n        for (int i = 0; i &lt; 1 &lt;&lt; col; i++) {\n            int bitcnt = 0;\n            //1. bitcnt = Integer.bitCount(i);\n            //2. for (int j = 0; j &lt; col; j++) bitcnt += (i &gt;&gt; j) &amp; 1;\n            bitcnt = Integer.bitCount(i);\n            if (bitcnt != cols) continue;\n            /* \u7edf\u8ba1\u6ee1\u8db3\u6761\u4ef6\u7684\u884c\u6570 */\n            int tot = 0;\n            for (int[] row : mat) {\n                boolean flg = true;\n                for (int j = 0; j &lt; col; j++) {\n                    if (row[j] == 1 &amp;&amp; (i &gt;&gt; j &amp; 1) == 0) {\n                        flg = false;\n                        break;\n                    }\n                }\n                if (flg) tot++;\n            }\n            /* \u53d6\u6700\u5927 */\n            res = Math.max(res, tot);\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E7%BB%93%E6%9E%84/","title":"\u7ed3\u6784","text":""},{"location":"leetcode/%E7%BB%93%E6%9E%84/#_1","title":"\u6700\u5927\u961f\u5217","text":""},{"location":"leetcode/%E7%BB%93%E6%9E%84/#59-ii-mid","title":"\u9762\u8bd5\u9898 59 - II. \u961f\u5217\u7684\u6700\u5927\u503c mid","text":"<p>\u8bf7\u5b9a\u4e49\u4e00\u4e2a\u961f\u5217\u5e76\u5b9e\u73b0\u51fd\u6570 max_value \u5f97\u5230\u961f\u5217\u91cc\u7684\u6700\u5927\u503c\uff0c\u8981\u6c42\u51fd\u6570 max_value\u3001push_back \u548c pop_front \u7684\u5747\u644a\u65f6\u95f4\u590d\u6742\u5ea6\u90fd\u662f O(1)\u3002</p> <p>\u82e5\u961f\u5217\u4e3a\u7a7a\uff0cpop_front \u548c max_value \u9700\u8981\u8fd4\u56de -1</p> <p>\u5355\u8c03\u51cf\u961f\u5217, \u5934\u90e8\u6700\u5927</p> <pre><code>class MaxQueue {\n    Queue&lt;Integer&gt; que = new LinkedList&lt;&gt;();\n    Deque&lt;Integer&gt; max = new LinkedList&lt;&gt;();\n\n\n    public int max_value() {\n        if (max.isEmpty()) return -1;\n        return max.getFirst();\n    }\n\n    public void push_back(int value) {\n        while (!max.isEmpty() &amp;&amp; max.getLast() &lt; value) {\n            max.removeLast();\n        }\n        max.addLast(value);\n        que.add(value);\n    }\n\n    public int pop_front() {\n        if (que.isEmpty()) return -1;\n        int res = que.remove();\n        // \u5173\u952e\u5728\u8fd9, \u5982\u4f55\u786e\u5b9a\u5355\u8c03\u961f\u5217\u4e2d\u7684\u6700\u5927\u5143\u7d20\u8fd8\u5728\u961f\u5217\u4e2d\n        if (res == max.getFirst()) max.removeFirst();\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E7%BB%93%E6%9E%84/#trie","title":"Trie (\u524d\u7f00\u6811)","text":""},{"location":"leetcode/%E7%BB%93%E6%9E%84/#648-mid","title":"648. \u5355\u8bcd\u66ff\u6362 mid","text":"<p>\u5728\u82f1\u8bed\u4e2d\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u53eb\u505a \u8bcd\u6839(root) \u7684\u6982\u5ff5\uff0c\u53ef\u4ee5\u8bcd\u6839\u540e\u9762\u6dfb\u52a0\u5176\u4ed6\u4e00\u4e9b\u8bcd\u7ec4\u6210\u53e6\u4e00\u4e2a\u8f83\u957f\u7684\u5355\u8bcd\u2014\u2014\u6211\u4eec\u79f0\u8fd9\u4e2a\u8bcd\u4e3a \u7ee7\u627f\u8bcd(successor)\u3002\u4f8b\u5982\uff0c\u8bcd\u6839 an\uff0c\u8ddf\u968f\u7740\u5355\u8bcd other(\u5176\u4ed6)\uff0c\u53ef\u4ee5\u5f62\u6210\u65b0\u7684\u5355\u8bcd another(\u53e6\u4e00\u4e2a)\u3002</p> <p>\u73b0\u5728\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u7531\u8bb8\u591a\u8bcd\u6839\u7ec4\u6210\u7684\u8bcd\u5178 dictionary \u548c\u4e00\u4e2a\u7528\u7a7a\u683c\u5206\u9694\u5355\u8bcd\u5f62\u6210\u7684\u53e5\u5b50 sentence\u3002\u4f60\u9700\u8981\u5c06\u53e5\u5b50\u4e2d\u7684\u6240\u6709\u7ee7\u627f\u8bcd\u7528\u8bcd\u6839\u66ff\u6362\u6389\u3002\u5982\u679c\u7ee7\u627f\u8bcd\u6709\u8bb8\u591a\u53ef\u4ee5\u5f62\u6210\u5b83\u7684\u8bcd\u6839\uff0c\u5219\u7528\u6700\u77ed\u7684\u8bcd\u6839\u66ff\u6362\u5b83\u3002</p> <p>\u4f60\u9700\u8981\u8f93\u51fa\u66ff\u6362\u4e4b\u540e\u7684\u53e5\u5b50\u3002</p> <pre><code>class Solution {\n\n    static class Node {\n        Node[] table = new Node[26];\n        boolean isLeaf;\n    }\n\n    // \u8bcd\u6839\u6811\n    private final Node root = new Node();\n\n    public String replaceWords(List&lt;String&gt; dictionary, String sentence) {\n        String[] words = sentence.split(\" \");\n        for (String s : dictionary) {\n            Node p = root;\n            for (char c : s.toCharArray()) {\n                if (p.table[c - 'a'] == null)\n                    p.table[c - 'a'] = new Node();\n                p = p.table[c - 'a'];\n            }\n            p.isLeaf = true;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (String w : words) {\n            sb.append(findRoot(w)).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n\n    private String findRoot(String word) {\n        Node p = root;\n        int cnt = 0;\n        for (char c : word.toCharArray()) {\n            cnt++;\n            if (p.table[c - 'a'] == null) return word;\n            if (p.table[c - 'a'].isLeaf) return word.substring(0, cnt);\n            p = p.table[c - 'a'];\n        }\n        return word;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E7%BB%93%E6%9E%84/#820-mid","title":"820. \u5355\u8bcd\u7684\u538b\u7f29\u7f16\u7801 mid","text":"<p>\u5355\u8bcd\u6570\u7ec4 words \u7684 \u6709\u6548\u7f16\u7801 \u7531\u4efb\u610f\u52a9\u8bb0\u5b57\u7b26\u4e32 s \u548c\u4e0b\u6807\u6570\u7ec4 indices \u7ec4\u6210\uff0c\u4e14\u6ee1\u8db3\uff1a</p> <ul> <li>words.length == indices.length</li> <li>\u52a9\u8bb0\u5b57\u7b26\u4e32 s \u4ee5 '#' \u5b57\u7b26\u7ed3\u5c3e</li> <li>\u5bf9\u4e8e\u6bcf\u4e2a\u4e0b\u6807 indices[i] \uff0cs \u7684\u4e00\u4e2a\u4ece indices[i] \u5f00\u59cb\u3001\u5230\u4e0b\u4e00\u4e2a '#' \u5b57\u7b26\u7ed3\u675f\uff08\u4f46\u4e0d\u5305\u62ec '#'\uff09\u7684 \u5b50\u5b57\u7b26\u4e32 \u6070\u597d\u4e0e words[i] \u76f8\u7b49</li> </ul> <p>\u7ed9\u4f60\u4e00\u4e2a\u5355\u8bcd\u6570\u7ec4 words \uff0c\u8fd4\u56de\u6210\u529f\u5bf9 words \u8fdb\u884c\u7f16\u7801\u7684\u6700\u5c0f\u52a9\u8bb0\u5b57\u7b26\u4e32 s \u7684\u957f\u5ea6 \u3002</p> <p>\u5206\u53c9\u7684\u4e0d\u80fd\u5171\u4eab\u524d\u7f00 aTime bTime</p> <ul> <li>word \u9700\u8981\u5012\u5e8f\u5efa\u6811;</li> <li>\u5982\u679c\u4e0d\u5148\u6392\u5e8f\u7684\u8bdd, \u5f88\u96be\u5728\u5efa\u6811\u7684\u8fc7\u7a0b\u4e2d\u7edf\u8ba1, \u4e3b\u8981\u95ee\u9898\u662f\u5206\u53c9\u7684\u4e0d\u80fd\u5171\u4eab\u524d\u7f00;</li> <li>\u6211\u4eec\u53ef\u4ee5\u5148\u5efa\u6811\u518d\u7edf\u8ba1, \u53ef\u4ee5\u5efa\u6811\u4e4b\u540e DFS; \u4e5f\u53ef\u4ee5\u5b58\u50a8\u6240\u6709\u53f6\u5b50\u8282\u70b9, \u7136\u540e\u904d\u5386\u7edf\u8ba1;</li> </ul> <pre><code>class Solution {\n    static class Node {\n        Node[] table = new Node[26];\n        boolean isLeaf;\n    }\n\n    // \u5206\u53c9\u7684\u4e0d\u80fd\u5171\u4eab\u524d\u7f00\n    public int minimumLengthEncoding(String[] words) {\n        Node root = new Node();\n        Map&lt;Node, Integer&gt; map = new HashMap&lt;&gt;();\n        for (String s : words) {\n            int cnt = 1;\n            Node p = root;\n            for (int i = s.length() - 1; i &gt;= 0; i--) {\n                cnt++;\n                int idx = s.charAt(i) - 'a';\n                if (p.table[idx] == null) {\n                    p.table[idx] = new Node();\n                    if (i == 0) map.put(p.table[idx], cnt);\n                } else if (i != 0 &amp;&amp; p.table[idx].isLeaf) {\n                    p.table[idx].isLeaf = false;\n                    map.remove(p.table[idx]);\n                }\n                p = p.table[idx];\n            }\n            p.isLeaf = true;\n        }\n        int res = 0;\n        for (var entry : map.entrySet()) {\n            res += entry.getValue();\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E7%BB%93%E6%9E%84/#677-mid","title":"677. \u952e\u503c\u6620\u5c04 mid","text":"<p>\u5251\u6307 Offer II 066. \u5355\u8bcd\u4e4b\u548c</p> <p>\u8bbe\u8ba1\u4e00\u4e2a map \uff0c\u6ee1\u8db3\u4ee5\u4e0b\u51e0\u70b9:</p> <p>\u5b57\u7b26\u4e32\u8868\u793a\u952e\uff0c\u6574\u6570\u8868\u793a\u503c \u8fd4\u56de\u5177\u6709\u524d\u7f00\u7b49\u4e8e\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u952e\u7684\u503c\u7684\u603b\u548c \u5b9e\u73b0\u4e00\u4e2a MapSum \u7c7b\uff1a</p> <ul> <li>void insert(String key, int val) \u63d2\u5165 key-val \u952e\u503c\u5bf9\uff0c\u5b57\u7b26\u4e32\u8868\u793a\u952e key \uff0c\u6574\u6570\u8868\u793a\u503c val \u3002\u5982\u679c\u952e key \u5df2\u7ecf\u5b58\u5728\uff0c\u90a3\u4e48\u539f\u6765\u7684\u952e\u503c\u5bf9 key-value \u5c06\u88ab\u66ff\u4ee3\u6210\u65b0\u7684\u952e\u503c\u5bf9\u3002</li> <li>int sum(string prefix) \u8fd4\u56de\u6240\u6709\u4ee5\u8be5\u524d\u7f00 prefix \u5f00\u5934\u7684\u952e key \u7684\u503c\u7684\u603b\u548c\u3002</li> </ul> <p>\u524d\u7f00\u6811 \u627e\u5230\u524d\u7f00\u6700\u540e\u7684 char, \u4ece\u90a3 dfs \u9700\u8981\u4e00\u4e2a\u53ef\u53d8\u7684\u5f15\u7528 int[0] = {0}</p> <pre><code>class MapSum {\n    static class Node {\n        Node[] table = new Node[26];\n        boolean isLeaf;\n        int val;\n    }\n\n    private final Node root = new Node();\n\n    public void insert(String key, int val) {\n        Node p = root;\n        for (char c : key.toCharArray()) {\n            int idx = c - 'a';\n            if (p.table[idx] == null)\n                p.table[idx] = new Node();\n            p = p.table[idx];\n        }\n        p.isLeaf = true;\n        p.val = val;\n    }\n\n    public int sum(String pre) {\n        Node p = root;\n        for (char c : pre.toCharArray()) {\n            int idx = c - 'a';\n            if (p.table[idx] == null) return 0;\n            p = p.table[idx];\n        }\n        int[] arr = {0};// \u8fd9\u91cc\u521d\u59cb\u5316\u633a\u6709\u610f\u601d\n        dfs(p, arr);\n        return arr[0];\n    }\n\n    private void dfs(Node p, int[] res) {\n        if (p == null) return;\n        if (p.isLeaf) res[0] += p.val;\n        for (Node n : p.table) {\n            if (n != null) dfs(n, res);\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/%E7%BB%93%E6%9E%84/#_2","title":"\u5bb9\u5668","text":""},{"location":"leetcode/%E7%BB%93%E6%9E%84/#380-o1","title":"380. O(1) \u65f6\u95f4\u63d2\u5165\u3001\u5220\u9664\u548c\u83b7\u53d6\u968f\u673a\u5143\u7d20","text":"<p>\u5251\u6307 Offer II 030. \u63d2\u5165\u3001\u5220\u9664\u548c\u968f\u673a\u8bbf\u95ee\u90fd\u662f O(1) \u7684\u5bb9\u5668</p> <p>\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u5728\u5e73\u5747 \u65f6\u95f4\u590d\u6742\u5ea6 O(1)\u4e0b\uff0c\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a</p> <ul> <li>insert(val)\uff1a\u5f53\u5143\u7d20 val \u4e0d\u5b58\u5728\u65f6\u8fd4\u56de true \uff0c\u5e76\u5411\u96c6\u5408\u4e2d\u63d2\u5165\u8be5\u9879\uff0c\u5426\u5219\u8fd4\u56de false\u3002</li> <li>remove(val)\uff1a\u5f53\u5143\u7d20 val \u5b58\u5728\u65f6\u8fd4\u56de true \uff0c\u5e76\u4ece\u96c6\u5408\u4e2d\u79fb\u9664\u8be5\u9879\uff0c\u5426\u5219\u8fd4\u56de false\u3002</li> <li>getRandom\uff1a\u968f\u673a\u8fd4\u56de\u73b0\u6709\u96c6\u5408\u4e2d\u7684\u4e00\u9879\u3002\u6bcf\u4e2a\u5143\u7d20\u5e94\u8be5\u6709 \u76f8\u540c\u7684\u6982\u7387 \u88ab\u8fd4\u56de\u3002</li> </ul> <p>\u5220\u9664\u7684\u65f6\u5019, \u5c06\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5f04\u5230\u8981\u5220\u9664\u7684\u5143\u7d20\u7684\u4f4d\u7f6e\u4e0a</p> <pre><code>class RandomizedSet {\n\n    private final List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n    private final Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n    private final Random random = new Random();\n\n    public boolean insert(int val) {\n        if (map.containsKey(val)) return false;\n        list.add(val);\n        int idx = list.size() - 1;\n        map.put(val, idx);\n        return true;\n    }\n\n    public boolean remove(int val) {\n        Integer oldIdx = map.remove(val);\n        if (oldIdx == null) return false;\n        Integer tail = list.remove(list.size() - 1);\n        if (tail != val) {\n            list.set(oldIdx, tail);\n            map.put(tail, oldIdx);\n        }\n        return true;\n    }\n\n    public int getRandom() {\n        return list.get(random.nextInt(list.size()));\n    }\n}\n</code></pre>"},{"location":"leetcode/%E7%BB%93%E6%9E%84/#lru","title":"LRU","text":""},{"location":"leetcode/%E7%BB%93%E6%9E%84/#933-easy","title":"933. \u6700\u8fd1\u7684\u8bf7\u6c42\u6b21\u6570 easy","text":"<p>\u5199\u4e00\u4e2a RecentCounter \u7c7b\u6765\u8ba1\u7b97\u7279\u5b9a\u65f6\u95f4\u8303\u56f4\u5185\u6700\u8fd1\u7684\u8bf7\u6c42\u3002</p> <p>\u8bf7\u4f60\u5b9e\u73b0 RecentCounter \u7c7b\uff1a</p> <ul> <li>RecentCounter() \u521d\u59cb\u5316\u8ba1\u6570\u5668\uff0c\u8bf7\u6c42\u6570\u4e3a 0 \u3002</li> <li>int ping(int t) \u5728\u65f6\u95f4 t \u6dfb\u52a0\u4e00\u4e2a\u65b0\u8bf7\u6c42\uff0c\u5176\u4e2d t \u8868\u793a\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\u7684\u67d0\u4e2a\u65f6\u95f4\uff0c\u5e76\u8fd4\u56de\u8fc7\u53bb 3000 \u6beb\u79d2\u5185\u53d1\u751f\u7684\u6240\u6709\u8bf7\u6c42\u6570\uff08\u5305\u62ec\u65b0\u8bf7\u6c42\uff09\u3002\u786e\u5207\u5730\u8bf4\uff0c\u8fd4\u56de\u5728 [t-3000, t] \u5185\u53d1\u751f\u7684\u8bf7\u6c42\u6570\u3002</li> </ul> <p>\u4fdd\u8bc1 \u6bcf\u6b21\u5bf9 ping \u7684\u8c03\u7528\u90fd\u4f7f\u7528\u6bd4\u4e4b\u524d\u66f4\u5927\u7684 t \u503c\u3002</p> <pre><code>class RecentCounter {\n\n    Queue&lt;Integer&gt; que = new ArrayDeque&lt;&gt;();\n\n    public int ping(int t) {\n        que.add(t);\n        while (!que.isEmpty() &amp;&amp; que.element() &lt; t - 3000) {\n            que.remove();\n        }\n        return que.size();\n    }\n}\n</code></pre>"},{"location":"leetcode/%E8%84%91%E7%AD%8B%E6%80%A5%E8%BD%AC%E5%BC%AF/","title":"\u8111\u7b4b\u6025\u8f6c\u5f2f","text":""},{"location":"leetcode/%E8%84%91%E7%AD%8B%E6%80%A5%E8%BD%AC%E5%BC%AF/#_1","title":"\u7a00\u5947\u53e4\u602a\u7684\u9898\u76ee","text":""},{"location":"leetcode/%E8%84%91%E7%AD%8B%E6%80%A5%E8%BD%AC%E5%BC%AF/#offer-64-12n-mid","title":"\u5251\u6307 Offer 64. \u6c421+2+\u2026+n mid","text":"<p>\u6c42 1+2+...+n \uff0c\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u4e58\u9664\u6cd5\u3001for\u3001while\u3001if\u3001else\u3001switch\u3001case\u7b49\u5173\u952e\u5b57\u53ca\u6761\u4ef6\u5224\u65ad\u8bed\u53e5\uff08A?B:C\uff09\u3002</p> <pre><code>class Solution {\n    public int sumNums(int n) {\n        boolean flag = n &gt; 1 &amp;&amp; (n += sumNums(n - 1)) == 666;\n        return n;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E8%84%91%E7%AD%8B%E6%80%A5%E8%BD%AC%E5%BC%AF/#offer-62-easy","title":"\u5251\u6307 Offer 62. \u5706\u5708\u4e2d\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57 easy","text":"<p>0,1,\u00b7\u00b7\u00b7,n-1 \u8fd9 n \u4e2a\u6570\u5b57\u6392\u6210\u4e00\u4e2a\u5706\u5708\uff0c\u4ece\u6570\u5b570\u5f00\u59cb\uff0c\u6bcf\u6b21\u4ece\u8fd9\u4e2a\u5706\u5708\u91cc\u5220\u9664\u7b2c m \u4e2a\u6570\u5b57\uff08\u5220\u9664\u540e\u4ece\u4e0b\u4e00\u4e2a\u6570\u5b57\u5f00\u59cb\u8ba1\u6570\uff09\u3002\u6c42\u51fa\u8fd9\u4e2a\u5706\u5708\u91cc\u5269\u4e0b\u7684\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u3002</p> <p>\u4f8b\u5982\uff0c0\u30011\u30012\u30013\u30014\u8fd95\u4e2a\u6570\u5b57\u7ec4\u6210\u4e00\u4e2a\u5706\u5708\uff0c\u4ece\u6570\u5b570\u5f00\u59cb\u6bcf\u6b21\u5220\u9664\u7b2c3\u4e2a\u6570\u5b57\uff0c\u5219\u5220\u9664\u7684\u524d4\u4e2a\u6570\u5b57\u4f9d\u6b21\u662f2\u30010\u30014\u30011\uff0c\u56e0\u6b64\u6700\u540e\u5269\u4e0b\u7684\u6570\u5b57\u662f3\u3002</p> <p>\u7ea6\u745f\u592b\u73af \u6838\u5fc3\u601d\u8def\u662f\u9006\u63a8\u6700\u540e\u5b58\u6d3b\u7684\u5143\u7d20\u5728(n-1)\u6b21\u64cd\u4f5c\u4e2d\u7684\u4f4d\u7f6e \u5b58\u6d3b\u7684\u5143\u7d20\u6bcf\u6b21\u90fd\u5f80\u524d\u632a m</p> <p>\u9012\u5f52\u6cd5</p> <pre><code>class Solution {\n    public int lastRemaining(int n, int m) {\n        if (n == 1) return 0;\n        int x = lastRemaining(n - 1, m);\n        return (x + m) % n;\n    }\n}\n</code></pre> <p>\u8fed\u4ee3\u6cd5</p> <pre><code>class Solution {\n    public int lastRemaining(int n, int m) {\n        int res = 0;\n        for (int i = 2; i &lt;= n; i++) {\n            res = (res + m) % i;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E8%84%91%E7%AD%8B%E6%80%A5%E8%BD%AC%E5%BC%AF/#717-1-2-easy","title":"717. 1 \u6bd4\u7279\u4e0e 2 \u6bd4\u7279\u5b57\u7b26 easy","text":"<p>\u6709\u4e24\u79cd\u7279\u6b8a\u5b57\u7b26\uff1a</p> <ul> <li>\u7b2c\u4e00\u79cd\u5b57\u7b26\u53ef\u4ee5\u7528\u4e00\u6bd4\u7279 0 \u8868\u793a</li> <li>\u7b2c\u4e8c\u79cd\u5b57\u7b26\u53ef\u4ee5\u7528\u4e24\u6bd4\u7279\uff0810 \u6216 11\uff09\u8868\u793a</li> </ul> <p>\u7ed9\u4f60\u4e00\u4e2a\u4ee5 0 \u7ed3\u5c3e\u7684\u4e8c\u8fdb\u5236\u6570\u7ec4 bits \uff0c\u5982\u679c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u5fc5\u987b\u662f\u4e00\u4e2a\u4e00\u6bd4\u7279\u5b57\u7b26\uff0c\u5219\u8fd4\u56de true \u3002</p> <p>\u6c42\u524d\u9762\u8fde\u7eed1\u7684\u4e2a\u6570</p> <pre><code>class Solution {\n    public boolean isOneBitCharacter(int[] bits) {\n        int n = bits.length;\n        if (bits[n - 1] == 1) return false;\n        int cnt = 0;\n        for (int i = n - 2; i &gt;= 0 &amp;&amp; bits[i] == 1; i--, cnt++) ;\n        return (cnt &amp; 1) == 0;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E8%84%91%E7%AD%8B%E6%80%A5%E8%BD%AC%E5%BC%AF/#6337-easy","title":"6337 \u7edf\u8ba1\u684c\u9762\u4e0a\u7684\u4e0d\u540c\u6570\u5b57 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u5f00\u59cb\u65f6\uff0c\u5b83\u653e\u5728\u684c\u9762\u4e0a\u3002\u5728 1E9 \u5929\u5185\uff0c\u6bcf\u5929\u90fd\u8981\u6267\u884c\u4e0b\u8ff0\u6b65\u9aa4\uff1a</p> <ul> <li>\u5bf9\u4e8e\u51fa\u73b0\u5728\u684c\u9762\u4e0a\u7684\u6bcf\u4e2a\u6570\u5b57 x \uff0c\u627e\u51fa\u7b26\u5408 1 &lt;= i &lt;= n \u4e14\u6ee1\u8db3 x % i == 1 \u7684\u6240\u6709\u6570\u5b57 i \u3002</li> <li>\u7136\u540e\uff0c\u5c06\u8fd9\u4e9b\u6570\u5b57\u653e\u5728\u684c\u9762\u4e0a\u3002</li> </ul> <p>\u8fd4\u56de\u5728 1E9 \u5929\u4e4b\u540e\uff0c\u51fa\u73b0\u5728\u684c\u9762\u4e0a\u7684 \u4e0d\u540c \u6574\u6570\u7684\u6570\u76ee\u3002</p> <p>\u53ef\u6076\u7684\u8111\u7b4b\u6025\u8f6c\u5f2f n&gt;1\u65f6, n-1\u4e00\u5b9a\u4f1a\u4e0a\u684c, \u6240\u4ee5\u4e0d\u540c\u5143\u7d20\u5c31\u662f n==1 ? 1 : n-1</p>"},{"location":"leetcode/%E8%84%91%E7%AD%8B%E6%80%A5%E8%BD%AC%E5%BC%AF/#6339-hard","title":"6339 \u5c06\u73e0\u5b50\u653e\u5165\u80cc\u5305\u4e2d hard","text":"<p>\u4f60\u6709 k \u4e2a\u80cc\u5305\u3002\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4 weights \uff0c\u5176\u4e2d weights[i]\u662f\u7b2c i \u4e2a\u73e0\u5b50\u7684\u91cd\u91cf\u3002\u540c\u65f6\u7ed9\u4f60\u6574\u6570 k \u3002</p> <p>\u8bf7\u4f60\u6309\u7167\u5982\u4e0b\u89c4\u5219\u5c06\u6240\u6709\u7684\u73e0\u5b50\u653e\u8fdb k \u4e2a\u80cc\u5305\u3002</p> <ul> <li>\u6ca1\u6709\u80cc\u5305\u662f\u7a7a\u7684\u3002</li> <li>\u5982\u679c\u7b2c i \u4e2a\u73e0\u5b50\u548c\u7b2c j \u4e2a\u73e0\u5b50\u5728\u540c\u4e00\u4e2a\u80cc\u5305\u91cc\uff0c\u90a3\u4e48\u4e0b\u6807\u5728 i \u5230 j \u4e4b\u95f4\u7684\u6240\u6709\u73e0\u5b50\u90fd\u5fc5\u987b\u5728\u8fd9\u540c\u4e00\u4e2a\u80cc\u5305\u4e2d\u3002</li> <li>\u5982\u679c\u4e00\u4e2a\u80cc\u5305\u6709\u4e0b\u6807\u4ece i \u5230 j \u7684\u6240\u6709\u73e0\u5b50\uff0c\u90a3\u4e48\u8fd9\u4e2a\u80cc\u5305\u7684\u4ef7\u683c\u662f weights[i] + weights[j]\u3002</li> </ul> <p>\u4e00\u4e2a\u73e0\u5b50\u5206\u914d\u65b9\u6848\u7684 \u5206\u6570 \u662f\u6240\u6709 k \u4e2a\u80cc\u5305\u7684\u4ef7\u683c\u4e4b\u548c\u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de\u6240\u6709\u5206\u914d\u65b9\u6848\u4e2d\uff0c\u6700\u5927\u5206\u6570 \u4e0e \u6700\u5c0f\u5206\u6570 \u7684 \u5dee\u503c \u4e3a\u591a\u5c11\u3002</p> <p>\u5982\u679c1\u4e2a\u5305\u4e2d\u53ea\u67091\u4e2a\u5143\u7d20, \u8ba1\u7b972\u6b21</p> <p>\u8ba1\u7b97\u622a\u51fa\u6765\u7684\u5185\u90e8\u7684\u65ad\u70b9\u548c, \u6c42\u957f\u5ea6\u4e3ak\u7684\u6700\u5927\u548c\u6700\u5c0f\u548c\u4e4b\u5dee</p> <pre><code>class Solution {\n    public long putMarbles(int[] weights, int k) {\n        int n = weights.length;\n        int[] gapSum = new int[n - 1];\n        for (int i = 0; i &lt; n - 1; i++) {\n            gapSum[i] = weights[i] + weights[i + 1];\n        }\n        Arrays.sort(gapSum);\n        long max = 0;\n        long min = 0;\n        for (int i = 0; i &lt; k - 1; i++) {\n            min += gapSum[i];\n            max += gapSum[n - 2 - i];\n        }\n        return max - min;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/","title":"\u94fe\u8868","text":""},{"location":"leetcode/%E9%93%BE%E8%A1%A8/#_2","title":"\u5f52\u5e76\u94fe\u8868","text":""},{"location":"leetcode/%E9%93%BE%E8%A1%A8/#445-ii-mid","title":"445. \u4e24\u6570\u76f8\u52a0 II mid","text":"<p>\u5251\u6307 Offer II 025. \u94fe\u8868\u4e2d\u7684\u4e24\u6570\u76f8\u52a0</p> <p>\u7ed9\u4f60\u4e24\u4e2a \u975e\u7a7a \u94fe\u8868\u6765\u4ee3\u8868\u4e24\u4e2a\u975e\u8d1f\u6574\u6570\u3002\u6570\u5b57\u6700\u9ad8\u4f4d\u4f4d\u4e8e\u94fe\u8868\u5f00\u59cb\u4f4d\u7f6e\u3002\u5b83\u4eec\u7684\u6bcf\u4e2a\u8282\u70b9\u53ea\u5b58\u50a8\u4e00\u4f4d\u6570\u5b57\u3002\u5c06\u8fd9\u4e24\u6570\u76f8\u52a0\u4f1a\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u5b57\u90fd\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002</p> <p>\u7528\u6808\u8f85\u52a9\u5b58\u50a8</p> <pre><code>class Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        Deque&lt;Integer&gt; stack1 = new LinkedList&lt;&gt;();\n        Deque&lt;Integer&gt; stack2 = new LinkedList&lt;&gt;();\n        while (l1 != null) {\n            stack1.push(l1.val);\n            l1 = l1.next;\n        }\n        while (l2 != null) {\n            stack2.push(l2.val);\n            l2 = l2.next;\n        }\n        int carry = 0;\n        ListNode tail = null;\n        while (!stack1.isEmpty() || !stack2.isEmpty()) {\n            int val = 0;\n            if (!stack1.isEmpty()) val += stack1.pop();\n            if (!stack2.isEmpty()) val += stack2.pop();\n            val += carry;\n            carry = val / 10;\n            val = val % 10;\n            ListNode node = new ListNode(val);\n            node.next = tail;\n            tail = node;\n        }\n        if (carry != 0) {\n            ListNode node = new ListNode(carry);\n            node.next = tail;\n            tail = node;\n        }\n        return tail;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/#_3","title":"\u627e\u503c","text":""},{"location":"leetcode/%E9%93%BE%E8%A1%A8/#876-easy","title":"876. \u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9 easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5934\u7ed3\u70b9\u4e3a head \u7684\u975e\u7a7a\u5355\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9\u3002</p> <p>\u5982\u679c\u6709\u4e24\u4e2a\u4e2d\u95f4\u7ed3\u70b9\uff0c\u5219\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u4e2d\u95f4\u7ed3\u70b9\u3002</p> <pre><code>class Solution {\n    public ListNode middleNode(ListNode head) {\n        ListNode p1 = head, p2 = head;\n        boolean flag = true;\n        while (p1 != null) {\n            flag ^= true;\n            if (flag) p2 = p2.next;\n            p1 = p1.next;\n        }\n        return p2;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/#_4","title":"\u5220\u9664\u8282\u70b9","text":""},{"location":"leetcode/%E9%93%BE%E8%A1%A8/#offer-18-easy","title":"\u5251\u6307 Offer 18. \u5220\u9664\u94fe\u8868\u7684\u8282\u70b9 easy","text":"<p>\u7ed9\u5b9a\u5355\u5411\u94fe\u8868\u7684\u5934\u6307\u9488\u548c\u4e00\u4e2a\u8981\u5220\u9664\u7684\u8282\u70b9\u7684\u503c\uff0c\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5220\u9664\u8be5\u8282\u70b9\u3002</p> <p>\u8fd4\u56de\u5220\u9664\u540e\u7684\u94fe\u8868\u7684\u5934\u8282\u70b9\u3002</p> <pre><code>class Solution {\n    public ListNode deleteNode(ListNode head, int val) {\n        ListNode zero = new ListNode(0);\n        zero.next = head;\n        ListNode node = zero;\n        while(node!=null&amp;&amp;node.next!=null){\n            if(node.next.val==val){\n                node.next = node.next.next;\n            }   \n            node = node.next;\n        }\n        return zero.next;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/#_5","title":"\u62c6\u5206","text":""},{"location":"leetcode/%E9%93%BE%E8%A1%A8/#725-mid","title":"725. \u5206\u9694\u94fe\u8868 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5934\u7ed3\u70b9\u4e3a head \u7684\u5355\u94fe\u8868\u548c\u4e00\u4e2a\u6574\u6570 k \uff0c\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u5c06\u94fe\u8868\u5206\u9694\u4e3a k \u4e2a\u8fde\u7eed\u7684\u90e8\u5206\u3002</p> <p>\u6bcf\u90e8\u5206\u7684\u957f\u5ea6\u5e94\u8be5\u5c3d\u53ef\u80fd\u7684\u76f8\u7b49\uff1a\u4efb\u610f\u4e24\u90e8\u5206\u7684\u957f\u5ea6\u5dee\u8ddd\u4e0d\u80fd\u8d85\u8fc7 1 \u3002\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u6709\u4e9b\u90e8\u5206\u4e3a null \u3002</p> <p>\u8fd9 k \u4e2a\u90e8\u5206\u5e94\u8be5\u6309\u7167\u5728\u94fe\u8868\u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\u6392\u5217\uff0c\u5e76\u4e14\u6392\u5728\u524d\u9762\u7684\u90e8\u5206\u7684\u957f\u5ea6\u5e94\u8be5\u5927\u4e8e\u6216\u7b49\u4e8e\u6392\u5728\u540e\u9762\u7684\u957f\u5ea6\u3002</p> <p>\u8fd4\u56de\u4e00\u4e2a\u7531\u4e0a\u8ff0 k \u90e8\u5206\u7ec4\u6210\u7684\u6570\u7ec4\u3002</p> <p>\u62c6\u6210\u6876, \u904d\u5386 table</p> <pre><code>class Solution {\n    public ListNode[] splitListToParts(ListNode head, int k) {\n        ListNode node = head;\n        int cnt = 0;\n        while (node != null) {\n            cnt++;\n            node = node.next;\n        }\n\n        int size = cnt / k;\n        int mod = cnt % k;\n\n        ListNode[] res = new ListNode[k];\n        node = head;\n\n        for (int i = 0; i &lt; k &amp;&amp; node != null; i++) {\n            res[i] = node;\n            // \u8981\u628amod\u5206\u6563\u5230\u524d\u9762\n            int curSize = size + (mod-- &gt; 0 ? 1 : 0);\n            for (int j = 0; j &lt; curSize - 1; j++) {\n                node = node.next;\n            }\n            ListNode next = node.next;\n            node.next = null;\n            node = next;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/#_6","title":"\u91cd\u6392","text":""},{"location":"leetcode/%E9%93%BE%E8%A1%A8/#_7","title":"\u5faa\u73af\u94fe\u8868\u63d2\u5165","text":""},{"location":"leetcode/%E9%93%BE%E8%A1%A8/#offer-ii-029-mid","title":"\u5251\u6307 Offer II 029. \u6392\u5e8f\u7684\u5faa\u73af\u94fe\u8868 mid","text":"<p>\u7ed9\u5b9a\u5faa\u73af\u5355\u8c03\u975e\u9012\u51cf\u5217\u8868\u4e2d\u7684\u4e00\u4e2a\u70b9\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u5411\u8fd9\u4e2a\u5217\u8868\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u5143\u7d20 insertVal \uff0c\u4f7f\u8fd9\u4e2a\u5217\u8868\u4ecd\u7136\u662f\u5faa\u73af\u5347\u5e8f\u7684\u3002</p> <p>\u7ed9\u5b9a\u7684\u53ef\u4ee5\u662f\u8fd9\u4e2a\u5217\u8868\u4e2d\u4efb\u610f\u4e00\u4e2a\u9876\u70b9\u7684\u6307\u9488\uff0c\u5e76\u4e0d\u4e00\u5b9a\u662f\u8fd9\u4e2a\u5217\u8868\u4e2d\u6700\u5c0f\u5143\u7d20\u7684\u6307\u9488\u3002</p> <p>\u5982\u679c\u6709\u591a\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u63d2\u5165\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u9009\u62e9\u4efb\u610f\u4e00\u4e2a\u4f4d\u7f6e\u63d2\u5165\u65b0\u7684\u503c\uff0c\u63d2\u5165\u540e\u6574\u4e2a\u5217\u8868\u4ecd\u7136\u4fdd\u6301\u6709\u5e8f\u3002</p> <p>\u5982\u679c\u5217\u8868\u4e3a\u7a7a\uff08\u7ed9\u5b9a\u7684\u8282\u70b9\u662f null\uff09\uff0c\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u5faa\u73af\u6709\u5e8f\u5217\u8868\u5e76\u8fd4\u56de\u8fd9\u4e2a\u8282\u70b9\u3002\u5426\u5219\u3002\u8bf7\u8fd4\u56de\u539f\u5148\u7ed9\u5b9a\u7684\u8282\u70b9\u3002</p> <p>\u6ce8\u610f\u4e00\u4e0b\u5168\u662f\u76f8\u540c\u5143\u7d20\u7684\u60c5\u51b5</p> <pre><code>class Solution {\n    public Node insert(Node head, int insertVal) {\n        if (head == null) {\n            head = new Node(insertVal);\n            head.next = head;\n            return head;\n        }\n        Node node = head.next;\n        boolean flag = false;\n        while (node != head) {\n            if (node.val &lt;= node.next.val) {\n                if (insertVal &gt;= node.val &amp;&amp; insertVal &lt;= node.next.val) {\n                    insert(node, node.next, insertVal);\n                    flag = true;\n                    break;\n                }\n            } else {\n                if (insertVal &gt;= node.val || insertVal &lt;= node.next.val) {\n                    insert(node, node.next, insertVal);\n                    flag = true;\n                    break;\n                }\n            }\n            node = node.next;\n        }\n        // \u5168\u662f\u91cd\u590d\u5143\u7d20\u7684\u60c5\u51b5\n        if (!flag) insert(head, head.next, insertVal);\n        return head;\n    }\n\n    private void insert(Node pre, Node next, int val) {\n        pre.next = new Node(val);\n        pre.next.next = next;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/#_8","title":"\u6253\u5370","text":""},{"location":"leetcode/%E9%93%BE%E8%A1%A8/#offer-06-easy","title":"\u5251\u6307 Offer 06. \u4ece\u5c3e\u5230\u5934\u6253\u5370\u94fe\u8868 easy","text":"<p>\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u4ece\u5c3e\u5230\u5934\u53cd\u8fc7\u6765\u8fd4\u56de\u6bcf\u4e2a\u8282\u70b9\u7684\u503c\uff08\u7528\u6570\u7ec4\u8fd4\u56de\uff09\u3002</p> <pre><code>class Solution {\n    public int[] reversePrint(ListNode head) {\n        int len = 0;\n        ListNode node = head;\n        while (node != null) {\n            len++;\n            node = node.next;\n        }\n        int[] res = new int[len];\n        node = head;\n        for (int i = len - 1; i &gt;= 0; i--) {\n            res[i] = node.val;\n            node = node.next;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%93%BE%E8%A1%A8/#_9","title":"\u590d\u6742\u94fe\u8868","text":""},{"location":"leetcode/%E9%93%BE%E8%A1%A8/#430-mid","title":"430. \u6241\u5e73\u5316\u591a\u7ea7\u53cc\u5411\u94fe\u8868 mid","text":"<p>\u5251\u6307 Offer II 028. \u5c55\u5e73\u591a\u7ea7\u53cc\u5411\u94fe\u8868</p> <p>\u591a\u7ea7\u53cc\u5411\u94fe\u8868\u4e2d\uff0c\u9664\u4e86\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u548c\u524d\u4e00\u4e2a\u8282\u70b9\u6307\u9488\u4e4b\u5916\uff0c\u5b83\u8fd8\u6709\u4e00\u4e2a\u5b50\u94fe\u8868\u6307\u9488\uff0c\u53ef\u80fd\u6307\u5411\u5355\u72ec\u7684\u53cc\u5411\u94fe\u8868\u3002\u8fd9\u4e9b\u5b50\u5217\u8868\u4e5f\u53ef\u80fd\u4f1a\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u81ea\u5df1\u7684\u5b50\u9879\uff0c\u4f9d\u6b64\u7c7b\u63a8\uff0c\u751f\u6210\u591a\u7ea7\u6570\u636e\u7ed3\u6784\u3002</p> <p>\u7ed9\u5b9a\u4f4d\u4e8e\u5217\u8868\u7b2c\u4e00\u7ea7\u7684\u5934\u8282\u70b9\uff0c\u8bf7\u6241\u5e73\u5316\u5217\u8868\uff0c\u5373\u5c06\u8fd9\u6837\u7684\u591a\u7ea7\u53cc\u5411\u94fe\u8868\u5c55\u5e73\u6210\u666e\u901a\u7684\u53cc\u5411\u94fe\u8868\uff0c\u4f7f\u6240\u6709\u7ed3\u70b9\u51fa\u73b0\u5728\u5355\u7ea7\u53cc\u94fe\u8868\u4e2d\u3002</p> <pre><code>class Solution {\n    public Node flatten(Node head) {\n        flattenReturnTail(head);\n        return head;\n    }\n    public Node flattenReturnTail(Node head) {\n        if (head == null) return null;\n        Node pre = null;\n        while (head != null) {\n            if (head.child != null) {\n                // \u8bb0\u4e00\u4e0b\u4e0b\u4e00\u4e2a\u8282\u70b9, @Nullable\n                Node next = head.next;\n                // \u5b50\u94fe\u8868\u7684\u5c3e\u90e8\n                Node childTail = flattenReturnTail(head.child);\n                // \u5b50\u94fe\u8868\u7684\u5934\u90e8\n                Node childHead = head.child;\n                head.next = childHead;\n                childHead.prev = head;\n                head.child = null;\n                // \u5b50\u94fe\u8868\u5c3e\u90e8\u8fde\u63a5\n                childTail.next = next;\n                if (next != null) next.prev = childTail;\n                head = childTail;\n            }\n            pre = head;\n            head = head.next;\n        }\n        return pre;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%9B%86%E5%90%88/","title":"\u96c6\u5408","text":""},{"location":"leetcode/%E9%9B%86%E5%90%88/#_2","title":"\u96c6\u5408\u4e2d\u7684\u5143\u7d20","text":""},{"location":"leetcode/%E9%9B%86%E5%90%88/#offer-50-easy","title":"\u5251\u6307 Offer 50. \u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26 easy","text":"<p>\u5728\u5b57\u7b26\u4e32 s \u4e2d\u627e\u51fa\u7b2c\u4e00\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5b57\u7b26\u3002\u5982\u679c\u6ca1\u6709\uff0c\u8fd4\u56de\u4e00\u4e2a\u5355\u7a7a\u683c\u3002 s \u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002</p> <p>\u6876\u8ba1\u6570</p> <pre><code>class Solution {\n    public char firstUniqChar(String s) {\n        if (s == null) return ' ';\n        char[] chars = s.toCharArray();\n        int[] cnt = new int[128];\n        for (char i : chars) {\n            cnt[i]++;\n        }\n        for (char i : chars) {\n            if (cnt[i] == 1) return i;\n        }\n        return ' ';\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%9B%86%E5%90%88/#offer-53-ii-0n-1-easy","title":"\u5251\u6307 Offer 53 - II. 0\uff5en-1\u4e2d\u7f3a\u5931\u7684\u6570\u5b57 easy","text":"<p>\u4e00\u4e2a\u957f\u5ea6\u4e3an-1\u7684\u9012\u589e\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u6570\u5b57\u90fd\u662f\u552f\u4e00\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u6570\u5b57\u90fd\u5728\u8303\u56f40\uff5en-1\u4e4b\u5185\u3002\u5728\u8303\u56f40\uff5en-1\u5185\u7684n\u4e2a\u6570\u5b57\u4e2d\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u6570\u5b57\u4e0d\u5728\u8be5\u6570\u7ec4\u4e2d\uff0c\u8bf7\u627e\u51fa\u8fd9\u4e2a\u6570\u5b57\u3002</p> <pre><code>class Solution {\n    public int missingNumber(int[] nums) {\n        int n = nums.length + 1;\n        for (int i = 0; i &lt; n - 1; i++) {\n            if (nums[i] != i) return i;\n        }\n        return n - 1;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%9B%86%E5%90%88/#offer-61-easy","title":"\u5251\u6307 Offer 61. \u6251\u514b\u724c\u4e2d\u7684\u987a\u5b50 easy","text":"<p>\u4ece\u82e5\u5e72\u526f\u6251\u514b\u724c\u4e2d\u968f\u673a\u62bd 5 \u5f20\u724c\uff0c\u5224\u65ad\u662f\u4e0d\u662f\u4e00\u4e2a\u987a\u5b50\uff0c\u5373\u8fd95\u5f20\u724c\u662f\u4e0d\u662f\u8fde\u7eed\u7684\u30022\uff5e10\u4e3a\u6570\u5b57\u672c\u8eab\uff0cA\u4e3a1\uff0cJ\u4e3a11\uff0cQ\u4e3a12\uff0cK\u4e3a13\uff0c\u800c\u5927\u3001\u5c0f\u738b\u4e3a 0 \uff0c\u53ef\u4ee5\u770b\u6210\u4efb\u610f\u6570\u5b57\u3002A \u4e0d\u80fd\u89c6\u4e3a 14\u3002</p> <p>\u5224\u65ad\u96c6\u5408\u4e2d\u7684\u5143\u7d20\u662f\u5426\u6784\u6210\u7b49\u5dee\u6570\u5217</p> <p>\u901a\u8fc7\u5143\u7d20\u6570\u91cf\u548c\u6700\u5927\u6700\u5c0f\u503c\u5224\u65ad</p> <pre><code>class Solution {\n    public boolean isStraight(int[] nums) {\n        int joker = 0;\n        Arrays.sort(nums);\n        for (int i = 0; i &lt; 4; i++) {\n            if (nums[i] == 0) joker++;\n            else if (nums[i] == nums[i + 1]) return false;\n        }\n        return nums[4] - nums[joker] &lt; 5;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%9B%86%E5%90%88/#645-easy","title":"645. \u9519\u8bef\u7684\u96c6\u5408 easy","text":"<p>\u96c6\u5408 s \u5305\u542b\u4ece 1 \u5230 n \u7684\u6574\u6570\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u56e0\u4e3a\u6570\u636e\u9519\u8bef\uff0c\u5bfc\u81f4\u96c6\u5408\u91cc\u9762\u67d0\u4e00\u4e2a\u6570\u5b57\u590d\u5236\u4e86\u6210\u4e86\u96c6\u5408\u91cc\u9762\u7684\u53e6\u5916\u4e00\u4e2a\u6570\u5b57\u7684\u503c\uff0c\u5bfc\u81f4\u96c6\u5408 \u4e22\u5931\u4e86\u4e00\u4e2a\u6570\u5b57 \u5e76\u4e14 \u6709\u4e00\u4e2a\u6570\u5b57\u91cd\u590d \u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums \u4ee3\u8868\u4e86\u96c6\u5408 S \u53d1\u751f\u9519\u8bef\u540e\u7684\u7ed3\u679c\u3002</p> <p>\u8bf7\u4f60\u627e\u51fa\u91cd\u590d\u51fa\u73b0\u7684\u6574\u6570\uff0c\u518d\u627e\u5230\u4e22\u5931\u7684\u6574\u6570\uff0c\u5c06\u5b83\u4eec\u4ee5\u6570\u7ec4\u7684\u5f62\u5f0f\u8fd4\u56de\u3002</p> <p>\u54c8\u5e0c</p> <pre><code>class Solution {\n    public int[] findErrorNums(int[] nums) {\n        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();\n        int r1 = -1, r2 = -1;\n        for (int e : nums) {\n            if (!set.add(e)) r1 = e;\n        }\n\n        for (int i = 1; i &lt;= nums.length; i++) {\n            if (!set.contains(i)) {\n                r2 = i;\n                break;\n            }\n        }\n        return new int[]{r1, r2};\n    }\n}\n</code></pre> <p>\u4ea4\u6362</p> <p>\u5c06\u5143\u7d20 i \u6620\u5c04\u5230\u7d22\u5f15 i-1 \u7684\u6876\u4f4d\u7f6e</p> <pre><code>class Solution {\n    public int[] findErrorNums(int[] nums) {\n        for (int i = 0; i &lt; nums.length; i++) {\n            // if \u5f53\u524d\u6876\u4e0d\u5bf9 &amp;&amp; \u76ee\u6807\u6876\u4e0d\u5bf9: \u4e0d\u505c\u5730\u4ea4\u6362\n            while (nums[i] != i + 1 &amp;&amp; nums[nums[i] - 1] != nums[i]) {\n                swap(nums, i, nums[i] - 1);\n            }\n        }\n\n        for (int i = 0; i &lt; nums.length; i++) {\n            // \u6876\u4e2d\u6709\u975e\u6cd5\u5143\u7d20\n            if (nums[i] != i + 1) {\n                return new int[]{nums[i], i + 1};\n            }\n        }\n        return null;\n    }\n\n\n    private void swap(int[] nums, int i, int j) {\n        nums[i] = nums[i] ^ nums[j];\n        nums[j] = nums[i] ^ nums[j];\n        nums[i] = nums[i] ^ nums[j];\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%9B%86%E5%90%88/#2404-easy","title":"2404. \u51fa\u73b0\u6700\u9891\u7e41\u7684\u5076\u6570\u5143\u7d20 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u8fd4\u56de\u51fa\u73b0\u6700\u9891\u7e41\u7684\u5076\u6570\u5143\u7d20\u3002</p> <p>\u5982\u679c\u5b58\u5728\u591a\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u7d20\uff0c\u53ea\u9700\u8981\u8fd4\u56de \u6700\u5c0f \u7684\u4e00\u4e2a\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u5143\u7d20\uff0c\u8fd4\u56de -1\u3002</p> <p>\u53ea\u7edf\u8ba1\u5076\u6570\uff0c\u7136\u540e\u627e\u51fa\u6700\u5927\u7684</p> <pre><code>class Solution {\n    public int mostFrequentEven(int[] nums) {\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n        for (int e : nums) {\n            if ((e &amp; 1) == 1) continue;\n            map.merge(e, 1, Integer::sum);\n        }\n        if (map.isEmpty()) return -1;\n        Map.Entry&lt;Integer, Integer&gt; res = null;\n        for (Map.Entry&lt;Integer, Integer&gt; e : map.entrySet()) {\n            if (res == null) res = e;\n            else if (e.getValue() &gt; res.getValue()) res = e;\n            else if (Objects.equals(e.getValue(), res.getValue()) &amp;&amp; e.getKey() &lt; res.getKey()) res = e;\n        }\n        return res.getKey();\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%9B%86%E5%90%88/#2432-easy","title":"2432. \u5904\u7406\u7528\u65f6\u6700\u957f\u7684\u90a3\u4e2a\u4efb\u52a1\u7684\u5458\u5de5 easy","text":"<p>\u5171\u6709 n \u4f4d\u5458\u5de5\uff0c\u6bcf\u4f4d\u5458\u5de5\u90fd\u6709\u4e00\u4e2a\u4ece 0 \u5230 n - 1 \u7684\u552f\u4e00 id \u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 logs \uff0c\u5176\u4e2d logs[i] = [idi, leaveTimei] \uff1a</p> <ul> <li>idi \u662f\u5904\u7406\u7b2c i \u4e2a\u4efb\u52a1\u7684\u5458\u5de5\u7684 id \uff0c\u4e14</li> <li>leaveTimei \u662f\u5458\u5de5\u5b8c\u6210\u7b2c i \u4e2a\u4efb\u52a1\u7684\u65f6\u523b\u3002\u6240\u6709 leaveTimei \u7684\u503c\u90fd\u662f \u552f\u4e00 \u7684\u3002</li> </ul> <p>\u6ce8\u610f\uff0c\u7b2c i \u4e2a\u4efb\u52a1\u5728\u7b2c (i - 1) \u4e2a\u4efb\u52a1\u7ed3\u675f\u540e\u7acb\u5373\u5f00\u59cb\uff0c\u4e14\u7b2c 0 \u4e2a\u4efb\u52a1\u4ece\u65f6\u523b 0 \u5f00\u59cb\u3002</p> <p>\u8fd4\u56de\u5904\u7406\u7528\u65f6\u6700\u957f\u7684\u90a3\u4e2a\u4efb\u52a1\u7684\u5458\u5de5\u7684 id \u3002\u5982\u679c\u5b58\u5728\u4e24\u4e2a\u6216\u591a\u4e2a\u5458\u5de5\u540c\u65f6\u6ee1\u8db3\uff0c\u5219\u8fd4\u56de\u51e0\u4eba\u4e2d \u6700\u5c0f \u7684 id \u3002</p> <pre><code>class Solution {\n    public int hardestWorker(int n, int[][] logs) {\n        int pre = 0;\n        int max = 0;\n        int res = -1;\n        for (int[] log : logs) {\n            int temp = log[1] - pre;\n            if (temp &gt; max || temp == max &amp;&amp; log[0] &lt; res) {\n                max = temp;\n                res = log[0];\n            }\n            pre = log[1];\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%9B%86%E5%90%88/#_3","title":"\u4ea4\u96c6","text":""},{"location":"leetcode/%E9%9B%86%E5%90%88/#6228-mid","title":"6228. \u8ddd\u79bb\u5b57\u5178\u4e24\u6b21\u7f16\u8f91\u4ee5\u5185\u7684\u5355\u8bcd mid","text":"<p>\u7ed9\u4f60\u4e24\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 queries \u548c dictionary \u3002\u6570\u7ec4\u4e2d\u6240\u6709\u5355\u8bcd\u90fd\u53ea\u5305\u542b\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\uff0c\u4e14\u957f\u5ea6\u90fd\u76f8\u540c\u3002</p> <p>\u4e00\u6b21 \u7f16\u8f91 \u4e2d\uff0c\u4f60\u53ef\u4ee5\u4ece queries \u4e2d\u9009\u62e9\u4e00\u4e2a\u5355\u8bcd\uff0c\u5c06\u4efb\u610f\u4e00\u4e2a\u5b57\u6bcd\u4fee\u6539\u6210\u4efb\u4f55\u5176\u4ed6\u5b57\u6bcd\u3002\u4ece queries \u4e2d\u627e\u5230\u6240\u6709\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u5b57\u7b26\u4e32\uff1a\u4e0d\u8d85\u8fc7 \u4e24\u6b21\u7f16\u8f91\u5185\uff0c\u5b57\u7b26\u4e32\u4e0e dictionary \u4e2d\u67d0\u4e2a\u5b57\u7b26\u4e32\u76f8\u540c\u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de queries \u4e2d\u7684\u5355\u8bcd\u5217\u8868\uff0c\u8fd9\u4e9b\u5355\u8bcd\u8ddd\u79bb dictionary \u4e2d\u7684\u5355\u8bcd \u7f16\u8f91\u6b21\u6570 \u4e0d\u8d85\u8fc7 \u4e24\u6b21 \u3002\u5355\u8bcd\u8fd4\u56de\u7684\u987a\u5e8f\u9700\u8981\u4e0e queries \u4e2d\u539f\u672c\u987a\u5e8f\u76f8\u540c\u3002</p> <p>Stream</p> <pre><code>class Solution {\n    public List&lt;String&gt; twoEditWords(String[] queries, String[] dictionary) {\n        return Stream.of(queries).filter(q -&gt;\n                Stream.of(dictionary).anyMatch(d -&gt;\n                        IntStream.range(0, d.length())\n                                .filter(o -&gt; q.charAt(o) != d.charAt(o))\n                                .count() &lt; 3\n                )\n        ).toList();\n    }\n}\n</code></pre> <p>\u4f20\u7edf\u89e3\u6cd5</p> <pre><code>class Solution {\n    String[] dic;\n\n    public List&lt;String&gt; twoEditWords(String[] queries, String[] dictionary) {\n        dic = dictionary;\n        List&lt;String&gt; res = new ArrayList&lt;&gt;();\n        for (String query : queries) {\n            if (check(query)) res.add(query);\n        }\n        return res;\n    }\n\n    boolean check(String s) {\n        for (String d : dic) {\n            int cnt = 0;\n            boolean ok = true;\n            for (int i = 0; i &lt; s.length(); i++) {\n                if (s.charAt(i) != d.charAt(i)) {\n                    cnt++;\n                    if (cnt &gt; 2) {\n                        ok = false;\n                        break;\n                    }\n                }\n            }\n            if (ok) return true;\n        }\n        return false;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%9B%86%E5%90%88/#_4","title":"\u7b5b\u9009","text":""},{"location":"leetcode/%E9%9B%86%E5%90%88/#6221-mid","title":"6221. \u6700\u6d41\u884c\u7684\u89c6\u9891\u521b\u4f5c\u8005 mid","text":"<p>\u7ed9\u4f60\u4e24\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 creators \u548c ids \uff0c\u548c\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 views \uff0c\u6240\u6709\u6570\u7ec4\u7684\u957f\u5ea6\u90fd\u662f n \u3002\u5e73\u53f0\u4e0a\u7b2c i \u4e2a\u89c6\u9891\u8005\u662f creator[i] \uff0c\u89c6\u9891\u5206\u914d\u7684 id \u662f ids[i] \uff0c\u4e14\u64ad\u653e\u91cf\u4e3a views[i] \u3002</p> <p>\u89c6\u9891\u521b\u4f5c\u8005\u7684 \u6d41\u884c\u5ea6 \u662f\u8be5\u521b\u4f5c\u8005\u7684 \u6240\u6709 \u89c6\u9891\u7684\u64ad\u653e\u91cf\u7684 \u603b\u548c \u3002\u8bf7\u627e\u51fa\u6d41\u884c\u5ea6 \u6700\u9ad8 \u521b\u4f5c\u8005\u4ee5\u53ca\u8be5\u521b\u4f5c\u8005\u64ad\u653e\u91cf \u6700\u5927 \u7684\u89c6\u9891\u7684 id \u3002</p> <ul> <li>\u5982\u679c\u5b58\u5728\u591a\u4e2a\u521b\u4f5c\u8005\u6d41\u884c\u5ea6\u90fd\u6700\u9ad8\uff0c\u5219\u9700\u8981\u627e\u51fa\u6240\u6709\u7b26\u5408\u6761\u4ef6\u7684\u521b\u4f5c\u8005\u3002</li> <li>\u5982\u679c\u67d0\u4e2a\u521b\u4f5c\u8005\u5b58\u5728\u591a\u4e2a\u64ad\u653e\u91cf\u6700\u9ad8\u7684\u89c6\u9891\uff0c\u5219\u53ea\u9700\u8981\u627e\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 id \u3002</li> </ul> <p>\u8fd4\u56de\u4e00\u4e2a\u4e8c\u7ef4\u5b57\u7b26\u4e32\u6570\u7ec4 answer \uff0c\u5176\u4e2d answer[i] = [creatori, idi] \u8868\u793a creatori \u7684\u6d41\u884c\u5ea6 \u6700\u9ad8 \u4e14\u5176\u6700\u6d41\u884c\u7684\u89c6\u9891 id \u662f idi \uff0c\u53ef\u4ee5\u6309\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u8be5\u7ed3\u679c\u3002</p> <p>\u9700\u8981 sum(view) group by creator, \u627e\u5230sum(view)\u6700\u5927\u7684 creator list \u9700\u8981\u4eceids\u91cc\u627e\u5230view\u6700\u591a(\u5b57\u5178\u5e8f\u6700\u5c0f)\u7684id</p> <p>\u52a8\u6001\u7ef4\u62a4, \u83b7\u5f97\u6700\u5927\u503c\u5217\u8868 \u5783\u573e</p> <pre><code>class Solution {\n    public List&lt;List&lt;String&gt;&gt; mostPopularCreator(String[] creators, String[] ids, int[] views) {\n        // creator -&gt; idx\n        Map&lt;String, List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n        for (int i = 0; i &lt; views.length; i++) {\n            List&lt;Integer&gt; idxList = map.computeIfAbsent(creators[i], k -&gt; new ArrayList&lt;&gt;());\n            idxList.add(i);\n        }\n        List&lt;String&gt; creatorList = new ArrayList&lt;&gt;();\n        int maxView = Integer.MIN_VALUE;\n        // sum views group by creator, get top creator, \u52a8\u6001\u7ef4\u62a4\u83b7\u5f97\u6700\u5927\u503c\u5217\u8868\n        for (Map.Entry&lt;String, List&lt;Integer&gt;&gt; entry : map.entrySet()) {\n            String k = entry.getKey();\n            List&lt;Integer&gt; v = entry.getValue();\n            int sum = 0;\n            for (Integer idx : v) {\n                sum += views[idx];\n            }\n            if (sum &gt; maxView) {\n                maxView = sum;\n                creatorList.clear();\n                creatorList.add(k);\n            } else if (sum == maxView) {\n                creatorList.add(k);\n            }\n        }\n        List&lt;List&lt;String&gt;&gt; res = new ArrayList&lt;&gt;();\n        // creator and max(view)\n        for (String creator : creatorList) {\n            List&lt;Integer&gt; idxList = map.get(creator);\n            List&lt;String&gt; l = new ArrayList&lt;&gt;();\n            l.add(creator);\n            Integer idx = null;\n            // find max(view)\n            for (Integer i : idxList) {\n                if (idx == null) {\n                    idx = i;\n                    continue;\n                }\n                if (views[idx] &lt; views[i] ||\n                        views[idx] == views[i] &amp;&amp; ids[i].compareTo(ids[idx]) &lt; 0) idx = i;\n            }\n            assert idx != null;\n            l.add(ids[idx]);\n            res.add(l);\n        }\n        return res;\n    }\n}\n</code></pre> <p>\u4e0d\u52a8\u6001\u7ef4\u62a4\u6700\u5927\u503c\u5217\u8868; \u7edf\u8ba1\u6700\u5927\u503c, \u4e8c\u6b21\u904d\u5386\u65f6\u6839\u636e\u6700\u5927\u503c\u8fc7\u6ee4</p> <pre><code>class Solution {\n    public List&lt;List&lt;String&gt;&gt; mostPopularCreator(String[] creators, String[] ids, int[] views) {\n        // creator -&gt; sum(view)\n        HashMap&lt;String, Integer&gt; cnt = new HashMap&lt;&gt;();\n        // creator -&gt; idx\n        HashMap&lt;String, PriorityQueue&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n        int max = 0;\n        for (int i = 0; i &lt; creators.length; i++) {\n            PriorityQueue&lt;Integer&gt; idxList = map.computeIfAbsent(creators[i], k -&gt; new PriorityQueue&lt;&gt;((a, b) -&gt; views[a] == views[b] ? ids[a].compareTo(ids[b]) : views[b] - views[a]));\n            idxList.add(i);\n            cnt.merge(creators[i], views[i], Integer::sum);\n            max = Math.max(max, cnt.get(creators[i]));\n        }\n        List&lt;List&lt;String&gt;&gt; list = new ArrayList&lt;&gt;();\n        for (Map.Entry&lt;String, Integer&gt; entry : cnt.entrySet()) {\n            if (entry.getValue() == max) {\n                String k = entry.getKey();\n                Integer id = map.get(k).element();\n                list.add(List.of(k, ids[id]));\n            }\n        }\n        return list;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%9B%86%E5%90%88/#_5","title":"\u96c6\u5408\u4e2d\u7684\u7279\u6b8a\u5143\u7d20","text":"<p>\u5143\u7d20\u4e2d\u627e\u552f\u4e00\u4e0d\u540c: \u9009\u62e9\u4e00\u4e2a\u5143\u7d20\u4e3a\u4e3b\u5143, \u8ddf\u5176\u4ed6\u5143\u7d20\u6bd4\u8f83, \u7b2c\u4e00\u6b21diff &amp;&amp; (\u6ca1\u6709\u5176\u4ed6diff || \u8fd8\u6709\u5176\u4ed6diff)</p>"},{"location":"leetcode/%E9%9B%86%E5%90%88/#6225-easy","title":"6225. \u5dee\u503c\u6570\u7ec4\u4e0d\u540c\u7684\u5b57\u7b26\u4e32 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 words \uff0c\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u957f\u5ea6\u90fd\u4e3a n \u3002</p> <p>\u6bcf\u4e2a\u5b57\u7b26\u4e32 words[i]\u53ef\u4ee5\u88ab\u8f6c\u5316\u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3a n - 1 \u7684 \u5dee\u503c\u6574\u6570\u6570\u7ec4 difference[i]\uff0c\u5176\u4e2d\u5bf9\u4e8e 0 &lt;= j &lt;= n - 2 \u6709 difference[i][j] = words[i][j+1] - words[i][j]\u3002\u6ce8\u610f\u4e24\u4e2a\u5b57\u6bcd\u7684\u5dee\u503c\u5b9a\u4e49\u4e3a\u5b83\u4eec\u5728\u5b57\u6bcd\u8868\u4e2d \u4f4d\u7f6e \u4e4b\u5dee\uff0c\u4e5f\u5c31\u662f\u8bf4 'a'\u7684\u4f4d\u7f6e\u662f 0 \uff0c'b'\u7684\u4f4d\u7f6e\u662f 1 \uff0c'z'\u7684\u4f4d\u7f6e\u662f 25 \u3002</p> <ul> <li>\u6bd4\u65b9\u8bf4\uff0c\u5b57\u7b26\u4e32\"acb\"\u7684\u5dee\u503c\u6574\u6570\u6570\u7ec4\u662f[2 - 0, 1 - 2] = [2, -1]\u3002</li> </ul> <p>words \u4e2d\u6240\u6709\u5b57\u7b26\u4e32 \u9664\u4e86\u4e00\u4e2a\u5b57\u7b26\u4e32\u4ee5\u5916 \uff0c\u5176\u4ed6\u5b57\u7b26\u4e32\u7684\u5dee\u503c\u6574\u6570\u6570\u7ec4\u90fd\u76f8\u540c\u3002\u4f60\u9700\u8981\u627e\u5230\u90a3\u4e2a\u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u8bf7\u4f60\u8fd4\u56de words\u4e2d \u5dee\u503c\u6574\u6570\u6570\u7ec4 \u4e0d\u540c\u7684\u5b57\u7b26\u4e32\u3002</p> <p>Stream</p> <pre><code>class Solution {\n    public String oddString(String[] words) {\n        Map&lt;String, List&lt;String&gt;&gt; map = new HashMap&lt;&gt;();\n        for (String word : words) {\n            List&lt;String&gt; val = map.computeIfAbsent(\n                    Arrays.toString(\n                            IntStream.range(1, word.length())\n                                    .map(o -&gt; word.charAt(o) - word.charAt(o - 1))\n                                    .toArray()\n                    ),\n                    k -&gt; new ArrayList&lt;&gt;()\n            );\n            val.add(word);\n        }\n        for (List&lt;String&gt; list : map.values()) {\n            if (list.size() == 1) return list.get(0);\n        }\n        return null;\n    }\n}\n</code></pre> <p>\u66b4\u529b\u679a\u4e3e\u8ba1\u6570</p> <pre><code>class Solution {\n    public String oddString(String[] words) {\n        // diffArr -&gt; word\n        Map&lt;String, String&gt; map = new HashMap&lt;&gt;();\n        // diffArr -&gt; cnt\n        Map&lt;String, Integer&gt; cnt = new HashMap&lt;&gt;();\n        for (String s : words) {\n            int[] diffArr = new int[s.length() - 1];\n            for (int j = 1; j &lt; s.length(); j++) {\n                diffArr[j - 1] = s.charAt(j) - s.charAt(j - 1);\n            }\n            String key = Arrays.toString(diffArr);\n            cnt.merge(key, 1, Integer::sum);\n            map.put(key, s);\n        }\n        for (Map.Entry&lt;String, Integer&gt; e : cnt.entrySet()) {\n            if (e.getValue() == 1) return map.get(e.getKey());\n        }\n        return null;\n    }\n}\n</code></pre> <p>\u5224\u5b9a\u91cd\u590d\u6b21\u6570, \u63d0\u524d\u7ed3\u675f\u5faa\u73af</p> <pre><code>class Solution {\n    public String oddString(String[] words) {\n        int n = words.length;\n        int[][] diffArrMap = new int[n][];\n        String res = null;\n        boolean needCheck = false;\n        int cnt = 0;\n        for (int i = 0; i &lt; n; i++) {\n            String s = words[i];\n            int[] diffArr = new int[s.length() - 1];\n            for (int j = 1; j &lt; s.length(); j++) {\n                diffArr[j - 1] = s.charAt(j) - s.charAt(j - 1);\n            }\n            diffArrMap[i] = diffArr;\n            if (i == 0) continue;\n            // \u5143\u7d20\u4e2d\u627e\u552f\u4e00\u4e0d\u540c, \u9700\u8981\u4e00\u6b21diff &amp;&amp; (\u6ca1\u6709diff || \u5168\u662fdiff)\n            if (Arrays.equals(diffArrMap[0], diffArrMap[i])) {\n                if (needCheck) return res;\n            } else {\n                cnt++;\n                if (cnt &gt; 1) return words[0];\n                // \u6807\u8bb0\u53ef\u7591\u9009\u9879\n                res = words[i];\n                needCheck = true;\n            }\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%9B%86%E5%90%88/#_6","title":"\u5224\u65ad\u96c6\u5408\u662f\u5426\u76f8\u7b49","text":""},{"location":"leetcode/%E9%9B%86%E5%90%88/#438-mid","title":"438. \u627e\u5230\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5f02\u4f4d\u8bcd mid","text":"<p>\u5251\u6307 Offer II 015. \u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u53d8\u4f4d\u8bcd</p> <p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s \u548c p\uff0c\u627e\u5230 s \u4e2d\u6240\u6709 p \u7684 \u5f02\u4f4d\u8bcd \u7684\u5b50\u4e32\uff0c\u8fd4\u56de\u8fd9\u4e9b\u5b50\u4e32\u7684\u8d77\u59cb\u7d22\u5f15\u3002\u4e0d\u8003\u8651\u7b54\u6848\u8f93\u51fa\u7684\u987a\u5e8f\u3002</p> <p>\u5f02\u4f4d\u8bcd \u6307\u7531\u76f8\u540c\u5b57\u6bcd\u91cd\u6392\u5217\u5f62\u6210\u7684\u5b57\u7b26\u4e32\uff08\u5305\u62ec\u76f8\u540c\u7684\u5b57\u7b26\u4e32\uff09\u3002</p> <p>\u7528\u6570\u7ec4\u7edf\u8ba1, \u6ed1\u52a8\u7a97\u53e3\u4fee\u6539\u6570\u7ec4</p> <pre><code>class Solution {\n    public List&lt;Integer&gt; findAnagrams(String s, String p) {\n        if (s.length() &lt; p.length()) return new ArrayList&lt;&gt;();\n        int[] ap = new int[26];\n        int[] aw = new int[26];\n        for (int i = 0; i &lt; p.length(); i++) {\n            ap[p.charAt(i) - 'a']++;\n            aw[s.charAt(i) - 'a']++;\n        }\n\n        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();\n        for (int i = p.length() - 1; i &lt; s.length(); i++) {\n            int start = i - p.length() + 1;\n            if (Arrays.equals(ap, aw)) res.add(start);\n            if (i == s.length() - 1) break;\n            aw[s.charAt(start) - 'a']--;\n            aw[s.charAt(i + 1) - 'a']++;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%9B%86%E5%90%88/#567-mid","title":"567. \u5b57\u7b26\u4e32\u7684\u6392\u5217 mid","text":"<p>\u5251\u6307 Offer II 014. \u5b57\u7b26\u4e32\u4e2d\u7684\u53d8\u4f4d\u8bcd</p> <p>\u7ed9\u4f60\u4e24\u4e2a\u5b57\u7b26\u4e32 s1 \u548c s2 \uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad s2 \u662f\u5426\u5305\u542b s1 \u7684\u6392\u5217\u3002\u5982\u679c\u662f\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002</p> <p>\u6362\u53e5\u8bdd\u8bf4\uff0cs1 \u7684\u6392\u5217\u4e4b\u4e00\u662f s2 \u7684 \u5b50\u4e32 \u3002</p> <pre><code>class Solution {\n    public boolean checkInclusion(String s1, String s2) {\n        if (s1.length() &gt; s2.length()) return false;\n        int[] a1 = new int[26];\n        int[] a2 = new int[26];\n        for (int i = 0; i &lt; s1.length(); i++) {\n            ++a1[s1.charAt(i) - 'a'];\n            ++a2[s2.charAt(i) - 'a'];\n        }\n        for (int i = s1.length() - 1; i &lt; s2.length(); i++) {\n            if (Arrays.equals(a1, a2)) return true;\n            if (i == s2.length() - 1) break;\n            a2[s2.charAt(i + 1) - 'a']++;\n            a2[s2.charAt(i - s1.length() + 1) - 'a']--;\n        }\n        return false;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E6%88%90%E5%AF%B9%E5%85%83%E7%B4%A0/","title":"\u96c6\u5408\u4e2d\u7684\u6210\u5bf9\u5143\u7d20","text":""},{"location":"leetcode/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E6%88%90%E5%AF%B9%E5%85%83%E7%B4%A0/#594-easy","title":"594. \u6700\u957f\u548c\u8c10\u5b50\u5e8f\u5217 easy","text":"<p>\u548c\u8c10\u6570\u7ec4\u662f\u6307\u4e00\u4e2a\u6570\u7ec4\u91cc\u5143\u7d20\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u4e4b\u95f4\u7684\u5dee\u522b \u6b63\u597d\u662f 1 \u3002</p> <p>\u73b0\u5728\uff0c\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u8bf7\u4f60\u5728\u6240\u6709\u53ef\u80fd\u7684\u5b50\u5e8f\u5217\u4e2d\u627e\u5230\u6700\u957f\u7684\u548c\u8c10\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p> <p>\u6570\u7ec4\u7684\u5b50\u5e8f\u5217\u662f\u4e00\u4e2a\u7531\u6570\u7ec4\u6d3e\u751f\u51fa\u6765\u7684\u5e8f\u5217\uff0c\u5b83\u53ef\u4ee5\u901a\u8fc7\u5220\u9664\u4e00\u4e9b\u5143\u7d20\u6216\u4e0d\u5220\u9664\u5143\u7d20\u3001\u4e14\u4e0d\u6539\u53d8\u5176\u4f59\u5143\u7d20\u7684\u987a\u5e8f\u800c\u5f97\u5230\u3002</p> <p>\u8bf4\u662f\u5b50\u5e8f\u5217, \u5176\u5b9e\u662f\u6c42\u5dee\u503c\u4e0d\u5927\u4e8e 1 \u7684\u5143\u7d20\u7684\u6700\u591a\u6570\u91cf \u8ba1\u6570</p> <pre><code>class Solution {\n    public int findLHS(int[] nums) {\n        int res = 0;\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;(nums.length);\n\n        for (int e : nums) {\n            map.put(e, 1 + map.getOrDefault(e, 0));\n        }\n\n        for (int num : map.keySet()) {\n            Integer nextCnt = map.get(num + 1);\n            if (nextCnt != null) {\n                res = Math.max(res, map.get(num) + nextCnt);\n            }\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E6%88%90%E5%AF%B9%E5%85%83%E7%B4%A0/#2399-easy","title":"2399. \u68c0\u67e5\u76f8\u540c\u5b57\u6bcd\u95f4\u7684\u8ddd\u79bb easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u7684\u5b57\u7b26\u4e32 s \uff0c\u8be5\u5b57\u7b26\u4e32\u4ec5\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\uff0cs \u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u90fd \u6070\u597d \u51fa\u73b0 \u4e24\u6b21 \u3002\u53e6\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u3001\u957f\u5ea6\u4e3a 26 \u7684\u7684\u6574\u6570\u6570\u7ec4 distance\u3002</p> <p>\u5b57\u6bcd\u8868\u4e2d\u7684\u6bcf\u4e2a\u5b57\u6bcd\u6309\u4ece 0 \u5230 25 \u4f9d\u6b21\u7f16\u53f7\uff08\u5373\uff0c'a' -&gt; 0, 'b' -&gt; 1, 'c' -&gt; 2, ... , 'z' -&gt; 25\uff09\u3002</p> <p>\u5728\u4e00\u4e2a \u5300\u6574 \u5b57\u7b26\u4e32\u4e2d\uff0c\u7b2c i \u4e2a\u5b57\u6bcd\u7684\u4e24\u6b21\u51fa\u73b0\u4e4b\u95f4\u7684\u5b57\u6bcd\u6570\u91cf\u662f distance[i] \u3002\u5982\u679c\u7b2c i \u4e2a\u5b57\u6bcd\u6ca1\u6709\u5728 s \u4e2d\u51fa\u73b0\uff0c\u90a3\u4e48 distance[i] \u53ef\u4ee5 \u5ffd\u7565\u3002</p> <p>\u5982\u679c s \u662f\u4e00\u4e2a \u5300\u6574 \u5b57\u7b26\u4e32\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false\u3002</p> <p>\u4e24\u79cd\u601d\u8def 1. \u6bcf\u4e2a\u5143\u7d20\u53bbcheck\u95f4\u9694\u4e3adis\u7684\u4f4d\u7f6e\u4e0a\u7684\u4e24\u4e2a\u5143\u7d20, \u662f\u5426\u6709\u4e00\u4e2a\u8ddf\u5b83\u4e00\u6837 2. \u989d\u5916\u7528\u4e00\u4e2a\u6570\u7ec4\u6620\u5c04\u5143\u7d20\u7b2c\u4e00\u6b21\u51fa\u73b0\u7684idx, check</p> <pre><code>class Solution {\n    public boolean checkDistances(String s, int[] distance) {\n        for (int i = 0; i &lt; s.length(); i++) {\n            char c = s.charAt(i);\n            int idx = c - 'a';\n            int dis = distance[idx];\n            boolean flag = false;\n            if (0 &lt;= i - dis - 1) {\n                flag |= (c == s.charAt(i - dis - 1));\n            }\n            if (i + dis + 1 &lt; s.length()) {\n                flag |= (c == s.charAt(i + dis + 1));\n            }\n            if (!flag) return false;\n        }\n        return true;\n    }\n}\n</code></pre> <pre><code>class Solution {\n    public boolean checkDistances(String s, int[] distance) {\n        //idx\n        int[] idxMap = new int[26];\n        Arrays.fill(idxMap, -1);\n        for (int i = 0; i &lt; s.length(); i++) {\n            char c = s.charAt(i);\n            int idx = c - 'a';\n            if (idxMap[idx] == -1) {\n                idxMap[idx] = i;\n                continue;\n            }\n            if (distance[idx] != i - idxMap[idx] - 1) return false;\n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E6%88%90%E5%AF%B9%E5%85%83%E7%B4%A0/#2563-mid","title":"2563. \u7edf\u8ba1\u516c\u5e73\u6570\u5bf9\u7684\u6570\u76ee mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u3001\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u548c\u4e24\u4e2a\u6574\u6570 lower \u548c upper \uff0c\u8fd4\u56de \u516c\u5e73\u6570\u5bf9\u7684\u6570\u76ee\u3002</p> <p>\u5982\u679c(i, j)\u6570\u5bf9\u6ee1\u8db3\u4ee5\u4e0b\u60c5\u51b5\uff0c\u5219\u8ba4\u4e3a\u5b83\u662f\u4e00\u4e2a \u516c\u5e73\u6570\u5bf9 \uff1a</p> <ul> <li>0 &lt;= i &lt; j &lt; n</li> <li>lower &lt;= nums[i] + nums[j] &lt;= upper</li> </ul> <p>\u89e3\u6cd51: \u4e8c\u5206\u67e5\u627e</p> <p>\u89e3\u6cd52: \u53cc\u6307\u9488</p> <p>\u5206\u522b\u7edf\u8ba1\u5c0f\u4e8eupper\u7684\u5bf9\u6570\u548c\u5c0f\u4e8elower\u7684\u5bf9\u6570, \u76f8\u51cf \u548c&lt;=target\u7684\u6570\u5bf9\u7684\u6570\u91cf\u6c42\u6cd5: \u4ece\u4e0b\u754c-&gt;\u4e0a\u754c: \u5982\u679c\u6570\u5bf9\u548c&gt;target, \u7f29\u5c0f\u4e0a\u754c; \u5426\u5219, \u6570\u5bf9(i,j)\u5747\u8ba1\u6570; i=\u4e0b\u754c, j\u2208[\u4e0b\u754c+1,\u4e0a\u754c]</p> <pre><code>class Solution {\n    public long countFairPairs(int[] nums, int lower, int upper) {\n        long res = 0;\n        Arrays.sort(nums);\n        int n = nums.length;\n        int l = 0, r = n - 1;\n        // &lt;=upper \u7684\u6570\u5bf9\u6570\u91cf\n        while (l &lt; r) {\n            if (nums[l] + nums[r] &gt; upper) {\n                r--;\n            } else {\n                // \u6570\u5bf9(i,j), i=l, j\u2208(l+1,r]\n                res += r - l;\n                l++;\n            }\n        }\n        l = 0;\n        r = n - 1;\n        // &lt;=lower \u7684\u6570\u5bf9\u6570\u91cf\n        while (l &lt; r) {\n            if (nums[l] + nums[r] &gt;= lower) {\n                r--;\n            } else {\n                res -= r - l;\n                l++;\n            }\n        }\n        return res;\n    }\n}\n</code></pre> <p>\u89e3\u6cd53: \u4e09\u6307\u9488</p> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u5143\u7d20, \u627e\u5230\u53e6\u4e00\u4e2a\u5143\u7d20\u7684\u8303\u56f4, \u8303\u56f4\u5185\u7684\u6240\u6709\u5143\u7d20\u90fd\u4e0e\u8be5\u5143\u7d20\u6210\u5bf9</p> <pre><code>class Solution {\n    public long countFairPairs(int[] nums, int lower, int upper) {\n        Arrays.sort(nums);\n        long count = 0;\n        for (int i = 0, l = nums.length - 1, r = nums.length - 1; i &lt; nums.length; i++) {\n            while (l &gt;= 0 &amp;&amp; nums[i] + nums[l] &gt;= lower) l--;\n            while (r &gt;= 0 &amp;&amp; nums[i] + nums[r] &gt; upper) r--;\n            count += r - l - (i &gt; l &amp;&amp; i &lt;= r ? 1 : 0);\n        }\n        return count / 2;\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E6%88%90%E5%AF%B9%E5%85%83%E7%B4%A0/#_2","title":"\u627e\u4e09\u5143\u7ec4","text":""},{"location":"leetcode/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E6%88%90%E5%AF%B9%E5%85%83%E7%B4%A0/#923-mid","title":"923. \u4e09\u6570\u4e4b\u548c\u7684\u591a\u79cd\u53ef\u80fd mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 arr \uff0c\u4ee5\u53ca\u4e00\u4e2a\u6574\u6570 target \u4f5c\u4e3a\u76ee\u6807\u503c\uff0c\u8fd4\u56de\u6ee1\u8db3 i &lt; j &lt; k \u4e14 arr[i] + arr[j] + arr[k] == target \u7684\u5143\u7ec4 i, j, k \u7684\u6570\u91cf\u3002</p> <p>\u7531\u4e8e\u7ed3\u679c\u4f1a\u975e\u5e38\u5927\uff0c\u8bf7\u8fd4\u56de 1E9 + 7 \u7684\u6a21\u3002</p> <ul> <li>3 &lt;= arr.length &lt;= 3000</li> <li>0 &lt;= arr[i] &lt;= 100</li> <li>0 &lt;= target &lt;= 300</li> </ul> <p>\u89e3\u6cd51: \u4e09\u6570\u4e4b\u548c</p> <pre><code>class Solution {\n    int MOD = 1_000_000_007;\n\n    public int threeSumMulti(int[] arr, int target) {\n        long res = 0;\n        Arrays.sort(arr);\n        for (int i = 0; i &lt; arr.length; ++i) {\n            int two = target - arr[i];\n            int j = i + 1, k = arr.length - 1;\n            while (j &lt; k) {\n                if (arr[j] + arr[k] &lt; two) j++;\n                else if (arr[j] + arr[k] &gt; two) k--;\n                else if (arr[j] != arr[k]) {\n                    int cntj = 1;\n                    int cntk = 1;\n                    while (j + 1 &lt; k &amp;&amp; arr[j] == arr[j + 1]) {\n                        cntj++;\n                        j++;\n                    }\n                    while (j + 1 &lt; k &amp;&amp; arr[k] == arr[k - 1]) {\n                        cntk++;\n                        k--;\n                    }\n                    j++;\n                    k--;\n                    res += (long) cntj * cntk;\n                    res %= MOD;\n                } else {\n                    res += (long) (k - j + 1) * (k - j) / 2;\n                    res %= MOD;\n                    break;\n                }\n            }\n        }\n        return (int) res;\n    }\n}\n</code></pre> <p>\u89e3\u6cd52: \u8ba1\u6570+\u7ec4\u5408</p> <pre><code>class Solution {\n    public int threeSumMulti(int[] arr, int target) {\n        int kMaxN = 100;\n        int mod = (int) 1E9 + 7;\n        long[] cnt = new long[kMaxN + 1];\n        for (int e : arr) {\n            cnt[e]++;\n        }\n        long res = 0;\n        for (int i = 0; i &lt;= target &amp;&amp; i &lt;= 100; i++) {\n            for (int j = i; j &lt;= target &amp;&amp; j &lt;= 100; j++) {\n                int k = target - i - j;\n                if (k &gt; 100) continue;\n                if (k &lt; j) break;\n                if (i == j) {\n                    if (j == k)\n                        res += (cnt[i] - 2) * (cnt[i] - 1) * cnt[i] / 6;\n                    else\n                        res += cnt[i] * (cnt[i] - 1) / 2 * cnt[k];\n                } else {\n                    if (j == k)\n                        res += cnt[i] * (cnt[j] - 1) * cnt[j] / 2;\n                    else\n                        res += cnt[i] * cnt[j] * cnt[k];\n                }\n                res %= mod;\n            }\n        }\n        return (int) res;\n    }\n}\n</code></pre> <p>\u89e3\u6cd53: \u80cc\u5305</p> <pre><code>class Solution {\n\n    int mod = (int) 1e9 + 7;\n\n    public int threeSumMulti(int[] arr, int target) {\n        int n = arr.length;\n        //dp[i][j][k]\u8868\u793a\u8003\u8651\u524di\u4e2a\u6570\uff0c\u4ece\u4e2d\u9009\u51faj\u4e2a\u6570\uff0c\u7ec4\u6210k\u5927\u5c0f\u7684\u65b9\u6848\u6570\n        int[][][] dp = new int[n + 1][4][target + 1];\n        for (int i = 0; i &lt; n; i++) dp[i][0][0] = 1;\n        for (int i = 1; i &lt;= n; i++) {\n            for (int j = 1; j &lt;= 3; j++) {\n                for (int k = 0; k &lt;= target; k++) {\n                    dp[i][j][k] = dp[i - 1][j][k];\n                    if (k &gt;= arr[i - 1]) {\n                        dp[i][j][k] += dp[i - 1][j - 1][k - arr[i - 1]];\n                        dp[i][j][k] %= mod;\n                    }\n                }\n            }\n        }\n        return dp[n][3][target];\n    }\n}\n</code></pre>"},{"location":"leetcode/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E6%88%90%E5%AF%B9%E5%85%83%E7%B4%A0/#_3","title":"\u6709\u5e8f\u96c6\u5408\u4e2d\u6210\u5bf9\u5143\u7d20","text":""},{"location":"leetcode/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E6%88%90%E5%AF%B9%E5%85%83%E7%B4%A0/#k","title":"\u524dk\u4e2a\u6570\u5bf9","text":""},{"location":"leetcode/%E9%A2%84%E5%A4%84%E7%90%86/","title":"\u9884\u5904\u7406","text":""},{"location":"leetcode/%E9%A2%84%E5%A4%84%E7%90%86/#_1","title":"\u6570\u636e\u9884\u5904\u7406","text":"<p>\u51cf\u5c11\u590d\u6742\u5ea6\u7684\u6280\u5de7</p>"},{"location":"leetcode/%E9%A2%84%E5%A4%84%E7%90%86/#2564-mid","title":"2564. \u5b50\u5b57\u7b26\u4e32\u5f02\u6216\u67e5\u8be2 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a \u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 queries \uff0c\u5176\u4e2d queries[i] = [firsti, secondi]\u3002</p> <p>\u5bf9\u4e8e\u7b2c i \u4e2a\u67e5\u8be2\uff0c\u627e\u5230 s \u7684 \u6700\u77ed\u5b50\u4e32\uff0c\u5b83\u5bf9\u5e94\u7684 \u5341\u8fdb\u5236\u503c val \u4e0e firsti \u6309\u4f4d\u5f02\u6216 \u5f97\u5230 secondi \uff0c\u6362\u8a00\u4e4b\uff0cval ^ firsti == secondi\u3002</p> <p>\u7b2c i \u4e2a\u67e5\u8be2\u7684\u7b54\u6848\u662f\u5b50\u5b57\u7b26\u4e32[lefti, righti] \u7684\u4e24\u4e2a\u7aef\u70b9\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u5b50\u5b57\u7b26\u4e32\uff0c\u5219\u7b54\u6848\u4e3a[-1, -1]\u3002\u5982\u679c\u6709\u591a\u4e2a\u7b54\u6848\uff0c\u8bf7\u4f60\u9009\u62e9 lefti \u6700\u5c0f\u7684\u4e00\u4e2a\u3002</p> <ul> <li>1 &lt;= s.length &lt;= 10^4</li> <li>s[i]\u8981\u4e48\u662f '0'\uff0c\u8981\u4e48\u662f '1'\u3002</li> <li>1 &lt;= queries.length &lt;= 10^5</li> <li>0 &lt;= firsti, secondi &lt;= 10^9</li> </ul> <pre><code>class Solution {\n    public int[][] substringXorQueries(String s, int[][] queries) {\n        Map&lt;Integer, int[]&gt; map = new HashMap&lt;&gt;();\n        int idx0 = s.indexOf('0');\n        if (idx0 &gt;= 0) map.put(0, new int[]{idx0, idx0});\n        char[] arr = s.toCharArray();\n        for (int l = 0; l &lt; arr.length; ++l) {\n            if (arr[l] == '0') continue;\n            int x = 0;\n            // 2^30 &gt; 10^9\n            for (int r = l; r &lt; Math.min(l + 30, arr.length); r++) {\n                x = x &lt;&lt; 1 | arr[r] - '0';\n                map.putIfAbsent(x, new int[]{l, r});\n            }\n        }\n        int n = queries.length;\n        int[][] res = new int[n][];\n        for (int i = 0; i &lt; n; i++) {\n            int val = queries[i][0] ^ queries[i][1];\n            res[i] = map.getOrDefault(val, new int[]{-1, -1});\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/1%20%E7%AE%97%E6%B3%95%E5%80%BA%E5%8A%A1/","title":"\u5f85\u6574\u7406","text":""},{"location":"leetcode/new/1%20%E7%AE%97%E6%B3%95%E5%80%BA%E5%8A%A1/#4","title":"4. \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570","text":"<p>\u4e8c\u5206\u67e5\u627e\u6cd5</p>"},{"location":"leetcode/new/1%20%E7%AE%97%E6%B3%95%E5%80%BA%E5%8A%A1/#10","title":"10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d","text":""},{"location":"leetcode/new/1%20%E7%AE%97%E6%B3%95%E5%80%BA%E5%8A%A1/#399","title":"399. \u9664\u6cd5\u6c42\u503c","text":""},{"location":"leetcode/new/1%20%E7%AE%97%E6%B3%95%E5%80%BA%E5%8A%A1/#301","title":"301. \u5220\u9664\u65e0\u6548\u7684\u62ec\u53f7","text":"<p>\u592a\u96be\u4e86</p>"},{"location":"leetcode/new/1%20%E7%AE%97%E6%B3%95%E5%80%BA%E5%8A%A1/#2402-iii","title":"2402. \u4f1a\u8bae\u5ba4 III","text":""},{"location":"leetcode/new/1%20%E7%AE%97%E6%B3%95%E5%80%BA%E5%8A%A1/#2398","title":"2398. \u9884\u7b97\u5185\u7684\u6700\u591a\u673a\u5668\u4eba\u6570\u76ee","text":""},{"location":"leetcode/new/1%20%E7%AE%97%E6%B3%95%E5%80%BA%E5%8A%A1/#6236","title":"6236 \u4e0d\u91cd\u53e0\u56de\u6587\u5b50\u5b57\u7b26\u4e32\u7684\u6700\u5927\u6570\u76ee","text":""},{"location":"leetcode/new/1%20%E7%AE%97%E6%B3%95%E5%80%BA%E5%8A%A1/#6235","title":"6235 \u9010\u5c42\u6392\u5e8f\u4e8c\u53c9\u6811\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u76ee","text":""},{"location":"leetcode/new/1%20%E7%AE%97%E6%B3%95%E5%80%BA%E5%8A%A1/#6234-k","title":"6234 \u6700\u5c0f\u516c\u500d\u6570\u4e3a K \u7684\u5b50\u6570\u7ec4\u6570\u76ee","text":""},{"location":"leetcode/new/1%20%E7%AE%97%E6%B3%95%E5%80%BA%E5%8A%A1/#6233","title":"6233 \u6e29\u5ea6\u8f6c\u6362","text":""},{"location":"leetcode/new/1%20%E7%AE%97%E6%B3%95%E5%80%BA%E5%8A%A1/#6238","title":"6238 \u7edf\u8ba1\u6784\u9020\u597d\u5b57\u7b26\u4e32\u7684\u65b9\u6848\u6570","text":""},{"location":"leetcode/new/1%20%E7%AE%97%E6%B3%95%E5%80%BA%E5%8A%A1/#6237","title":"6237 \u4e0d\u540c\u7684\u5e73\u5747\u503c\u6570\u76ee","text":""},{"location":"leetcode/new/leetcode/","title":"leetcode","text":"<p>\u9996\u5148\u8981\u8bf4\u660e, leetcode \u7684\u9898\u76ee\u5927\u90fd\u662f\u4e3a\u4e86\u9762\u8bd5\u51c6\u5907\u7684, \u4e0e\u7b97\u6cd5\u7ade\u8d5b\u7684\u96be\u5ea6\u5dee\u5f02\u8fd8\u662f\u86ee\u5927\u7684; \u7b97\u6cd5\u9898\u76ee\u662f\u65e0\u7a77\u7684, \u5176\u96be\u5ea6\u4e5f\u4e0d\u4ec5\u4ec5\u5230 Hard \u4e3a\u6b62, \u7b97\u6cd5\u9898\u76ee\u5f80\u5f80\u662f\u7531\u51fa\u9898\u8005\u8bbe\u8ba1\u51fa\u6765\u7684, \u80fd\u505a\u51fa\u5f88\u96be\u7684\u9898\u76ee\u53ef\u4ee5\u8bc1\u660e\u81ea\u5df1\u7287, \u80fd\u641e\u5b9a\u5de5\u7a0b\u95ee\u9898\u3001\u5e94\u7528\u95ee\u9898\u540c\u6837\u4e5f\u662f\u5f88\u5389\u5bb3\u7684, \u5e76\u4e14\u4e1a\u754c\u66f4\u9700\u8981; \u603b\u800c\u8a00\u4e4b, leetcode \u66f4\u9002\u5408\u4f5c\u4e3a\u8fdb\u5165\u4e1a\u754c\u7684\u5165\u573a\u5238, \u7b97\u6cd5\u7231\u597d\u8005\u53ef\u4ee5\u53bb\u6d1b\u8c37, codeforces \u8bc1\u660e\u81ea\u5df1\u7287;</p>"},{"location":"leetcode/new/leetcode/#_1","title":"\u76ee\u7684","text":"<p>\u5c3d\u53ef\u80fd\u7a33\u5065\u5730\u5728\u9762\u8bd5\u4e2d AC, \u5efa\u7acb\u95ee\u9898\u7a7a\u95f4\u4e0e\u89e3\u7a7a\u95f4\u7684\u6620\u5c04</p>"},{"location":"leetcode/new/leetcode/#_2","title":"\u7ec4\u7ec7\u7ed3\u6784","text":"<ol> <li>\u67d0\u7c7b\u95ee\u9898\u7684\u6280\u5de7\u4e0e\u89e3\u6cd5</li> <li> <p>\u5177\u4f53\u95ee\u9898\u5206\u7c7b</p> <ul> <li> <p>\u9996\u5148, \u786e\u5b9a\u95ee\u9898\u573a\u666f, \u4e5f\u5c31\u662f\u5bf9\u95ee\u9898\u7a7a\u95f4\u7684\u63cf\u8ff0</p> <p>\u8981\u8ddf\u8f93\u5165\u533a\u5206\u5f00, \u8f93\u5165\u53ea\u662f\u4e3a\u4e86\u4f20\u9012\u6570\u636e</p> </li> <li> <p>\u7136\u540e, \u5177\u4f53\u95ee\u9898, \u5206\u6790\u548c\u89e3\u7b54</p> </li> <li> <p>\u6ce8\u610f, \u4e0d\u8981\u628a\u6280\u5de7\u5f53\u4f5c\u573a\u666f\u3002\u6280\u5de7\u662f\u5bf9\u89e3\u7a7a\u95f4\u7684\u63cf\u8ff0</p> <p>\u4f8b\u5982\u4e24\u6570\u4e4b\u548c \u573a\u666f\u662f\u96c6\u5408\u4e2d\u627e\u6210\u5bf9\u5143\u7d20</p> </li> </ul> </li> </ol>"},{"location":"leetcode/new/%E4%B8%AD%E4%BD%8D%E6%95%B0/","title":"\u4e2d\u4f4d\u6570","text":""},{"location":"leetcode/new/%E4%B8%AD%E4%BD%8D%E6%95%B0/#2","title":"2 \u4e2a\u5e8f\u5217\u7684\u4e2d\u4f4d\u6570","text":""},{"location":"leetcode/new/%E4%B8%AD%E4%BD%8D%E6%95%B0/#4-hard","title":"4. \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 hard","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u5206\u522b\u4e3a m \u548c n \u7684\u6b63\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\u6570\u7ec4 nums1 \u548c nums2\u3002\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684 \u4e2d\u4f4d\u6570\u3002 Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.</p> <p>\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5e94\u8be5\u4e3a O(log (m+n)) The overall run time complexity should be O(log (m+n)).</p> <p>\u89e3\u6cd5 1 \u8ba1\u6570\u6cd5</p> <p>\u53d6\u5143\u7d20\u603b\u6570 n, \u7136\u540e\u4ece\u7b2c 0 \u4e2a\u5f00\u59cb\u8ba1\u6570, \u76f4\u5230 n/2 \u5982\u679c n \u4e3a\u5947\u6570\u5219\u505c\u5728\u4e2d\u4f4d\u6570, \u5982\u679c n \u4e3a\u5076\u6570\u5219\u505c\u5728\u504f\u540e\u7684\u5143\u7d20</p> JavaGo <pre><code>class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        int l1 = nums1.length;\n        int l2 = nums2.length;\n        int n = l1 + l2;\n        int pre = -1, num = -1;\n        int p1 = 0, p2 = 0;\n        for (int i = 0; i &lt;= n / 2; i++) {\n            pre = num;\n            if (p1 == l1)\n                num = nums2[p2++];\n            else if (p2 == l2)\n                num = nums1[p1++];\n            else if (nums1[p1] &lt; nums2[p2])\n                num = nums1[p1++];\n            else\n                num = nums2[p2++];\n        }\n        if (n % 2 == 0)\n            return (pre + num) / 2.0;\n        else\n            return num;\n    }\n}\n</code></pre> <pre><code>func findMedianSortedArrays(nums1 []int, nums2 []int) float64 {\n    l1, l2 := len(nums1), len(nums2)\n    n := l1 + l2\n    p1, p2 := 0, 0\n    var pre, num int\n    for i := 0; i &lt;= n/2; i++ { // \u7b2c\u4e00\u6b65idx=0\n        pre = num\n        if p1 == l1 {\n            num = nums2[p2]\n            p2++\n        } else if p2 == l2 {\n            num = nums1[p1]\n            p1++\n        } else if nums1[p1] &lt; nums2[p2] {\n            num = nums1[p1]\n            p1++\n        } else {\n            num = nums2[p2]\n            p2++\n        }\n    }\n    if n%2 == 0 {\n        return float64(pre+num) / 2\n    } else {\n        return float64(num)\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/","title":"\u4e8c\u5206\u67e5\u627e","text":"<p>\u4e8c\u5206\u67e5\u627e\u662f\u5f88\u6709\u6280\u5de7\u7684\u7b97\u6cd5, \u53ea\u6709\u5927\u7ea6\u6709 20% \u7684\u7a0b\u5e8f\u5458\u80fd\u6b63\u786e\u5730\u89e3\u91ca\u4e00\u4e2a\u4e8c\u5206\u67e5\u627e\u7684\u6b63\u786e\u6027; \u5f88\u591a\u7ec6\u8282\u503c\u5f97\u8003\u91cf:</p> <ul> <li> <p>\u600e\u6837\u8ba1\u7b97 mid \u4e0d\u4f1a\u6570\u503c\u6ea2\u51fa</p> <p><code>m = l + (r-l)/2</code></p> </li> <li> <p>mid \u504f\u5411\u5de6\u8fb9\u8fd8\u662f\u53f3\u8fb9</p> <p>\u6839\u636e\u9700\u8981\u63a7\u5236, \u6c42\u5de6\u8fb9\u754c\u5c31\u504f\u5411\u5de6\u8fb9, \u6c42\u53f3\u8fb9\u754c\u5c31\u504f\u5411\u53f3\u8fb9</p> </li> <li> <p>while \u7684\u5224\u65ad\u6761\u4ef6\u7528\u4e0d\u7528 <code>=</code></p> <p>\u7f29\u5c0f\u8303\u56f4\u7684\u89e3\u6cd5\u4e0d\u80fd\u7528 <code>=</code>, \u4e25\u683c\u52a0\u51cf\u7684\u89e3\u6cd5\u53ef\u4ee5\u7528 <code>=</code></p> </li> <li> <p>\u6c42\u8fb9\u754c\u65f6\u5982\u4f55\u5728\u8fed\u4ee3\u4e2d\u66f4\u65b0\u8303\u56f4</p> <p>m \u504f\u5de6\u8ba9 <code>r = m</code>, m \u504f\u53f3\u8ba9 <code>l = m</code></p> </li> <li> <p>\u6700\u540e\u9700\u4e0d\u9700\u8981\u9a8c\u8bc1\u76f8\u7b49</p> <p>\u5faa\u73af\u6761\u4ef6\u4e0d\u7528 <code>=</code> \u7684, \u5fc5\u987b\u9a8c\u8bc1</p> </li> </ul>"},{"location":"leetcode/new/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_2","title":"\u8fb9\u754c","text":""},{"location":"leetcode/new/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#34-mid","title":"34. \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6309\u7167\u975e\u9012\u51cf\u987a\u5e8f\u6392\u5217\u7684\u6574\u6570\u6570\u7ec4 nums\uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u503c target\u3002\u8bf7\u4f60\u627e\u51fa\u7ed9\u5b9a\u76ee\u6807\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002</p> <p>\u5982\u679c\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u76ee\u6807\u503c target\uff0c\u8fd4\u56de [-1, -1]\u3002</p> <p>\u4f60\u5fc5\u987b\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log n) \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u3002</p> <p>m \u504f\u5de6, \u5de6\u8fb9\u754c+1; m \u504f\u53f3, \u53f3\u8fb9\u754c-1;</p> <pre><code>class Solution {\n    public int[] searchRange(int[] nums, int target) {\n        if (nums.length == 0) return new int[]{-1, -1};\n        int tl = -1, tr = -1;\n        int l = 0, h = nums.length - 1;\n        // [)\n        while (l &lt; h) {\n            int m = l + (h - l &gt;&gt; 1);\n            if (nums[m] &lt; target) l = m + 1;\n            else h = m;\n        }\n        if (nums[l] != target) return new int[]{-1, -1};\n        tl = l;\n        // (]\n        h = nums.length - 1;\n        while (l &lt; h) {\n            int m = l + (h - l + 1 &gt;&gt; 1);\n            if (nums[m] &gt; target) h = m - 1;\n            else l = m;\n        }\n        tr = h;\n        return new int[]{tl, tr};\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#35-easy","title":"35. \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u5728\u6570\u7ec4\u4e2d\u627e\u5230\u76ee\u6807\u503c\uff0c\u5e76\u8fd4\u56de\u5176\u7d22\u5f15\u3002\u5982\u679c\u76ee\u6807\u503c\u4e0d\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\uff0c\u8fd4\u56de\u5b83\u5c06\u4f1a\u88ab\u6309\u987a\u5e8f\u63d2\u5165\u7684\u4f4d\u7f6e\u3002</p> <p>\u627e &gt;= target \u7684\u5de6\u8fb9\u754c, \u6ce8\u610f\u9700\u8981\u521d\u59cb\u5316 r=length</p> <pre><code>class Solution {\n    public int searchInsert(int[] nums, int target) {\n        int l = 0, r = nums.length;\n        while (l &lt; r) {\n            int m = l + (r - l &gt;&gt; 1);\n            if (nums[m] &lt; target) l = m + 1;\n            else r = m;\n        }\n        return l;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#278-easy","title":"278. \u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c easy","text":"<p>\u4f60\u662f\u4ea7\u54c1\u7ecf\u7406\uff0c\u76ee\u524d\u6b63\u5728\u5e26\u9886\u4e00\u4e2a\u56e2\u961f\u5f00\u53d1\u65b0\u7684\u4ea7\u54c1\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u4f60\u7684\u4ea7\u54c1\u7684\u6700\u65b0\u7248\u672c\u6ca1\u6709\u901a\u8fc7\u8d28\u91cf\u68c0\u6d4b\u3002\u7531\u4e8e\u6bcf\u4e2a\u7248\u672c\u90fd\u662f\u57fa\u4e8e\u4e4b\u524d\u7684\u7248\u672c\u5f00\u53d1\u7684\uff0c\u6240\u4ee5\u9519\u8bef\u7684\u7248\u672c\u4e4b\u540e\u7684\u6240\u6709\u7248\u672c\u90fd\u662f\u9519\u7684\u3002 \u5047\u8bbe\u4f60\u6709 n \u4e2a\u7248\u672c [1, 2, ..., n]\uff0c\u4f60\u60f3\u627e\u51fa\u5bfc\u81f4\u4e4b\u540e\u6240\u6709\u7248\u672c\u51fa\u9519\u7684\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c\u3002</p> <p>\u4f60\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 bool isBadVersion(version) \u63a5\u53e3\u6765\u5224\u65ad\u7248\u672c\u53f7 version \u662f\u5426\u5728\u5355\u5143\u6d4b\u8bd5\u4e2d\u51fa\u9519\u3002\u5b9e\u73b0\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u7248\u672c\u3002\u4f60\u5e94\u8be5\u5c3d\u91cf\u51cf\u5c11\u5bf9\u8c03\u7528 API \u7684\u6b21\u6570\u3002</p> <pre><code>/*\nThe isBadVersion API is defined in the parent class VersionControl.\nboolean isBadVersion(int version);\n*/\npublic class Solution extends VersionControl {\n    public int firstBadVersion(int n) {\n        int l = 1;\n        while (l &lt; n) {\n            int m = l + (n - l &gt;&gt; 1);\n            if (isBadVersion(m)) n = m;\n            else l = m + 1;\n        }\n        return n;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#_3","title":"\u65cb\u8f6c\u6570\u7ec4","text":""},{"location":"leetcode/new/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#33-mid","title":"33. \u641c\u7d22\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4 mid","text":"<p>\u6574\u6570\u6570\u7ec4 nums \u6309\u5347\u5e8f\u6392\u5217\uff0c\u6570\u7ec4\u4e2d\u7684\u503c \u4e92\u4e0d\u76f8\u540c \u3002</p> <p>\u5728\u4f20\u9012\u7ed9\u51fd\u6570\u4e4b\u524d\uff0cnums \u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u4e0b\u6807 k\uff080 &lt;= k &lt; nums.length\uff09\u4e0a\u8fdb\u884c\u4e86 \u65cb\u8f6c\uff0c\u4f8b\u5982\uff0c [0,1,2,4,5,6,7] \u5728\u4e0b\u6807 3 \u5904\u7ecf\u65cb\u8f6c\u540e\u53ef\u80fd\u53d8\u4e3a [4,5,6,7,0,1,2] \u3002</p> <p>\u7ed9\u4f60 \u65cb\u8f6c\u540e \u7684\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570 target \uff0c\u5982\u679c nums \u4e2d\u5b58\u5728\u8fd9\u4e2a\u76ee\u6807\u503c target \uff0c\u5219\u8fd4\u56de\u5b83\u7684\u4e0b\u6807\uff0c\u5426\u5219\u8fd4\u56de -1 \u3002</p> <p>\u4f60\u5fc5\u987b\u8bbe\u8ba1\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log n) \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u3002</p> <p>\u89e3\u6cd5</p> <p>\u6839\u636e nums[0] \u5224\u65ad m \u5728\u5de6\u8fd8\u662f\u53f3, \u7136\u540e\u7f29\u5c0f\u8303\u56f4\u627e target</p> JavaGo <pre><code>class Solution {\n    public int search(int[] nums, int target) {\n        int l = 0, h = nums.length - 1;\n        while (l &lt;= h) {\n            int m = l + (h - l &gt;&gt; 1);\n            if (target == nums[m]) return m;\n            // \u5de6\n            if (nums[m] &gt;= nums[0]) {\n                if (target &lt; nums[0]) l = m + 1;\n                else {\n                    if (target &lt; nums[m]) h = m - 1;\n                    else l = m + 1;\n                }\n            }\n            // \u53f3\n            else {\n                if (target &gt;= nums[0]) h = m - 1;\n                else {\n                    if (target &gt; nums[m]) l = m + 1;\n                    else h = m - 1;\n                }\n            }\n        }\n        return -1;\n    }\n}\n</code></pre> <pre><code>func search(nums []int, target int) int {\n    l := 0\n    r := len(nums) - 1\n    for l &lt; r {\n        m := l + (r-l)&gt;&gt;1 // go\u7684\u64cd\u4f5c\u7b26\u4f18\u5148\u7ea7\u4e0d\u540c\n        if target == nums[m] {\n            return m\n        }\n        // \u5de6\n        if nums[m] &gt;= nums[0] {\n            switch {\n            case target &gt; nums[m]:\n                l = m + 1\n            case target &lt; nums[0]:\n                l = m + 1\n            default:\n                r = m - 1\n            }\n        // \u53f3\n        } else {\n            switch {\n            case target &lt; nums[m]:\n                r = m - 1\n            case target &gt;= nums[0]:\n                r = m - 1\n            default:\n                l = m + 1\n            }\n        }\n    }\n    // \u8fd9\u91cc\u8ddf\u5faa\u73af\u6761\u4ef6\u662f\u5bf9\u5e94\u7684:\n    // \u5faa\u73af\u4e2d\u5982\u679c\u4f7f\u7528\u7f29\u5c0f\u8303\u56f4\u7684\u65b9\u5f0f, \u5219\u5faa\u73af\u6761\u4ef6\u5fc5\u987b\u662f l&lt;r, \u5219\u6b64\u6b65\u662f\u5fc5\u987b\u7684;\n    // \u5faa\u73af\u4e2d\u5982\u679c\u4f7f\u7528\u4e25\u683c\u52a0\u51cf\u7684\u65b9\u5f0f, \u5219\u5faa\u73af\u6761\u4ef6\u53ef\u4ee5\u662f l&lt;=r, \u6b64\u6b65\u53ef\u4ee5\u7701\u7565;\n    if nums[l] == target {\n        return l\n    }\n    return -1\n}\n</code></pre> <p>\u4e5f\u53ef\u4ee5\u4f7f\u7528\u8fb9\u754c\u67e5\u627e</p> <pre><code>class Solution {\n    public int search(int[] nums, int target) {\n        int l = 0, h = nums.length - 1;\n        while (l &lt; h) {\n            int m = l + (h - l &gt;&gt; 1);\n            // m \u5728\u5de6\n            if (nums[0] &lt;= nums[m]) {\n                // target \u5728\u53f3\n                if (target &lt; nums[0]) l = m + 1;\n                    // target \u5728 m \u5de6\n                else {\n                    if (target &lt;= nums[m]) h = m;\n                        // target \u5728 m \u53f3\n                    else l = m + 1;\n                }\n            }\n            // m \u5728\u53f3\n            else {\n                // target \u5728\u5de6\n                if (target &gt;= nums[0]) h = m - 1;\n                    // target \u5728 m \u53f3\n                else {\n                    if (target &lt;= nums[m]) h = m;\n                        // target \u5728 m \u5de6\n                    else l = m + 1;\n                }\n            }\n        }\n        return nums[l] == target ? l : -1;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#153-mid","title":"153. \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c mid","text":"<p>\u5df2\u77e5\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4\uff0c\u9884\u5148\u6309\u7167\u5347\u5e8f\u6392\u5217\uff0c\u7ecf\u7531 1 \u5230 n \u6b21 \u65cb\u8f6c \u540e\uff0c\u5f97\u5230\u8f93\u5165\u6570\u7ec4\u3002\u4f8b\u5982\uff0c\u539f\u6570\u7ec4 nums = [0,1,2,4,5,6,7] \u5728\u53d8\u5316\u540e\u53ef\u80fd\u5f97\u5230\uff1a</p> <ul> <li>\u82e5\u65cb\u8f6c 4 \u6b21\uff0c\u5219\u53ef\u4ee5\u5f97\u5230 [4,5,6,7,0,1,2]</li> <li>\u82e5\u65cb\u8f6c 7 \u6b21\uff0c\u5219\u53ef\u4ee5\u5f97\u5230 [0,1,2,4,5,6,7]     \u6ce8\u610f\uff0c\u6570\u7ec4 [a[0], a[1], a[2], ..., a[n-1]] \u65cb\u8f6c\u4e00\u6b21 \u7684\u7ed3\u679c\u4e3a\u6570\u7ec4 [a[n-1], a[0], a[1], a[2], ..., a[n-2]]\u3002</li> </ul> <p>\u7ed9\u4f60\u4e00\u4e2a\u5143\u7d20\u503c \u4e92\u4e0d\u76f8\u540c \u7684\u6570\u7ec4 nums \uff0c\u5b83\u539f\u6765\u662f\u4e00\u4e2a\u5347\u5e8f\u6392\u5217\u7684\u6570\u7ec4\uff0c\u5e76\u6309\u4e0a\u8ff0\u60c5\u5f62\u8fdb\u884c\u4e86\u591a\u6b21\u65cb\u8f6c\u3002\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u6570\u7ec4\u4e2d\u7684 \u6700\u5c0f\u5143\u7d20 \u3002</p> <p>\u4f60\u5fc5\u987b\u8bbe\u8ba1\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log n) \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u3002</p> <pre><code>class Solution {\n    public int findMin(int[] nums) {\n        // \u5927=&gt;\u6700\u5927 \u6700\u5c0f=&gt;\u5927 3 4 5 0 1 2\n        int l = 0, h = nums.length - 1;\n        while (l &lt; h) {\n            int m = l + (h - l &gt;&gt; 1);\n            if (nums[m] &lt;= nums[h]) h = m;\n            else l = m + 1;\n        }\n        return nums[l];\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/#154-ii-hard","title":"154. \u5bfb\u627e\u65cb\u8f6c\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c II hard","text":"<p>\u5251\u6307 Offer 11. \u65cb\u8f6c\u6570\u7ec4\u7684\u6700\u5c0f\u6570\u5b57 easy</p> <p>\u5df2\u77e5\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6570\u7ec4\uff0c\u9884\u5148\u6309\u7167\u5347\u5e8f\u6392\u5217\uff0c\u7ecf\u7531 1 \u5230 n \u6b21 \u65cb\u8f6c \u540e\uff0c\u5f97\u5230\u8f93\u5165\u6570\u7ec4\u3002\u4f8b\u5982\uff0c\u539f\u6570\u7ec4 nums = [0,1,4,4,5,6,7] \u5728\u53d8\u5316\u540e\u53ef\u80fd\u5f97\u5230\uff1a</p> <ul> <li>\u82e5\u65cb\u8f6c 4 \u6b21\uff0c\u5219\u53ef\u4ee5\u5f97\u5230 [4,5,6,7,0,1,4]</li> <li>\u82e5\u65cb\u8f6c 7 \u6b21\uff0c\u5219\u53ef\u4ee5\u5f97\u5230 [0,1,4,4,5,6,7]</li> </ul> <p>\u6ce8\u610f\uff0c\u6570\u7ec4 [a[0], a[1], a[2], ..., a[n-1]] \u65cb\u8f6c\u4e00\u6b21 \u7684\u7ed3\u679c\u4e3a\u6570\u7ec4 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] \u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u53ef\u80fd\u5b58\u5728 \u91cd\u590d \u5143\u7d20\u503c\u7684\u6570\u7ec4 nums \uff0c\u5b83\u539f\u6765\u662f\u4e00\u4e2a\u5347\u5e8f\u6392\u5217\u7684\u6570\u7ec4\uff0c\u5e76\u6309\u4e0a\u8ff0\u60c5\u5f62\u8fdb\u884c\u4e86\u591a\u6b21\u65cb\u8f6c\u3002\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u6570\u7ec4\u4e2d\u7684 \u6700\u5c0f\u5143\u7d20\u3002</p> <p>\u4f60\u5fc5\u987b\u5c3d\u53ef\u80fd\u51cf\u5c11\u6574\u4e2a\u8fc7\u7a0b\u7684\u64cd\u4f5c\u6b65\u9aa4\u3002</p> <pre><code>class Solution {\n    public int findMin(int[] numbers) {\n        int l = 0;\n        int h = numbers.length - 1;\n        while (l &lt; h) {\n            int m = l + (h - l) / 2;\n            if (numbers[m] &lt; numbers[h]) {\n                h = m;\n            } else if (numbers[m] &gt; numbers[h]) {\n                l = m + 1;\n            } else {\n                // \u56e0\u4e3amid\u504f\u5de6, \u6240\u4ee5\u4e0d\u4f1a\u9519\u8fc7 h\n                h--;\n            }\n        }\n        return numbers[l];\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E4%BA%8C%E5%88%86%E7%8C%9C%E7%AD%94%E6%A1%88/","title":"\u4e8c\u5206\u731c\u7b54\u6848","text":""},{"location":"leetcode/new/%E4%BA%8C%E5%88%86%E7%8C%9C%E7%AD%94%E6%A1%88/#_2","title":"\u5355\u8c03\u5e8f\u5217\u4e0a\u627e\u503c","text":""},{"location":"leetcode/new/%E4%BA%8C%E5%88%86%E7%8C%9C%E7%AD%94%E6%A1%88/#69-x-mid","title":"69. x \u7684\u5e73\u65b9\u6839 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 x \uff0c\u8ba1\u7b97\u5e76\u8fd4\u56de x \u7684 \u7b97\u672f\u5e73\u65b9\u6839\u3002 \u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u7ed3\u679c\u53ea\u4fdd\u7559\u6574\u6570\u90e8\u5206\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002</p> <p>\u89e3\u6cd5 1 \u4e8c\u5206</p> <p>\u4ece\u4e00\u4e2a\u5355\u8c03\u5e8f\u5217\u4e0a\u627e\u4e00\u4e2a\u503c, \u4e8c\u5206 \u627e $m^2 &lt;= target$ \u7684\u53f3\u8fb9\u754c</p> <pre><code>class Solution {\n    public int mySqrt(int x) {\n        long l = 0, h = x;\n        while (l &lt; h) {\n            long m = l + (h - l + 1 &gt;&gt; 1);\n            if (m * m &lt;= x) l = m;\n            else h = m - 1;\n        }\n        return (int) l;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2 \u725b\u987f\u8fed\u4ee3\u6cd5</p> <p>\u4ee4 $C=x$, \u4e5f\u5c31\u662f\u6c42\u51fd\u6570 $y=f(x)=x^2-C$ \u7684\u96f6\u70b9 \u501f\u52a9\u6cf0\u52d2\u7ea7\u6570, \u4e0d\u65ad\u5730\u6c42\u8fc7 $x_0$ \u70b9\u7684\u5207\u7ebf\u4e0e $x$ \u8f74\u7684\u4ea4\u70b9, \u518d\u6c42\u51fd\u6570 $f(x)$ \u5728\u4ea4\u70b9\u6a2a\u5750\u6807\u5904\u7684\u5207\u7ebf, \u76f4\u5230 $y$ \u903c\u8fd1 0 \u70b9: $(x_0, x_0^2-C)$ \u5207\u7ebf: $y-(x_0^2-C)=2x_0*(x-x_0)$ \u5373 $y=2x_0*x-x_0^2-C$ \u4ee4 $y=0, x=\\frac{1}{2}(x_0+\\frac{C}{x_0})$</p> <pre><code>class Solution {\n    public int mySqrt(int x) {\n        int c = x;\n        double x0 = c;\n        while (x0 * x0 - c &gt; 1e6) {\n            x0 = 0.5 * (x0 + c / x0);\n        }\n        return (int) x0;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E4%BD%8D%E8%BF%90%E7%AE%97/","title":"\u4f4d\u8fd0\u7b97","text":""},{"location":"leetcode/new/%E4%BD%8D%E8%BF%90%E7%AE%97/#_1","title":"\u7ffb\u8f6c\u4e8c\u8fdb\u5236\u6570","text":""},{"location":"leetcode/new/%E4%BD%8D%E8%BF%90%E7%AE%97/#190-easy","title":"190. \u98a0\u5012\u4e8c\u8fdb\u5236\u4f4d easy","text":"<p>\u98a0\u5012\u7ed9\u5b9a\u7684 32 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570\u7684\u4e8c\u8fdb\u5236\u4f4d\u3002</p> <p>\u63d0\u793a\uff1a</p> <ul> <li>\u8bf7\u6ce8\u610f\uff0c\u5728\u67d0\u4e9b\u8bed\u8a00\uff08\u5982 Java\uff09\u4e2d\uff0c\u6ca1\u6709\u65e0\u7b26\u53f7\u6574\u6570\u7c7b\u578b\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u8f93\u5165\u548c\u8f93\u51fa\u90fd\u5c06\u88ab\u6307\u5b9a\u4e3a\u6709\u7b26\u53f7\u6574\u6570\u7c7b\u578b\uff0c\u5e76\u4e14\u4e0d\u5e94\u5f71\u54cd\u60a8\u7684\u5b9e\u73b0\uff0c\u56e0\u4e3a\u65e0\u8bba\u6574\u6570\u662f\u6709\u7b26\u53f7\u7684\u8fd8\u662f\u65e0\u7b26\u53f7\u7684\uff0c\u5176\u5185\u90e8\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u5f62\u5f0f\u90fd\u662f\u76f8\u540c\u7684\u3002</li> <li>\u5728 Java \u4e2d\uff0c\u7f16\u8bd1\u5668\u4f7f\u7528\u4e8c\u8fdb\u5236\u8865\u7801\u8bb0\u6cd5\u6765\u8868\u793a\u6709\u7b26\u53f7\u6574\u6570\u3002\u56e0\u6b64\uff0c\u5728 \u793a\u4f8b 2 \u4e2d\uff0c\u8f93\u5165\u8868\u793a\u6709\u7b26\u53f7\u6574\u6570 -3\uff0c\u8f93\u51fa\u8868\u793a\u6709\u7b26\u53f7\u6574\u6570 -1073741825\u3002</li> </ul> <p>bit\u4e00\u4e2a\u4e00\u4e2a\u62fc</p> <pre><code>public class Solution {\n    public int reverseBits(int n) {\n        int res = 0;\n        for (int i = 0; i &lt; 32; i++) {\n            // \u6574\u4f53\u5de6\u79fb\n            res &lt;&lt;= 1;\n            // \u53d6\u4e0b\u4f4e\u4f4d\u8fde\u4e0a\n            res |= n &amp; 1;\n            n &gt;&gt;&gt;= 1;\n        }\n        return res;\n    }\n}\n</code></pre> <p>\u76f4\u63a5\u628abit\u653e\u5230\u6700\u7ec8\u4f4d\u7f6e</p> <pre><code>public class Solution {\n    public int reverseBits(int n) {\n        int res = 0;\n        for (int i = 0; i &lt; 32 &amp;&amp; n != 0; ++i) {\n            // \u6ce8\u610f\u8fd9\u91cc\u53f3\u79fb\u7684\u6b21\u6570, \u539f\u672c\u662f\u7b2c0\u4f4d, \u53f3\u79fb31\u5c31\u662f\u7b2c32\u4f4d\n            res |= (n &amp; 1) &lt;&lt; (31 - i);\n            n &gt;&gt;&gt;= 1;\n        }\n        return res;\n    }\n}\n</code></pre> <p>\u4f4d\u8fd0\u7b97\u5206\u6cbb \u5206\u6cbb\u601d\u60f3, \u5bf9\u79f0\u76f8\u5f53\u4e8e\u4e0d\u65ad\u5730\u4e8c\u5206\u5206\u6cbb\u4ea4\u6362 \u4ea4\u6362: \u79fb\u52a8 -- \u7528mask\u7f6e\u7a7a\u539f\u4f4d\u7f6e -- \u7528mask\u53d6\u4f4d -- \u79fb\u52a8 -- \u4e0e\u64cd\u4f5c\u5b8c\u6210\u4ea4\u6362</p> <pre><code>public class Solution {\n    private static final int M1 = 0x55555555; // 01010101010101010101010101010101\n    private static final int M2 = 0x33333333; // 00110011001100110011001100110011\n    private static final int M4 = 0x0f0f0f0f; // 00001111000011110000111100001111\n    private static final int M8 = 0x00ff00ff; // 00000000111111110000000011111111\n\n    public int reverseBits(int n) {\n        n = n &gt;&gt;&gt; 1 &amp; M1 | (n &amp; M1) &lt;&lt; 1;\n        n = n &gt;&gt;&gt; 2 &amp; M2 | (n &amp; M2) &lt;&lt; 2;\n        n = n &gt;&gt;&gt; 4 &amp; M4 | (n &amp; M4) &lt;&lt; 4;\n        n = n &gt;&gt;&gt; 8 &amp; M8 | (n &amp; M8) &lt;&lt; 8;\n        return n &gt;&gt;&gt; 16 | n &lt;&lt; 16;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E4%BD%8D%E8%BF%90%E7%AE%97/#1","title":"\u7edf\u8ba11","text":""},{"location":"leetcode/new/%E4%BD%8D%E8%BF%90%E7%AE%97/#191-1-easy","title":"191. \u4f4d1\u7684\u4e2a\u6570 easy","text":"<p>\u5251\u6307 Offer 15. \u4e8c\u8fdb\u5236\u4e2d1\u7684\u4e2a\u6570</p> <pre><code>public class Solution {\n    public int hammingWeight(int n) {\n        int cnt = 0;\n        while (n != 0) {\n            n = n &amp; (n - 1);\n            cnt++;\n        }\n        return cnt;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E4%BD%8D%E8%BF%90%E7%AE%97/#231-2-easy","title":"231. 2 \u7684\u5e42 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n\uff0c\u8bf7\u4f60\u5224\u65ad\u8be5\u6574\u6570\u662f\u5426\u662f 2 \u7684\u5e42\u6b21\u65b9\u3002\u5982\u679c\u662f\uff0c\u8fd4\u56de true\uff1b\u5426\u5219\uff0c\u8fd4\u56de false\u3002</p> <p>\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u6574\u6570 x \u4f7f\u5f97 n == 2x\uff0c\u5219\u8ba4\u4e3a n \u662f 2 \u7684\u5e42\u6b21\u65b9\u3002</p> <pre><code>class Solution {\n    public boolean isPowerOfTwo(int n) {\n        return n &gt; 0 &amp;&amp; (n &amp; (n - 1)) == 0;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E4%BD%8D%E8%BF%90%E7%AE%97/#342-4-easy","title":"342. 4\u7684\u5e42 easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad\u5b83\u662f\u5426\u662f 4 \u7684\u5e42\u6b21\u65b9\u3002\u5982\u679c\u662f\uff0c\u8fd4\u56de true\uff1b\u5426\u5219\uff0c\u8fd4\u56de false\u3002</p> <p>\u6574\u6570 n \u662f 4 \u7684\u5e42\u6b21\u65b9\u9700\u6ee1\u8db3\uff1a\u5b58\u5728\u6574\u6570 $x$ \u4f7f\u5f97 $n == 4^x$</p> <p>2\u7684\u5e42 &amp; bit\u8981\u5bf9</p> <pre><code>class Solution {\n    public boolean isPowerOfFour(int n) {\n        return n &gt; 0 &amp;&amp; (n &amp; (n - 1)) == 0\n                &amp;&amp; (n &amp; 0B01010101_01010101_01010101_01010101) != 0;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E4%BD%8D%E8%BF%90%E7%AE%97/#_2","title":"\u5b9e\u73b0\u52a0\u6cd5","text":""},{"location":"leetcode/new/%E4%BD%8D%E8%BF%90%E7%AE%97/#371-mid","title":"371. \u4e24\u6574\u6570\u4e4b\u548c mid","text":"<p>\u5251\u6307 Offer 65. \u4e0d\u7528\u52a0\u51cf\u4e58\u9664\u505a\u52a0\u6cd5</p> <p>\u7ed9\u4f60\u4e24\u4e2a\u6574\u6570 a \u548c b \uff0c\u4e0d\u4f7f\u7528 \u8fd0\u7b97\u7b26 + \u548c -\uff0c\u8ba1\u7b97\u5e76\u8fd4\u56de\u4e24\u6574\u6570\u4e4b\u548c\u3002</p> <p>a ^ b \u8868\u793a\u4e0d\u8fdb\u4f4d\u7684 '+' (a &amp; b) &lt;&lt; 1 \u8868\u793a\u8fdb\u4f4d \u9012\u5f52\u7ec8\u6b62: a &amp; b \u5f88\u5feb\u5c31\u4f1a\u7b49\u4e8e 0</p> <pre><code>class Solution {\n    public int getSum(int a, int b) {\n        return b == 0\n                ? a\n                : getSum(a ^ b, (a &amp; b) &lt;&lt; 1);\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%89%8D%E7%BC%80%E6%A0%91Trie/","title":"\u524d\u7f00\u6811Trie","text":""},{"location":"leetcode/new/%E5%89%8D%E7%BC%80%E6%A0%91Trie/#trie","title":"Trie (\u524d\u7f00\u6811)","text":""},{"location":"leetcode/new/%E5%89%8D%E7%BC%80%E6%A0%91Trie/#208-trie","title":"208. \u5b9e\u73b0 Trie (\u524d\u7f00\u6811)","text":"<p>Trie\uff08\u53d1\u97f3\u7c7b\u4f3c \"try\"\uff09\u6216\u8005\u8bf4 \u524d\u7f00\u6811 \u662f\u4e00\u79cd\u6811\u5f62\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u9ad8\u6548\u5730\u5b58\u50a8\u548c\u68c0\u7d22\u5b57\u7b26\u4e32\u6570\u636e\u96c6\u4e2d\u7684\u952e\u3002\u8fd9\u4e00\u6570\u636e\u7ed3\u6784\u6709\u76f8\u5f53\u591a\u7684\u5e94\u7528\u60c5\u666f\uff0c\u4f8b\u5982\u81ea\u52a8\u8865\u5b8c\u548c\u62fc\u5199\u68c0\u67e5\u3002</p> <p>\u8bf7\u4f60\u5b9e\u73b0 Trie \u7c7b\uff1a</p> <ul> <li>Trie() \u521d\u59cb\u5316\u524d\u7f00\u6811\u5bf9\u8c61\u3002</li> <li>void insert(String word) \u5411\u524d\u7f00\u6811\u4e2d\u63d2\u5165\u5b57\u7b26\u4e32 word \u3002</li> <li>boolean search(String word) \u5982\u679c\u5b57\u7b26\u4e32 word \u5728\u524d\u7f00\u6811\u4e2d\uff0c\u8fd4\u56de true\uff08\u5373\uff0c\u5728\u68c0\u7d22\u4e4b\u524d\u5df2\u7ecf\u63d2\u5165\uff09\uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002</li> <li>boolean startsWith(String prefix) \u5982\u679c\u4e4b\u524d\u5df2\u7ecf\u63d2\u5165\u7684\u5b57\u7b26\u4e32 word \u7684\u524d\u7f00\u4e4b\u4e00\u4e3a prefix \uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002</li> </ul> <pre><code>class Trie {\n    private final Node root = new Node();\n\n    private static class Node {\n        Node[] table = new Node[26];\n        boolean isLeaf;\n    }\n\n    public void insert(String word) {\n        Node n = root;\n        for (char c : word.toCharArray()) {\n            if (n.table[c - 'a'] == null)\n                n.table[c - 'a'] = new Node();\n            n = n.table[c - 'a'];\n        }\n        n.isLeaf = true;\n    }\n\n    public boolean search(String word) {\n        Node n = root;\n        for (char c : word.toCharArray()) {\n            if (n.table[c - 'a'] == null) return false;\n            n = n.table[c - 'a'];\n        }\n        return n.isLeaf;\n    }\n\n    public boolean startsWith(String prefix) {\n        Node n = root;\n        for (char c : prefix.toCharArray()) {\n            if (n.table[c - 'a'] == null) return false;\n            n = n.table[c - 'a'];\n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%8C%BA%E9%97%B4/","title":"\u533a\u95f4","text":""},{"location":"leetcode/new/%E5%8C%BA%E9%97%B4/#_2","title":"\u5408\u5e76\u533a\u95f4","text":""},{"location":"leetcode/new/%E5%8C%BA%E9%97%B4/#56-mid","title":"56. \u5408\u5e76\u533a\u95f4 mid","text":"<p>\u4ee5\u6570\u7ec4 intervals \u8868\u793a\u82e5\u5e72\u4e2a\u533a\u95f4\u7684\u96c6\u5408\uff0c\u5176\u4e2d\u5355\u4e2a\u533a\u95f4\u4e3a intervals[i] = [starti, endi]\u3002\u8bf7\u4f60\u5408\u5e76\u6240\u6709\u91cd\u53e0\u7684\u533a\u95f4\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u4e0d\u91cd\u53e0\u7684\u533a\u95f4\u6570\u7ec4\uff0c\u8be5\u6570\u7ec4\u9700\u6070\u597d\u8986\u76d6\u8f93\u5165\u4e2d\u7684\u6240\u6709\u533a\u95f4\u3002</p> <p>\u6709\u70b9\u662f\u5426\u53ef\u89e6\u8fbe\u7684\u611f\u89c9, \u6309\u5de6\u7aef\u70b9\u6392\u5e8f, \u5148\u5212\u5b9a\u4e00\u4e2a\u533a\u95f4(\u7b2c\u4e00\u4e2a\u533a\u95f4\u7684\u8303\u56f4) \u904d\u5386\u6240\u6709\u533a\u95f4, \u5982\u679c\u6709\u91cd\u53e0\u5c31\u66f4\u65b0\u53f3\u7aef\u70b9, \u6ca1\u6709\u5c31\u5c06\u524d\u4e00\u4e2a\u533a\u95f4\u52a0\u5165</p> <pre><code>class Solution {\n    public int[][] merge(int[][] intervals) {\n        Arrays.sort(intervals, (a, b) -&gt; a[0] - b[0]);\n        List&lt;int[]&gt; list = new ArrayList&lt;&gt;();\n        int l = intervals[0][0], r = intervals[0][1];\n        for (int[] e : intervals) {\n            // \u65b0\u533a\u95f4\n            if (r &lt; e[0]) {\n                list.add(new int[]{l, r});\n                l = e[0];\n                r = e[1];\n            }\n            // \u878d\u5408\n            else r = Math.max(r, e[1]);\n        }\n        //\u6700\u540e\u7684\u533a\u95f4\u6ca1\u52a0\n        list.add(new int[]{l, r});\n\n        int[][] res = new int[list.size()][];\n        for (int i = 0; i &lt; list.size(); i++) {\n            res[i] = list.get(i);\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%8C%BA%E9%97%B4/#_3","title":"\u91cd\u53e0\u533a\u95f4\u6570","text":""},{"location":"leetcode/new/%E5%8C%BA%E9%97%B4/#253-ii-mid","title":"253. \u4f1a\u8bae\u5ba4 II mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4f1a\u8bae\u65f6\u95f4\u5b89\u6392\u7684\u6570\u7ec4 intervals\uff0c\u6bcf\u4e2a\u4f1a\u8bae\u65f6\u95f4\u90fd\u4f1a\u5305\u62ec\u5f00\u59cb\u548c\u7ed3\u675f\u7684\u65f6\u95f4 intervals[i] = [starti, endi]\uff0c\u8fd4\u56de \u6240\u9700\u4f1a\u8bae\u5ba4\u7684\u6700\u5c0f\u6570\u91cf\u3002</p> <p>\u8d2a\u5fc3 \u6309\u5f00\u59cb\u65f6\u95f4\u6392\u5e8f, \u904d\u5386\u4e2d, \u4e0e\u6700\u5c0f\u7ed3\u675f\u533a\u95f4\u5408\u5e76</p> <pre><code>class Solution {\n    public int minMeetingRooms(int[][] intervals) {\n        Arrays.sort(intervals, Comparator.comparingInt(a -&gt; a[0]));\n        PriorityQueue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;();\n        for (int[] e : intervals) {\n            if (heap.isEmpty()) {\n                heap.add(e[1]);\n                continue;\n            }\n            if (heap.element() &lt;= e[0])\n                heap.remove();\n            heap.add(e[1]);\n        }\n        return heap.size();\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%8F%AF%E8%BE%BE%E6%80%A7/","title":"\u53ef\u8fbe\u6027","text":""},{"location":"leetcode/new/%E5%8F%AF%E8%BE%BE%E6%80%A7/#_2","title":"\u72b6\u6001\u8f6c\u79fb\u53ef\u8fbe","text":""},{"location":"leetcode/new/%E5%8F%AF%E8%BE%BE%E6%80%A7/#55-mid","title":"55. \u8df3\u8dc3\u6e38\u620f mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6570\u7ec4 nums \uff0c\u4f60\u6700\u521d\u4f4d\u4e8e\u6570\u7ec4\u7684 \u7b2c\u4e00\u4e2a\u4e0b\u6807 \u3002</p> <p>\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u4f60\u5728\u8be5\u4f4d\u7f6e\u53ef\u4ee5\u8df3\u8dc3\u7684\u6700\u5927\u957f\u5ea6\u3002</p> <p>\u5224\u65ad\u4f60\u662f\u5426\u80fd\u591f\u5230\u8fbe\u6700\u540e\u4e00\u4e2a\u4e0b\u6807\u3002</p> <p>\u4e0d\u65ad\u66f4\u65b0\u53ef\u89e6\u8fbe\u7684\u8303\u56f4</p> <pre><code>class Solution {\n    public boolean canJump(int[] nums) {\n        int reach = nums[0];\n        int n = nums.length;\n        for (int i = 0; i &lt; n; i++) {\n            if (reach &lt; i) return false;\n            reach = Math.max(reach, i + nums[i]);\n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%8F%AF%E8%BE%BE%E6%80%A7/#97-mid","title":"97. \u4ea4\u9519\u5b57\u7b26\u4e32 mid","text":"<p>\u7ed9\u5b9a\u4e09\u4e2a\u5b57\u7b26\u4e32 s1\u3001s2\u3001s3\uff0c\u8bf7\u4f60\u5e2e\u5fd9\u9a8c\u8bc1 s3 \u662f\u5426\u662f\u7531 s1 \u548c s2 \u4ea4\u9519 \u7ec4\u6210\u7684\u3002</p> <p>\u89e3\u6cd5 DP</p> <p>\u5c06 s1, s2 \u62c9\u6210 2 \u7ef4\u7684, \u627e\u4e00\u6761\u901a\u8def\u5230\u53f3\u4e0b\u89d2</p> <pre><code>class Solution {\n    public boolean isInterleave(String s1, String s2, String s3) {\n        int l1 = s1.length(), l2 = s2.length(), l3 = s3.length();\n        if (l1 + l2 != l3) return false;\n        // \u5b57\u7b26\u4e32\u901a\u5e38\u9700\u8981\u7ed9 \"\" \u7559\u4f4d\u7f6e\n        boolean[][] dp = new boolean[l1 + 1][l2 + 1];\n        dp[0][0] = true;\n        for (int i = 0; i &lt;= l1; i++) {\n            for (int j = 0; j &lt;= l2; j++) {\n                if (i &gt; 0) dp[i][j] |= (dp[i - 1][j] &amp;&amp; s1.charAt(i - 1) == s3.charAt(i + j - 1));\n                if (j &gt; 0) dp[i][j] |= (dp[i][j - 1] &amp;&amp; s2.charAt(j - 1) == s3.charAt(i + j - 1));\n            }\n        }\n        return dp[l1][l2];\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%8F%AF%E8%BE%BE%E6%80%A7/#134-mid","title":"134. \u52a0\u6cb9\u7ad9 mid","text":"<p>\u5728\u4e00\u6761\u73af\u8def\u4e0a\u6709 n \u4e2a\u52a0\u6cb9\u7ad9\uff0c\u5176\u4e2d\u7b2c i \u4e2a\u52a0\u6cb9\u7ad9\u6709\u6c7d\u6cb9 gas[i]\u5347\u3002</p> <p>\u4f60\u6709\u4e00\u8f86\u6cb9\u7bb1\u5bb9\u91cf\u65e0\u9650\u7684\u7684\u6c7d\u8f66\uff0c\u4ece\u7b2c i \u4e2a\u52a0\u6cb9\u7ad9\u5f00\u5f80\u7b2c i+1 \u4e2a\u52a0\u6cb9\u7ad9\u9700\u8981\u6d88\u8017\u6c7d\u6cb9 cost[i]\u5347\u3002\u4f60\u4ece\u5176\u4e2d\u7684\u4e00\u4e2a\u52a0\u6cb9\u7ad9\u51fa\u53d1\uff0c\u5f00\u59cb\u65f6\u6cb9\u7bb1\u4e3a\u7a7a\u3002</p> <p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\u6570\u7ec4 gas \u548c cost \uff0c\u5982\u679c\u4f60\u53ef\u4ee5\u7ed5\u73af\u8def\u884c\u9a76\u4e00\u5468\uff0c\u5219\u8fd4\u56de\u51fa\u53d1\u65f6\u52a0\u6cb9\u7ad9\u7684\u7f16\u53f7\uff0c\u5426\u5219\u8fd4\u56de -1 \u3002\u5982\u679c\u5b58\u5728\u89e3\uff0c\u5219 \u4fdd\u8bc1 \u5b83\u662f \u552f\u4e00 \u7684\u3002</p> <p>\u89e3\u6cd5 1</p> <p>\u5047\u8bbe A \u70b9\u51fa\u53d1, C \u70b9\u4e0d\u53ef\u8fbe, \u90a3\u4e48 A=&gt;C \u4e4b\u95f4\u7684\u70b9\u90fd\u53ef\u8fbe, \u90fd\u53ef\u8fbe\u610f\u5473\u7740\u5230\u8fbe\u4e4b\u524d\u90fd\u5e26\u7740\u6cb9 \u6240\u4ee5, \u4ece A=&gt;C \u4e4b\u95f4\u7684\u70b9\u51fa\u53d1\u90fd\u4e0d\u884c \u8fd9\u65f6, \u4ece C \u70b9\u91cd\u65b0\u51fa\u53d1, \u5c1d\u8bd5</p> <pre><code>class Solution {\n    public int canCompleteCircuit(int[] gas, int[] cost) {\n        int n = gas.length;\n        // \u4ecei\u51fa\u53d1\n        for (int i = 0; i &lt; n; ) {\n            int cnt = 0;\n            for (int sum = 0; cnt &lt; n; cnt++) {\n                int j = (i + cnt) % n;\n                sum += gas[j] - cost[j];\n                if (sum &lt; 0) break;\n            }\n            if (cnt == n) return i;\n            i += cnt + 1;\n        }\n        return -1;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2</p> <p>sum(\u51c0\u6cb9\u8017) &gt;= 0 \u624d\u80fd\u8fc7 \u6700\u4f4e\u70b9\u8981\u5c3d\u53ef\u80fd\u9ad8, \u4e5f\u5c31\u662f\u8fdb\u5165\u6700\u4f4e\u70b9\u7684\u65f6\u5019\u6709\u79ef\u7d2f, \u4e5f\u5c31\u662f\u4ece\u6700\u4f4e\u70b9\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u5f00\u59cb</p> <pre><code>class Solution {\n    public int canCompleteCircuit(int[] gas, int[] cost) {\n        int n = gas.length;\n        int min = Integer.MAX_VALUE;\n        int res = 0;\n        int sum = 0;\n        for (int i = 0; i &lt; n; i++) {\n            sum += gas[i] - cost[i];\n            if (min &gt;= sum) {\n                min = sum;\n                res = i;\n            }\n        }\n        if (sum &gt;= 0) return (res + 1) % n;\n        return -1;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E5%B0%91%E7%A7%8D%E4%B8%8D%E5%90%8C/","title":"\u591a\u5c11\u79cd\u4e0d\u540c","text":"<p>\u901a\u5e38\u679a\u4e3e\u7684\u590d\u6742\u5ea6 $O(2^n)$ \u8003\u8651 dp \u8003\u8651\u80cc\u5305</p> <p>\u80cc\u5305\u5c31\u662f\u7528\u8fde\u7eed\u7684\u7a7a\u95f4, \u8bb0\u5fc6\u80fd\u586b\u6ee1\u80cc\u5305\u7684\u7ec4\u5408\u6570</p>"},{"location":"leetcode/new/%E5%A4%9A%E5%B0%91%E7%A7%8D%E4%B8%8D%E5%90%8C/#_2","title":"\u591a\u5c11\u79cd\u4e0d\u540c","text":"<p>\u6bcf\u4e00\u6b65\u6709 k \u79cd\u9009\u62e9\uff0c\u6bcf\u79cd\u9009\u62e9\u5bfc\u81f4\u4e0d\u540c\u7684\u72b6\u6001\uff0c\u5230\u8fbe\u67d0\u79cd\u72b6\u6001\u65f6\u53ef\u80fd\u7684\u64cd\u4f5c\u6570</p>"},{"location":"leetcode/new/%E5%A4%9A%E5%B0%91%E7%A7%8D%E4%B8%8D%E5%90%8C/#62-mid","title":"62. \u4e0d\u540c\u8def\u5f84 mid","text":"<p>\u4e00\u4e2a\u673a\u5668\u4eba\u4f4d\u4e8e\u4e00\u4e2a m x n \u7f51\u683c\u7684\u5de6\u4e0a\u89d2 \uff08\u8d77\u59cb\u70b9\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a \u201cStart\u201d \uff09\u3002</p> <p>\u673a\u5668\u4eba\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002\u673a\u5668\u4eba\u8bd5\u56fe\u8fbe\u5230\u7f51\u683c\u7684\u53f3\u4e0b\u89d2\uff08\u5728\u4e0b\u56fe\u4e2d\u6807\u8bb0\u4e3a \u201cFinish\u201d \uff09\u3002</p> <p>\u95ee\u603b\u5171\u6709\u591a\u5c11\u6761\u4e0d\u540c\u7684\u8def\u5f84\uff1f</p> <p>\u89e3\u6cd5 1: \u6570\u5b66</p> <p>$C_{(m-1)+(n-1)}^{(m-1)}=\\frac{n*...*(m-1+n-1)}{1*...*(m-1)}$</p> <pre><code>class Solution {\n    public int uniquePaths(int m, int n) {\n        long ans = 1;\n        for (int x = n, y = 1; y &lt; m; ++x, ++y) {\n            ans = ans * x / y;\n        }\n        return (int) ans;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2: dp</p> <p>dp[i][j] = cnt</p> <pre><code>class Solution {\n    public int uniquePaths(int m, int n) {\n        int[][] f = new int[m][n];\n        for (int i = 0; i &lt; m; ++i) {\n            f[i][0] = 1;\n        }\n        for (int j = 0; j &lt; n; ++j) {\n            f[0][j] = 1;\n        }\n        for (int i = 1; i &lt; m; ++i) {\n            for (int j = 1; j &lt; n; ++j) {\n                f[i][j] = f[i - 1][j] + f[i][j - 1];\n            }\n        }\n        return f[m - 1][n - 1];\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E5%B0%91%E7%A7%8D%E4%B8%8D%E5%90%8C/#70-easy","title":"70. \u722c\u697c\u68af easy","text":"<p>\u5251\u6307 Offer 10- II. \u9752\u86d9\u8df3\u53f0\u9636\u95ee\u9898</p> <p>\u5047\u8bbe\u4f60\u6b63\u5728\u722c\u697c\u68af\u3002\u9700\u8981 n \u9636\u4f60\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002</p> <p>\u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c 1 \u6216 2 \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f</p> <p>\u89e3\u6cd5 1: \u6982\u7387</p> <p>\u9009\u62e9\u6709\u51e0\u4e2a 2; \u65f6\u95f4\u590d\u6742\u5ea6$O(n^2)$</p> <pre><code>class Solution {\n\n    public int climbStairs(int n) {\n        int sum = 1;\n        // i: 2\u7684\u4e2a\u6570\n        for (int i = 1; i &lt;= n / 2; i++) {\n            int cnt1 = n - (2 * i);\n            sum += cmn(i + cnt1, i);\n        }\n        return sum;\n    }\n\n    private int cmn(int m, int n) {\n        long res = 1L;\n        n = Math.min(n, (m - n));\n        // m--&gt;m-n+1 / n--&gt;1\n        for (int x = m, y = 1; y &lt;= n; x--, y++) {\n            // \u987a\u5e8f\u5f88\u91cd\u8981\n            res = res * x / y;\n        }\n        return (int) res;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2: DP</p> <p>$f(n)=f(n-1)+f(n-2)$ $f(0) = 0$ $f(1) = 1$ $f(2) = 2$</p> <pre><code>class Solution {\n    public int climbStairs(int n) {\n        int n1 = 0, n2 = 0, n3 = 1;\n        for (int i = 1; i &lt;= n; i++) {\n            n1 = n2;\n            n2 = n3;\n            n3 = n1 + n2;\n        }\n        return n3;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 3: \u7ebf\u6027\u4ee3\u6570-\u77e9\u9635\u5feb\u901f\u5e42</p> <p>\u5229\u7528\u77e9\u9635\u4e58\u6cd5, $O(logn)$, \u770b\u9898\u89e3\u7f62</p> <pre><code>public class Solution {\n    public int climbStairs(int n) {\n        int[][] q = {{1, 1}, {1, 0}};\n        int[][] res = pow(q, n);\n        return res[0][0];\n    }\n\n    public int[][] pow(int[][] a, int n) {\n        int[][] ret = {{1, 0}, {0, 1}};\n        while (n &gt; 0) {\n            if ((n &amp; 1) == 1) {\n                ret = multiply(ret, a);\n            }\n            a = multiply(a, a);\n            n &gt;&gt;= 1;\n        }\n        return ret;\n    }\n\n    public int[][] multiply(int[][] a, int[][] b) {\n        int[][] c = new int[2][2];\n        for (int i = 0; i &lt; 2; i++) {\n            for (int j = 0; j &lt; 2; j++) {\n                c[i][j] = a[i][0] * b[0][j] + a[i][1] * b[1][j];\n            }\n        }\n        return c;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E5%B0%91%E7%A7%8D%E4%B8%8D%E5%90%8C/#91-mid","title":"91. \u89e3\u7801\u65b9\u6cd5 mid","text":"<p>\u4e00\u6761\u5305\u542b\u5b57\u6bcd A-Z \u7684\u6d88\u606f\u901a\u8fc7\u4ee5\u4e0b\u6620\u5c04\u8fdb\u884c\u4e86\u7f16\u7801\uff1a</p> <pre><code>'A' -&gt; \"1\"\n'B' -&gt; \"2\"\n...\n'Z' -&gt; \"26\"\n</code></pre> <p>\u8981 \u89e3\u7801 \u5df2\u7f16\u7801\u7684\u6d88\u606f\uff0c\u6240\u6709\u6570\u5b57\u5fc5\u987b\u57fa\u4e8e\u4e0a\u8ff0\u6620\u5c04\u7684\u65b9\u6cd5\uff0c\u53cd\u5411\u6620\u5c04\u56de\u5b57\u6bcd\uff08\u53ef\u80fd\u6709\u591a\u79cd\u65b9\u6cd5\uff09\u3002\u4f8b\u5982\uff0c\"11106\" \u53ef\u4ee5\u6620\u5c04\u4e3a\uff1a</p> <ul> <li>\"AAJF\" \uff0c\u5c06\u6d88\u606f\u5206\u7ec4\u4e3a (1 1 10 6)</li> <li>\"KJF\" \uff0c\u5c06\u6d88\u606f\u5206\u7ec4\u4e3a (11 10 6)</li> </ul> <p>\u6ce8\u610f\uff0c\u6d88\u606f\u4e0d\u80fd\u5206\u7ec4\u4e3a (1 11 06) \uff0c\u56e0\u4e3a \"06\" \u4e0d\u80fd\u6620\u5c04\u4e3a \"F\" \uff0c\u8fd9\u662f\u7531\u4e8e \"6\" \u548c \"06\" \u5728\u6620\u5c04\u4e2d\u5e76\u4e0d\u7b49\u4ef7\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u53ea\u542b\u6570\u5b57\u7684\u975e\u7a7a\u5b57\u7b26\u4e32 s\uff0c\u8bf7\u8ba1\u7b97\u5e76\u8fd4\u56de\u89e3\u7801\u65b9\u6cd5\u7684\u603b\u6570\u3002</p> <p>\u89e3\u6cd5 DP</p> <p>f(n) = f(n-1) + f(n-2)</p> <pre><code>class Solution {\n    public int numDecodings(String s) {\n        int n = s.length();\n        if (s.charAt(0) == '0') return 0;\n        int[] dp = new int[n];\n        dp[0] = 1;\n        for (int i = 1; i &lt; n; i++) {\n            if (s.charAt(i) != '0')\n                dp[i] = dp[i - 1];\n\n            if (i == 1) dp[i]++; // 2 \u4e2a\u5143\u7d20\u672c\u8eab\u7b97 1 \u79cd\n            else if (s.charAt(i - 1) != '0'\n                    &amp;&amp; (s.charAt(i - 1) - '0') * 10 + s.charAt(i) - '0' &lt;= 26)\n                dp[i] += dp[i - 2];\n        }\n        return dp[n - 1];\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E5%B0%91%E7%A7%8D%E4%B8%8D%E5%90%8C/#96-mid","title":"96. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n \uff0c\u6c42\u6070\u7531 n \u4e2a\u8282\u70b9\u7ec4\u6210\u4e14\u8282\u70b9\u503c\u4ece 1 \u5230 n \u4e92\u4e0d\u76f8\u540c\u7684 \u4e8c\u53c9\u641c\u7d22\u6811 \u6709\u591a\u5c11\u79cd\uff1f\u8fd4\u56de\u6ee1\u8db3\u9898\u610f\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u79cd\u6570\u3002</p> <p>\u89e3\u6cd5 1 DP</p> <p>\u6839\u8282\u70b9 i \u4ece 1==&gt;n, \u5de6\u53f3\u5b50\u6811\u6570\u91cf\u76f8\u4e58 dp \u5b58 \u8282\u70b9\u6570\u91cf\u548c\u6811\u79cd\u7c7b\u7684\u5173\u7cfb</p> <pre><code>class Solution {\n    public int numTrees(int n) {\n        int[] dp = new int[n + 1];\n        dp[0] = 1;\n        dp[1] = 1;\n        for (int i = 2; i &lt;= n; i++) {\n            // \u5de6\u5b50\u6811\u8282\u70b9\u6570\u91cf\n            for (int left = 0; left &lt; i; left++) {\n                dp[i] += dp[left] * dp[i - left - 1];\n            }\n        }\n        return dp[n];\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2 \u6570\u5b66</p> <p>\u5361\u7279\u5170\u6570</p>"},{"location":"leetcode/new/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%9C%80%E4%BC%98%E8%A7%A3/","title":"\u591a\u6b65\u64cd\u4f5c\u6700\u4f18\u89e3","text":""},{"location":"leetcode/new/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%9C%80%E4%BC%98%E8%A7%A3/#_2","title":"\u8def\u5f84\u548c\u6700\u5c0f","text":"<p>\u8d2a\u5fc3 DP</p>"},{"location":"leetcode/new/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%9C%80%E4%BC%98%E8%A7%A3/#64-mid","title":"64. \u6700\u5c0f\u8def\u5f84\u548c mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u975e\u8d1f\u6574\u6570\u7684 m x n \u7f51\u683c grid \uff0c\u8bf7\u627e\u51fa\u4e00\u6761\u4ece\u5de6\u4e0a\u89d2\u5230\u53f3\u4e0b\u89d2\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u8def\u5f84\u4e0a\u7684\u6570\u5b57\u603b\u548c\u4e3a\u6700\u5c0f\u3002</p> <p>\u8bf4\u660e\uff1a\u6bcf\u6b21\u53ea\u80fd\u5411\u4e0b\u6216\u8005\u5411\u53f3\u79fb\u52a8\u4e00\u6b65\u3002</p> <p>\u89e3\u6cd5 DP</p> <pre><code>class Solution {\n    public int minPathSum(int[][] grid) {\n\n        int r = grid.length, c = grid[0].length;\n        int[][] dp = new int[r][c];\n        dp[0][0] = grid[0][0];\n        for (int i = 1; i &lt; r; i++) {\n            dp[i][0] = dp[i - 1][0] + grid[i][0];\n        }\n        for (int j = 1; j &lt; c; j++) {\n            dp[0][j] = dp[0][j - 1] + grid[0][j];\n        }\n        for (int i = 1; i &lt; r; i++) {\n            for (int j = 1; j &lt; c; j++) {\n                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n            }\n        }\n        return dp[r - 1][c - 1];\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%9C%80%E4%BC%98%E8%A7%A3/#120-mid","title":"120. \u4e09\u89d2\u5f62\u6700\u5c0f\u8def\u5f84\u548c mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e09\u89d2\u5f62 triangle\uff0c\u627e\u51fa\u81ea\u9876\u5411\u4e0b\u7684\u6700\u5c0f\u8def\u5f84\u548c\u3002</p> <p>\u6bcf\u4e00\u6b65\u53ea\u80fd\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u4e2d\u76f8\u90bb\u7684\u7ed3\u70b9\u4e0a\u3002\u76f8\u90bb\u7684\u7ed3\u70b9 \u5728\u8fd9\u91cc\u6307\u7684\u662f \u4e0b\u6807 \u4e0e \u4e0a\u4e00\u5c42\u7ed3\u70b9\u4e0b\u6807 \u76f8\u540c\u6216\u8005\u7b49\u4e8e \u4e0a\u4e00\u5c42\u7ed3\u70b9\u4e0b\u6807 + 1 \u7684\u4e24\u4e2a\u7ed3\u70b9\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6b63\u4f4d\u4e8e\u5f53\u524d\u884c\u7684\u4e0b\u6807 i \uff0c\u90a3\u4e48\u4e0b\u4e00\u6b65\u53ef\u4ee5\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u7684\u4e0b\u6807 i \u6216 i + 1 \u3002</p> <p>DP</p> <p>1994 \u5e74\u7684 IOI, \u73b0\u5728\u90fd\u6210\u5165\u95e8\u4e86</p> <pre><code>class Solution {\n    public int minimumTotal(List&lt;List&lt;Integer&gt;&gt; triangle) {\n        int n = triangle.size();\n        if (n == 1) return triangle.get(0).get(0);\n        int[][] sum = new int[n][n];\n        sum[0][0] = triangle.get(0).get(0);\n        int res = Integer.MAX_VALUE;\n        for (int i = 1; i &lt; n; i++) {\n            for (int j = 0; j &lt;= i; j++) {\n                int cost = Integer.MAX_VALUE;\n                if (j != 0) cost = Math.min(cost, sum[i - 1][j - 1]);\n                if (j != i) cost = Math.min(cost, sum[i - 1][j]);\n                sum[i][j] = triangle.get(i).get(j) + cost;\n                if (i == n - 1) res = Math.min(res, sum[i][j]);\n            }\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%9C%80%E4%BC%98%E8%A7%A3/#_3","title":"\u6700\u5c11\u64cd\u4f5c\u6b21\u6570","text":""},{"location":"leetcode/new/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%9C%80%E4%BC%98%E8%A7%A3/#72-hard","title":"72. \u7f16\u8f91\u8ddd\u79bb hard","text":"<p>\u7ed9\u4f60\u4e24\u4e2a\u5355\u8bcd word1 \u548c word2\uff0c \u8bf7\u8fd4\u56de\u5c06 word1 \u8f6c\u6362\u6210 word2 \u6240\u4f7f\u7528\u7684\u6700\u5c11\u64cd\u4f5c\u6570\u3002</p> <p>\u4f60\u53ef\u4ee5\u5bf9\u4e00\u4e2a\u5355\u8bcd\u8fdb\u884c\u5982\u4e0b\u4e09\u79cd\u64cd\u4f5c\uff1a</p> <ul> <li>\u63d2\u5165\u4e00\u4e2a\u5b57\u7b26</li> <li>\u5220\u9664\u4e00\u4e2a\u5b57\u7b26</li> <li>\u66ff\u6362\u4e00\u4e2a\u5b57\u7b26</li> </ul> <p>\u6c49\u660e\u8ddd\u79bb\u4ee5\u524d\u4e5f\u662f\u7ecf\u5178\u9898\u76ee, \u73b0\u5728\u90fd\u6210 mid \u4e86 \u5b57\u7b26\u4e32\u8f6c\u79fb\u901a\u5e38\u5f04\u6210\u4e8c\u7ef4\u7684, \u8003\u8651\u5982\u4e0b: dp[i][j] \u4ee3\u8868 word1[:i] \u8f6c\u6362\u6210 word2[:j] \u9700\u8981\u6700\u5c11\u6b65\u6570</p> <pre><code>class Solution {\n    public int minDistance(String word1, String word2) {\n\n        int n1 = word1.length(), n2 = word2.length();\n        int[][] dp = new int[n1 + 1][n2 + 1];\n\n        for (int i = 1; i &lt;= n1; i++) {\n            dp[i][0] = i;\n        }\n        for (int i = 1; i &lt;= n2; i++) {\n            dp[0][i] = i;\n        }\n\n        for (int i = 1; i &lt;= n1; i++) {\n            for (int j = 1; j &lt;= n2; j++) {\n                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i - 1][j - 1],\n                            Math.min(dp[i][j - 1], dp[i - 1][j]));\n                }\n            }\n        }\n        return dp[n1][n2];\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%9C%80%E4%BC%98%E8%A7%A3/#132-ii-hard","title":"132. \u5206\u5272\u56de\u6587\u4e32 II hard","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u8bf7\u4f60\u5c06 s \u5206\u5272\u6210\u4e00\u4e9b\u5b50\u4e32\uff0c\u4f7f\u6bcf\u4e2a\u5b50\u4e32\u90fd\u662f\u56de\u6587\u3002 \u8fd4\u56de\u7b26\u5408\u8981\u6c42\u7684 \u6700\u5c11\u5206\u5272\u6b21\u6570\u3002</p> <p>\u5148\u627e\u5230\u6240\u6709\u7684\u56de\u6587\u4e32; \u6ce8\u610f, \u627e\u6240\u6709\u56de\u6587\u4e32\u7528\u4e0d\u7528 dp \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4e00\u6837\u7684, \u53ef\u4ee5\u4e0d\u7528 dp \u5230 i \u7684\u5207\u5272\u6b21\u6570 = 1+min(\u53bb\u6389\u6700\u540e\u4e00\u6bb5\u7684\u6b21\u6570)</p> <pre><code>class Solution {\n    public int minCut(String s) {\n        char[] arr = s.toCharArray();\n        int n = s.length();\n        boolean[][] f = new boolean[n][n];\n        /*\n        for (int i = n - 1; i &gt;= 0; i--) {\n            for (int j = i; j &lt; n; j++) {\n                boolean equal = arr[i] == arr[j];\n                if (j - i &lt;= 1) f[i][j] = equal;\n                else f[i][j] = equal &amp;&amp; f[i + 1][j - 1];\n            }\n        }\n        */\n        for (int i = 0; i &lt; n; i++) {\n            int l = i, r = i;\n            while (l &gt;= 0 &amp;&amp; r &lt; n &amp;&amp; arr[l] == arr[r]) {\n                f[l--][r++] = true;\n            }\n            l = i;\n            r = i + 1;\n            while (l &gt;= 0 &amp;&amp; r &lt; n &amp;&amp; arr[l] == arr[r]) {\n                f[l--][r++] = true;\n            }\n        }\n        // [0, i] \u7684\u5207\u5272\u6b21\u6570\n        int[] dp = new int[n];\n        for (int i = 0; i &lt; n; i++) {\n            dp[i] = i;\n            if (f[0][i]) {\n                // \u7b2c1\u6bb5\u4e0d\u9700\u8981\u5207\u5272\n                dp[i] = 0;\n                continue;\n            }\n            for (int j = 0; j &lt; i; j++) {\n                if (f[j + 1][i])\n                    dp[i] = Math.min(dp[i], dp[j] + 1);\n            }\n        }\n        return dp[n - 1];\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%9C%80%E4%BC%98%E8%A7%A3/#279-mid","title":"279. \u5b8c\u5168\u5e73\u65b9\u6570 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n\uff0c\u8fd4\u56de \u548c\u4e3a n \u7684\u5b8c\u5168\u5e73\u65b9\u6570\u7684\u6700\u5c11\u6570\u91cf\u3002</p> <p>\u5b8c\u5168\u5e73\u65b9\u6570 \u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5176\u503c\u7b49\u4e8e\u53e6\u4e00\u4e2a\u6574\u6570\u7684\u5e73\u65b9\uff1b\u6362\u53e5\u8bdd\u8bf4\uff0c\u5176\u503c\u7b49\u4e8e\u4e00\u4e2a\u6574\u6570\u81ea\u4e58\u7684\u79ef\u3002\u4f8b\u5982\uff0c1\u30014\u30019 \u548c 16 \u90fd\u662f\u5b8c\u5168\u5e73\u65b9\u6570\uff0c\u800c 3 \u548c 11 \u4e0d\u662f\u3002</p> <p>\u89e3\u6cd5 1:DP</p> <p>\u7c7b\u4f3c\u80cc\u5305, \u6bd4\u80cc\u5305\u7b80\u5355</p> <pre><code>class Solution {\n    public int numSquares(int n) {\n        int[] dp = new int[n + 1];\n        for (int i = 1; i &lt;= n; i++) {\n            int min = Integer.MAX_VALUE;\n            // \u5dee\u989d\u662f\u5b8c\u5168\u5e73\u65b9\u6570\n            for (int j = 1; j * j &lt;= i; j++) {\n                min = Math.min(min, dp[i - j * j]);\n            }\n            dp[i] = min + 1;\n        }\n        return dp[n];\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2:\u6570\u5b66</p> <p>4 \u5e73\u65b9\u548c\u5b9a\u7406</p> <pre><code>class Solution {\n    public int numSquares(int n) {\n        // 4\u5e73\u65b9\u548c\u5b9a\u7406 1 2 3 4\n        if (perfect(n)) return 1;\n        if (perfect4(n)) return 4;\n        for (int i = 1; i * i &lt; n; i++) {\n            if (perfect(n - i * i)) return 2;\n        }\n        return 3;\n    }\n\n    private boolean perfect(int n) {\n        int a = (int) Math.sqrt(n);\n        return a * a == n;\n    }\n\n    private boolean perfect4(int n) {\n        while (n % 4 == 0) n /= 4;\n        return 7 == n % 8;\n    }\n\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%9C%80%E4%BC%98%E8%A7%A3/#_4","title":"\u6536\u76ca\u6700\u5927","text":""},{"location":"leetcode/new/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%9C%80%E4%BC%98%E8%A7%A3/#121-easy","title":"121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 prices \uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20 prices[i] \u8868\u793a\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u4f60\u53ea\u80fd\u9009\u62e9 \u67d0\u4e00\u5929 \u4e70\u5165\u8fd9\u53ea\u80a1\u7968\uff0c\u5e76\u9009\u62e9\u5728 \u672a\u6765\u7684\u67d0\u4e00\u4e2a\u4e0d\u540c\u7684\u65e5\u5b50 \u5356\u51fa\u8be5\u80a1\u7968\u3002\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002 \u8fd4\u56de\u4f60\u53ef\u4ee5\u4ece\u8fd9\u7b14\u4ea4\u6613\u4e2d\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u5982\u679c\u4f60\u4e0d\u80fd\u83b7\u53d6\u4efb\u4f55\u5229\u6da6\uff0c\u8fd4\u56de 0\u3002</p> <p>\u4e00\u6b21\u904d\u5386, \u540c\u65f6\u66f4\u65b0\u6700\u5c0f\u503c\u548c\u6700\u5927\u6536\u76ca</p> <pre><code>class Solution {\n    public int maxProfit(int[] prices) {\n        int income = 0;\n        int min = prices[0];\n        for (int p : prices) {\n            if (p &lt; min) min = p;\n            else income = Math.max(income, p - min);\n        }\n        return income;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%9C%80%E4%BC%98%E8%A7%A3/#122-ii-mid","title":"122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 prices \uff0c\u5176\u4e2d prices[i] \u8868\u793a\u67d0\u652f\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u5728\u6bcf\u4e00\u5929\uff0c\u4f60\u53ef\u4ee5\u51b3\u5b9a\u662f\u5426\u8d2d\u4e70\u548c/\u6216\u51fa\u552e\u80a1\u7968\u3002\u4f60\u5728\u4efb\u4f55\u65f6\u5019 \u6700\u591a \u53ea\u80fd\u6301\u6709 \u4e00\u80a1 \u80a1\u7968\u3002\u4f60\u4e5f\u53ef\u4ee5\u5148\u8d2d\u4e70\uff0c\u7136\u540e\u5728 \u540c\u4e00\u5929 \u51fa\u552e\u3002 \u8fd4\u56de \u4f60\u80fd\u83b7\u5f97\u7684 \u6700\u5927 \u5229\u6da6\u3002</p> <p>\u4e00\u6b21\u904d\u5386, \u5728\u5f53\u65e5\u53ef\u4ee5\u4e70\u5165\u6628\u5929</p> <pre><code>class Solution {\n    public int maxProfit(int[] prices) {\n        int income = 0;\n        int pre = prices[0];\n        for (int p : prices) {\n            if (p &gt; pre) income += p - pre;\n            pre = p;\n        }\n        return income;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%9C%80%E4%BC%98%E8%A7%A3/#123-iii-hard","title":"123. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a III hard","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u7684\u80a1\u7968\u5728\u7b2c i \u5929\u7684\u4ef7\u683c\u3002</p> <p>\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u6700\u591a\u53ef\u4ee5\u5b8c\u6210 \u4e24\u7b14 \u4ea4\u6613\u3002</p> <p>\u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002</p> <p>\u89e3\u6cd5 DP</p> <p>\u5bf9\u4e8e\u67d0\u4e00\u5929\u7684\u603b\u6536\u76ca, \u7531\u524d\u4e00\u5929\u8f6c\u79fb\u6765 \u72b6\u6001: \u672a\u5efa\u4ed3 \u6301\u4ed3-1 \u5e73\u4ed3-1 \u6301\u4ed3-2 \u5e73\u4ed3-2</p> <pre><code>class Solution {\n    public int maxProfit(int[] prices) {\n        int n = prices.length;\n        int buy1 = -prices[0], sell1 = 0;\n        int buy2 = -prices[0], sell2 = 0;\n        // \u7b2c\u4e8c\u5929\u5f00\u59cb\n        for (int i = 1; i &lt; n; ++i) {\n            // \u6301\u4ed31\n            buy1 = Math.max(buy1, -prices[i]);\n            // \u5e73\u4ed31\n            sell1 = Math.max(sell1, buy1 + prices[i]);\n            // \u6301\u4ed32\n            buy2 = Math.max(buy2, sell1 - prices[i]);\n            // \u5e73\u4ed32\n            sell2 = Math.max(sell2, buy2 + prices[i]);\n        }\n        return sell2;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%9C%80%E4%BC%98%E8%A7%A3/#198-mid","title":"198. \u6253\u5bb6\u52ab\u820d mid","text":"<p>\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\u3002\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\uff0c\u5f71\u54cd\u4f60\u5077\u7a83\u7684\u552f\u4e00\u5236\u7ea6\u56e0\u7d20\u5c31\u662f\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c\u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60\u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b\uff0c\u4e00\u591c\u4e4b\u5185\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002</p> <pre><code>class Solution {\n    public int rob(int[] nums) {\n        int n = nums.length;\n        if (n == 1) return nums[0];\n        // n = max(n-1, n-2 + e)\n        int[] dp = new int[n];\n        dp[0] = nums[0];\n        dp[1] = Math.max(nums[0], nums[1]);\n        for (int i = 2; i &lt; n; i++) {\n            dp[i] = Math.max(dp[i - 1], nums[i] + dp[i - 2]);\n        }\n        return dp[n - 1];\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%9C%80%E4%BC%98%E8%A7%A3/#213-ii-mid","title":"213. \u6253\u5bb6\u52ab\u820d II mid","text":"<p>\u5251\u6307 Offer II 090. \u73af\u5f62\u623f\u5c4b\u5077\u76d7</p> <p>\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\uff0c\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\u3002\u8fd9\u4e2a\u5730\u65b9\u6240\u6709\u7684\u623f\u5c4b\u90fd \u56f4\u6210\u4e00\u5708\uff0c\u8fd9\u610f\u5473\u7740\u7b2c\u4e00\u4e2a\u623f\u5c4b\u548c\u6700\u540e\u4e00\u4e2a\u623f\u5c4b\u662f\u7d27\u6328\u7740\u7684\u3002\u540c\u65f6\uff0c\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c\u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66\u3002</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60 \u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b \uff0c\u4eca\u665a\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002</p> <p>\u5206\u6cbb\u7f62</p> <pre><code>class Solution {\n    private int[] nums;\n\n    public int rob(int[] nums) {\n        if (nums.length == 1) return nums[0];\n        if (nums.length == 2) return Math.max(nums[0], nums[1]);\n        this.nums = nums;\n        return Math.max(dp(0, nums.length - 2), dp(1, nums.length - 1));\n    }\n\n    private int dp(int start, int end) {\n        int n1 = nums[start];\n        int n2 = Math.max(nums[start], nums[start + 1]);\n        for (int i = start + 2; i &lt;= end; i++) {\n            int n3 = Math.max(n1 + nums[i], n2);\n            n1 = n2;\n            n2 = n3;\n        }\n        return n2;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%9C%80%E4%BC%98%E8%A7%A3/#309-mid","title":"309. \u6700\u4f73\u4e70\u5356\u80a1\u7968\u65f6\u673a\u542b\u51b7\u51bb\u671f mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 prices\uff0c\u5176\u4e2d\u7b2c prices[i] \u8868\u793a\u7b2c i \u5929\u7684\u80a1\u7968\u4ef7\u683c \u3002</p> <p>\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u8ba1\u7b97\u51fa\u6700\u5927\u5229\u6da6\u3002\u5728\u6ee1\u8db3\u4ee5\u4e0b\u7ea6\u675f\u6761\u4ef6\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\uff09:</p> <ul> <li>\u5356\u51fa\u80a1\u7968\u540e\uff0c\u4f60\u65e0\u6cd5\u5728\u7b2c\u4e8c\u5929\u4e70\u5165\u80a1\u7968 (\u5373\u51b7\u51bb\u671f\u4e3a 1 \u5929)\u3002</li> </ul> <p>\u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002</p> <p>\u5b9a\u4e49\u4e00\u5929\u7684\u4e09\u79cd\u72b6\u6001: 0:\u4eca\u513f\u7a7a\u4ed3 1:\u4eca\u513f\u5e73\u4ed3 2:\u4eca\u513f\u6301\u4ed3</p> <pre><code>class Solution {\n    public int maxProfit(int[] prices) {\n        int length = prices.length;\n        int[][] income = new int[length][3];\n        // \u5b9a\u4e49\u4e00\u5929\u7684\u4e09\u79cd\u72b6\u6001 0:\u4eca\u513f\u6ca1\u4ed3\u4f4d\u4e5f\u4e0d\u5efa\u4ed3 1:\u4eca\u513f\u5e73\u4ed3\u4e86 2:\u4eca\u513f\u6301\u4ed3\n        income[0][0] = 0;\n        income[0][1] = 0;\n        income[0][2] = -prices[0];\n\n        for (int i = 1; i &lt; length; i++) {\n            // \u7a7a\u4ed3\n            income[i][0] = Math.max(income[i - 1][0], income[i - 1][1]);\n            // \u5e73\u4ed3\n            income[i][1] = income[i - 1][2] + prices[i];\n            // \u5efa\u4ed3 | \u6301\u4ed3\n            income[i][2] = Math.max(income[i - 1][2], income[i - 1][0] - prices[i]);\n        }\n\n        return Math.max(income[length - 1][0], income[length - 1][1]);\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%9C%80%E4%BC%98%E8%A7%A3/#312-hard","title":"312. \u6233\u6c14\u7403 hard","text":"<p>\u6709 n \u4e2a\u6c14\u7403\uff0c\u7f16\u53f7\u4e3a 0 \u5230 n - 1\uff0c\u6bcf\u4e2a\u6c14\u7403\u4e0a\u90fd\u6807\u6709\u4e00\u4e2a\u6570\u5b57\uff0c\u8fd9\u4e9b\u6570\u5b57\u5b58\u5728\u6570\u7ec4 nums \u4e2d\u3002</p> <p>\u73b0\u5728\u8981\u6c42\u4f60\u6233\u7834\u6240\u6709\u7684\u6c14\u7403\u3002\u6233\u7834\u7b2c i \u4e2a\u6c14\u7403\uff0c\u4f60\u53ef\u4ee5\u83b7\u5f97 nums[i - 1] _ nums[i] _ nums[i + 1] \u679a\u786c\u5e01\u3002 \u8fd9\u91cc\u7684 i - 1 \u548c i + 1 \u4ee3\u8868\u548c i \u76f8\u90bb\u7684\u4e24\u4e2a\u6c14\u7403\u7684\u5e8f\u53f7\u3002\u5982\u679c i - 1 \u6216 i + 1 \u8d85\u51fa\u4e86\u6570\u7ec4\u7684\u8fb9\u754c\uff0c\u90a3\u4e48\u5c31\u5f53\u5b83\u662f\u4e00\u4e2a\u6570\u5b57\u4e3a 1 \u7684\u6c14\u7403\u3002</p> <p>\u6c42\u6240\u80fd\u83b7\u5f97\u786c\u5e01\u7684\u6700\u5927\u6570\u91cf\u3002</p> <p>dp[i][j]\u8868\u793a\u5f00\u533a\u95f4(i,j)\u4e2d\u6700\u5927\u4e58\u79ef $dp[i][j] = k\u2208(i,j):max( dp[i][k] + dp[k][j] + nums[i]nums[j]nums[k] )$</p> <pre><code>class Solution {\n    public int maxCoins(int[] nums) {\n        int n = nums.length;\n        int[] arr = new int[n + 2];\n        arr[0] = 1;\n        arr[n + 1] = 1;\n        System.arraycopy(nums, 0, arr, 1, n);\n        int[][] dp = new int[n + 2][n + 2];\n        // k=idx: 0 --- [1, ... n] --- n+1\n        // i \u9006\u5e8f, \u56e0\u4e3a\u6700\u540e\u6c42\u7684\u662f dp[0][n + 1]\n        for (int i = n - 1; i &gt;= 0; i--) {\n            for (int j = i + 2; j &lt;= n + 1; j++) {\n                int max = 0;\n                for (int k = i + 1; k &lt;= j - 1; k++) {\n                    max = Math.max(max, dp[i][k] + dp[k][j] + arr[i] * arr[j] * arr[k]);\n                }\n                dp[i][j] = max;\n            }\n        }\n        return dp[0][n + 1];\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%9C%80%E4%BC%98%E8%A7%A3/#337-iii-mid","title":"337. \u6253\u5bb6\u52ab\u820d III mid","text":"<p>\u5c0f\u5077\u53c8\u53d1\u73b0\u4e86\u4e00\u4e2a\u65b0\u7684\u53ef\u884c\u7a83\u7684\u5730\u533a\u3002\u8fd9\u4e2a\u5730\u533a\u53ea\u6709\u4e00\u4e2a\u5165\u53e3\uff0c\u6211\u4eec\u79f0\u4e4b\u4e3a root \u3002</p> <p>\u9664\u4e86 root \u4e4b\u5916\uff0c\u6bcf\u680b\u623f\u5b50\u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u201c\u7236\u201c\u623f\u5b50\u4e0e\u4e4b\u76f8\u8fde\u3002\u4e00\u756a\u4fa6\u5bdf\u4e4b\u540e\uff0c\u806a\u660e\u7684\u5c0f\u5077\u610f\u8bc6\u5230\u201c\u8fd9\u4e2a\u5730\u65b9\u7684\u6240\u6709\u623f\u5c4b\u7684\u6392\u5217\u7c7b\u4f3c\u4e8e\u4e00\u68f5\u4e8c\u53c9\u6811\u201d\u3002 \u5982\u679c \u4e24\u4e2a\u76f4\u63a5\u76f8\u8fde\u7684\u623f\u5b50\u5728\u540c\u4e00\u5929\u665a\u4e0a\u88ab\u6253\u52ab \uff0c\u623f\u5c4b\u5c06\u81ea\u52a8\u62a5\u8b66\u3002</p> <p>\u7ed9\u5b9a\u4e8c\u53c9\u6811\u7684 root \u3002\u8fd4\u56de \u5728\u4e0d\u89e6\u52a8\u8b66\u62a5\u7684\u60c5\u51b5\u4e0b \uff0c\u5c0f\u5077\u80fd\u591f\u76d7\u53d6\u7684\u6700\u9ad8\u91d1\u989d \u3002</p> <pre><code>class Solution {\n    public int rob(TreeNode root) {\n        int[] rootStatus = dfs(root);\n        return Math.max(rootStatus[0], rootStatus[1]);\n    }\n\n    public int[] dfs(TreeNode node) {\n        // dp[0] \u9009\u4e2d, dp[1] \u4e0d\u9009\n        if (node == null) return new int[]{0, 0};\n        int[] l = dfs(node.left);\n        int[] r = dfs(node.right);\n        // \u5f53\u524d\u8282\u70b9\u9009\u4e2d\n        int selected = node.val + l[1] + r[1];\n        // \u5f53\u524d\u8282\u70b9\u4e0d\u9009\n        int notSelected = Math.max(l[0], l[1]) + Math.max(r[0], r[1]);\n        return new int[]{selected, notSelected};\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%9C%80%E4%BC%98%E8%A7%A3/#_5","title":"\u80cc\u5305","text":""},{"location":"leetcode/new/%E5%A4%9A%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%9C%80%E4%BC%98%E8%A7%A3/#322-mid","title":"322. \u96f6\u94b1\u5151\u6362 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 coins \uff0c\u8868\u793a\u4e0d\u540c\u9762\u989d\u7684\u786c\u5e01\uff1b\u4ee5\u53ca\u4e00\u4e2a\u6574\u6570 amount \u8868\u793a\u603b\u91d1\u989d\u3002</p> <p>\u8ba1\u7b97\u5e76\u8fd4\u56de\u53ef\u4ee5\u51d1\u6210\u603b\u91d1\u989d\u6240\u9700\u7684 \u6700\u5c11\u7684\u786c\u5e01\u4e2a\u6570\u3002\u5982\u679c\u6ca1\u6709\u4efb\u4f55\u4e00\u79cd\u786c\u5e01\u7ec4\u5408\u80fd\u7ec4\u6210\u603b\u91d1\u989d\uff0c\u8fd4\u56de -1\u3002</p> <p>\u4f60\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u79cd\u786c\u5e01\u7684\u6570\u91cf\u662f\u65e0\u9650\u7684\u3002</p> <p>\u7ecf\u5178\u80cc\u5305</p> <pre><code>public class Solution {\n    public int coinChange(int[] coins, int amount) {\n        int[] dp = new int[amount + 1];\n        Arrays.fill(dp, amount + 1);\n        dp[0] = 0;\n        for (int i = 1; i &lt;= amount; i++) {\n            for (int coin : coins) {\n                if (i &gt;= coin) dp[i] = Math.min(dp[i], dp[i - coin] + 1);\n            }\n        }\n        return dp[amount] &gt; amount ? -1 : dp[amount];\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E7%BA%BF%E7%A8%8B/","title":"leetcode \u591a\u7ebf\u7a0b","text":""},{"location":"leetcode/new/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#1279-easy","title":"1279. \u7ea2\u7eff\u706f\u8def\u53e3 easy","text":"<p>\u5bf9\u5171\u4eab\u8d44\u6e90\u7684\u64cd\u4f5c \u52a0\u9501</p> <p>\u89e3\u6cd5: Lock</p> <pre><code>public class TrafficLight {\n    private final Lock lock = new ReentrantLock();\n    private volatile int road = 1;\n\n    public void carArrived(\n            int carId,           // ID of the car\n            int roadId,          // ID of the road the car travels on. Can be 1 (road A) or 2 (road B)\n            int direction,       // Direction of the car\n            Runnable turnGreen,  // Use turnGreen.run() to turn light to green on current road\n            Runnable crossCar    // Use crossCar.run() to make car cross the intersection\n    ) {\n        lock.lock();\n        if (road != roadId) {\n            turnGreen.run();\n            road = roadId;\n        }\n        crossCar.run();\n        lock.unlock();\n    }\n}\n</code></pre> <p>\u89e3\u6cd5: CAS</p> <pre><code>public class TrafficLight {\n    private final AtomicInteger atomic = new AtomicInteger();\n    private volatile int road = 1;\n\n\n    public void carArrived(\n            int carId,           // ID of the car\n            int roadId,          // ID of the road the car travels on. Can be 1 (road A) or 2 (road B)\n            int direction,       // Direction of the car\n            Runnable turnGreen,  // Use turnGreen.run() to turn light to green on current road\n            Runnable crossCar    // Use crossCar.run() to make car cross the intersection\n    ) {\n        try {\n            while (!atomic.compareAndSet(0, 1)) {\n                Thread.sleep(1);\n            }\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n        if (road != roadId) {\n            turnGreen.run();\n            road = roadId;\n        }\n        crossCar.run();\n        try {\n            while (!atomic.compareAndSet(1, 0)) {\n                Thread.sleep(1);\n            }\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n</code></pre> <p>\u89e3\u6cd5: Synchronized</p> <pre><code>public class TrafficLight {\n    private final Object LOCK = new Object();\n    private volatile int road = 1;\n\n    public void carArrived(\n            int carId,           // ID of the car\n            int roadId,          // ID of the road the car travels on. Can be 1 (road A) or 2 (road B)\n            int direction,       // Direction of the car\n            Runnable turnGreen,  // Use turnGreen.run() to turn light to green on current road\n            Runnable crossCar    // Use crossCar.run() to make car cross the intersection\n    ) {\n        synchronized (LOCK) {\n            if (road != roadId) {\n                turnGreen.run();\n                road = roadId;\n            }\n            crossCar.run();\n        }\n    }\n}\n</code></pre> <p>\u89e3\u6cd5: Semaphore</p> <pre><code>public class TrafficLight {\n    Semaphore semaphore = new Semaphore(1);\n    private volatile int road = 1;\n\n    public void carArrived(\n            int carId,           // ID of the car\n            int roadId,          // ID of the road the car travels on. Can be 1 (road A) or 2 (road B)\n            int direction,       // Direction of the car\n            Runnable turnGreen,  // Use turnGreen.run() to turn light to green on current road\n            Runnable crossCar    // Use crossCar.run() to make car cross the intersection\n    ) {\n        try {\n            semaphore.acquire();\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n        if (road != roadId) {\n            turnGreen.run();\n            road = roadId;\n        }\n        crossCar.run();\n        semaphore.release();\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#1188-mid","title":"1188. \u8bbe\u8ba1\u6709\u9650\u963b\u585e\u961f\u5217 mid","text":"<p>\u5b9e\u73b0\u4e00\u4e2a\u62e5\u6709\u5982\u4e0b\u65b9\u6cd5\u7684\u7ebf\u7a0b\u5b89\u5168\u6709\u9650\u963b\u585e\u961f\u5217\uff1a</p> <ul> <li>BoundedBlockingQueue(int capacity)\u6784\u9020\u65b9\u6cd5\u521d\u59cb\u5316\u961f\u5217\uff0c\u5176\u4e2dcapacity\u4ee3\u8868\u961f\u5217\u957f\u5ea6\u4e0a\u9650\u3002</li> <li>void enqueue(int element)\u5728\u961f\u9996\u589e\u52a0\u4e00\u4e2aelement. \u5982\u679c\u961f\u5217\u6ee1\uff0c\u8c03\u7528\u7ebf\u7a0b\u88ab\u963b\u585e\u76f4\u5230\u961f\u5217\u975e\u6ee1\u3002</li> <li>int dequeue()\u8fd4\u56de\u961f\u5c3e\u5143\u7d20\u5e76\u4ece\u961f\u5217\u4e2d\u5c06\u5176\u5220\u9664. \u5982\u679c\u961f\u5217\u4e3a\u7a7a\uff0c\u8c03\u7528\u7ebf\u7a0b\u88ab\u963b\u585e\u76f4\u5230\u961f\u5217\u975e\u7a7a\u3002</li> <li>int size()\u8fd4\u56de\u5f53\u524d\u961f\u5217\u5143\u7d20\u4e2a\u6570\u3002</li> <li>\u4f60\u7684\u5b9e\u73b0\u5c06\u4f1a\u88ab\u591a\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee\u8fdb\u884c\u6d4b\u8bd5\u3002\u6bcf\u4e00\u4e2a\u7ebf\u7a0b\u8981\u4e48\u662f\u4e00\u4e2a\u53ea\u8c03\u7528enqueue\u65b9\u6cd5\u7684\u751f\u4ea7\u8005\u7ebf\u7a0b\uff0c\u8981\u4e48\u662f\u4e00\u4e2a\u53ea\u8c03\u7528dequeue\u65b9\u6cd5\u7684\u6d88\u8d39\u8005\u7ebf\u7a0b\u3002size\u65b9\u6cd5\u5c06\u4f1a\u5728\u6bcf\u4e00\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u4e4b\u540e\u8fdb\u884c\u8c03\u7528\u3002</li> </ul> <p>\u8bf7\u4e0d\u8981\u4f7f\u7528\u5185\u7f6e\u7684\u6709\u9650\u963b\u585e\u961f\u5217\u5b9e\u73b0\uff0c\u5426\u5219\u9762\u8bd5\u5c06\u4e0d\u4f1a\u901a\u8fc7\u3002</p> <p>Condition \u63a7\u5236\u9501</p> <pre><code>public class BoundedBlockingQueue {\n\n    private final AtomicInteger size = new AtomicInteger(0);\n    private final int capacity;\n    private final Queue&lt;Integer&gt; container = new LinkedList&lt;&gt;();\n    private final ReentrantLock lock = new ReentrantLock();\n    //\u7528\u6765\u901a\u77e5\u751f\u4ea7\uff08\u5165\u961f\uff09\u7ebf\u7a0b\u7b49\u5f85await\u8fd8\u662f\u53ef\u4ee5\u6267\u884csignal\n    private final Condition producer = lock.newCondition();\n    //\u7528\u6765\u901a\u77e5\u6d88\u8d39\uff08\u51fa\u961f\uff09\u7ebf\u7a0b\u7b49\u5f85await\u8fd8\u662f\u53ef\u4ee5\u6267\u884csignal\n    private final Condition consumer = lock.newCondition();\n\n    public BoundedBlockingQueue(int capacity) {\n        this.capacity = capacity;\n    }\n\n    public void enqueue(int element) throws InterruptedException {\n        lock.lock();\n        try {\n            while (size.get() &gt;= capacity) {\n                producer.await();\n            }\n            container.add(element);\n            size.incrementAndGet();\n\n            consumer.signal();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public int dequeue() throws InterruptedException {\n        lock.lock();\n        try {\n            while (size.get() == 0) {\n                consumer.await();\n            }\n            int lastValue = container.remove();\n            size.decrementAndGet();\n\n            producer.signal();\n            return lastValue;\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public int size() {\n        lock.lock();\n        try {\n            return size.get();\n        } finally {\n            lock.unlock();\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#1242-mid","title":"1242. \u591a\u7ebf\u7a0b\u7f51\u9875\u722c\u866b mid","text":"<p>\u9898\u76ee\u63cf\u8ff0\u53e8\u903c\u53e8, \u5b9e\u9645\u5c31\u662f\u8ba9\u591a\u7ebf\u7a0b\u8bf7\u6c42\u8d44\u6e90</p> <p>\u6ce8\u610f\u4e0b thread.join() \u7684\u4f7f\u7528\u65b9\u5f0f</p> <pre><code>public class Solution {\n\n    Set&lt;String&gt; visited = new HashSet&lt;&gt;();\n    String rootHostname;\n    HtmlParser htmlParser;\n\n    class Task extends Thread {\n        String url;\n\n        public Task(String url) {\n            this.url = url;\n        }\n\n        @Override\n        public void run() {\n            List&lt;String&gt; subUrls = htmlParser.getUrls(url);\n            // \u6301\u6709\u7ebf\u7a0b\u7684\u5f15\u7528\n            List&lt;Thread&gt; subTasks = new ArrayList&lt;&gt;();\n            for (String s : subUrls) {\n                if (visited.contains(s)\n                // \u5fc5\u987b\u57df\u540d\u4e00\u81f4\u7684\u8def\u5f84\n                    || !rootHostname.equals(getHostName(s))) continue;\n                addUrl(visited, s);\n                Thread task = new Task(s);\n                subTasks.add(task);\n                task.start();\n            }\n            for (Thread task : subTasks) {\n                try {\n                    task.join();\n                } catch (InterruptedException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        }\n    }\n\n    public List&lt;String&gt; crawl(String startUrl, HtmlParser htmlParser) {\n        this.htmlParser = htmlParser;\n        this.rootHostname = getHostName(startUrl);\n        addUrl(visited, startUrl);\n        Thread thread = new Task(startUrl);\n        thread.start();\n        try {\n            thread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        return new ArrayList&lt;&gt;(visited);\n    }\n\n    static String getHostName(String url) {\n        final int start = 7;\n        int end = url.indexOf('/', start);\n        if (end == -1) {\n            end = url.length();\n        }\n        return url.substring(start, end);\n    }\n\n    static synchronized void addUrl(Set&lt;String&gt; result, String url) {\n        result.add(url);\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#1115-foobar","title":"1115. \u4ea4\u66ff\u6253\u5370 FooBar","text":"<p>\u4e24\u4e2a\u4e0d\u540c\u7684\u7ebf\u7a0b\u5c06\u4f1a\u5171\u7528\u4e00\u4e2a FooBar \u5b9e\u4f8b\uff1a</p> <ul> <li>\u7ebf\u7a0b A \u5c06\u4f1a\u8c03\u7528 foo()\u65b9\u6cd5\uff0c\u800c</li> <li>\u7ebf\u7a0b B \u5c06\u4f1a\u8c03\u7528 bar()\u65b9\u6cd5</li> </ul> <p>\u8bf7\u8bbe\u8ba1\u4fee\u6539\u7a0b\u5e8f\uff0c\u4ee5\u786e\u4fdd \"foobar\" \u88ab\u8f93\u51fa n \u6b21\u3002</p> <pre><code>class FooBar {\n    private int n;\n    private boolean flag = true;\n    private ReentrantLock lock = new ReentrantLock();\n    private Condition condition1 = lock.newCondition();\n    private Condition condition2 = lock.newCondition();\n\n    public FooBar(int n) {\n        this.n = n;\n    }\n\n    public void foo(Runnable printFoo) throws InterruptedException {\n        for (int i = 0; i &lt; n; i++) {\n            try {\n                lock.lock();\n                while (!flag) condition1.await();\n                printFoo.run();\n                flag = false;\n                condition2.signal();\n            } finally {\n                lock.unlock();\n            }\n        }\n    }\n\n    public void bar(Runnable printBar) throws InterruptedException {\n        for (int i = 0; i &lt; n; i++) {\n            try {\n                lock.lock();\n                while (flag) condition2.await();\n                printBar.run();\n                condition1.signal();\n            } finally {\n                lock.unlock();\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%A4%9A%E7%BA%BF%E7%A8%8B/#123","title":"\u4e09\u4e2a\u7ebf\u7a0b \u5faa\u73af\u6253\u5370 123","text":"<pre><code>class Solution {\n    static int cnt = 1;\n    static ReentrantLock lock = new ReentrantLock();\n    static Condition condition1;\n    static Condition condition2;\n    static Condition condition3;\n\n\n    public static void main(String[] args) {\n        condition1 = lock.newCondition();\n        condition2 = lock.newCondition();\n        condition3 = lock.newCondition();\n        Worker worker1 = new Worker(1, condition1, condition2);\n        Worker worker2 = new Worker(2, condition2, condition3);\n        Worker worker3 = new Worker(0, condition3, condition1);\n        worker1.start();\n        worker2.start();\n        worker3.start();\n    }\n\n    static class Worker extends Thread {\n        public Worker(int idx, Condition condition, Condition nextCondition) {\n            this.idx = idx;\n            this.condition = condition;\n            this.nextCondition = nextCondition;\n        }\n\n        int idx;\n        Condition condition;\n        Condition nextCondition;\n\n        @Override\n        public void run() {\n            Worker worker = (Worker) Thread.currentThread();\n            while (true) {\n                // \u975e\u516c\u5e73\u9501\u4f1a\u5728\u8fd9\u91cc\u62a2\u9501\n                lock.lock();\n                try {\n                    // \u91ca\u653e\u9501\n                    if (cnt % 3 != worker.idx) worker.condition.await();\n                    if (cnt &lt; 100) System.out.println(worker + \":\" + cnt++);\n                    // \u901a\u77e5\u522b\u4eba\u62a2\u9501\n                    worker.nextCondition.signal();\n                    if (cnt &gt;= 100) break;\n                } catch (Exception e) {\n                    e.printStackTrace();\n                } finally {\n                    lock.unlock();\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%AD%90%E5%BA%8F%E5%88%97/","title":"\u5b50\u5e8f\u5217","text":""},{"location":"leetcode/new/%E5%AD%90%E5%BA%8F%E5%88%97/#_2","title":"\u5b50\u5e8f\u5217\u7684\u6570\u91cf","text":""},{"location":"leetcode/new/%E5%AD%90%E5%BA%8F%E5%88%97/#115-hard","title":"115. \u4e0d\u540c\u7684\u5b50\u5e8f\u5217 hard","text":"<p>\u5251\u6307 Offer II 097. \u5b50\u5e8f\u5217\u7684\u6570\u76ee</p> <p>\u7ed9\u4f60\u4e24\u4e2a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u7edf\u8ba1\u5e76\u8fd4\u56de\u5728 s \u7684 \u5b50\u5e8f\u5217 \u4e2d t \u51fa\u73b0\u7684\u4e2a\u6570\uff0c\u7ed3\u679c\u9700\u8981\u5bf9 1e9 + 7 \u53d6\u6a21\u3002</p> <p>\u89e3\u6cd5 DP</p> <p>\u6bcd\u4e32\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u662f\u5426\u53c2\u4e0e\u5f53\u6b21\u5339\u914d \u4e0d\u53c2\u4e0e\u662f [i-1][j]; \u53c2\u4e0e\u662f [i-1][j-1];</p> <pre><code>class Solution {\n    public int numDistinct(String s, String t) {\n        int n1 = s.length();\n        int n2 = t.length();\n        long[][] dp = new long[n1 + 1][n2 + 1];\n        for (int i = 0; i &lt;= n1; i++) {\n            dp[i][0] = 1;\n            for (int j = 1; j &lt;= n2 &amp;&amp; j &lt;= i; j++) {\n                if (s.charAt(i - 1) == t.charAt(j - 1))\n                    dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1];\n                else\n                    dp[i][j] = dp[i - 1][j];\n            }\n        }\n        int mod = (int) (1e9 + 7);\n        return (int) (dp[n1][n2] % mod);\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2 \u8bb0\u5fc6\u5316\u641c\u7d22</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e DP \u76f8\u540c</p> <pre><code>class Solution {\n\n    int[][] memo;\n\n    public int numDistinct(String s, String t) {\n        memo = new int[s.length() + 1][t.length() + 1];\n        for (int[] arr : memo) {\n            Arrays.fill(arr, -1);\n        }\n        return helper(s, t, s.length(), t.length());\n    }\n\n    private int helper(String s, String t, int m, int n) {\n        if (n == 0) return 1;\n        if (m == 0) return 0;\n        if (memo[m][n] &gt; -1) return memo[m][n];\n\n        int ans = 0;\n        if (s.charAt(m - 1) == t.charAt(n - 1)) {\n            ans += helper(s, t, m - 1, n - 1) + helper(s, t, m - 1, n);\n        } else {\n            ans += helper(s, t, m - 1, n);\n        }\n\n        memo[m][n] = ans;\n        return ans;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%AD%90%E5%BA%8F%E5%88%97/#_3","title":"\u6700\u957f\u5b50\u5e8f\u5217","text":""},{"location":"leetcode/new/%E5%AD%90%E5%BA%8F%E5%88%97/#128-mid","title":"128. \u6700\u957f\u8fde\u7eed\u5e8f\u5217 mid","text":"<p>\u5251\u6307 Offer II 119. \u6700\u957f\u8fde\u7eed\u5e8f\u5217</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u51fa\u6570\u5b57\u8fde\u7eed\u7684\u6700\u957f\u5e8f\u5217\uff08\u4e0d\u8981\u6c42\u5e8f\u5217\u5143\u7d20\u5728\u539f\u6570\u7ec4\u4e2d\u8fde\u7eed\uff09\u7684\u957f\u5ea6\u3002</p> <p>\u8bf7\u4f60\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u3002</p> <p>\u627e\u5230\u5f00\u5934, \u7136\u540e++\u7edf\u8ba1\u6570\u91cf</p> <pre><code>class Solution {\n    public int longestConsecutive(int[] nums) {\n        Set&lt;Integer&gt; numSet = new HashSet&lt;&gt;();\n        for (int num : nums) {\n            numSet.add(num);\n        }\n        int res = 0;\n        for (int num : numSet) {\n            // \u627e\u8d77\u70b9\n            if (!numSet.contains(num - 1)) {\n                int currNum = num;\n                while (numSet.contains(currNum + 1)) {\n                    currNum++;\n                }\n                res = Math.max(res, currNum - num + 1);\n            }\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%AD%90%E5%BA%8F%E5%88%97/#300-mid","title":"300. \u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u5176\u4e2d\u6700\u957f\u4e25\u683c\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\u3002</p> <p>\u5b50\u5e8f\u5217 \u662f\u7531\u6570\u7ec4\u6d3e\u751f\u800c\u6765\u7684\u5e8f\u5217\uff0c\u5220\u9664\uff08\u6216\u4e0d\u5220\u9664\uff09\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u800c\u4e0d\u6539\u53d8\u5176\u4f59\u5143\u7d20\u7684\u987a\u5e8f\u3002\u4f8b\u5982\uff0c[3,6,2,7] \u662f\u6570\u7ec4 [0,3,1,6,2,2,7] \u7684\u5b50\u5e8f\u5217\u3002</p> <p>DP O(n*n) \u53ef\u4ee5\u7528\u8d2a\u5fc3\u4f18\u5316\u4e3a O(nlogN) \u540e\u7eed\u518d\u5199 \u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b: $dp[i] = max(dp[j])+1; \u5176\u4e2dj\u2208[0,i), nums[j]&lt;nums[i]$</p> <pre><code>class Solution {\n    public int lengthOfLIS(int[] nums) {\n        // dp[i]=\u4ee5nums[i]\u4e3a\u7ed3\u5c3e\u7684\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n        int[] dp = new int[nums.length];\n        dp[0] = 1;\n        int res = dp[0];\n        for (int i = 1; i &lt; nums.length; i++) {\n            dp[i] = 1;\n            for (int j = 0; j &lt; i; j++) {\n                if (nums[j] &lt; nums[i]) dp[i] = Math.max(dp[i], dp[j] + 1);\n            }\n            res = Math.max(res, dp[i]);\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%AD%90%E6%95%B0%E7%BB%84%E5%AD%90%E4%B8%B2/","title":"\u5b50\u6570\u7ec4\u5b50\u4e32","text":"<p>\u901a\u5e38\u8003\u8651\u6ed1\u7a97</p>"},{"location":"leetcode/new/%E5%AD%90%E6%95%B0%E7%BB%84%E5%AD%90%E4%B8%B2/#_2","title":"\u5b50\u6570\u7ec4\u6700\u5927\u548c/\u79ef","text":""},{"location":"leetcode/new/%E5%AD%90%E6%95%B0%E7%BB%84%E5%AD%90%E4%B8%B2/#53-mid","title":"53. \u6700\u5927\u5b50\u6570\u7ec4\u548c mid","text":"<p>\u5251\u6307 Offer 42. \u8fde\u7eed\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u8bf7\u4f60\u627e\u51fa\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002</p> <p>\u5b50\u6570\u7ec4 \u662f\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u8fde\u7eed\u90e8\u5206\u3002</p> <p>\u8bb0\u5f55\u4ee5\u5f53\u524d\u5143\u7d20\u4e3a\u7ed3\u675f\u5143\u7d20\u7684\u5b50\u6570\u7ec4\u7684\u6700\u5927\u548c, \u5373\u53ef DP</p> <p>DP</p> <pre><code>class Solution {\n    public int maxSubArray(int[] nums) {\n        int n = nums.length;\n        int[] sum = new int[n];\n        int res = sum[0] = nums[0];\n        for (int i = 1; i &lt; n; i++) {\n            sum[i] = nums[i] + Math.max(sum[i - 1], 0);\n            res = Math.max(res, sum[i]);\n        }\n        return res;\n    }\n}\n</code></pre> <p>\u538b\u7f29</p> <pre><code>class Solution {\n    public int maxSubArray(int[] nums) {\n        int sum = 0;\n        int res = Integer.MIN_VALUE;\n        for (int e : nums) {\n            sum = e + Math.max(sum, 0);\n            res = Math.max(res, sum);\n        }\n        return res;\n    }\n}\n</code></pre> <p>\u5206\u6cbb \u7ebf\u6bb5\u6811, \u53ef\u4ee5\u6c42\u4efb\u610f\u533a\u5185\u7684\u6700\u5927\u548c, \u5efa\u6811\u7684\u8fc7\u7a0b\u4e2d\u76f4\u63a5\u6c42</p> <pre><code>class Solution {\n    static class Node {\n        int lSum, rSum, max, sum;\n\n        Node(int lSum, int rSum, int max, int sum) {\n            this.lSum = lSum; // \u5305\u542b\u5de6\u7aef\u70b9\u6700\u5927\u548c\n            this.rSum = rSum; // \u5305\u542b\u53f3\u7aef\u70b9\u6700\u5927\u548c\n            this.max = max;   // \u6700\u5927\u548c\n            this.sum = sum;   // \u548c\n        }\n    }\n\n    public int maxSubArray(int[] nums) {\n        return getSum(nums, 0, nums.length - 1).max;\n    }\n\n    public Node getSum(int[] a, int l, int r) {\n        if (l == r) return new Node(a[l], a[l], a[l], a[l]);\n        int m = l + (r - l &gt;&gt; 1);\n        Node lSub = getSum(a, l, m);\n        Node rSub = getSum(a, m + 1, r);\n        return merge(lSub, rSub);\n    }\n\n    public Node merge(Node l, Node r) {\n        int sum = l.sum + r.sum;\n        int lSum = Math.max(l.lSum, l.sum + r.lSum);\n        int rSum = Math.max(r.rSum, r.sum + l.rSum);\n        int max = Math.max(Math.max(l.max, r.max), l.rSum + r.lSum);\n        return new Node(lSum, rSum, max, sum);\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%AD%90%E6%95%B0%E7%BB%84%E5%AD%90%E4%B8%B2/#152-mid","title":"152. \u4e58\u79ef\u6700\u5927\u5b50\u6570\u7ec4 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u8bf7\u4f60\u627e\u51fa\u6570\u7ec4\u4e2d\u4e58\u79ef\u6700\u5927\u7684\u975e\u7a7a\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u8be5\u5b50\u6570\u7ec4\u4e2d\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u6570\u5b57\uff09\uff0c\u5e76\u8fd4\u56de\u8be5\u5b50\u6570\u7ec4\u6240\u5bf9\u5e94\u7684\u4e58\u79ef\u3002</p> <p>\u6d4b\u8bd5\u7528\u4f8b\u7684\u7b54\u6848\u662f\u4e00\u4e2a 32-\u4f4d \u6574\u6570\u3002</p> <p>\u5b50\u6570\u7ec4 \u662f\u6570\u7ec4\u7684\u8fde\u7eed\u5b50\u5e8f\u5217\u3002</p> <p>DP \u4e0e \u548c\u6700\u5927\u548c\u5b50\u6570\u7ec4 \u7c7b\u4f3c $max = max(maxdp[pre]curr, mindp[pre]curr, curr)$</p> <pre><code>class Solution {\n    public int maxProduct(int[] nums) {\n        int n = nums.length;\n        int[] maxA = new int[n];\n        int[] minA = new int[n];\n        maxA[0] = nums[0];\n        minA[0] = nums[0];\n        int ans = maxA[0];\n        for (int i = 1; i &lt; n; ++i) {\n            maxA[i] = Math.max(maxA[i - 1] * nums[i], Math.max(nums[i], minA[i - 1] * nums[i]));\n            minA[i] = Math.min(minA[i - 1] * nums[i], Math.min(nums[i], maxA[i - 1] * nums[i]));\n            ans = Math.max(ans, maxA[i]);\n        }\n        return ans;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%AD%90%E6%95%B0%E7%BB%84%E5%AD%90%E4%B8%B2/#_3","title":"\u6700\u5c0f\u7a97\u53e3","text":""},{"location":"leetcode/new/%E5%AD%90%E6%95%B0%E7%BB%84%E5%AD%90%E4%B8%B2/#76-hard","title":"76. \u6700\u5c0f\u8986\u76d6\u5b50\u4e32 hard","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s, \u4e00\u4e2a\u5b57\u7b26\u4e32 t\u3002\u8fd4\u56de s \u4e2d\u6db5\u76d6 t \u6240\u6709\u5b57\u7b26\u7684\u6700\u5c0f\u5b50\u4e32\u3002\u5982\u679c s \u4e2d\u4e0d\u5b58\u5728\u6db5\u76d6 t \u6240\u6709\u5b57\u7b26\u7684\u5b50\u4e32\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\"\u3002</p> <ul> <li>\u5bf9\u4e8e t \u4e2d\u91cd\u590d\u5b57\u7b26\uff0c\u6211\u4eec\u5bfb\u627e\u7684\u5b50\u5b57\u7b26\u4e32\u4e2d\u8be5\u5b57\u7b26\u6570\u91cf\u5fc5\u987b\u4e0d\u5c11\u4e8e t \u4e2d\u8be5\u5b57\u7b26\u6570\u91cf\u3002</li> <li>\u5982\u679c s \u4e2d\u5b58\u5728\u8fd9\u6837\u7684\u5b50\u4e32\uff0c\u6211\u4eec\u4fdd\u8bc1\u5b83\u662f\u552f\u4e00\u7684\u7b54\u6848\u3002</li> </ul> <p>\u89e3\u6cd5 \u6ed1\u52a8\u7a97\u53e3</p> <pre><code>class Solution {\n    public String minWindow(String s, String t) {\n        int[] need = new int[128];\n        for (char c : t.toCharArray()) {\n            need[c]++;\n        }\n        // gap\u662f\u9700\u6c42\u7684\u5b57\u7b26\u4e2a\u6570\n        int j = 0, gap = t.length(), start = 0, size = Integer.MAX_VALUE;\n        char[] arr = s.toCharArray();\n        for (int i = 0; i &lt; arr.length; i++) {\n            if (need[arr[i]] &gt; 0) gap--;\n            need[arr[i]]--;\n            // \u7f29\n            if (gap == 0) {\n                while (need[arr[j]] &lt; 0) {\n                    need[arr[j]]++;\n                    j++;\n                }\n                if (i - j + 1 &lt; size) {\n                    size = i - j + 1;\n                    start = j;\n                }\n            }\n        }\n        return size == Integer.MAX_VALUE ? \"\" : s.substring(start, start + size);\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%AD%90%E6%95%B0%E7%BB%84%E5%AD%90%E4%B8%B2/#209-mid","title":"209. \u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4 mid","text":"<p>\u5251\u6307 Offer II 008. \u548c\u5927\u4e8e\u7b49\u4e8e target \u7684\u6700\u77ed\u5b50\u6570\u7ec4</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709 n \u4e2a\u6b63\u6574\u6570\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6b63\u6574\u6570 target\u3002</p> <p>\u627e\u51fa\u8be5\u6570\u7ec4\u4e2d\u6ee1\u8db3\u5176\u548c \u2265 target \u7684\u957f\u5ea6\u6700\u5c0f\u7684 \u8fde\u7eed\u5b50\u6570\u7ec4\uff0c\u5e76\u8fd4\u56de\u5176\u957f\u5ea6\u3002\u5982\u679c\u4e0d\u5b58\u5728\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u6570\u7ec4\uff0c\u8fd4\u56de 0\u3002</p> <p>\u89e3\u6cd5: \u6ed1\u52a8\u7a97\u53e3</p> <pre><code>class Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n        int n = nums.length;\n        int l = 0;\n        int sum = 0;\n        int res = n + 1;\n        for (int r = 0; r &lt; n; r++) {\n            sum += nums[r];\n            while (sum - nums[l] &gt;= target) {\n                sum -= nums[l++];\n            }\n            if (sum &gt;= target) res = Math.min(res, r - l + 1);\n        }\n        return res == n + 1 ? 0 : res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%AD%90%E6%95%B0%E7%BB%84%E5%AD%90%E4%B8%B2/#_4","title":"\u7a97\u53e3\u5185\u6700\u5927\u503c","text":"<p>\u9700\u8981\u4e00\u79cd\u6570\u636e\u7ed3\u6784, \u7ef4\u62a4\u7a97\u53e3\u5185\u7684\u6700\u5927\u503c \u8003\u8651\u5355\u8c03\u961f\u5217</p>"},{"location":"leetcode/new/%E5%AD%90%E6%95%B0%E7%BB%84%E5%AD%90%E4%B8%B2/#239-hard","title":"239. \u6ed1\u52a8\u7a97\u53e3\u6700\u5927\u503c hard","text":"<p>\u5251\u6307 Offer 59 - I. \u6ed1\u52a8\u7a97\u53e3\u7684\u6700\u5927\u503c</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u6709\u4e00\u4e2a\u5927\u5c0f\u4e3a k \u7684\u6ed1\u52a8\u7a97\u53e3\u4ece\u6570\u7ec4\u7684\u6700\u5de6\u4fa7\u79fb\u52a8\u5230\u6570\u7ec4\u7684\u6700\u53f3\u4fa7\u3002\u4f60\u53ea\u53ef\u4ee5\u770b\u5230\u5728\u6ed1\u52a8\u7a97\u53e3\u5185\u7684 k \u4e2a\u6570\u5b57\u3002\u6ed1\u52a8\u7a97\u53e3\u6bcf\u6b21\u53ea\u5411\u53f3\u79fb\u52a8\u4e00\u4f4d\u3002 \u8fd4\u56de \u6ed1\u52a8\u7a97\u53e3\u4e2d\u7684\u6700\u5927\u503c\u3002</p> <p>\u89e3\u6cd5 1: \u4f18\u5148\u961f\u5217 \u5b9e\u65f6\u7ef4\u62a4(\u8d85\u65f6)</p> <pre><code>class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        PriorityQueue&lt;Integer&gt; que = new PriorityQueue&lt;&gt;((a, b) -&gt; b - a);\n        int[] res = new int[nums.length - k + 1];\n        for (int i = 0; i &lt; k; i++) {\n            que.add(nums[i]);\n        }\n        res[0] = que.element();\n        for (int i = k; i &lt; nums.length; i++) {\n            que.add(nums[i]);\n            que.remove(nums[i - k]);\n            res[i - k + 1] = que.element();\n        }\n        return res;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2: \u4f18\u5148\u961f\u5217 \u60f0\u6027\u7ef4\u62a4\u5806\u9876</p> <pre><code>class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        int n = nums.length;\n        PriorityQueue&lt;int[]&gt; que = new PriorityQueue&lt;&gt;((a, b) -&gt; a[0] != b[0] ? b[0] - a[0] : b[1] - a[1]);\n        int[] res = new int[n - k + 1];\n        for (int i = 0; i &lt; k; ++i) {\n            que.add(new int[]{nums[i], i});\n        }\n        res[0] = que.element()[0];\n        for (int i = k; i &lt; n; ++i) {\n            que.add(new int[]{nums[i], i});\n            // \u53ea\u8981\u5806\u9876\u5143\u7d20\u6ca1\u8fc7\u671f, \u5c31\u4e0d\u5220\n            while (que.element()[1] &lt;= i - k) {\n                que.remove();\n            }\n            res[i - k + 1] = que.element()[0];\n        }\n        return res;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 3: \u6709\u5e8f\u96c6\u5408</p> <pre><code>class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        SortedMap&lt;Integer, Integer&gt; map = new TreeMap&lt;&gt;((a, b) -&gt; b - a);\n        int[] res = new int[nums.length - k + 1];\n        for (int i = 0; i &lt; k; i++) {\n            map.merge(nums[i], 1, Integer::sum);\n        }\n        res[0] = map.firstKey();\n        for (int i = k; i &lt; nums.length; i++) {\n            if (map.get(nums[i - k]) == 1)\n                map.remove(nums[i - k]);\n            else\n                map.merge(nums[i - k], -1, Integer::sum);\n\n            map.merge(nums[i], 1, Integer::sum);\n            res[i - k + 1] = map.firstKey();\n        }\n        return res;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 4: \u5355\u8c03\u961f\u5217</p> <p>\u5355\u8c03\u961f\u5217\u4e3a\u4ec0\u4e48\u53ef\u884c? \u5355\u8c03\u51cf\u961f\u5217 \u6309\u5e8f\u5b58\u50a8 idx, \u5bf9\u4e8e\u5355\u8c03\u51cf\u533a\u95f4[s,e], \u79fb\u9664\u5c0f\u4e8e\u5143\u7d20 e \u7684\u5143\u7d20\u4e0d\u4f1a\u5f71\u54cd\u533a\u95f4\u7684\u6700\u5927\u503c</p> <pre><code>class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        int n = nums.length;\n        // idx, \u7ef4\u62a4[idx]\u9012\u51cf\u961f\u5217\n        Deque&lt;Integer&gt; que = new ArrayDeque&lt;&gt;();\n        int[] res = new int[n - k + 1];\n\n        for (int i = 0; i &lt; k; ++i) {\n            // \u5355\u8c03\u51cf\u961f\u5217\n            while (!que.isEmpty() &amp;&amp; nums[que.getFirst()] &lt;= nums[i]) {\n                que.removeFirst();\n            }\n            que.addFirst(i);\n        }\n        res[0] = nums[que.getLast()];\n        for (int i = k; i &lt; n; ++i) {\n            // \u5355\u8c03\u51cf\u961f\u5217\n            while (!que.isEmpty() &amp;&amp; nums[que.getFirst()] &lt;= nums[i]) {\n                que.removeFirst();\n            }\n            que.addFirst(i);\n            // \u7f29\u5c0f\u7a97\u53e3\n            while (que.getLast() &lt;= i - k) {\n                que.removeLast();\n            }\n            res[i - k + 1] = nums[que.getLast()];\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%AD%90%E6%95%B0%E7%BB%84%E5%AD%90%E4%B8%B2/#_5","title":"\u80fd\u5426\u7531\u5b50\u4e32\u7ec4\u6210","text":""},{"location":"leetcode/new/%E5%AD%90%E6%95%B0%E7%BB%84%E5%AD%90%E4%B8%B2/#139-mid","title":"139. \u5355\u8bcd\u62c6\u5206 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5217\u8868 wordDict \u4f5c\u4e3a\u5b57\u5178\u3002\u8bf7\u4f60\u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5229\u7528\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u62fc\u63a5\u51fa s\u3002</p> <p>\u6ce8\u610f\uff1a\u4e0d\u8981\u6c42\u5b57\u5178\u4e2d\u51fa\u73b0\u7684\u5355\u8bcd\u5168\u90e8\u90fd\u4f7f\u7528\uff0c\u5e76\u4e14\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u53ef\u4ee5\u91cd\u590d\u4f7f\u7528\u3002</p> <p>\u89e3\u6cd5 1 DP</p> <p>dp[i]: s[0,i] \u662f\u5426\u7531\u5b50\u4e32\u6784\u6210</p> <pre><code>class Solution {\n    public boolean wordBreak(String s, List&lt;String&gt; wordDict) {\n        int n = s.length();\n        Set&lt;String&gt; set = new HashSet&lt;&gt;(wordDict);\n        boolean[] dp = new boolean[n + 1]; // \u53f3\u4fa7\u5f00\u533a\u95f4\n        dp[0] = true;\n        for (int i = 0; i &lt; n; i++) { // \u53f3\u7aef\u70b9\n            for (int j = 0; j &lt;= i; j++) { // \u5de6\u7aef\u70b9\n                if (dp[j] &amp;&amp; set.contains(s.substring(j, i + 1))) {\n                    dp[i + 1] = true;\n                    break;\n                }\n            }\n        }\n        return dp[n];\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2 DFS</p> <p>DFS \u641c\u5230\u4e00\u6bb5\u540e\u9012\u5f52\u641c\u4e0b\u4e00\u6bb5 \u53ef\u4ee5\u8bb0\u5fc6\u5316\u526a\u679d, \u8bb0\u5f55\u54ea\u4e9b start \u4e0d\u53ef\u7528 substring \u592a\u6162, startWith \u66f4\u597d</p> <pre><code>class Solution {\n\n    public boolean wordBreak(String s, List&lt;String&gt; wordDict) {\n        boolean[] memo = new boolean[s.length() + 1];\n        Arrays.fill(memo, true);\n        return dfs(s, wordDict, 0, memo);\n    }\n\n    boolean dfs(String s, List&lt;String&gt; wordDict, int start, boolean[] memo) {\n        if (start == s.length()) return true;\n        if (!memo[start]) return false;\n        for (String word : wordDict) {\n            if (s.startsWith(word, start)) {\n                if (dfs(s, wordDict, start + word.length(), memo)) {\n                    return true;\n                }\n            }\n        }\n        memo[start] = false;\n        return false;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%AD%97%E5%85%B8%E5%BA%8F/","title":"\u4e0b\u4e00\u4e2a\u5b57\u5178\u5e8f","text":""},{"location":"leetcode/new/%E5%AD%97%E5%85%B8%E5%BA%8F/#_2","title":"\u4e0b\u4e00\u4e2a\u6392\u5217","text":""},{"location":"leetcode/new/%E5%AD%97%E5%85%B8%E5%BA%8F/#31-mid","title":"31. \u4e0b\u4e00\u4e2a\u6392\u5217 mid","text":"<p>\u6574\u6570\u6570\u7ec4\u7684\u4e00\u4e2a \u6392\u5217 \u5c31\u662f\u5c06\u5176\u6240\u6709\u6210\u5458\u4ee5\u5e8f\u5217\u6216\u7ebf\u6027\u987a\u5e8f\u6392\u5217\u3002</p> <ul> <li>\u4f8b\u5982\uff0carr = [1,2,3] \uff0c\u4ee5\u4e0b\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u89c6\u4f5c arr \u7684\u6392\u5217\uff1a[1,2,3]\u3001[1,3,2]\u3001[3,1,2]\u3001[2,3,1] \u3002</li> </ul> <p>\u6574\u6570\u6570\u7ec4\u7684 \u4e0b\u4e00\u4e2a\u6392\u5217 \u662f\u6307\u5176\u6574\u6570\u7684\u4e0b\u4e00\u4e2a\u5b57\u5178\u5e8f\u66f4\u5927\u7684\u6392\u5217\u3002\u66f4\u6b63\u5f0f\u5730\uff0c\u5982\u679c\u6570\u7ec4\u7684\u6240\u6709\u6392\u5217\u6839\u636e\u5176\u5b57\u5178\u987a\u5e8f\u4ece\u5c0f\u5230\u5927\u6392\u5217\u5728\u4e00\u4e2a\u5bb9\u5668\u4e2d\uff0c\u90a3\u4e48\u6570\u7ec4\u7684 \u4e0b\u4e00\u4e2a\u6392\u5217 \u5c31\u662f\u5728\u8fd9\u4e2a\u6709\u5e8f\u5bb9\u5668\u4e2d\u6392\u5728\u5b83\u540e\u9762\u7684\u90a3\u4e2a\u6392\u5217\u3002\u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6570\u7ec4\u5fc5\u987b\u91cd\u6392\u4e3a\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6392\u5217\uff08\u5373\uff0c\u5176\u5143\u7d20\u6309\u5347\u5e8f\u6392\u5217\uff09\u3002</p> <ul> <li>\u4f8b\u5982\uff0carr = [1,2,3] \u7684\u4e0b\u4e00\u4e2a\u6392\u5217\u662f [1,3,2] \u3002</li> <li>\u7c7b\u4f3c\u5730\uff0carr = [2,3,1] \u7684\u4e0b\u4e00\u4e2a\u6392\u5217\u662f [3,1,2] \u3002</li> <li>\u800c arr = [3,2,1] \u7684\u4e0b\u4e00\u4e2a\u6392\u5217\u662f [1,2,3] \uff0c\u56e0\u4e3a [3,2,1] \u4e0d\u5b58\u5728\u4e00\u4e2a\u5b57\u5178\u5e8f\u66f4\u5927\u7684\u6392\u5217\u3002</li> </ul> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u51fa nums \u7684\u4e0b\u4e00\u4e2a\u6392\u5217\u3002</p> <p>\u5fc5\u987b \u539f\u5730 \u4fee\u6539\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u3002</p> <p>\u89e3\u6cd5</p> <ol> <li>\u4ece\u540e\u5411\u524d\u67e5\u627e\u7b2c\u4e00\u4e2a\u76f8\u90bb\u5347\u5e8f\u7684\u5143\u7d20\u5bf9 (i, i+1)\uff0c\u6ee1\u8db3 A[i] &lt; A[i+1]\u3002\u6b64\u65f6 [i+1,end) \u5fc5\u7136\u662f\u964d\u5e8f</li> <li>\u5728 [i+1,end) \u4ece\u540e\u5411\u524d\u67e5\u627e\u7b2c\u4e00\u4e2a\u6ee1\u8db3 A[i] &lt; A[j] \u7684 j, A[j]\u662f\u6bd4 A[i]\u5927\u7684\u6700\u5c0f\u503c\u3002</li> <li>\u5c06 A[i] \u4e0e A[j] \u4ea4\u6362, \u8ba9 A[i] \u5c3d\u53ef\u80fd\u5c0f\u5730\u53d8\u5927</li> <li>\u53ef\u4ee5\u65ad\u5b9a\u8fd9\u65f6 [i+1,end) \u4ecd\u7136\u662f\u964d\u5e8f\uff0c\u9006\u7f6e [i+1,end)\uff0c\u4f7f\u5176\u5347\u5e8f;</li> <li>\u5982\u679c\u5728\u6b65\u9aa4 1 \u627e\u4e0d\u5230\u7b26\u5408\u7684\u76f8\u90bb\u5143\u7d20\u5bf9\uff0c\u8bf4\u660e\u5f53\u524d [begin,end) \u4e3a\u4e00\u4e2a\u964d\u5e8f\u987a\u5e8f\uff0c\u5219\u76f4\u63a5\u8df3\u5230\u6b65\u9aa4 4</li> </ol> JavaPython3 <pre><code>class Solution {\n    public void nextPermutation(int[] nums) {\n        int n = nums.length;\n        if (n &lt; 2) return;\n        int i = n - 2;\n        while (i &gt;= 0 &amp;&amp; nums[i] &gt;= nums[i + 1]) i--;\n        if (i &gt;= 0) {\n            for (int j = n - 1; j &gt; i; j--) {\n                if (nums[j] &gt; nums[i]) {\n                    swap(nums, i, j);\n                    revert(nums, i + 1);\n                    return;\n                }\n            }\n        }\n        revert(nums, i+1);\n    }\n\n    void revert(int[] nums, int i) {\n        int j = nums.length - 1;\n        while (i &lt; j) {\n            swap(nums, i, j);\n            i++;\n            j--;\n        }\n    }\n\n    void swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}\n</code></pre> <pre><code>class Solution:\n    def nextPermutation(self, nums: List[int]) -&gt; None:\n        n = len(nums)\n        if n &lt; 2:\n            return\n        i = n - 2\n        while i &gt;= 0 and nums[i] &gt;= nums[i + 1]:\n            i -= 1\n        if i &gt;= 0:\n            j = n - 1\n            while j &gt;= 0 and nums[i] &gt;= nums[j]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n\n        l, r = i + 1, n - 1\n        while l &lt; r:\n            nums[l], nums[r] = nums[r], nums[l]\n            l += 1\n            r -= 1\n</code></pre>"},{"location":"leetcode/new/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/","title":"\u5b57\u7b26\u4e32\u5339\u914d","text":""},{"location":"leetcode/new/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/#_2","title":"\u5339\u914d\u5b50\u4e32","text":""},{"location":"leetcode/new/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/#10-hard","title":"10. \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d hard","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u5b57\u7b26\u89c4\u5f8b p\uff0c\u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301 '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002 Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:</p> <ul> <li>'.' \u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26     '.' Matches any single character.\u200b\u200b\u200b\u200b</li> <li>'*' \u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u90a3\u4e00\u4e2a\u5143\u7d20     '*' Matches zero or more of the preceding element.</li> </ul> <p>\u6240\u8c13\u5339\u914d\uff0c\u662f\u8981\u6db5\u76d6 \u6574\u4e2a \u5b57\u7b26\u4e32 s \u7684\uff0c\u800c\u4e0d\u662f\u90e8\u5206\u5b57\u7b26\u4e32\u3002 The matching should cover the entire input string (not partial).</p> <p>\u6b64\u9898\u53ef\u4ee5\u901a\u8fc7\u52a8\u6001\u89c4\u5212\u6216\u8005\u6709\u9650\u72b6\u6001\u81ea\u52a8\u673a\u505a, \u4f46\u6211\u9009\u62e9\u8c03\u5e93</p> JavaGo <pre><code>class Solution {\n    public boolean isMatch(String s, String p) {\n        return s.matches(p);\n    }\n}\n</code></pre> <pre><code>func isMatch(s, p string) bool {\n    res, _ := regexp.MatchString(\"^\"+p+\"$\", s)\n    return res\n}\n</code></pre>"},{"location":"leetcode/new/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/#28-easy","title":"28. \u627e\u51fa\u5b57\u7b26\u4e32\u4e2d\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u7684\u4e0b\u6807 easy","text":"<p>\u7ed9\u4f60\u4e24\u4e2a\u5b57\u7b26\u4e32 haystack \u548c needle\uff0c\u8bf7\u4f60\u5728 haystack \u5b57\u7b26\u4e32\u4e2d\u627e\u51fa needle \u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u7684\u4e0b\u6807\uff08\u4e0b\u6807\u4ece 0 \u5f00\u59cb\uff09\u3002\u5982\u679c needle \u4e0d\u662f haystack \u7684\u4e00\u90e8\u5206\uff0c\u5219\u8fd4\u56de -1\u3002 Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p> <p>\u7ecf\u5178\u7684\u5b57\u7b26\u4e32\u5355\u6a21\u5339\u914d\u6a21\u578b\u6709\u5f88\u591a, \u5982 Knuth-Morris-Pratt \u7b97\u6cd5\u3001Boyer-Moore \u7b97\u6cd5\u3001Sunda \u7b97\u6cd5\u7b49</p> <p>\u89e3\u6cd5 1 \u66b4\u529b</p> <pre><code>class Solution {\n    public int strStr(String s1, String s2) {\n        // \u4ece\u5c3e\u90e8\u5f80\u524d\u51cfm\u4e2a, \u518d\u52a01\u4e2a\n        for (int i = 0; i &lt; s1.length() + 1 - s2.length(); i++) {\n            if (check(s1, s2, i)) return i;\n        }\n        return -1;\n    }\n\n    private boolean check(String s1, String s2, int idx) {\n        int i = idx, j = 0;\n        for (; j &lt; s2.length(); i++, j++) {\n            if (s1.charAt(i) != s2.charAt(j)) return false;\n        }\n        return true;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2 KMP</p> <p>KMP \u7b97\u6cd5\u7684\u6838\u5fc3\u5728\u4e8e <code>pattern</code> \u524d\u7f00\u51fd\u6570. \u524d\u7f00\u51fd\u6570 $\u03c0$ \u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u7ec4\u8868\u793a: <code>\u03c0[i]</code> = \u5f53\u5b57\u7b26\u4e32 $S_{0-i}$ \u7684\u771f\u524d\u7f00==\u771f\u540e\u7f00\u65f6, \u524d\u540e\u7f00\u7684\u957f\u5ea6\u6700\u5927\u503c \u901a\u8fc7\u524d\u7f00\u51fd\u6570\u7684\u6027\u8d28\u53ef\u4ee5\u6c42\u5f97\u56de\u9000\u7684\u4f4d\u7f6e<code>i=\u03c0[i-1]</code>, \u56e0\u4e3a\u5f53 <code>i</code> \u5931\u914d\u65f6, <code>i-1</code> \u8fd8\u662f\u5339\u914d\u7684 \u6709\u4e24\u79cd\u601d\u8def\u53ef\u4ee5\u89e3\u91ca\u51fd\u6570 $\u03c0$ \u5982\u4f55 work:</p> <p>\u7b2c 1 \u79cd: \u5c06 <code>pattern+\"#\"+str</code>, \u7136\u540e\u6c42 <code>\u03c0[i]&gt;=len(pattern)</code> \u65f6\u7684 <code>i</code>; \u7b2c 2 \u79cd: \u4e0d\u62fc\u63a5 <code>pattern</code> \u548c <code>str</code>, \u641e 2 \u4e2a\u6307\u9488 <code>a</code> \u548c <code>b</code>, \u5206\u522b\u4ece <code>pattern</code> \u548c <code>str</code> \u7684\u5934\u90e8\u5411\u540e\u79fb\u52a8, \u5f53 <code>str[a]</code>,<code>pattern[b]</code>\u5931\u914d\u65f6, <code>pattern[0:b-1]</code>\u4ecd\u7136\u662f\u5339\u914d\u7684, \u6839\u636e <code>\u03c0[b-1]</code>\u80fd\u627e\u5230\u6307\u9488 <code>b</code> \u56de\u9000\u7684\u4f4d\u7f6e <code>b=\u03c0[b-1]</code>; \u76f4\u5230 <code>b=len(pattern)</code>\u5373\u53ef;  \u627e\u5230\u56de\u9000\u4f4d\u7f6e\u6bd4\u8f83\u96be\u7406\u89e3, \u73b0\u5728\u53ea\u770b <code>pattern</code>, <code>\u03c0[b-1]</code>\u662f\u957f\u5ea6, \u5982\u679c\u5f53\u4f5c\u7d22\u5f15\u7684\u8bdd, \u5c31\u662f\u771f\u524d\u7f00\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e; <code>pattern[0:\u03c0[b-1]-1] == pattern[?:b-1]</code>, \u6240\u4ee5 <code>b</code> \u56de\u9000\u5230 <code>\u03c0[b-1]</code></p> <p>\u73b0\u5728, \u53ea\u8981\u77e5\u9053\u5982\u4f55\u6c42\u89e3\u524d\u7f00\u51fd\u6570\u5373\u53ef. \u5982\u4f55\u6c42\u89e3\u524d\u7f00\u51fd\u6570\u5462? \u6709\u8da3\u7684\u662f, \u524d\u7f00\u51fd\u6570\u7684\u6c42\u89e3\u8fc7\u7a0b\u76f8\u5f53\u4e8e\u81ea\u5df1\u5339\u914d\u81ea\u5df1, \u540c\u65f6\u4e5f\u662f\u771f\u524d\u540e\u7f00\u7684\u6700\u5927\u957f\u5ea6</p> <p>\u4ece\u5934\u5230\u5c3e\u8ba1\u7b97 <code>pattern</code> \u7684 <code>\u03c0[i]</code>, <code>pattern</code> \u7684\u771f\u540e\u7f00\u8981\u4ece <code>pattern[1]</code>\u5f00\u59cb; \u641e 2 \u4e2a\u6307\u9488 <code>i</code> \u548c <code>j</code>, \u521d\u59cb\u6307\u5411 <code>i-&gt;pattern[1]</code> \u5f00\u59cb\u8fed\u4ee3 <code>i</code>; \u8ba9 <code>j=\u03c0(i-1)</code>, \u6b64\u65f6 <code>pattern[0:j-1]==pattern[i-1-(j-1):i-1]</code>, \u5982\u679c <code>pattern[j]==pattern[i]</code>, \u5219 <code>i</code>,<code>j</code> \u540c\u65f6\u524d\u8fdb\u5e76\u66f4\u65b0<code>\u03c0(i)</code>; \u5982\u679c <code>pattern[j]!=pattern[i]</code>, \u5219 <code>j</code> \u9700\u8981\u56de\u9000\u5c1d\u8bd5\u7528\u522b\u7684\u5b50\u4e32\u5339\u914d, <code>j=\u03c0[j-1]</code>, \u76f4\u5230 <code>pattern[j]==pattern[i]</code> \u5339\u914d\u4e0a;</p> <p>\u8fd9\u91cc\u4e0d\u7528\u5224\u65ad\u5b50\u4e32\u662f\u4e0d\u662f\u6700\u957f\u7684, \u56e0\u4e3a <code>j</code> \u4ece\u540e\u5f80\u524d\u56de\u9000, \u540e\u7f00\u5e8f\u5217\u56fa\u5b9a, \u4e00\u5b9a\u8d8a\u6765\u8d8a\u77ed</p> JavaGoPython3 <pre><code>class Solution {\n    public int strStr(String haystack, String needle) {\n        char[] ptn = needle.toCharArray();\n        char[] str = haystack.toCharArray();\n        int n = str.length;\n        int m = ptn.length;\n        int[] pi = new int[m];\n        for (int i = 1; i &lt; m; i++) {\n            int j = pi[i - 1]; // \u5f00\u59cb\u6bd4\u5bf9\u7684\u4f4d\u7f6e, \u4e5f\u662f\u5df2\u7ecf\u5339\u914d\u7684\u957f\u5ea6\n            while (j &gt; 0 &amp;&amp; ptn[i] != ptn[j]) j = pi[j - 1];\n            if (ptn[i] == ptn[j]) j++;\n            pi[i] = j;\n        }\n        int i = 0, j = 0;\n        for (; j &lt; m &amp;&amp; i &lt; n; i++) {\n            while (j &gt; 0 &amp;&amp; ptn[j] != str[i]) j = pi[j - 1];\n            if (ptn[j] == str[i]) j++;\n        }\n        if (j == m) return i - j; // i\u662f\u5b50\u4e32\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e, \u51cfj\u6b63\u597d\u662f0\u4f4d\n        return -1;\n    }\n}\n</code></pre> <pre><code>func strStr(str string, ptn string) int {\n    pi := make([]int, len(ptn))\n    for i := 1; i &lt; len(ptn); i++ {\n        j := pi[i-1]\n        for j &gt; 0 &amp;&amp; ptn[j] != ptn[i] {\n            j = pi[j-1]\n        }\n        if ptn[j] == ptn[i] {\n            j++\n        }\n        pi[i] = j\n    }\n    i, j := 0, 0\n    for ; i &lt; len(str) &amp;&amp; j &lt; len(ptn); i++ {\n        for j &gt; 0 &amp;&amp; ptn[j] != str[i] {\n            j = pi[j-1]\n        }\n        if ptn[j] == str[i] {\n            j++\n        }\n    }\n    if j == len(ptn) {\n        return i - j\n    }\n    return -1\n}\n</code></pre> <pre><code>class Solution:\n    def strStr(self, haystack: str, ptn: str) -&gt; int:\n        pi = [0] * len(ptn)\n        for i in range(1, len(ptn)):\n            j = pi[i - 1]\n            while j &gt; 0 and ptn[i] != ptn[j]:\n                j = pi[j - 1]\n            if ptn[i] == ptn[j]:\n                j += 1\n            pi[i] = j\n\n        i, j = 0, 0\n        while i &lt; len(haystack) and j &lt; len(ptn):\n            while j &gt; 0 and haystack[i] != ptn[j]:\n                j = pi[j - 1]\n            if haystack[i] == ptn[j]:\n                j += 1\n            i += 1\n\n        if j == len(ptn):\n            return i - j\n\n        return -1\n</code></pre>"},{"location":"leetcode/new/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/#_3","title":"\u56de\u6587\u5224\u5b9a","text":""},{"location":"leetcode/new/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/#125-easy","title":"125. \u9a8c\u8bc1\u56de\u6587\u4e32 easy","text":"<p>\u5251\u6307 Offer II 018. \u6709\u6548\u7684\u56de\u6587</p> <p>\u5982\u679c\u5728\u5c06\u6240\u6709\u5927\u5199\u5b57\u7b26\u8f6c\u6362\u4e3a\u5c0f\u5199\u5b57\u7b26\u3001\u5e76\u79fb\u9664\u6240\u6709\u975e\u5b57\u6bcd\u6570\u5b57\u5b57\u7b26\u4e4b\u540e\uff0c\u77ed\u8bed\u6b63\u7740\u8bfb\u548c\u53cd\u7740\u8bfb\u90fd\u4e00\u6837\u3002\u5219\u53ef\u4ee5\u8ba4\u4e3a\u8be5\u77ed\u8bed\u662f\u4e00\u4e2a \u56de\u6587\u4e32 \u3002</p> <p>\u5b57\u6bcd\u548c\u6570\u5b57\u90fd\u5c5e\u4e8e\u5b57\u6bcd\u6570\u5b57\u5b57\u7b26\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u5982\u679c\u5b83\u662f \u56de\u6587\u4e32 \uff0c\u8fd4\u56de true\uff1b\u5426\u5219\uff0c\u8fd4\u56de false\u3002</p> <pre><code>class Solution {\n    public boolean isPalindrome(String s) {\n        char[] arr = s.toCharArray();\n        int l = 0, r = arr.length - 1;\n        while (l &lt; r) {\n            char cl = arr[l];\n            char cr = arr[r];\n            if (!Character.isLetterOrDigit(cl)) {\n                l++;\n                continue;\n            }\n            if (!Character.isLetterOrDigit(cl)) {\n                r--;\n                continue;\n            }\n            if (Character.toLowerCase(cl) != Character.toLowerCase(cr)) return false;\n            l++;\n            r--;\n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/#_4","title":"\u540c\u6784","text":""},{"location":"leetcode/new/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/#205-easy","title":"205. \u540c\u6784\u5b57\u7b26\u4e32 easy","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s \u548c t\uff0c\u5224\u65ad\u5b83\u4eec\u662f\u5426\u662f\u540c\u6784\u7684\u3002</p> <p>\u5982\u679c s \u4e2d\u7684\u5b57\u7b26\u53ef\u4ee5\u6309\u67d0\u79cd\u6620\u5c04\u5173\u7cfb\u66ff\u6362\u5f97\u5230 t\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u540c\u6784\u7684\u3002</p> <p>\u6bcf\u4e2a\u51fa\u73b0\u7684\u5b57\u7b26\u90fd\u5e94\u5f53\u6620\u5c04\u5230\u53e6\u4e00\u4e2a\u5b57\u7b26\uff0c\u540c\u65f6\u4e0d\u6539\u53d8\u5b57\u7b26\u7684\u987a\u5e8f\u3002\u4e0d\u540c\u5b57\u7b26\u4e0d\u80fd\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u7b26\u4e0a\uff0c\u76f8\u540c\u5b57\u7b26\u53ea\u80fd\u6620\u5c04\u5230\u540c\u4e00\u4e2a\u5b57\u7b26\u4e0a\uff0c\u5b57\u7b26\u53ef\u4ee5\u6620\u5c04\u5230\u81ea\u5df1\u672c\u8eab\u3002</p> <p>\u8981\u6620\u5c04 2 \u6b21, \u9632\u6b62\u4e00\u5bf9\u591a\u548c\u591a\u5bf9\u4e00</p> <pre><code>class Solution {\n    public boolean isIsomorphic(String s, String t) {\n        if (s.length() != t.length()) return false;\n        Character[] m1 = new Character[128];\n        Character[] m2 = new Character[128];\n        for (int i = 0; i &lt; s.length(); i++) {\n            Character c1 = s.charAt(i);\n            Character c2 = t.charAt(i);\n            Character c3 = m1[c1];\n            Character c4 = m2[c2];\n            if (c3 == null &amp;&amp; c4 == null) {\n                m1[c1] = c2;\n                m2[c2] = c1;\n            }\n            //\n            else if (!(c1.equals(c4) &amp;&amp; c2.equals(c3))) return false;\n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E8%BE%91/","title":"\u5b57\u7b26\u4e32\u7f16\u8f91","text":""},{"location":"leetcode/new/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E8%BE%91/#_1","title":"\u5355\u8bcd\u53cd\u8f6c","text":""},{"location":"leetcode/new/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E8%BE%91/#151-mid","title":"151. \u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5355\u8bcd mid","text":"<p>\u5251\u6307 Offer 58 - I. \u7ffb\u8f6c\u5355\u8bcd\u987a\u5e8f</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u8bf7\u4f60\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d \u5355\u8bcd \u7684\u987a\u5e8f\u3002</p> <p>\u5355\u8bcd \u662f\u7531\u975e\u7a7a\u683c\u5b57\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32\u3002s \u4e2d\u4f7f\u7528\u81f3\u5c11\u4e00\u4e2a\u7a7a\u683c\u5c06\u5b57\u7b26\u4e32\u4e2d\u7684 \u5355\u8bcd \u5206\u9694\u5f00\u3002</p> <p>\u8fd4\u56de \u5355\u8bcd \u987a\u5e8f\u98a0\u5012\u4e14 \u5355\u8bcd \u4e4b\u95f4\u7528\u5355\u4e2a\u7a7a\u683c\u8fde\u63a5\u7684\u7ed3\u679c\u5b57\u7b26\u4e32\u3002</p> <p>\u6ce8\u610f\uff1a\u8f93\u5165\u5b57\u7b26\u4e32 s \u4e2d\u53ef\u80fd\u4f1a\u5b58\u5728\u524d\u5bfc\u7a7a\u683c\u3001\u5c3e\u968f\u7a7a\u683c\u6216\u8005\u5355\u8bcd\u95f4\u7684\u591a\u4e2a\u7a7a\u683c\u3002\u8fd4\u56de\u7684\u7ed3\u679c\u5b57\u7b26\u4e32\u4e2d\uff0c\u5355\u8bcd\u95f4\u5e94\u5f53\u4ec5\u7528\u5355\u4e2a\u7a7a\u683c\u5206\u9694\uff0c\u4e14\u4e0d\u5305\u542b\u4efb\u4f55\u989d\u5916\u7684\u7a7a\u683c\u3002</p> <p>\u53cd\u8f6c\u6574\u4e2a s, \u7136\u540e\u53cd\u8f6c\u6bcf\u4e2a\u5355\u8bcd\u5373\u53ef</p> <pre><code>class Solution {\n    public String reverseWords(String s) {\n        return String.join(\" \", Arrays.asList(s.trim().split(\"\\\\s+\")).reversed());\n    }\n}\n</code></pre> <pre><code>class Solution {\n    public String reverseWords(String s) {\n        String[] arr = s.split(\" \");\n        StringBuilder sb = new StringBuilder();\n        for (int i = arr.length - 1; i &gt;= 0; i--) {\n            String ss = arr[i];\n            if (!\"\".equals(ss)) sb.append(ss).append(\" \");\n        }\n        return sb.toString().trim();\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E8%BE%91/#344-easy","title":"344. \u53cd\u8f6c\u5b57\u7b26\u4e32 easy","text":"<p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u4f5c\u7528\u662f\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\u8fc7\u6765\u3002\u8f93\u5165\u5b57\u7b26\u4e32\u4ee5\u5b57\u7b26\u6570\u7ec4 s \u7684\u5f62\u5f0f\u7ed9\u51fa\u3002</p> <p>\u4e0d\u8981\u7ed9\u53e6\u5916\u7684\u6570\u7ec4\u5206\u914d\u989d\u5916\u7684\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u539f\u5730\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u3001\u4f7f\u7528 O(1) \u7684\u989d\u5916\u7a7a\u95f4\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002</p> <pre><code>class Solution {\n    public void reverseString(char[] s) {\n        int i = 0, j = s.length - 1;\n        while (i &lt; j) {\n            swap(s, i++, j--);\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E8%BE%91/#345-easy","title":"345. \u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u5143\u97f3\u5b57\u6bcd easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \uff0c\u4ec5\u53cd\u8f6c\u5b57\u7b26\u4e32\u4e2d\u7684\u6240\u6709\u5143\u97f3\u5b57\u6bcd\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u5b57\u7b26\u4e32\u3002</p> <p>\u5143\u97f3\u5b57\u6bcd\u5305\u62ec 'a'\u3001'e'\u3001'i'\u3001'o'\u3001'u'\uff0c\u4e14\u53ef\u80fd\u4ee5\u5927\u5c0f\u5199\u4e24\u79cd\u5f62\u5f0f\u51fa\u73b0\u3002</p> <p>\u6ce8\u610f\u8fb9\u754c\u6761\u4ef6 \u53cc\u6307\u9488\u4ea4\u6362</p> <pre><code>class Solution {\n    public String reverseVowels(String s) {\n        char[] arr = s.toCharArray();\n        Set&lt;Character&gt; set = Set.of('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');\n        for (int i = 0, j = s.length() - 1; ; i++, j--) {\n            while (i &lt; j &amp;&amp; !set.contains(arr[i])) i++;\n            while (i &lt; j &amp;&amp; !set.contains(arr[j])) j--;\n            if (i &gt;= j) break;\n            swap(arr, i, j);\n        }\n        return String.valueOf(arr);\n    }\n\n    private void swap(char[] arr, int i, int j) {\n        char t = arr[i];\n        arr[i] = arr[j];\n        arr[j] = t;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%89%BE%E6%95%B0/","title":"\u627e\u6570","text":""},{"location":"leetcode/new/%E6%89%BE%E6%95%B0/#1","title":"\u51fa\u73b0 1 \u6b21\u7684\u6570","text":""},{"location":"leetcode/new/%E6%89%BE%E6%95%B0/#136-easy","title":"136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6574\u6570\u6570\u7ec4\uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002</p> <p>\u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f</p> <pre><code>class Solution {\n    public int singleNumber(int[] nums) {\n        int ret = 0;\n        for (int n : nums) ret ^= n;\n        return ret;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%89%BE%E6%95%B0/#260-iii-mid","title":"260. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 III mid","text":"<p>\u5251\u6307 Offer 56 - I. \u6570\u7ec4\u4e2d\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u5176\u4e2d\u6070\u597d\u6709\u4e24\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u5176\u4f59\u6240\u6709\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002 \u627e\u51fa\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u90a3\u4e24\u4e2a\u5143\u7d20\u3002\u4f60\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u7b54\u6848\u3002</p> <p>\u4e0d\u59a8\u8bbe\u76ee\u6807\u5143\u7d20\u4e3a a,b \u90a3\u4e48 a!=b, \u5373 a,b \u81f3\u5c11\u6709 1 \u4f4d\u4e0d\u540c \u901a\u8fc7\u8fd9 1 \u4f4d\u53ef\u4ee5\u533a\u5206 a,b \u6c42 a,b \u7684\u5f02\u6216 n, n \u81f3\u5c11\u6709\u4e00\u4f4d\u662f 1; \u53d6 last = n&amp;(-n), \u6839\u636e\u8fd9\u4e2a last \u533a\u5206 a,b</p> <pre><code>class Solution {\n    public int[] singleNumber(int[] nums) {\n        int dif = 0;\n        for (int e : nums) {\n            dif ^= e;\n        }\n        int last = dif &amp; (-dif);\n        int[] res = new int[2];\n        // \u53d8\u6210\u627e\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u5355\u4e2a\u6570\u5b57\n        for (int e : nums) {\n            if ((e &amp; last) == 0)\n                res[0] ^= e;\n            else\n                res[1] ^= e;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%89%BE%E6%95%B0/#_2","title":"\u7f3a\u5931\u7684\u6570","text":""},{"location":"leetcode/new/%E6%89%BE%E6%95%B0/#41-hard","title":"41. \u7f3a\u5931\u7684\u7b2c\u4e00\u4e2a\u6b63\u6570 hard","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4 nums \uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u6ca1\u6709\u51fa\u73b0\u7684\u6700\u5c0f\u7684\u6b63\u6574\u6570\u3002</p> <p>\u8bf7\u4f60\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n) \u5e76\u4e14\u53ea\u4f7f\u7528\u5e38\u6570\u7ea7\u522b\u989d\u5916\u7a7a\u95f4\u7684\u89e3\u51b3\u65b9\u6848\u3002</p> <p>\u628a\u4e0d\u5728\u5408\u9002\u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u6d3e\u53d1\u5230\u5408\u9002\u7684\u4f4d\u7f6e, \u8981\u5904\u7406\u8d1f\u6570,\u5927\u6570\u548c\u91cd\u590d\u6570</p> JavaGo <pre><code>class Solution {\n    public int firstMissingPositive(int[] nums) {\n        int n = nums.length;\n        for (int i = 0; i &lt; n; i++) {\n            int idx;\n            // i=0, nums[i]=1\n            while (nums[i] &gt; 0 &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[idx = nums[i] - 1] != nums[i]) {\n                nums[i] ^= nums[idx];\n                nums[idx] ^= nums[i];\n                nums[i] ^= nums[idx];\n            }\n        }\n        for (int i = 0; i &lt; n; i++) {\n            if (nums[i] != i + 1) return i + 1;\n        }\n        return n + 1;\n    }\n}\n</code></pre> <pre><code>    func firstMissingPositive(nums []int) int {\n        n := len(nums)\n        for i := 0; i &lt; n; i++ {\n            for nums[i] &gt; 0 &amp;&amp; nums[i] &lt;= n &amp;&amp; nums[i] != nums[nums[i]-1] {\n                nums[i], nums[nums[i]-1] = nums[nums[i]-1], nums[i]\n            }\n        }\n        for i := 0; i &lt; n; i++ {\n            if nums[i] != i+1 {\n                return i + 1\n            }\n        }\n        return n + 1\n    }\n</code></pre>"},{"location":"leetcode/new/%E6%89%BE%E6%95%B0/#268-easy","title":"268. \u4e22\u5931\u7684\u6570\u5b57 easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b [0, n] \u4e2d n \u4e2a\u6570\u7684\u6570\u7ec4 nums\uff0c\u627e\u51fa [0, n] \u8fd9\u4e2a\u8303\u56f4\u5185\u6ca1\u6709\u51fa\u73b0\u5728\u6570\u7ec4\u4e2d\u7684\u90a3\u4e2a\u6570\u3002</p> <p>\u7d22\u5f15\u4e0e\u5143\u7d20\u5f02\u6216</p> <pre><code>class Solution {\n    public int missingNumber(int[] nums) {\n        int res = 0;\n        for (int i = 0; i &lt; nums.length; i++) {\n            res = res ^ i ^ nums[i];\n        }\n        res ^= nums.length;\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%89%BE%E6%95%B0/#_3","title":"\u91cd\u590d\u6570","text":""},{"location":"leetcode/new/%E6%89%BE%E6%95%B0/#287-mid","title":"287. \u5bfb\u627e\u91cd\u590d\u6570 mid","text":"<p>\u65f6\u95f4\u590d\u6742\u5ea6 O(N) \u7a7a\u95f4\u590d\u6742\u5ea6 O(1) \u5178\u4e2d\u5178, \u636e\u8bf4\u82b1\u8d39\u4e86 Don Knuth 24 \u5c0f\u65f6\u624d\u89e3\u51fa\u6765</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n + 1 \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums\uff0c\u5176\u6570\u5b57\u90fd\u5728 [1, n] \u8303\u56f4\u5185\uff0c\u53ef\u77e5\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\u3002</p> <p>\u5047\u8bbe nums \u53ea\u6709 \u4e00\u4e2a\u91cd\u590d\u7684\u6574\u6570\uff0c\u8fd4\u56de \u8fd9\u4e2a\u91cd\u590d\u7684\u6570\u3002</p> <p>\u4f60\u8bbe\u8ba1\u7684\u89e3\u51b3\u65b9\u6848\u5fc5\u987b \u4e0d\u4fee\u6539 \u6570\u7ec4 nums \u4e14\u53ea\u7528\u5e38\u91cf\u7ea7 O(1) \u7684\u989d\u5916\u7a7a\u95f4\u3002</p> <p>\u53cc\u6307\u9488\u627e\u73af\u6cd5</p> <p>\u8fd9\u4e2a\u9898\u5f88\u91cd\u8981\u7684\u4e00\u70b9\u662f\u8303\u56f4[1, n], \u4e5f\u5c31\u662f\u8bf4\u4e0d\u4f1a\u51fa\u73b0\u4e0a\u6765\u5c31\u662f\u4e00\u4e2a\u73af, num[i]\u4e0d\u4f1a\u6307\u5411 0 \u5982\u679c\u4e0a\u6765\u5c31\u662f\u4e00\u4e2a\u73af\u90a3\u5fc5\u7136\u627e\u4e0d\u5230\u5165\u5ea6\u4e3a 2 \u7684\u8282\u70b9</p> <pre><code>class Solution {\n    public int findDuplicate(int[] nums) {\n        int slow = 0, fast = 0;\n        do {\n            slow = nums[slow];\n            fast = nums[nums[fast]];\n        } while (slow != fast);\n        slow = 0;\n        while (slow != fast) {\n            slow = nums[slow];\n            fast = nums[fast];\n        }\n        return slow;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%89%BE%E6%95%B0/#217-easy","title":"217. \u5b58\u5728\u91cd\u590d\u5143\u7d20 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\u3002\u5982\u679c\u4efb\u4e00\u503c\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0 \u81f3\u5c11\u4e24\u6b21\uff0c\u8fd4\u56de true\uff1b\u5982\u679c\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u4e92\u4e0d\u76f8\u540c\uff0c\u8fd4\u56de false\u3002</p> <pre><code>class Solution {\n    public boolean containsDuplicate(int[] nums) {\n        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();\n        for (int num : nums) {\n            if (set.contains(num)) return true;\n            set.add(num);\n        }\n        return false;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%89%BE%E6%95%B0/#_4","title":"\u591a\u6570","text":""},{"location":"leetcode/new/%E6%89%BE%E6%95%B0/#169-easy","title":"169. \u591a\u6570\u5143\u7d20 easy","text":"<p>\u5251\u6307 Offer 39. \u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u8d85\u8fc7\u4e00\u534a\u7684\u6570\u5b57</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u5927\u5c0f\u4e3a n \u7684\u6570\u7ec4 nums \uff0c\u8fd4\u56de\u5176\u4e2d\u7684\u591a\u6570\u5143\u7d20\u3002\u591a\u6570\u5143\u7d20\u662f\u6307\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570 \u5927\u4e8e \u230a n/2 \u230b \u7684\u5143\u7d20\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u662f\u975e\u7a7a\u7684\uff0c\u5e76\u4e14\u7ed9\u5b9a\u7684\u6570\u7ec4\u603b\u662f\u5b58\u5728\u591a\u6570\u5143\u7d20\u3002</p> <p>\u5f53\u524d\u5143\u7d20+1, \u975e\u5f53\u524d\u5143\u7d20-1</p> <pre><code>class Solution {\n    public int majorityElement(int[] nums) {\n        int cnt = 0;\n        Integer aim = null;\n        for (int o : nums) {\n            if (cnt == 0) aim = o;\n            cnt += (o == aim) ? 1 : -1;\n        }\n        return aim;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/","title":"\u62d3\u6251\u6392\u5e8f","text":""},{"location":"leetcode/new/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#_1","title":"\u62d3\u6251\u6392\u5e8f","text":""},{"location":"leetcode/new/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#207-mid","title":"207. \u8bfe\u7a0b\u8868 mid","text":"<p>\u4f60\u8fd9\u4e2a\u5b66\u671f\u5fc5\u987b\u9009\u4fee numCourses \u95e8\u8bfe\u7a0b\uff0c\u8bb0\u4e3a 0 \u5230 numCourses - 1\u3002</p> <p>\u5728\u9009\u4fee\u67d0\u4e9b\u8bfe\u7a0b\u4e4b\u524d\u9700\u8981\u4e00\u4e9b\u5148\u4fee\u8bfe\u7a0b\u3002 \u5148\u4fee\u8bfe\u7a0b\u6309\u6570\u7ec4 prerequisites \u7ed9\u51fa\uff0c\u5176\u4e2d prerequisites[i] = [ai, bi]\uff0c\u8868\u793a\u5982\u679c\u8981\u5b66\u4e60\u8bfe\u7a0b ai \u5219 \u5fc5\u987b \u5148\u5b66\u4e60\u8bfe\u7a0b bi\u3002</p> <ul> <li>\u4f8b\u5982\uff0c\u5148\u4fee\u8bfe\u7a0b\u5bf9 [0, 1] \u8868\u793a\uff1a\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 1\u3002</li> </ul> <p>\u8bf7\u4f60\u5224\u65ad\u662f\u5426\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\u7684\u5b66\u4e60\uff1f\u5982\u679c\u53ef\u4ee5\uff0c\u8fd4\u56de true\uff1b\u5426\u5219\uff0c\u8fd4\u56de false\u3002</p> <p>\u4e24\u79cd\u89e3\u6cd5, DFS\u627e\u73af, BFS\u6392\u5e8f \u90fd\u53ef\u4ee5</p> <p>\u89e3\u6cd51: DFS</p> <pre><code>class Solution {\n\n    // \u90bb\u63a5\u8868, idx=\u5148\u4fee\u8bfe\u7a0b\uff0carr[idx]=\u540e\u4fee\u8bfe\u7a0b; \u672c\u8d28\u662f\u8fb9\u7684\u96c6\u5408\n    List&lt;Integer&gt;[] edges;\n    // \u5165\u5ea6\n    int[] visit;\n    boolean valid = true;\n\n    // DFS\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n\n        visit = new int[numCourses];\n\n        @SuppressWarnings({\"unchecked\"})\n        List&lt;Integer&gt;[] arr = new List[numCourses];\n        edges = arr;\n\n        // \u6709\u53ef\u80fd\u6709\u5355\u8282\u70b9, \u4e0d\u80fd\u61d2\u52a0\u8f7d\n        for (int i = 0; i &lt; numCourses; ++i) {\n            edges[i] = new ArrayList&lt;&gt;();\n        }\n\n        for (int[] e : prerequisites) {\n            // \u5148\u4feee[1] \u540e\u4feee[0]\n            edges[e[1]].add(e[0]);\n        }\n        //============ \u521d\u59cb\u5316\u7ed3\u675f ============\n\n        // \u904d\u5386\u6240\u6709\u8282\u70b9\n        for (int i = 0; valid &amp;&amp; i &lt; numCourses; ++i) {\n            if (visit[i] == 0) dfs(i);\n        }\n        return valid;\n    }\n\n    public void dfs(int idx) {\n        // \u5b66\u4e60\u4e2d\n        visit[idx] = -1;\n\n        for (int after : edges[idx]) {\n            if (visit[after] == 0)\n                dfs(after);\n            else if (visit[after] == -1)\n                valid = false;\n\n            if (!valid) return;\n        }\n        // \u5b66\u4e60\u5b8c\u6210\n        visit[idx] = 1;\n    }\n}\n</code></pre> <p>\u89e3\u6cd52: BFS</p> <pre><code>class Solution {\n\n    // \u90bb\u63a5\u8868, idx=\u5148\u4fee\u8bfe\u7a0b\uff0carr[idx]=\u540e\u4fee\u8bfe\u7a0b; \u672c\u8d28\u662f\u8fb9\u7684\u96c6\u5408\n    List&lt;Integer&gt;[] edges;\n    int[] in;\n    int[] visit;\n\n    public boolean canFinish(int numCourses, int[][] prerequisites) {\n\n        visit = new int[numCourses];\n        in = new int[numCourses];\n\n        @SuppressWarnings({\"unchecked\"})\n        List&lt;Integer&gt;[] arr = new List[numCourses];\n        edges = arr;\n\n        // \u6709\u53ef\u80fd\u6709\u5355\u8282\u70b9, \u4e0d\u80fd\u61d2\u52a0\u8f7d\n        for (int i = 0; i &lt; numCourses; ++i) {\n            edges[i] = new ArrayList&lt;&gt;();\n        }\n\n        for (int[] e : prerequisites) {\n            // \u5148\u4feee[1] \u540e\u4feee[0]\n            in[e[0]]++;\n            edges[e[1]].add(e[0]);\n        }\n        //============ \u521d\u59cb\u5316\u7ed3\u675f ============\n        // BFS\n        Queue&lt;Integer&gt; queue = new ArrayDeque&lt;&gt;();\n        for (int i = 0; i &lt; numCourses; i++) {\n            if (in[i] == 0) queue.add(i);\n        }\n        int cnt = numCourses;\n        while (!queue.isEmpty()) {\n            Integer e = queue.remove();\n            cnt--;\n            for (Integer after : edges[e]) {\n                if (--in[after] == 0) queue.add(after);\n            }\n        }\n        return cnt == 0;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/#210-ii-mid","title":"210. \u8bfe\u7a0b\u8868 II mid","text":"<p>\u5251\u6307 Offer II 113. \u8bfe\u7a0b\u987a\u5e8f</p> <p>\u73b0\u5728\u4f60\u603b\u5171\u6709 numCourses \u95e8\u8bfe\u9700\u8981\u9009\uff0c\u8bb0\u4e3a 0 \u5230 numCourses - 1\u3002\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 prerequisites\uff0c\u5176\u4e2d prerequisites[i] = [ai, bi]\uff0c\u8868\u793a\u5728\u9009\u4fee\u8bfe\u7a0b ai \u524d\u5fc5\u987b\u5148\u9009\u4fee bi\u3002</p> <ul> <li>\u4f8b\u5982\uff0c\u60f3\u8981\u5b66\u4e60\u8bfe\u7a0b 0\uff0c\u4f60\u9700\u8981\u5148\u5b8c\u6210\u8bfe\u7a0b 1\uff0c\u6211\u4eec\u7528\u4e00\u4e2a\u5339\u914d\u6765\u8868\u793a\uff1a[0,1]\u3002</li> </ul> <p>\u8fd4\u56de\u4f60\u4e3a\u4e86\u5b66\u5b8c\u6240\u6709\u8bfe\u7a0b\u6240\u5b89\u6392\u7684\u5b66\u4e60\u987a\u5e8f\u3002\u53ef\u80fd\u4f1a\u6709\u591a\u4e2a\u6b63\u786e\u7684\u987a\u5e8f\uff0c\u4f60\u53ea\u8981\u8fd4\u56de \u4efb\u610f\u4e00\u79cd \u5c31\u53ef\u4ee5\u4e86\u3002\u5982\u679c\u4e0d\u53ef\u80fd\u5b8c\u6210\u6240\u6709\u8bfe\u7a0b\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u6570\u7ec4\u3002</p> <p>BFS \u7b80\u5355\u70b9 DFS, \u81ea\u5e95\u5411\u4e0a \u5012\u5e8f\u586b\u5165</p> <pre><code>class Solution {\n    boolean valid = true;\n    int idx;\n\n    public int[] findOrder(int num, int[][] prerequisites) {\n        @SuppressWarnings(\"unchecked\")\n        List&lt;Integer&gt;[] edgeList = new List[num];\n        for (int i = 0; i &lt; num; i++) {\n            edgeList[i] = new ArrayList&lt;&gt;();\n        }\n        // \u5148\u4feee[1] \u540e\u4feee[0]\n        for (int[] e : prerequisites) {\n            edgeList[e[1]].add(e[0]);\n        }\n\n        int[] visit = new int[num];\n        int[] res = new int[num];\n        idx = num - 1;\n\n        for (int i = 0; i &lt; num &amp;&amp; valid; i++) {\n            if (visit[i] == 0) dfs(edgeList, visit, res, i);\n        }\n\n        return valid ? res : new int[]{};\n    }\n\n    private void dfs(List&lt;Integer&gt;[] edgeList, int[] visit, int[] res,\n                     int i) {\n        // \u641c\u7d22\u4e2d\n        visit[i] = -1;\n        for (int e : edgeList[i]) {\n            if (visit[e] == 0)\n                dfs(edgeList, visit, res, e);\n            else if (visit[e] == -1) {\n                valid = false;\n                return;\n            }\n        }\n        // \u5012\u5e8f\n        res[idx--] = i;\n        visit[i] = 1;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%8E%92%E5%BA%8F/","title":"\u6392\u5e8f","text":""},{"location":"leetcode/new/%E6%8E%92%E5%BA%8F/#_2","title":"\u7279\u6b8a\u5143\u7d20\u6392\u5e8f","text":""},{"location":"leetcode/new/%E6%8E%92%E5%BA%8F/#75-mid","title":"75. \u989c\u8272\u5206\u7c7b mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b\u7ea2\u8272\u3001\u767d\u8272\u548c\u84dd\u8272\uff0c\u4e00\u5171 n \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u539f\u5730\u5bf9\u5b83\u4eec\u8fdb\u884c\u6392\u5e8f\uff0c\u4f7f\u5f97\u76f8\u540c\u989c\u8272\u7684\u5143\u7d20\u76f8\u90bb\uff0c\u5e76\u6309\u7167\u7ea2\u8272\u3001\u767d\u8272\u3001\u84dd\u8272\u987a\u5e8f\u6392\u5217\u3002</p> <p>\u6b64\u9898\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u6574\u6570 0\u30011 \u548c 2 \u5206\u522b\u8868\u793a\u7ea2\u8272\u3001\u767d\u8272\u548c\u84dd\u8272\u3002</p> <p>\u8377\u5170\u56fd\u65d7\u95ee\u9898 \u53ef\u4ee5\u904d\u5386 2 \u6b21, \u4e00\u6b21\u4ea4\u6362 0, \u4e00\u6b21\u4ea4\u6362 1; \u4e5f\u53ef\u4ee5\u904d\u5386 1 \u6b21, \u6709\u591a\u79cd\u89e3\u6cd5, \u90fd\u662f\u5229\u7528\u591a\u4e2a\u6307\u9488\u5904\u7406;</p> <p>\u89e3\u6cd5 1 \u53cc\u6307\u9488 0,1</p> <pre><code>class Solution {\n    public void sortColors(int[] nums) {\n        int p0 = 0, p1 = 0;\n        for (int i = 0; i &lt; nums.length; i++) {\n            if (nums[i] == 1) {\n                swap(nums, i, p1);\n                p1++;\n            } else if (nums[i] == 0) {\n                swap(nums, i, p0);\n                // \u5982\u679c p0 &lt; p1, \u8bf4\u660e [p0] = 1, \u521a\u521a\u7684\u4ea4\u6362\u4f1a\u5c06 1 \u6362\u5230 i \u7684\u4f4d\u7f6e, \u9700\u8981\u5c06\u5176\u653e\u5728 1 \u5e8f\u5217\u7684\u672b\u7aef\n                if (p0 &lt; p1) swap(nums, i, p1);\n                p0++;\n                p1++; // 0 \u5e8f\u5217\u53d8\u957f\u4e86, p1 \u4e5f\u8981++\n            }\n        }\n    }\n\n    private void swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2 \u53cc\u6307\u9488 0,2</p> <p>\u7ef4\u62a4\u4e09\u4e2a\u6307\u9488, \u4e00\u4e2a\u662f 0 \u7684\u76ee\u6807\u4f4d, \u4e00\u4e2a\u662f 2 \u7684\u76ee\u6807\u4f4d, \u8fd8\u6709\u4e00\u4e2a\u662f\u7d22\u5f15, \u7d22\u5f15\u524d\u9762\u6ca1\u6709 2</p> <pre><code>class Solution {\n    public void sortColors(int[] nums) {\n        int p0 = 0; // 0 \u7684 \u5f85\u586b\u5145\u4f4d\u7f6e\n        int i = 0; // \u7d22\u5f15\n        int p2 = nums.length - 1; // 2 \u7684\u5f85\u586b\u5145\u4f4d\u7f6e\n        // i \u524d\u9762\u6ca1\u6709 2\n        while (i &lt;= p2) {\n            switch (nums[i]) {\n                case 2 -&gt; {\n                    // \u5c06 2 \u4ea4\u6362\u5230 p2; \u4ea4\u6362\u540e [i] \u662f\u672a\u77e5\u7684, \u6240\u4ee5 i \u4e0d\u52a8\n                    if (nums[p2] != 2) swap(nums, i, p2);\n                    p2--;\n                }\n                case 0 -&gt; {\n                    // \u5c06 0 \u4ea4\u6362\u5230 p0; [p0] != 2, \u539f\u56e0\u662f i &gt;= p0, 2\u5df2\u7ecf\u4ea4\u6362\u5230 p2 \u4e86\n                    if (nums[p0] != 0) swap(nums, i, p0);\n                    p0++;\n                    i++;\n                }\n                default -&gt; i++;\n            }\n        }\n    }\n\n    void swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 3 \u53cc\u6307\u9488 0,2</p> <p>\u8fd9\u79cd\u89e3\u6cd5\u8ddf\u89e3\u6cd5 2 \u8bed\u610f\u4e0a\u662f\u4e00\u6837\u7684</p> <pre><code>class Solution {\n    public void sortColors(int[] nums) {\n        int n = nums.length;\n        int p0 = 0, p2 = n - 1;\n        for (int i = 0; i &lt;= p2; i++) {\n            while (i &lt;= p2 &amp;&amp; nums[i] == 2) {\n                swap(nums, i, p2);\n                p2--;\n            }\n            if (nums[i] == 0) {\n                swap(nums, i, p0);\n                p0++;\n            }\n        }\n    }\n    void swap(int[] nums, int i, int j) {\n        int temp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = temp;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%8E%92%E5%BA%8F/#283-easy","title":"283. \u79fb\u52a8\u96f6 easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4 nums\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u5c06\u6240\u6709 0 \u79fb\u52a8\u5230\u6570\u7ec4\u7684\u672b\u5c3e\uff0c\u540c\u65f6\u4fdd\u6301\u975e\u96f6\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5fc5\u987b\u5728\u4e0d\u590d\u5236\u6570\u7ec4\u7684\u60c5\u51b5\u4e0b\u539f\u5730\u5bf9\u6570\u7ec4\u8fdb\u884c\u64cd\u4f5c\u3002</p> <pre><code>class Solution {\n    public void removeDuplicates(int[] nums) {\n        int idx = 0;\n        for (int i = 0; i &lt; nums.length; i++) {\n            if (nums[i] == 0) continue;\n            swap(nums, i, idx++);\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%8E%92%E5%BA%8F/#_3","title":"\u5408\u5e76","text":""},{"location":"leetcode/new/%E6%8E%92%E5%BA%8F/#88-mid","title":"88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4 mid","text":"<p>\u7ed9\u4f60\u4e24\u4e2a\u6309 \u975e\u9012\u51cf\u987a\u5e8f \u6392\u5217\u7684\u6574\u6570\u6570\u7ec4 nums1 \u548c nums2\uff0c\u53e6\u6709\u4e24\u4e2a\u6574\u6570 m \u548c n\uff0c\u5206\u522b\u8868\u793a nums1 \u548c nums2 \u4e2d\u7684\u5143\u7d20\u6570\u76ee\u3002</p> <p>\u8bf7\u4f60 \u5408\u5e76 nums2 \u5230 nums1 \u4e2d\uff0c\u4f7f\u5408\u5e76\u540e\u7684\u6570\u7ec4\u540c\u6837\u6309 \u975e\u9012\u51cf\u987a\u5e8f \u6392\u5217\u3002</p> <p>\u6ce8\u610f\uff1a\u6700\u7ec8\uff0c\u5408\u5e76\u540e\u6570\u7ec4\u4e0d\u5e94\u7531\u51fd\u6570\u8fd4\u56de\uff0c\u800c\u662f\u5b58\u50a8\u5728\u6570\u7ec4 nums1 \u4e2d\u3002\u4e3a\u4e86\u5e94\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0cnums1 \u7684\u521d\u59cb\u957f\u5ea6\u4e3a m + n\uff0c\u5176\u4e2d\u524d m \u4e2a\u5143\u7d20\u8868\u793a\u5e94\u5408\u5e76\u7684\u5143\u7d20\uff0c\u540e n \u4e2a\u5143\u7d20\u4e3a 0\uff0c\u5e94\u5ffd\u7565\u3002nums2 \u7684\u957f\u5ea6\u4e3a n\u3002</p> <p>\u53cd\u5411\u5408\u5e76, \u4e0d\u4f1a\u8986\u76d6; \u4e09\u4e2a\u6307\u9488</p> <pre><code>class Solution {\n    public void merge(int[] nums1, int m, int[] nums2, int n) {\n        // \u4ece\u5c3e\u5230\u5934\u7684\u7d22\u5f15\n        int x = nums1.length - 1;\n        for (int i = m - 1, j = n - 1; x &gt;= 0; x--) {\n            if (i &gt;= 0 &amp;&amp; j &gt;= 0) {\n                if (nums1[i] &gt; nums2[j]) nums1[x] = nums1[i--];\n                else nums1[x] = nums2[j--];\n            }\n            else if (i &gt;= 0) nums1[x] = nums1[i--];\n            else if (j &gt;= 0) nums1[x] = nums2[j--];\n            else break;\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%8E%92%E5%BA%8F/#_4","title":"\u6392\u5e8f\u7b97\u6cd5","text":""},{"location":"leetcode/new/%E6%8E%92%E5%BA%8F/#_5","title":"\u5feb\u6392","text":"<ol> <li>quicksort \u51fd\u6570\u91cd\u8f7d\uff0c\u53c2\u6570\uff08\u5f85\u6392\u5e8f\u6570\u7ec4\uff0c\u524d\u540e\u4e24\u4e2a index\uff09</li> <li>\u9012\u5f52 sort\uff0c\u5230 2 \u4e2a index \u76f8\u7b49\u4e3a\u6b62</li> <li>partition \u662f\u91cd\u70b9</li> <li>\u9009\u4e3b\u5143, \u53d6\u9996\u5c3e\u4e2d\u4e09\u4e2a\u6570\u7684\u4e2d\u4f4d\u6570\u653e\u5230\u5012\u6570\u7b2c\u4e8c\u4f4d;\uff08\u5728\u8003\u8651\u6027\u80fd\u7684\u60c5\u51b5\u4e0b\uff09</li> </ol> <pre><code> \u65b0\u5efa\u4e24\u4e2a\u6307\u9488\u4e0d\u65ad\u5730\u5411\u524d\u5411\u540e\u904d\u5386\uff0c\u627e\u5230\u6bd4\u4e3b\u5143\u5927/\u5c0f\u7684\u505c\u4e0b\u7b49\u5f85\u4ea4\u6362\uff1b\n</code></pre> <pre><code>public class QuickSort {\n\n    public static void main(String[] args) {\n        QuickSort sort = new QuickSort();\n        int[] ints = new int[]{1, 3, 2, 5, 8, 6, 7, 4};\n        sort.quickSort(ints);\n        System.out.println(Arrays.toString(ints));\n    }\n\n\n    void quickSort(int[] arr) {\n        quickSort(arr, 0, arr.length - 1);\n    }\n\n    void quickSort(int[] arr, int low, int high) {\n        if (high &lt;= low) return;\n        int index = partition(arr, low, high);\n        quickSort(arr, low, index - 1);\n        quickSort(arr, index + 1, high);\n    }\n\n    int partition(int[] arr, int low, int high) {\n        int i = low;\n        int j = high + 1; // j\u4f1a\u5148\u6267\u884c\u51cf\u51cf\u64cd\u4f5c\uff0c\u9884\u7559\u4e00\u4e2a+1\n        int pivot = arr[low];\n        for (; ; ) {\n            // \u4e0d\u65ad\u5730\u505a\u4ea4\u6362\uff0c\u76f4\u5230\u4e24\u4e2a\u6307\u9488\u78b0\u649e\u4e3a\u6b62; \u76f8\u540c\u4e5f\u505c\u4e0b\u6765\u505a\u4ea4\u6362\n            // \u524d\u9762\u7684\u5224\u65ad\u6761\u4ef6\u4e3b\u8981\u662f\u4e3a\u4e86\u9632\u6b62\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\n            while (i &lt; high &amp;&amp; arr[++i] &lt; pivot) ;\n            while (j &gt; low &amp;&amp; arr[--j] &gt; pivot) ;\n            if (i &gt;= j) break;\n            exchange(arr, i, j);\n        }\n        // \u6b64\u65f6 arr[j] &lt;= pivot\uff0carr[i] &gt;= pivot\uff0c\u5e76\u4e14 j&lt;=i; \u505a\u4ea4\u6362\n        exchange(arr, low, j);\n        return j;\n    }\n\n    void exchange(int[] arr, int i, int j) {\n        int t = arr[i];\n        arr[i] = arr[j];\n        arr[j] = t;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%90%9C%E7%B4%A2/","title":"\u641c\u7d22","text":""},{"location":"leetcode/new/%E6%90%9C%E7%B4%A2/#_2","title":"\u641c\u7d22\u53ef\u8fbe","text":""},{"location":"leetcode/new/%E6%90%9C%E7%B4%A2/#79-mid","title":"79. \u5355\u8bcd\u641c\u7d22 mid","text":"<p>\u5251\u6307 Offer 12. \u77e9\u9635\u4e2d\u7684\u8def\u5f84</p> <p>\u7ed9\u5b9a\u4e00\u4e2a m x n \u4e8c\u7ef4\u5b57\u7b26\u7f51\u683c board \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5355\u8bcd word \u3002\u5982\u679c word \u5b58\u5728\u4e8e\u7f51\u683c\u4e2d\uff0c\u8fd4\u56de true\uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002</p> <p>\u5355\u8bcd\u5fc5\u987b\u6309\u7167\u5b57\u6bcd\u987a\u5e8f\uff0c\u901a\u8fc7\u76f8\u90bb\u7684\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u6784\u6210\uff0c\u5176\u4e2d\u201c\u76f8\u90bb\u201d\u5355\u5143\u683c\u662f\u90a3\u4e9b\u6c34\u5e73\u76f8\u90bb\u6216\u5782\u76f4\u76f8\u90bb\u7684\u5355\u5143\u683c\u3002\u540c\u4e00\u4e2a\u5355\u5143\u683c\u5185\u7684\u5b57\u6bcd\u4e0d\u5141\u8bb8\u88ab\u91cd\u590d\u4f7f\u7528\u3002</p> <p>\u89e3\u6cd5 DFS</p> <p>\u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u4f5c\u4e3a start \u641c\u7d22, \u56db\u4e2a\u65b9\u5411\u904d\u5386 \u9012\u5f52</p> <pre><code>class Solution {\n    private final int[][] direction = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n    private int rc;\n    private int cc;\n    boolean[][] visit;\n    char[][] board;\n    String word;\n\n    public boolean exist(char[][] board, String word) {\n        this.board = board;\n        this.word = word;\n        rc = board.length;\n        cc = board[0].length;\n        visit = new boolean[rc][cc];\n\n        for (int r = 0; r &lt; rc; r++) {\n            for (int c = 0; c &lt; cc; c++) {\n                if (backtracking(0, r, c)) return true;\n            }\n        }\n        return false;\n    }\n\n    private boolean backtracking(int idx, int r, int c) {\n        if (idx == word.length()) return true;\n\n        if (r &lt; 0 || r &gt;= rc || c &lt; 0 || c &gt;= cc\n                || board[r][c] != word.charAt(idx)\n                || visit[r][c]) {\n            return false;\n        }\n\n        visit[r][c] = true;\n\n        for (int[] d : direction) {\n            if (backtracking(idx + 1, r + d[0], c + d[1])) return true;\n        }\n        visit[r][c] = false;\n\n        return false;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%90%9C%E7%B4%A2/#130-mid","title":"130. \u88ab\u56f4\u7ed5\u7684\u533a\u57df mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a m x n \u7684\u77e9\u9635 board \uff0c\u7531\u82e5\u5e72\u5b57\u7b26 'X' \u548c 'O' \uff0c\u627e\u5230\u6240\u6709\u88ab 'X' \u56f4\u7ed5\u7684\u533a\u57df\uff0c\u5e76\u5c06\u8fd9\u4e9b\u533a\u57df\u91cc\u6240\u6709\u7684 'O' \u7528 'X' \u586b\u5145\u3002</p> <p>\u53ea\u4ece\u6700\u5916\u5c42\u8fdb\u884c DFS, \u6807\u8bb0\u54ea\u4e9b\u4e0d\u80fd\u66f4\u6539, \u5269\u4e0b\u7684\u904d\u5386\u5168\u6539\u6389</p> <pre><code>class Solution {\n    private int[][] dir = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n    private int rc, cc;\n\n    public void solve(char[][] board) {\n        if (board == null || board.length == 0) return;\n        rc = board.length;\n        cc = board[0].length;\n\n        // \u7ad6\u8fb9\n        for (int r = 0; r &lt; rc; r++) {\n            dfs(board, r, 0);\n            dfs(board, r, cc - 1);\n        }\n        // \u6a2a\u8fb9\n        for (int c = 0; c &lt; cc; c++) {\n            dfs(board, 0, c);\n            dfs(board, rc - 1, c);\n        }\n\n        for (int i = 0; i &lt; rc; i++) {\n            for (int j = 0; j &lt; cc; j++) {\n                if (board[i][j] == 'T') board[i][j] = 'O';\n                else if (board[i][j] == 'O') board[i][j] = 'X';\n            }\n        }\n    }\n\n    private void dfs(char[][] board, int r, int c) {\n        if (r &lt; 0 || r &gt;= rc || c &lt; 0 || c &gt;= cc\n                || board[r][c] != 'O') return;\n        // all O==&gt;T\n        board[r][c] = 'T';\n        for (int[] d : dir) {\n            dfs(board, r + d[0], c + d[1]);\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%90%9C%E7%B4%A2/#200-mid","title":"200. \u5c9b\u5c7f\u6570\u91cf mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u7531 '1'\uff08\u9646\u5730\uff09\u548c '0'\uff08\u6c34\uff09\u7ec4\u6210\u7684\u7684\u4e8c\u7ef4\u7f51\u683c\uff0c\u8bf7\u4f60\u8ba1\u7b97\u7f51\u683c\u4e2d\u5c9b\u5c7f\u7684\u6570\u91cf\u3002</p> <p>\u5c9b\u5c7f\u603b\u662f\u88ab\u6c34\u5305\u56f4\uff0c\u5e76\u4e14\u6bcf\u5ea7\u5c9b\u5c7f\u53ea\u80fd\u7531\u6c34\u5e73\u65b9\u5411\u548c/\u6216\u7ad6\u76f4\u65b9\u5411\u4e0a\u76f8\u90bb\u7684\u9646\u5730\u8fde\u63a5\u5f62\u6210\u3002</p> <p>\u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u5047\u8bbe\u8be5\u7f51\u683c\u7684\u56db\u6761\u8fb9\u5747\u88ab\u6c34\u5305\u56f4\u3002</p> <pre><code>class Solution {\n    private int rc, cc;\n    private int[][] direction = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n\n    public int numIslands(char[][] grid) {\n        rc = grid.length;\n        cc = grid[0].length;\n\n        int cnt = 0;\n        for (int i = 0; i &lt; rc; i++) {\n            for (int j = 0; j &lt; cc; j++) {\n                if (grid[i][j] == '1') {\n                    cnt++;\n                    dfs(grid, i, j);\n                }\n            }\n        }\n        return cnt;\n\n    }\n\n    private void dfs(char[][] grid, int r, int c) {\n        if (r &lt; 0 || r &gt;= rc || c &lt; 0 || c &gt;= cc\n                || grid[r][c] == '0') return;\n\n        grid[r][c] = '0';\n\n        for (int[] d : direction) {\n            dfs(grid, r + d[0], c + d[1]);\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%90%9C%E7%B4%A2/#_3","title":"\u6700\u77ed\u8def","text":""},{"location":"leetcode/new/%E6%90%9C%E7%B4%A2/#127-hard","title":"127. \u5355\u8bcd\u63a5\u9f99 hard","text":"<p>\u5b57\u5178 wordList \u4e2d\u4ece\u5355\u8bcd beginWord \u548c endWord \u7684 \u8f6c\u6362\u5e8f\u5217 \u662f\u4e00\u4e2a\u6309\u4e0b\u8ff0\u89c4\u683c\u5f62\u6210\u7684\u5e8f\u5217 beginWord -&gt; s1 -&gt; s2 -&gt; ... -&gt; sk\uff1a</p> <ul> <li>\u6bcf\u4e00\u5bf9\u76f8\u90bb\u7684\u5355\u8bcd\u53ea\u5dee\u4e00\u4e2a\u5b57\u6bcd\u3002</li> <li>\u5bf9\u4e8e 1 &lt;= i &lt;= k \u65f6\uff0c\u6bcf\u4e2a si \u90fd\u5728 wordList \u4e2d\u3002\u6ce8\u610f\uff0c beginWord \u4e0d\u9700\u8981\u5728 wordList \u4e2d\u3002</li> <li>sk == endWord</li> </ul> <p>\u7ed9\u4f60\u4e24\u4e2a\u5355\u8bcd beginWord \u548c endWord \u548c\u4e00\u4e2a\u5b57\u5178 wordList \uff0c\u8fd4\u56de \u4ece beginWord \u5230 endWord \u7684 \u6700\u77ed\u8f6c\u6362\u5e8f\u5217 \u4e2d\u7684 \u5355\u8bcd\u6570\u76ee \u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8f6c\u6362\u5e8f\u5217\uff0c\u8fd4\u56de 0</p> <p>\u89e3\u6cd5 BFS</p> <p>\u8fd4\u56de\u662f \u6574\u4e2a\u9f99\u4e2d\u5b57\u7b26\u4e32\u7684\u4e2a\u6570 \u6839\u636e\u9898\u76ee\u6570\u636e\u8303\u56f4, \u4fee\u6539\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u6bcf\u4e2a\u5b57\u7b26\u6bd4\u904d\u5386 wordlist \u5224\u65ad\u8981\u5feb \u53ef\u4ee5\u53cc\u5411 BFS \u8fdb\u4e00\u6b65\u52a0\u901f</p> <pre><code>class Solution {\n    public int ladderLength(String beginWord, String endWord, List&lt;String&gt; wordList) {\n        Set&lt;String&gt; wordSet = new HashSet&lt;&gt;(wordList);\n        if (!wordSet.contains(endWord)) return 0;\n        Set&lt;String&gt; visited = new HashSet&lt;&gt;();\n        Queue&lt;String&gt; que = new LinkedList&lt;&gt;();\n        que.add(beginWord);\n        visited.add(beginWord);\n        int cnt = 1;\n        while (!que.isEmpty()) {\n            int size = que.size();\n            ++cnt;\n            while (size-- &gt; 0) {\n                String start = que.remove();\n                char[] startArr = start.toCharArray();\n                for (int i = 0; i &lt; startArr.length; i++) {\n                    char c = startArr[i];\n                    for (char j = 'a'; j &lt;= 'z'; j++) {\n                        if (c == j) continue;\n                        startArr[i] = j;\n                        String s = String.valueOf(startArr);\n                        if (wordSet.contains(s) &amp;&amp; !visited.contains(s)) {\n                            if (s.equals(endWord)) return cnt;\n                            visited.add(s);\n                            que.add(s);\n                        }\n                    }\n                    startArr[i] = c;\n                }\n            }\n        }\n        return 0;\n    }\n}\n</code></pre> <p>\u53cc\u5411 BFS</p> <pre><code>class Solution {\n    public int ladderLength(String beginWord, String endWord, List&lt;String&gt; wordList) {\n        Set&lt;String&gt; wordSet = new HashSet&lt;&gt;(wordList);\n        if (!wordSet.contains(endWord)) return 0;\n\n        Set&lt;String&gt; visit1 = new HashSet&lt;&gt;();\n        Queue&lt;String&gt; que1 = new LinkedList&lt;&gt;();\n        que1.add(beginWord);\n        visit1.add(beginWord);\n\n        Queue&lt;String&gt; que2 = new LinkedList&lt;&gt;();\n        Set&lt;String&gt; visit2 = new HashSet&lt;&gt;();\n        que2.add(endWord);\n        visit2.add(endWord);\n\n        int cnt = 2;\n        while (!que1.isEmpty() &amp;&amp; !que2.isEmpty()) {\n            int size1 = que1.size();\n            while (size1-- &gt; 0) {\n                String start = que1.remove();\n                char[] startArr = start.toCharArray();\n                for (int i = 0; i &lt; startArr.length; i++) {\n                    char c = startArr[i];\n                    for (char j = 'a'; j &lt;= 'z'; j++) {\n                        if (c == j) continue;\n                        startArr[i] = j;\n                        String s = String.valueOf(startArr);\n                        if (wordSet.contains(s) &amp;&amp; !visit1.contains(s)) {\n                            if (visit2.contains(s)) return cnt;\n                            visit1.add(s);\n                            que1.add(s);\n                        }\n                    }\n                    startArr[i] = c;\n                }\n            }\n            cnt++;// que \u91cc\u9762\u591a\u4e86\u4e00\u5c42\n\n            int size2 = que2.size();\n            while (size2-- &gt; 0) {\n                String start = que2.remove();\n                char[] startArr = start.toCharArray();\n                for (int i = 0; i &lt; startArr.length; i++) {\n                    char c = startArr[i];\n                    for (char j = 'a'; j &lt;= 'z'; j++) {\n                        if (c == j) continue;\n                        startArr[i] = j;\n                        String s = String.valueOf(startArr);\n                        if (wordSet.contains(s) &amp;&amp; !visit2.contains(s)) {\n                            if (visit1.contains(s)) return cnt;\n                            visit2.add(s);\n                            que2.add(s);\n                        }\n                    }\n                    startArr[i] = c;\n                }\n            }\n            cnt++;// que \u91cc\u9762\u591a\u4e86\u4e00\u5c42\n        }\n        return 0;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%90%9C%E7%B4%A2/#_4","title":"\u6700\u957f\u8def","text":""},{"location":"leetcode/new/%E6%90%9C%E7%B4%A2/#329-hard","title":"329. \u77e9\u9635\u4e2d\u7684\u6700\u957f\u9012\u589e\u8def\u5f84 hard","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a m x n \u6574\u6570\u77e9\u9635 matrix \uff0c\u627e\u51fa\u5176\u4e2d \u6700\u957f\u9012\u589e\u8def\u5f84 \u7684\u957f\u5ea6\u3002</p> <p>\u5bf9\u4e8e\u6bcf\u4e2a\u5355\u5143\u683c\uff0c\u4f60\u53ef\u4ee5\u5f80\u4e0a\uff0c\u4e0b\uff0c\u5de6\uff0c\u53f3\u56db\u4e2a\u65b9\u5411\u79fb\u52a8\u3002 \u4f60 \u4e0d\u80fd \u5728 \u5bf9\u89d2\u7ebf \u65b9\u5411\u4e0a\u79fb\u52a8\u6216\u79fb\u52a8\u5230 \u8fb9\u754c\u5916\uff08\u5373\u4e0d\u5141\u8bb8\u73af\u7ed5\uff09\u3002</p> <p>\u5e26\u6709\u8bb0\u5fc6\u5316\u7684 DFS; \u4ece\u6240\u6709\u4f4d\u7f6e\u5f00\u59cb DFS, \u7136\u540e 4 \u5411\u9012\u5f52 DFS, \u81ea\u5e95\u5411\u4e0a\u8ba1\u7b97\u51fa\u5f53\u524d\u8282\u70b9\u7684\u9ad8\u5ea6</p> <pre><code>class Solution {\n    int[][] dic = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};\n\n    public int longestIncreasingPath(int[][] matrix) {\n        int res = 0;\n        int r = matrix.length;\n        int c = matrix[0].length;\n        int[][] mem = new int[r][c];\n        for (int i = 0; i &lt; r; i++) {\n            for (int j = 0; j &lt; c; j++) {\n                res = Math.max(res, dfs(mem, matrix, i, j));\n            }\n        }\n        return res;\n    }\n\n    private int dfs(int[][] mem, int[][] m, int i, int j) {\n        if (mem[i][j] != 0) return mem[i][j];\n        int res = 1;\n        for (int[] d : dic) {\n            int x = d[0] + i;\n            int y = d[1] + j;\n            if (x &gt;= 0 &amp;&amp; y &gt;= 0 &amp;&amp; x &lt; m.length &amp;&amp; y &lt; m[0].length &amp;&amp; m[i][j] &gt; m[x][y]) {\n                res = Math.max(dfs(mem, m, x, y) + 1, res);\n            }\n        }\n        mem[i][j] = res;\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%95%B0%E7%BB%84/","title":"\u6570\u7ec4","text":""},{"location":"leetcode/new/%E6%95%B0%E7%BB%84/#tips","title":"Tips","text":"<p>\u8fd9\u573a\u666f\u4e0b\u901a\u5e38\u662f\u8981\u6c42\u5fc5\u987b\u5728\u6570\u7ec4\u4e2d\u539f\u4f4d\u64cd\u4f5c</p>"},{"location":"leetcode/new/%E6%95%B0%E7%BB%84/#_1","title":"\u6570\u7ec4\u53bb\u91cd","text":""},{"location":"leetcode/new/%E6%95%B0%E7%BB%84/#26-easy","title":"26. \u5220\u9664\u6709\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a \u5347\u5e8f\u6392\u5217 \u7684\u6570\u7ec4 nums \uff0c\u8bf7\u4f60 \u539f\u5730 \u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u6bcf\u4e2a\u5143\u7d20 \u53ea\u51fa\u73b0\u4e00\u6b21 \uff0c\u8fd4\u56de\u5220\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002\u5143\u7d20\u7684 \u76f8\u5bf9\u987a\u5e8f \u5e94\u8be5\u4fdd\u6301 \u4e00\u81f4 \u3002\u7136\u540e\u8fd4\u56de nums \u4e2d\u552f\u4e00\u5143\u7d20\u7684\u4e2a\u6570\u3002 Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.</p> <p>\u8003\u8651 nums \u7684\u552f\u4e00\u5143\u7d20\u7684\u6570\u91cf\u4e3a k \uff0c\u4f60\u9700\u8981\u505a\u4ee5\u4e0b\u4e8b\u60c5\u786e\u4fdd\u4f60\u7684\u9898\u89e3\u53ef\u4ee5\u88ab\u901a\u8fc7\uff1a Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:</p> <ul> <li> <p>\u66f4\u6539\u6570\u7ec4 nums \uff0c\u4f7f nums \u7684\u524d k \u4e2a\u5143\u7d20\u5305\u542b\u552f\u4e00\u5143\u7d20\uff0c\u5e76\u6309\u7167\u5b83\u4eec\u6700\u521d\u5728 nums \u4e2d\u51fa\u73b0\u7684\u987a\u5e8f\u6392\u5217\u3002nums \u7684\u5176\u4f59\u5143\u7d20\u4e0e nums \u7684\u5927\u5c0f\u4e0d\u91cd\u8981\u3002     Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.</p> </li> <li> <p>\u8fd4\u56de k \u3002     Return k.</p> </li> </ul> <p>\u8ddf\u79fb\u52a8\u96f6\u6709\u70b9\u7c7b\u4f3c, \u5feb\u6162\u6307\u9488, \u6162\u6307\u9488\u8ddf\u5feb\u6307\u9488\u6bd4\u8f83, \u5982\u679c\u4e0d\u540c, \u5728\u6162\u6307\u9488\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u586b\u5165</p> <pre><code>class Solution {\n    public int removeDuplicates(int[] nums) {\n        int idx = 0;\n        for (int i = 0; i &lt; nums.length; i++) {\n            if (nums[i] == nums[idx]) continue;\n            nums[++idx] = nums[i];\n        }\n        return idx + 1;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%95%B0%E7%BB%84/#_2","title":"\u5faa\u73af\u6570\u7ec4","text":""},{"location":"leetcode/new/%E6%95%B0%E7%BB%84/#189-mid","title":"189. \u8f6e\u8f6c\u6570\u7ec4 mid","text":"<p>\u5251\u6307 Offer 58 - II. \u5de6\u65cb\u8f6c\u5b57\u7b26\u4e32</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4\uff0c\u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5411\u53f3\u8f6e\u8f6c k \u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d k \u662f\u975e\u8d1f\u6570\u3002</p> <p>\u53ef\u4ee5\u7528\u989d\u5916\u7a7a\u95f4\u6620\u5c04\u5b58\u50a8, \u4f46\u6709\u66f4\u7cbe\u5999\u7684\u65b9\u5f0f \u6574\u4f53\u53cd\u8f6c, \u5de6\u4fa7\u53cd\u8f6c, \u53f3\u4fa7\u53cd\u8f6c</p> <pre><code>class Solution {\n    public void rotate(int[] nums, int k) {\n        k %= nums.length;\n        reverse(nums, 0, nums.length - 1);\n        reverse(nums, 0, k - 1);\n        reverse(nums, k, nums.length - 1);\n    }\n\n    public void reverse(int[] nums, int i, int j) {\n        while (i &lt; j) {\n            int temp = nums[i];\n            nums[i] = nums[j];\n            nums[j] = temp;\n            i++;\n            j--;\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%95%B0%E7%BB%84/#_3","title":"\u6c42\u533a\u95f4\u5185\u7684\u5143\u7d20\u548c","text":""},{"location":"leetcode/new/%E6%95%B0%E7%BB%84/#238-mid","title":"238. \u9664\u81ea\u8eab\u4ee5\u5916\u6570\u7ec4\u7684\u4e58\u79ef mid","text":"<p>\u5251\u6307 Offer 66. \u6784\u5efa\u4e58\u79ef\u6570\u7ec4</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u8fd4\u56de \u6570\u7ec4 answer\uff0c\u5176\u4e2d answer[i] \u7b49\u4e8e nums \u4e2d\u9664 nums[i] \u4e4b\u5916\u5176\u4f59\u5404\u5143\u7d20\u7684\u4e58\u79ef\u3002</p> <p>\u9898\u76ee\u6570\u636e \u4fdd\u8bc1 \u6570\u7ec4 nums \u4e4b\u4e2d\u4efb\u610f\u5143\u7d20\u7684\u5168\u90e8\u524d\u7f00\u5143\u7d20\u548c\u540e\u7f00\u7684\u4e58\u79ef\u90fd\u5728 32 \u4f4d \u6574\u6570\u8303\u56f4\u5185\u3002</p> <p>\u8bf7\u4e0d\u8981\u4f7f\u7528\u9664\u6cd5\uff0c\u4e14\u5728 O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u6b64\u9898\u3002</p> <p>\u89e3\u6cd5\u4e00: O(1)\u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u6cd5</p> <p>\u6b63\u5e8f\u5728[i]\u4f4d\u4fdd\u5b58\u524d[i-1]\u4f4d\u7684\u79ef; \u7136\u540e\u5012\u5e8f, \u7528\u4e00\u4e2a\u53d8\u91cf\u4fdd\u5b58\u540e\u7f00\u79ef, \u76f8\u4e58</p> <pre><code>class Solution {\n    public int[] productExceptSelf(int[] nums) {\n        int n = nums.length;\n        int[] res = new int[n];\n        int preProduct = 1;\n        for (int i = 0; i &lt; n; i++) {\n            res[i] = preProduct;\n            preProduct *= nums[i];\n        }\n        // \u6b64\u65f6res[i]\u662f\u524d\u7f00\u79ef\n        int sufProduct = 1;\n\n        for (int i = n - 1; i &gt;= 0; i--) {\n            res[i] *= sufProduct;\n            sufProduct *= nums[i];\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%95%B0%E7%BB%84/#303-easy","title":"303. \u533a\u57df\u548c\u68c0\u7d22 - \u6570\u7ec4\u4e0d\u53ef\u53d8 easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u5904\u7406\u4ee5\u4e0b\u7c7b\u578b\u7684\u591a\u4e2a\u67e5\u8be2:</p> <ul> <li>\u8ba1\u7b97\u7d22\u5f15 left \u548c right \uff08\u5305\u542b left \u548c right\uff09\u4e4b\u95f4\u7684 nums \u5143\u7d20\u7684 \u548c \uff0c\u5176\u4e2d left &lt;= right</li> <li>\u5b9e\u73b0 NumArray \u7c7b\uff1a     NumArray(int[] nums) \u4f7f\u7528\u6570\u7ec4 nums \u521d\u59cb\u5316\u5bf9\u8c61     int sumRange(int i, int j) \u8fd4\u56de\u6570\u7ec4 nums \u4e2d\u7d22\u5f15 left \u548c right \u4e4b\u95f4\u7684\u5143\u7d20\u7684 \u603b\u548c\uff0c\u5305\u542b left \u548c right \u4e24\u70b9\uff08\u4e5f\u5c31\u662f nums[left] + nums[left + 1] + ... + nums[right] )</li> </ul> <p>\u524d\u7f00\u548c</p> <pre><code>class NumArray {\n\n    private int[] nums;\n    private int[] sum;\n\n    public NumArray(int[] nums) {\n        this.nums = nums;\n        this.sum = new int[nums.length];\n        sum[0] = nums[0];\n        for (int i = 1; i &lt; nums.length; i++) {\n            sum[i] = sum[i - 1] + nums[i];\n        }\n    }\n\n    public int sumRange(int left, int right) {\n        if (left == 0) return sum[right];\n        return sum[right] - sum[left - 1];\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/","title":"\u6570\u8bba","text":""},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/#tips","title":"Tips","text":"<p>\u6570\u8bba\u7684\u9898\u76ee\u4e00\u822c\u90fd\u6bd4\u8f83\u6076\u5fc3</p> <ul> <li>\u52a0\u51cf\u4e58\u90fd\u53ef\u4ee5\u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u53d6\u6a21, \u9664\u6cd5\u8981\u7528\u9006\u5143</li> </ul>"},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/#_2","title":"\u8fdb\u5236","text":""},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/#66-easy","title":"66. \u52a0\u4e00 easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6574\u6570\u7ec4\u6210\u7684\u975e\u7a7a\u6570\u7ec4\u6240\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570\uff0c\u5728\u8be5\u6570\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\u3002</p> <p>\u6700\u9ad8\u4f4d\u6570\u5b57\u5b58\u653e\u5728\u6570\u7ec4\u7684\u9996\u4f4d\uff0c \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6574\u6570 0 \u4e4b\u5916\uff0c\u8fd9\u4e2a\u6574\u6570\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002</p> <pre><code>class Solution {\n    public int[] plusOne(int[] digits) {\n        int n = digits.length;\n        int rem = 1;\n        for (int i = n - 1; i &gt;= 0; i--) {\n            if (rem + digits[i] &gt; 9) {\n                digits[i] = (rem + digits[i]) % 10;\n            } else {\n                digits[i] += rem;\n                return digits;\n            }\n        }\n\n        int[] arr = new int[n + 1];\n        arr[0] = rem;\n        System.arraycopy(digits, 0, arr, 1, n);\n        return arr;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/#67-easy","title":"67. \u4e8c\u8fdb\u5236\u6c42\u548c easy","text":"<p>\u7ed9\u4f60\u4e24\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32 a \u548c b\uff0c\u4ee5\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u8fd4\u56de\u5b83\u4eec\u7684\u548c\u3002</p> <pre><code>class Solution {\n    public String addBinary(String a, String b) {\n        StringBuilder sb = new StringBuilder();\n        int i = a.length() - 1, j = b.length() - 1;\n        int z = 0;\n        while (i &gt;= 0 || j &gt;= 0 || z &gt; 0) {\n            int x = 0, y = 0;\n            if (i &gt;= 0) x = a.charAt(i--) - '0';\n            if (j &gt;= 0) y = b.charAt(j--) - '0';\n            sb.append((x + y + z) % 2);\n            z = (x + y + z) &gt;&gt; 1;\n        }\n        return sb.reverse().toString();\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/#171-excel-easy","title":"171. Excel \u8868\u5217\u5e8f\u53f7 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 columnTitle \uff0c\u8868\u793a Excel \u8868\u683c\u4e2d\u7684\u5217\u540d\u79f0\u3002\u8fd4\u56de \u8be5\u5217\u540d\u79f0\u5bf9\u5e94\u7684\u5217\u5e8f\u53f7\u3002</p> <pre><code>A -&gt; 1\nB -&gt; 2\nC -&gt; 3\n...\nZ -&gt; 26\nAA -&gt; 27\nAB -&gt; 28\n...\n</code></pre> <pre><code>class Solution {\n    public int titleToNumber(String columnTitle) {\n        int res = 0;\n        for (int i = 0; i &lt; columnTitle.length(); i++) {\n            res *= 26;\n            res += columnTitle.charAt(i) - 'A' + 1;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/#_3","title":"\u6570\u5b57\u9006\u5e8f","text":""},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/#7-mid","title":"7. \u6574\u6570\u53cd\u8f6c mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570 x\uff0c\u8fd4\u56de\u5c06 x \u4e2d\u7684\u6570\u5b57\u90e8\u5206\u53cd\u8f6c\u540e\u7684\u7ed3\u679c\u3002 Given a signed 32-bit integer x, return x with its digits reversed.</p> <p>\u5982\u679c\u53cd\u8f6c\u540e\u6574\u6570\u8d85\u8fc7 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4 $ [\u22122^{31}, 2^{31}\u2212 1] $\uff0c\u5c31\u8fd4\u56de 0\u3002  If reversing x causes the value to go outside the signed 32-bit integer range $ [\u22122^{31}, 2^{31}\u2212 1] $, then return 0.</p> <p>\u5047\u8bbe\u73af\u5883\u4e0d\u5141\u8bb8\u5b58\u50a8 64 \u4f4d\u6574\u6570\uff08\u6709\u7b26\u53f7\u6216\u65e0\u7b26\u53f7\uff09\u3002 Assume the environment does not allow you to store 64-bit integers (signed or unsigned).</p> <p>\u8d85\u51fa\u8303\u56f4\u7684\u5224\u5b9a, \u53ea\u8981\u5012\u6570\u7b2c 2 \u6b21\u4e0d\u6ea2\u51fa, \u6700\u540e 1 \u6b21\u4e0d\u4f1a\u6ea2\u51fa</p> JavaGo <pre><code>class Solution {\n    public int reverse(int x) {\n        int res = 0;\n\n        while (x != 0) {\n            // -2147483648 +2147483647\n            // \u8d1f\u6570:\u6700\u540e\u7684\u4f59\u6570(\u539f\u6700\u9ad8\u4f4d)\u8303\u56f4\u662f[-2,-1], \u663e\u7136\u5927\u4e8e-8, \u4e0d\u4f1a\u6ea2\u51fa; \u6b63\u6570:\u6700\u540e\u7684\u4f59\u6570(\u539f\u6700\u9ad8\u4f4d)\u8303\u56f4\u662f[1,2], \u663e\u7136\u5c0f\u4e8e7, \u4e0d\u4f1a\u6ea2\u51fa;\n            // \u6240\u4ee5\u53ea\u8981\u5012\u6570\u7b2c2\u6b21\u4e0d\u6ea2\u51fa, \u6700\u540e1\u6b21\u4e0d\u4f1a\u6ea2\u51fa\n            if (res &lt; Integer.MIN_VALUE / 10 || res &gt; Integer.MAX_VALUE / 10)\n                return 0;\n\n            res = res * 10 + x % 10;\n            x /= 10;\n        }\n        return res;\n    }\n}\n</code></pre> <pre><code>func reverse(x int) int {\n    // -2147483648\uff5e2147483647\n    var res int = 0\n    for ; x != 0; x /= 10 {\n        if res &lt; -214748364 || res &gt; 214748364 {\n            return 0\n        }\n        res = res * 10 + x % 10\n    }\n    return res\n}\n</code></pre>"},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/#9-easy","title":"9. \u56de\u6587\u6570 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 x\uff0c\u5982\u679c x \u662f\u4e00\u4e2a\u56de\u6587\u6574\u6570\uff0c\u8fd4\u56de true\uff1b\u5426\u5219\uff0c\u8fd4\u56de false\u3002 Given an integer x, return true if x is a palindrome, and false otherwise.</p> <p>\u89e3\u6cd5 1 \u4f7f\u7528\u5b57\u7b26\u4e32\u786c\u89e3</p> <pre><code>class Solution {\n    public boolean isPalindrome(int x) {\n        String s = String.valueOf(x);\n        int p1 = 0, p2 = s.length() - 1;\n        while (p1 &lt; p2) {\n            if (s.charAt(p1) != s.charAt(p2)) return false;\n            p1++;\n            p2--;\n        }\n        return true;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2 \u4e0d\u4f7f\u7528\u5b57\u7b26\u4e32</p> <p>\u53ef\u4ee5\u5c06\u6570\u5b57\u5206\u6210\u4e24\u534a, \u540e\u534a\u6bb5\u9006\u7f6e, \u7136\u540e\u5bf9\u6bd4\u5206\u6210\u4e24\u534a\u7684\u6570\u5b57\u662f\u5426\u76f8\u7b49 \u5f53\u6570\u5b57\u7684\u4f4d\u6570\u4e3a\u5947\u6570, \u6211\u4eec\u53ef\u4ee5\u5c06\u957f\u7684\u524d\u534a\u6bb5\u7684\u672b\u4f4d\u622a\u6389\u540e, \u518d\u5bf9\u6bd4</p> JavaGo <pre><code>class Solution {\n    public boolean isPalindrome(int x) {\n        // \u5982\u679c\u6570\u5b57\u7684\u6700\u540e\u4e00\u4f4d\u662f 0\uff0c\u5219\u5176\u7b2c\u4e00\u4f4d\u6570\u5b57\u4e5f\u5e94\u8be5\u662f 0; \u53ea\u6709 0 \u6ee1\u8db3\u8fd9\u4e00\u5c5e\u6027\n        if (x &lt; 0 || (x % 10 == 0 &amp;&amp; x != 0)) return false;\n\n        int number = 0;\n        // \u540e\u534a\u622a\u9006\u7f6e\n        while (x &gt; number) {\n            number = number * 10 + x % 10;\n            x /= 10;\n        }\n\n        // \u5f53\u6570\u5b57\u957f\u5ea6\u4e3a\u5947\u6570\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 number/10 \u53bb\u9664\u5904\u4e8e\u4e2d\u4f4d\u7684\u6570\u5b57\u3002\n        return x == number || x == number / 10;\n    }\n}\n</code></pre> <pre><code>func isPalindrome(x int) bool {\n    if x &lt; 0 || x%10 == 0 &amp;&amp; x != 0 {\n        return false\n    }\n    num := 0\n    for x &gt; num {\n        num = num*10 + x%10\n        x /= 10\n    }\n    return x == num || x == num/10\n}\n</code></pre>"},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/#_4","title":"\u7f57\u9a6c\u6570\u5b57","text":""},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/#13-easy","title":"13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570 easy","text":"<p>\u6bd4\u8f83\u70c2\u7684\u4e00\u9053\u9898, \u7f57\u9a6c\u6570\u5b57\u524d\u4e00\u4e2a\u6bd4\u540e\u4e00\u4e2a\u5c0f\u7684\u8bdd, \u8868\u793a\u8981\u51cf\u6389\u524d\u9762\u7684</p> <pre><code>class Solution {\n    public int romanToInt(String s) {\n        int i = 0;\n        int res = 0;\n        char[] arr = s.toCharArray();\n        int n = arr.length;\n        while (i &lt; n) {\n            int v = map(arr[i]);\n            if (i &lt; n - 1 &amp;&amp; v &lt; map(arr[i + 1]))\n                res -= v;\n            else\n                res += v;\n            i++;\n        }\n        return res;\n    }\n\n    private int map(char c) {\n        return switch (c) {\n            case 'I' -&gt; 1;\n            case 'V' -&gt; 5;\n            case 'X' -&gt; 10;\n            case 'L' -&gt; 50;\n            case 'C' -&gt; 100;\n            case 'D' -&gt; 500;\n            case 'M' -&gt; 1000;\n            default -&gt; 0;\n        };\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/#_5","title":"\u5feb\u901f\u5e42","text":""},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/#50-powx-n-mid","title":"50. Pow(x, n) mid","text":"<p>\u5251\u6307 Offer 16. \u6570\u503c\u7684\u6574\u6570\u6b21\u65b9</p> <p>\u5b9e\u73b0 pow(x, n) \uff0c\u5373\u8ba1\u7b97 x \u7684\u6574\u6570 n \u6b21\u5e42\u51fd\u6570\uff08\u5373\uff0c$x^n$)\u3002</p> <p>\u6307\u6570\u53ef\u4ee5\u7528 2 \u8fdb\u5236\u8868\u793a $x^n = x^{2^k+2^{k-1}+...+2^0} = x^{2^k}*x^{2^{k-1}}*...*x^{1}$ \u6709 $x^n = x^{\\frac{n}{2}} * x^{\\frac{n}{2}}$, \u6bcf\u6b21 <code>n&gt;&gt;1</code> \u90fd\u4f1a\u8ba9\u5e42\u7684 2 \u8fdb\u5236\u8868\u793a\u53d8\u77ed</p> <p>\u89e3\u6cd5 1 \u9012\u5f52</p> <pre><code>class Solution {\n    public double myPow(double x, int n) {\n        return n &gt;= 0 ? pow(x, n) : 1 / pow(x, -(long) n);\n    }\n\n    private double pow(double x, long n) {\n        if (n == 0) return 1;\n        double y = pow(x, n &gt;&gt; 1);\n        return n % 2 == 0 ? y * y : y * y * x;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2 \u8fed\u4ee3</p> <pre><code>class Solution {\n    public double myPow(double x, int n) {\n        return n &gt;= 0 ? quickMul(x, n) : 1.0 / quickMul(x, -(long) n);\n    }\n\n    public double quickMul(double x, long n) {\n        double res = 1.0;\n        while (n &gt; 0) {\n            if (n % 2 == 1) res *= x;\n            x *= x;\n            n &gt;&gt;= 1;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/#_6","title":"\u56e0\u5b50\u5206\u89e3","text":""},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/#172-mid","title":"172. \u9636\u4e58\u540e\u7684\u96f6 mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 n\uff0c\u8fd4\u56de n! \u7ed3\u679c\u4e2d\u5c3e\u968f\u96f6\u7684\u6570\u91cf\u3002</p> <p>\u5c31\u662f\u6c42\u56e0\u5b50 5 \u7684\u4e2a\u6570 \u9006\u5411\u601d\u7ef4, \u4ece 5 \u5f00\u59cb\u8ba1\u6570, count 5 \u7684\u500d\u6570\u4e2d\u56e0\u5b50 5 \u7684\u4e2a\u6570</p> <pre><code>class Solution {\n    public int trailingZeroes(int n) {\n        int res = 0;\n        int mut = 5;\n        while (mut &lt;= n) {\n            res++;\n            int t = mut / 5;\n            while (t % 5 == 0) {\n                t /= 5;\n                res++;\n            }\n            mut += 5;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/#233-1-hard","title":"233. \u6570\u5b57 1 \u7684\u4e2a\u6570 hard","text":"<p>\u5251\u6307 Offer 43. 1 \uff5e n \u6574\u6570\u4e2d 1 \u51fa\u73b0\u7684\u6b21\u6570</p> <p>\u4f8b\u5982\uff0c\u8f93\u5165 12\uff0c1 \uff5e 12 \u8fd9\u4e9b\u6574\u6570\u4e2d\u5305\u542b 1 \u7684\u6570\u5b57\u6709 1,10,11,12, 1 \u4e00\u5171\u51fa\u73b0\u4e86 5 \u6b21\u3002</p> <p>\u6309\u5341\u8fdb\u5236\u4f4d\u6279\u5904\u7406 \u8ddf\u4e8c\u8fdb\u5236\u8ba1\u6570\u4e0d\u4e00\u6837\u54e6</p> <p>\u89e3\u6cd5: \u6309\u5341\u8fdb\u5236\u4f4d\u5904\u7406</p> <p>\u77e5\u8bc6\u50a8\u5907: int n = 1234 int m = 10 n / (m _ 10) = 12 n % (m _ 10) = 34</p> <pre><code>class Solution {\n    public int countDigitOne(int n) {\n        int res = 0;\n        for (long mulk = 1; mulk &lt;= n; mulk *= 10) {\n            // (0-&gt;11)_1_(0-&gt;9) : cnt(1, 0-&gt;1200)\n            res += n / (mulk * 10) * mulk;\n\n            long loc = n % (mulk * 10) / mulk;\n            // 12_1_(0-&gt;4)\n            if (loc == 1) {\n                res += n % mulk + 1;\n            }\n            // 12_1_(0-&gt;9)\n            else if (loc &gt; 1) {\n                res += mulk;\n            }\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/#338-easy","title":"338. \u6bd4\u7279\u4f4d\u8ba1\u6570 easy","text":"<p>\u5251\u6307 Offer II 003. \u524d n \u4e2a\u6570\u5b57\u4e8c\u8fdb\u5236\u4e2d 1 \u7684\u4e2a\u6570</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n \uff0c\u5bf9\u4e8e 0 &lt;= i &lt;= n \u4e2d\u7684\u6bcf\u4e2a i \uff0c\u8ba1\u7b97\u5176\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d 1 \u7684\u4e2a\u6570 \uff0c\u8fd4\u56de\u4e00\u4e2a\u957f\u5ea6\u4e3a n + 1 \u7684\u6570\u7ec4 ans \u4f5c\u4e3a\u7b54\u6848\u3002</p> <p>dp</p> <pre><code>class Solution {\n    public int[] countBits(int n) {\n        int[] res = new int[n + 1];\n        for (int i = 1; i &lt;= n; i++) {\n            res[i] = (i &amp; 1) == 0\n                    ? res[i &gt;&gt; 1]\n                    : res[i - 1] + 1;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/#343-mid","title":"343. \u6574\u6570\u62c6\u5206 mid","text":"<p>\u5251\u6307 Offer 14- I. \u526a\u7ef3\u5b50</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n\uff0c\u5c06\u5176\u62c6\u5206\u4e3a k \u4e2a \u6b63\u6574\u6570 \u7684\u548c(k &gt;= 2)\uff0c\u5e76\u4f7f\u8fd9\u4e9b\u6574\u6570\u7684\u4e58\u79ef\u6700\u5927\u5316\u3002</p> <p>\u8fd4\u56de \u4f60\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u4e58\u79ef\u3002</p> <p>\u89e3\u6cd5 1: $O(pow())$</p> <p>\u5206\u4e3a\u5c3d\u53ef\u80fd\u591a\u7684 3 \u5982\u679c\u4f59\u6570\u4e3a 1 \u5219\u62c6\u5206 3+1 \u4e3a 2+2</p> <p>\u8bc1\u660e: \u6700\u4f18\u65b9\u6848\u4e2d</p> <ol> <li>\u4e0d\u4f1a\u51fa\u73b0\u5927\u4e8e 4 \u7684\u6570    $x&gt;2\u65f6, 2(x-2)&gt;x$</li> <li>\u6700\u4f18\u65b9\u6848\u4e2d \u4e0d\u4f1a\u51fa\u73b0 4    $4 = 2*2$</li> <li>n &gt;= 4 \u65f6\uff0c\u4e0d\u4f1a\u51fa\u73b0 1    $(x-1)1 &lt; (x-2)2$</li> <li>\u5f53 n \u2265 5 \u65f6\uff0c2 \u7684\u4e2a\u6570\u4e0d\u4f1a\u8d85\u8fc7 3 \u4e2a    $3\u00d73&gt;2\u00d72\u00d72$</li> </ol> <pre><code>class Solution {\n\n    public int integerBreak(int n) {\n        if (n &lt;= 3) return n - 1;\n        int mod = n % 3;\n        int res = pow(3, n / 3);\n        switch (mod) {\n            case 0:\n                break;\n            case 2:\n                res *= 2;\n                break;\n            case 1:\n                res = res / 3 * 4;\n        }\n        return res;\n    }\n\n    private int pow(int x, int n) {\n        if (n == 0) return 1;\n        if (n == 1) return x;\n        int y = pow(x, n / 2);\n        return n % 2 == 0 ? y * y : y * y * x;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2: $O(n^2)$</p> <p>DP</p> <pre><code>class Solution {\n    public int integerBreak(int n) {\n        // \u5206\u62c6, (1, n-1) -&gt; (n-1, 1)\n        int[] dp = new int[n + 1];\n        for (int i = 2; i &lt;= n; i++) {\n            int curMax = 0;\n            // \u679a\u4e3e 1 =&gt; n-1\n            for (int j = i - 1; j &gt;= 1; j--) {\n                curMax = max(curMax,\n                        j * (i - j),// \u4e0d\u62c6\n                        j * dp[i - j]);// \u62c6\n            }\n            dp[i] = curMax;\n        }\n        return dp[n];\n    }\n\n    private int max(int a, int b, int c) {\n        return Math.max(a, Math.max(b, c));\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/#i","title":"\u7b2c i \u4e2a\u6570","text":""},{"location":"leetcode/new/%E6%95%B0%E8%AE%BA/#264-ii-mid","title":"264. \u4e11\u6570 II mid","text":"<p>\u5251\u6307 Offer 49. \u4e11\u6570</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n\uff0c\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u7b2c n \u4e2a\u4e11\u6570\u3002 \u4e11\u6570 \u5c31\u662f\u53ea\u5305\u542b\u8d28\u56e0\u6570 2\u30013 \u548c/\u6216 5 \u7684\u6b63\u6574\u6570\u3002</p> <p>\u89e3\u6cd5 1: \u4f18\u5148\u961f\u5217</p> <pre><code>class Solution {\n    public int nthUglyNumber(int n) {\n        PriorityQueue&lt;Long&gt; que = new PriorityQueue&lt;&gt;();\n        Set&lt;Long&gt; set = new HashSet&lt;&gt;();\n        que.add(1L);\n        set.add(1L);\n        Long res = null;\n        for (int i = 1; i &lt;= n; i++) {\n            res = que.remove();\n            if (!set.contains(res * 2L)) {\n                set.add(res * 2L);\n                que.add(res * 2L);\n            }\n            if (!set.contains(res * 3L)) {\n                set.add(res * 3L);\n                que.add(res * 3L);\n            }\n            if (!set.contains(res * 5L)) {\n                set.add(res * 5L);\n                que.add(res * 5L);\n            }\n        }\n        return res.intValue();\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2: DP</p> <p>\u4e09\u6839\u6307\u9488, \u5206\u522b\u6307\u5411\u9700\u8981\u4e0e 2,3,5 \u76f8\u4e58\u7684\u4f4d\u7f6e, \u6bcf\u4e00\u6b65\u4ece 3 \u4e2a\u4e58\u79ef\u4e2d\u9009\u6700\u5c0f\u7684, \u4e58\u5b8c\u4e4b\u540e\u54cd\u5e94\u7684\u6307\u9488++</p> <pre><code>public class Solution {\n    public int nthUglyNumber(int n) {\n        int[] dp = new int[n + 1];\n        dp[1] = 1;\n        int p2 = 1, p3 = 1, p5 = 1;\n        for (int i = 2; i &lt;= n; i++) {\n            int num2 = dp[p2] * 2;\n            int num3 = dp[p3] * 3;\n            int num5 = dp[p5] * 5;\n            dp[i] = Math.min(Math.min(num2, num3), num5);\n            if (dp[i] == num2) p2++;\n            if (dp[i] == num3) p3++;\n            if (dp[i] == num5) p5++;\n        }\n        return dp[n];\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%9C%80%E5%A4%A7%E5%BA%8F/","title":"\u6700\u5927\u5e8f","text":""},{"location":"leetcode/new/%E6%9C%80%E5%A4%A7%E5%BA%8F/#_1","title":"\u6570\u7ec4\u6392\u5217","text":""},{"location":"leetcode/new/%E6%9C%80%E5%A4%A7%E5%BA%8F/#179-mid","title":"179. \u6700\u5927\u6570 mid","text":"<p>\u7ed9\u5b9a\u4e00\u7ec4\u975e\u8d1f\u6574\u6570 nums\uff0c\u91cd\u65b0\u6392\u5217\u6bcf\u4e2a\u6570\u7684\u987a\u5e8f\uff08\u6bcf\u4e2a\u6570\u4e0d\u53ef\u62c6\u5206\uff09\u4f7f\u4e4b\u7ec4\u6210\u4e00\u4e2a\u6700\u5927\u7684\u6574\u6570\u3002</p> <p>\u6ce8\u610f\uff1a\u8f93\u51fa\u7ed3\u679c\u53ef\u80fd\u975e\u5e38\u5927\uff0c\u6240\u4ee5\u4f60\u9700\u8981\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\u800c\u4e0d\u662f\u6574\u6570\u3002</p> <p>\u5b9a\u4e49\u4e00\u4e2a\u6bd4\u8f83\u5668, \u6bd4\u8f83\u4e24\u4e2a\u5143\u7d20\u7684\u5927\u5c0f</p> <pre><code>class Solution {\n    public String largestNumber(int[] nums) {\n        Integer[] arr = new Integer[nums.length];\n        for (int i = 0; i &lt; nums.length; i++) {\n            arr[i] = nums[i];\n        }\n        Arrays.sort(arr, (a, b) -&gt; {\n            String s1 = \"\" + a + b;\n            String s2 = \"\" + b + a;\n            return s2.compareTo(s1);\n        });\n        StringBuilder sb = new StringBuilder();\n        for (int e : arr) {\n            sb.append(e);\n        }\n        if (sb.charAt(0) == '0') return \"0\";\n        return sb.toString();\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/","title":"\u6700\u957f\u516c\u5171\u524d\u7f00","text":""},{"location":"leetcode/new/%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/#14-easy","title":"14. \u6700\u957f\u516c\u5171\u524d\u7f00 easy","text":"<p>\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002 Write a function to find the longest common prefix string amongst an array of strings.</p> <p>\u5982\u679c\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\"\u3002 If there is no common prefix, return an empty string \"\".</p> <p>\u8fd9\u73a9\u610f\u4e5f\u6709\u5f88\u591a\u79cd\u89e3\u6cd5 \u7528 $ LCP(S_1,...,S_n) $\u8868\u793a\u6700\u957f\u516c\u5171\u524d\u7f00, \u6709\u7ed3\u5408\u5f8b: $$ LCP(S_1,...,S_n) = LCP(LCP(LCP(S_1,S_2),S_3)...,S_n) $$ \u540c\u6837, \u6839\u636e\u7ed3\u5408\u5f8b\u4e5f\u53ef\u4ee5\u5206\u6cbb, \u964d\u4f4e\u6811\u7684\u9ad8\u5ea6 \u4e0d\u8fc7, \u76f4\u63a5\u7eb5\u5411\u626b\u63cf\u624d\u662f\u6700\u7b80\u5355\u7684</p> <pre><code>class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        if (strs == null || strs.length == 0) return \"\";\n        StringBuilder sb = new StringBuilder();\n        int idx = 0;\n        while (step(strs, idx)) {\n            sb.append(strs[0].charAt(idx));\n            idx++;\n        }\n        return sb.toString();\n    }\n\n    private boolean step(String[] strs, int idx) {\n        if (idx &gt;= strs[0].length()) return false;\n        char c = strs[0].charAt(idx);\n        for (String s : strs) {\n            if (idx &gt;= s.length() || s.charAt(idx) != c) return false;\n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/","title":"\u6700\u957f\u5b50\u4e32","text":"<p>\u5e38\u7528 Map \u8bb0\u5f55\u4e0a\u4e00\u4e2a\u5728\u54ea/\u6709\u6ca1\u6709/\u6709\u591a\u5c11</p> <p>Map \u53ef\u4ee5\u7528 array \u5b9e\u73b0</p>"},{"location":"leetcode/new/%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/#_2","title":"\u6700\u957f\u5b50\u4e32","text":""},{"location":"leetcode/new/%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/#3-mid","title":"3. \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32 mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s, \u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002 Given a string s, find the length of the longest substring without repeating characters.</p> <p>\u8bb0\u4e00\u4e0b char \u4e0a\u6b21\u51fa\u73b0\u7684 idx; \u5982\u679c lastIdx &gt;= start, \u66f4\u65b0 start, \u5426\u5219\u66f4\u65b0 len</p> JavaGo <pre><code>class Solution {\n    public int lengthOfLongestSubstring(String s) {\n        int[] map = new int[128];\n        Arrays.fill(map, -1);\n        char[] arr = s.toCharArray();\n        int res = 0;\n        int start = 0;\n        for (int i = 0; i &lt; arr.length; i++) {\n            char c = arr[i];\n            int lastIdx = map[c];\n            if (lastIdx &gt;= start)\n                start = lastIdx + 1;\n            else\n                res = Math.max(res, i - start + 1);\n            map[c] = i;\n        }\n        return res;\n    }\n}\n</code></pre> <pre><code>func lengthOfLongestSubstring(s string) int {\n    m := map[rune]int{}\n    start := 0\n    res := 0\n    for i, c := range s {\n        lastIdx, has := m[c]\n        if has &amp;&amp; lastIdx &gt;= start {\n            start = lastIdx + 1\n        } else {\n            res = max(res, i-start+1)\n        }\n        m[c] = i\n    }\n    return res\n}\nfunc max(x, y int) int {\n    if x &lt; y {\n        return y\n    }\n    return x\n}\n</code></pre>"},{"location":"leetcode/new/%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/#5-mid","title":"5. \u6700\u957f\u56de\u6587\u5b50\u4e32 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u627e\u5230 s \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002 Given a string s, return the longest palindromic substring in s.</p> <p>\u89e3\u6cd5 1 \u4e2d\u5fc3\u6269\u6563</p> <p>\u4ece\u5934\u5230\u5c3e\u904d\u5386, \u6bcf\u6b21\u8fed\u4ee3\u4e2d\u5411\u4e24\u7aef\u6269\u5c55, \u5e76\u66f4\u65b0\u6700\u957f \u6709\u6307\u9488\u4f1a\u5f88\u65b9\u4fbf</p> JavaGo <pre><code>class Solution {\n    public String longestPalindrome(String s) {\n        if (s.length() &lt; 2)\n            return s;\n\n        char[] chs = s.toCharArray();\n        int[] endPoint = new int[] { 0, 0 };\n        for (int i = 0; i &lt; chs.length - 1; i++) {\n            extendAndJudge(chs, i, 0, endPoint);\n            extendAndJudge(chs, i, 1, endPoint);\n        }\n        return s.substring(endPoint[0], endPoint[1] + 1);\n    }\n\n    private void extendAndJudge(char[] arr, int idx, int offset, int[] endPoint) {\n        int l = idx, r = idx + offset;\n        while (l &gt;= 0 &amp;&amp; r &lt; arr.length) {\n            if (arr[l] != arr[r])\n                break;\n            l--;\n            r++;\n        }\n        l++;\n        r--;\n        if (r - l &gt; endPoint[1] - endPoint[0]) {\n            endPoint[0] = l;\n            endPoint[1] = r;\n        }\n    }\n}\n</code></pre> <pre><code>func longestPalindrome(s string) string {\n    n := len(s)\n    var r1, r2 int = 0, 0\n    for i := 0; i &lt; n-1; i++ {\n        extend(s, i, 0, &amp;r1, &amp;r2)\n        extend(s, i, 1, &amp;r1, &amp;r2)\n    }\n    return s[r1 : r2+1]\n}\n\nfunc extend(s string, idx int, offset int, l *int, r *int) {\n    i, j := idx, idx+offset\n    n := len(s)\n    for i &gt;= 0 &amp;&amp; j &lt; n {\n        if s[i] != s[j] {\n            break\n        }\n        i--\n        j++\n    }\n    // \u56de\u9000\n    i++\n    j--\n    if *r-*l &lt; j-i {\n        *l = i\n        *r = j\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2 manacher</p> <p>manacher \u662f\u4e00\u4e2a\u7cbe\u51c6\u4e14\u6709\u6280\u5de7\u6027\u7684\u7b97\u6cd5, \u6211\u4eec\u7528\u5c3d\u53ef\u80fd\u5c11\u7684\u63cf\u8ff0\u8bb2\u6e05\u695a\u5b83 \u6574\u4f53\u800c\u8a00, manacher \u662f\u6839\u636e\u5bf9\u79f0\u6027\u51cf\u5c11\u8ba1\u7b97\u590d\u6742\u5ea6, \u6709\u70b9\u72b6\u6001\u8f6c\u79fb\u7684\u5473\u9053</p> <p>\u9996\u5148, \u56de\u6587\u4e32\u56e0\u4e2d\u5fc3\u5143\u7d20\u6570\u91cf\u53ef\u80fd\u4e3a 1 \u4e2a\u6216 2 \u4e2a, \u5b58\u5728\u5dee\u5f02; \u90a3\u4e48, \u5411\u5143\u7d20\u4e4b\u95f4\u63d2\u5165\u76f8\u540c\u7684\u5b57\u7b26 char, \u8fd9\u6837\u6784\u9020\u51fa\u6765\u7684\u65b0\u5b57\u7b26\u4e32\u5c31\u907f\u514d\u4e86\u8fd9\u79cd\u5dee\u5f02 \u53e6\u5916, \u4e3a\u65b9\u4fbf, \u5728\u65b0\u6784\u9020\u7684\u5b57\u7b26\u4e32\u5de6\u53f3\u4e24\u4fa7\u5206\u522b\u52a0\u5165 1 \u4e2a\u4e0d\u540c\u7684\u5b57\u7b26 ^, $ \u4f5c\u4e3a\u6805\u680f \u4e0d\u59a8\u8bbe\u6784\u9020\u540e\u7684\u4efb\u610f\u56de\u6587\u4e32 $S_i$ \u7684\u4e2d\u5fc3\u5143\u7d20\u7684\u7d22\u5f15\u4e3a <code>i</code>, \u56de\u6587\u4e32\u7684\u534a\u5f84(\u4e0d\u5305\u542b\u4e2d\u5fc3\u5143\u7d20)\u4e3a\u81c2\u5c55</p> <p>\u7136\u540e, \u8ba1\u7b97\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u81c2\u5c55, \u5e76\u5b58\u5165\u6570\u7ec4 <code>arm[]</code> \u4e2d \u8981\u8ba1\u7b97\u81c2\u5c55, \u6700\u6734\u7d20\u7684\u65b9\u5f0f\u5c31\u662f\u4ece\u4e2d\u5fc3\u5411\u4e24\u4fa7\u6269\u6563, \u4e0d\u8fc7\u6709\u4e00\u4e9b\u6280\u5de7\u6027\u7684\u65b9\u5f0f\u7b80\u5316 \u6211\u4eec\u4ece\u5de6\u5f80\u53f3\u8ba1\u7b97\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u81c2\u5c55, \u5982\u679c\u5f53\u524d\u4f4d\u7f6e <code>i</code> \u4ecd\u7136\u5728\u4e00\u4e2a\u56de\u6587\u4e32 $S_{core}$ (\u4e2d\u5fc3\u5143\u7d20\u4f4d\u7f6e\u4e3a <code>core</code>)\u7684\u8986\u76d6\u4e0b, \u90a3\u4e48, \u5f53\u524d\u4f4d\u7f6e <code>i</code> \u8ddf <code>j=(2*core-i)</code> \u662f\u5173\u4e8e <code>core</code> \u5bf9\u79f0\u70b9; \u5982\u679c\u56de\u6587\u4e32 $S_j$ \u5b8c\u5168\u88ab $S_{core}$ \u8986\u76d6, \u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\u5230\u4e2d\u5fc3\u4e3a <code>i</code> \u7684\u56de\u6587\u4e32 $S_i$ , \u4e24\u4e2a\u56de\u6587\u4e32\u662f\u955c\u50cf</p> <p>core \u662f $S_{core}$ \u53f3\u81c2 right \u53d6\u6700\u5927\u65f6\u7684\u4f4d\u7f6e: $ core = \\mathop{\\arg\\max(right)}\\limits_{idx} $</p> <p>\u4f46\u662f\u8981\u8003\u8651\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5:</p> <ul> <li>$S_{core}$ \u6ca1\u6709\u8986\u76d6 <code>i</code></li> <li>$S_j$ \u6ca1\u6709\u5b8c\u5168\u88ab $S_{core}$ \u8986\u76d6, \u4e5f\u5c31\u662f\u8bf4 $S_j$ \u7684\u5de6\u81c2\u8d85\u51fa\u4e86 $S_{core}$ \u7684\u8986\u76d6\u8303\u56f4</li> <li>$S_j$ \u56e0\u4e3a\u53d7\u5230\u5de6\u7aef\u70b9\u7684\u9650\u5236, \u81c2\u5c55\u5f88\u5c0f</li> </ul> <p>\u8fd9\u4e9b\u60c5\u51b5\u4e0b, \u9700\u8981\u7528\u6734\u7d20\u7684\u65b9\u5f0f\u5411\u4e24\u7aef\u6269\u5c55\u6c42\u51fa\u81c2\u5c55; \u4f46\u662f\u4e0d\u9700\u8981\u5199\u5230 if-else \u91cc</p> <p>\u5728\u63d2\u5165 char \u4e4b\u540e, \u6709\u4e86\u4e00\u4e9b\u6027\u8d28:</p> <ul> <li><code>\u539f\u56de\u6587\u4e32\u957f\u5ea6 = \u81c2\u5c55\u957f\u5ea6</code>      \u4f8b\u5982: <code>len(\"#1#1#\") = 2</code>, <code>len(\"#1#\") = 1</code></li> <li><code>\u539f\u5de6\u7aef\u70b9 = \u65b0\u5de6\u7aef\u70b9/2 = (i-\u65b0\u81c2\u5c55)/2</code>      \u4f8b\u5982: \u65b0\u6784\u9020\u7684\u5de6\u4fa7\u4e3a <code>^#1#</code>, <code>\u539f\u5de6\u7aef\u70b9 = \u65b0\u7684\u5de6\u7aef\u70b9/2 = (i-\u65b0\u81c2\u5c55)/2 = (2-1)/2 = 0</code>,</li> </ul> <p>\u5728\u6c42\u5f97\u6240\u6709\u81c2\u5c55\u540e, \u627e\u5230\u6700\u5927\u81c2\u5c55, \u6839\u636e\u4e0a\u8ff0\u6027\u8d28\u6c42\u5f97\u6700\u957f\u56de\u6587\u4e32</p> <pre><code>class Solution {\n    public String longestPalindrome(String s) {\n        if (s.isEmpty()) return s;\n        char[] arr = preProcess(s);\n        int n = arr.length;\n        int[] arm = new int[n];\n        int core = 0, right = 0; // core \u662f right \u53d6\u5230 max \u65f6\u7684 idx\n        // \u904d\u5386 i \u7684\u8fc7\u7a0b\u4e2d, \u7ef4\u62a4 core \u548c right\n        for (int i = 1; i &lt; n - 1; i++) {\n            // j \u662f i \u5173\u4e8e core \u7684\u5bf9\u79f0\u70b9\n            int j = 2 * core - i;\n            // \u5148\u8f6c\u79fb\u4e00\u4e0b\u72b6\u6001\n            if (i &lt; right) {\n                arm[i] = Math.min(right - i, arm[j]); // \u5982\u679cj\u7684\u5de6\u81c2\u8d85\u8fc7\u4e86left, i\u7684\u53f3\u81c2\u5148\u4f38\u5c55\u5230right\n            }\n            // \u5c1d\u8bd5\u5411\u4e24\u8fb9\u6269, \u539f\u56e0\u5982\u4e0b:\n            // 1.i\u8d85\u8fc7\u4e86right 2.i\u7684\u53f3\u81c2\u8d85\u8fc7\u4e86right 3.j\u7684\u5de6\u81c2\u56e0arr[0]\u53d7\u9650\n            while (arr[i + arm[i] + 1] == arr[i - arm[i] - 1]) {\n                arm[i]++;\n            }\n\n            // \u66f4\u65b0 right\n            if (i + arm[i] &gt; right) {\n                core = i;\n                right = i + arm[i];\n            }\n        }\n        // \u627e\u5230\u6700\u5927\u81c2\u5c55, \u6c42\u5f97\u5de6\u53f3\u7aef\u70b9\n        int idx = 0;\n        int len = 0;\n        for (int i = 1; i &lt; n - 1; i++) {\n            if (arm[i] &gt; len) {\n                len = arm[i];\n                idx = i;\n            }\n        }\n        // \u539f\u5de6\u7aef\u70b9==(i-\u81c2\u5c55)/2\n        // \u539f\u6700\u5927\u957f\u5ea6==\u81c2\u5c55\u957f\u5ea6\n        int start = (idx - len) / 2;\n        return s.substring(start, start + len);\n    }\n\n    /**\n     * \u9884\u5904\u7406\n     */\n    private char[] preProcess(String s) {\n        StringBuilder sb = new StringBuilder(\"^#\");\n        for (char c : s.toCharArray()) {\n            sb.append(c).append(\"#\");\n        }\n        sb.append(\"$\");\n        return sb.toString().toCharArray();\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/#32-hard","title":"32. \u6700\u957f\u6709\u6548\u62ec\u53f7 hard","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u53ea\u5305\u542b '(' \u548c ')' \u7684\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u6700\u957f\u6709\u6548\uff08\u683c\u5f0f\u6b63\u786e\u4e14\u8fde\u7eed\uff09\u62ec\u53f7\u5b50\u4e32\u7684\u957f\u5ea6\u3002</p> <p>\u89e3\u6cd5 1 \u6808</p> <p>\u6808\u4e2d\u4f1a\u5b58\u5165 '(', \u90a3\u4e48\u968f\u7740 '(' \u7684 pop, \u4f1a\u4e0d\u77e5\u9053\u8d77\u59cb\u4f4d\u7f6e; \u6b64\u65f6\u6808\u5e95\u90e8\u5b58\u4e00\u4e2a ')' \u5c31\u80fd\u77e5\u9053\u8d77\u59cb\u4f4d\u7f6e\u5728\u54ea\u4e86 \u6808\u5e95\u5b58\u50a8\u6ca1\u6709\u88ab\u5339\u914d\u7684 ')' \u7d22\u5f15\u4f5c\u4e3a\u5206\u9694, \u6808\u4e2d\u5b58\u50a8 '(' \u7d22\u5f15</p> JavaPython3C++ <pre><code>class Solution {\n    public int longestValidParentheses(String s) {\n        char[] arr = s.toCharArray();\n        Deque&lt;Integer&gt; stack = new LinkedList&lt;&gt;();\n        stack.push(-1);\n        int res = 0;\n        for (int i = 0; i &lt; arr.length; i++) {\n            if (arr[i] == '(') {\n                stack.push(i);\n                continue;\n            }\n            stack.pop();\n            // \u7a7a\u6808\u4ee3\u8868\u6808\u5e95\u7684\u5206\u9694\u7b26pop\u4e86\n            if (stack.isEmpty()) {\n                stack.push(i);\n            } else {\n                res = Math.max(res, i - stack.element());\n            }\n        }\n        return res;\n    }\n}\n</code></pre> <pre><code>class Solution:\n    def longestValidParentheses(self, s: str) -&gt; int:\n        res = 0\n        stack = list()\n        stack.append(-1)\n        for i, e in enumerate(s):\n            if e == '(':\n                stack.append(i)\n                continue\n            stack.pop()\n            if len(stack) == 0:\n                stack.append(i)\n            else:\n                res = max(res, i - stack[len(stack) - 1])\n\n        return res\n</code></pre> <pre><code>class Solution {\npublic:\n    int longestValidParentheses(string s) {\n        int res = 0;\n        stack&lt;int&gt; stk;\n        stk.push(-1);\n        for (int i = 0; i &lt; s.length(); i++) {\n            if (s[i] == '(') {\n                stk.push(i);\n                continue;\n            }\n            stk.pop();\n            if (stk.empty()) stk.push(i);\n            else res = std::max(res, i - stk.top());\n        }\n        return res;\n    }\n};\n</code></pre> <p>\u89e3\u6cd5 2 DP</p> <p>dp \u4fdd\u5b58\u4ee5 i \u4e3a\u7ed3\u675f\u7684\u5b50\u4e32\u7684\u6700\u5927\u957f\u5ea6 \u4e2a\u4eba\u8ba4\u4e3a\u8fd9\u79cd\u7b97\u6cd5\u4e0d\u4f18\u96c5, \u53ea\u6709 dp \u72c2\u4eba\u624d\u4f1a\u8fd9\u6837\u505a</p> <pre><code>public class Solution {\n    public int longestValidParentheses(String s) {\n        int max = 0;\n        char[] arr = s.toCharArray();\n        // \u4ee5 i \u4e3a\u7ed3\u5c3e\u7684\u957f\u5ea6\n        int[] dp = new int[arr.length];\n        for (int i = 1; i &lt; arr.length; i++) {\n            if (arr[i] == '(') continue;\n            if (arr[i - 1] == '(') {\n                dp[i] = 2 + (i &gt;= 2 ? dp[i - 2] : 0);\n            } else {\n                // \u6ce8\u610f\u7684\u7d22\u5f15\u8ba1\u7b97\n                int startIdx = i - 1 - dp[i - 1];\n                if (startIdx &gt;= 0 &amp;&amp; arr[startIdx] == '(') {\n                    // \u8fde\u8d77\u6765\n                    dp[i] = 2\n                            + dp[i - 1]\n                            + (startIdx &gt;= 1 ? dp[startIdx - 1] : 0);\n                }\n            }\n            max = Math.max(max, dp[i]);\n        }\n        return max;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 3 \u8ba1\u6570</p> <p>\u4ece\u5de6\u5230\u53f3\u8ba1\u6570, ')' \u6570\u91cf\u591a\u5219\u5f52\u96f6, \u6570\u91cf\u76f8\u7b49\u5219\u8ba1\u7b97 max; \u4e3a\u89e3\u51b3 \"()(()\" \u8fd9\u79cd\u60c5\u51b5, \u518d\u4ece\u53f3\u5411\u5de6\u7edf\u8ba1, \u53d6 2 \u6b21\u7edf\u8ba1\u7684\u6700\u5927\u503c;</p> JavaPython3C++ <pre><code>class Solution {\n    public int longestValidParentheses(String s) {\n        int l = 0, r = 0, max = 0;\n        for (int i = 0; i &lt; s.length(); i++) {\n            if (s.charAt(i) == '(') l++;\n            else r++;\n            if (l == r) max = Math.max(max, 2 * r);\n            else if (r &gt; l) l = r = 0;\n        }\n        l = r = 0;\n        for (int i = s.length() - 1; i &gt;= 0; i--) {\n            if (s.charAt(i) == '(') l++;\n            else r++;\n            if (l == r) max = Math.max(max, 2 * l);\n            else if (l &gt; r) l = r = 0;\n        }\n        return max;\n    }\n}\n</code></pre> <pre><code>class Solution:\n    def longestValidParentheses(self, s: str) -&gt; int:\n        m, l, r = 0, 0, 0\n        for e in s:\n            if e == '(':\n                l += 1\n            else:\n                r += 1\n            if l == r:\n                m = max(m, 2 * l)\n            elif r &gt; l:\n                l = r = 0\n\n        l = r = 0\n        i = len(s) - 1\n        while i &gt;= 0:\n            if s[i] == '(':\n                l += 1\n            else:\n                r += 1\n            if r == l:\n                m = max(m, 2 * r)\n            elif l &gt; r:\n                l = r = 0\n            i -= 1\n\n        return m\n</code></pre> <pre><code>class Solution {\npublic:\n    int longestValidParentheses(string s) {\n        int l = 0, r = 0, res = 0;\n        for (int i = 0; i &lt; s.length(); i++) {\n            if (s[i] == '(') l++;\n            else r++;\n            if (l == r) res = std::max(res, 2 * r);\n            else if (r &gt; l) l = r = 0;\n        }\n        l = r = 0;\n        for (int i = s.length() - 1; i &gt;= 0; i--) {\n            if (s[i] == '(') l++;\n            else r++;\n            if (l == r) res = std::max(res, 2 * l);\n            else if (l &gt; r) l = r = 0;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"leetcode/new/%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/#_3","title":"\u6700\u5927\u9762\u79ef","text":""},{"location":"leetcode/new/%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/#221-mid","title":"221. \u6700\u5927\u6b63\u65b9\u5f62 mid","text":"<p>\u5728\u4e00\u4e2a\u7531 '0' \u548c '1' \u7ec4\u6210\u7684\u4e8c\u7ef4\u77e9\u9635\u5185\uff0c\u627e\u5230\u53ea\u5305\u542b '1' \u7684\u6700\u5927\u6b63\u65b9\u5f62\uff0c\u5e76\u8fd4\u56de\u5176\u9762\u79ef\u3002</p> <p>DP: \u53f3\u4e0b\u89d2\u5750\u6807\u4e3a[i][j]\u7684\u5c0f\u6b63\u65b9\u5f62 \u7684\u8fb9\u957f $dp[i][j] = 1 + min(dp[i - 1][j - 1], dp[i][j - 1], dp[i - 1][j])$</p> <pre><code>class Solution {\n    public int maximalSquare(char[][] m) {\n        int r = m.length;\n        int c = m[0].length;\n        int[][] dp = new int[r][c];\n        int res = 0;\n        for (int i = 0; i &lt; r; i++) {\n            if (m[i][0] == '1') {\n                dp[i][0] = 1;\n                res = 1;\n            }\n        }\n        for (int i = 0; i &lt; c; i++) {\n            if (m[0][i] == '1') {\n                dp[0][i] = 1;\n                res = 1;\n            }\n        }\n\n        for (int i = 1; i &lt; r; i++) {\n            for (int j = 1; j &lt; c; j++) {\n                if (m[i][j] == '1') {\n                    dp[i][j] = 1 + Math.min(dp[i - 1][j - 1], Math.min(dp[i][j - 1], dp[i - 1][j]));\n                    res = Math.max(res, dp[i][j]);\n                }\n            }\n        }\n        return res * res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%9E%84%E9%80%A0/","title":"\u6784\u9020","text":""},{"location":"leetcode/new/%E6%9E%84%E9%80%A0/#_2","title":"\u6784\u9020","text":""},{"location":"leetcode/new/%E6%9E%84%E9%80%A0/#118-easy","title":"118. \u6768\u8f89\u4e09\u89d2 easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 numRows\uff0c\u751f\u6210\u300c\u6768\u8f89\u4e09\u89d2\u300d\u7684\u524d numRows \u884c\u3002</p> <p>\u5728\u300c\u6768\u8f89\u4e09\u89d2\u300d\u4e2d\uff0c\u6bcf\u4e2a\u6570\u662f\u5b83\u5de6\u4e0a\u65b9\u548c\u53f3\u4e0a\u65b9\u7684\u6570\u7684\u548c\u3002</p> JavaGo <pre><code>class Solution {\n    public List&lt;List&lt;Integer&gt;&gt; generate(int n) {\n        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;(n);\n        res.add(List.of(1));\n        for (int i = 1; i &lt; n; i++) {\n            List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n            list.add(1);\n            List&lt;Integer&gt; pre = res.get(i - 1);\n            for (int j = 1; j &lt; i; j++) {\n                int a = pre.get(j - 1);\n                int b = pre.get(j);\n                list.add(a + b);\n            }\n            list.add(1);\n            res.add(list);\n        }\n        return res;\n    }\n}\n</code></pre> <pre><code>func generate(numRows int) [][]int {\n    ans := make([][]int, numRows)\n    for i := range ans {\n        ans[i] = make([]int, i+1)\n        ans[i][0] = 1\n        ans[i][i] = 1\n        for j := 1; j &lt; i; j++ {\n            ans[i][j] = ans[i-1][j] + ans[i-1][j-1]\n        }\n    }\n    return ans\n}\n</code></pre>"},{"location":"leetcode/new/%E6%9F%B1%E5%AD%90/","title":"\u67f1\u5b50","text":""},{"location":"leetcode/new/%E6%9F%B1%E5%AD%90/#_2","title":"\u63a5\u6c34","text":""},{"location":"leetcode/new/%E6%9F%B1%E5%AD%90/#11-mid","title":"11. \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668 mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u6570\u7ec4 height\u3002\u6709 n \u6761\u5782\u7ebf, \u7b2c i \u6761\u7ebf\u7684\u4e24\u4e2a\u7aef\u70b9\u662f (i, 0) \u548c (i, height[i])\u3002 You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).</p> <p>\u627e\u51fa\u5176\u4e2d\u7684\u4e24\u6761\u7ebf, \u4f7f\u5f97\u5b83\u4eec\u4e0e x \u8f74\u5171\u540c\u6784\u6210\u7684\u5bb9\u5668\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a\u7684\u6c34\u3002 Find two lines that together with the x-axis form a container, such that the container contains the most water.</p> <p>\u8fd4\u56de\u5bb9\u5668\u53ef\u4ee5\u50a8\u5b58\u7684\u6700\u5927\u6c34\u91cf\u3002 Return the maximum amount of water a container can store.</p> <p>\u8bf4\u660e\uff1a\u4f60\u4e0d\u80fd\u503e\u659c\u5bb9\u5668\u3002 Notice that you may not slant the container.</p> <p>\u77ed\u677f\u51b3\u5b9a\u4e86\u9762\u79ef, \u5c06\u77ed\u7684\u90a3\u4e00\u4fa7\u5411\u4e2d\u95f4\u79fb\u52a8; \u5982\u679c\u4e24\u8fb9\u4e00\u6837\u957f, \u90a3\u4e48\u53ea\u79fb\u52a8\u4e00\u4fa7\u9762\u79ef\u90fd\u4e0d\u4f1a\u66f4\u5927, \u6240\u4ee5\u79fb\u52a8\u4e24\u7aef</p> JavaGo <pre><code>class Solution {\n    public int maxArea(int[] height) {\n        int p1 = 0, p2 = height.length - 1;\n        int res = 0;\n        while (p1 &lt; p2) {\n            int square;\n            if (height[p1] &lt; height[p2])\n                square = height[p1] * (p2 - p1++);\n            else if (height[p1] &gt; height[p2])\n                square = height[p2] * (p2-- - p1);\n            else\n                square = height[p1] * (p2-- - p1++);\n            res = Math.max(res, square);\n        }\n        return res;\n    }\n}\n</code></pre> <pre><code>func maxArea(height []int) int {\n    l,r := 0,len(height)-1\n    res := 0\n    for l &lt; r {\n        res = max(res, min(height[l],height[r])*(r-l))\n        if height[l] &lt; height[r] {\n            l++\n        } else if height[l] &gt; height[r] {\n            r--\n        } else {\n            l++\n            r--\n        }\n    }\n    return res\n}\nfunc min (a int, b int) int {\n    if a &lt; b {\n        return a\n    }\n    return b\n}\nfunc max (a int, b int) int {\n    if a &gt; b {\n        return a\n    }\n    return b\n}\n</code></pre>"},{"location":"leetcode/new/%E6%9F%B1%E5%AD%90/#42-hard","title":"42. \u63a5\u96e8\u6c34 hard","text":"<p>\u7ed9\u5b9a n \u4e2a\u975e\u8d1f\u6574\u6570\u8868\u793a\u6bcf\u4e2a\u5bbd\u5ea6\u4e3a 1 \u7684\u67f1\u5b50\u7684\u9ad8\u5ea6\u56fe, \u8ba1\u7b97\u6309\u6b64\u6392\u5217\u7684\u67f1\u5b50, \u4e0b\u96e8\u4e4b\u540e\u80fd\u63a5\u591a\u5c11\u96e8\u6c34\u3002</p> <p>\u89e3\u6cd5 1: \u5355\u8c03\u6808</p> <p>\u8981\u6a21\u62df\u53bb\u60f3, \u904d\u5386\u8fc7\u7a0b\u4e2d, \u5f53\u524d\u5143\u7d20\u9996\u5148\u4f5c\u4e3a\u53f3\u7aef\u53c2\u4e0e\u8ba1\u7b97, \u7136\u540e\u4f5c\u4e3a\u5de6\u7aef\u5165\u6808; \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u524d\u4e00\u4e2a\u5143\u7d20\u9ad8 &amp; \u524d\u4e00\u4e2a\u5143\u7d20\u524d\u9762\u8fd8\u6709, \u8ba1\u7b97\u9762\u79ef;</p> <pre><code>class Solution {\n    public int trap(int[] height) {\n        int n = height.length;\n        int res = 0;\n        Deque&lt;Integer&gt; stack = new ArrayDeque&lt;&gt;();\n        for (int i = 0; i &lt; n; i++) {\n            while (!stack.isEmpty() &amp;&amp; height[i] &gt; height[stack.element()]) {\n                int t1 = stack.pop();\n                if (stack.isEmpty()) break;\n                int t2 = stack.element();\n                int currWidth = i - t2 - 1;\n                int currHeight = Math.min(height[t2], height[i]) - height[t1];\n                res += currWidth * currHeight;\n            }\n            stack.push(i);\n        }\n        return res;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2: \u52a8\u6001\u89c4\u5212-\u524d\u7f00\u51fd\u6570</p> <p>\u8ddf 3 \u5143\u7ec4\u6709\u70b9\u50cf, \u7528\u524d\u7f00\u51fd\u6570\u8bb0\u5f55\u524d\u540e\u7684\u6700\u5927\u503c, \u5c31\u80fd\u8ba1\u7b97\u5f53\u524d\u67f1\u5b50\u7684\u79ef\u6c34</p> <pre><code>class Solution {\n    public int trap(int[] arr) {\n        int n = arr.length;\n        int res = 0;\n        int[] heigh = new int[n];\n        heigh[n - 1] = arr[n - 1];\n        for (int i = n - 2; i &gt;= 0; i--) {\n            heigh[i] = Math.max(arr[i], heigh[i + 1]);\n        }\n        int pre = arr[0];\n        for (int i = 1; i &lt; n - 1; i++) {\n            int diff = Math.min(pre, heigh[i + 1]) - arr[i];\n            res += Math.max(diff, 0);\n            pre = Math.max(pre, arr[i]);\n        }\n        return res;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 3: \u53cc\u6307\u9488</p> <p>\u5229\u7528\u5f53\u524d\u67f1\u5b50\u79ef\u6c34\u7531\u5de6\u53f3\u4e24\u4fa7\u9ad8\u503c\u7684\u8f83\u5c0f\u4e00\u65b9\u51b3\u5b9a, \u53ef\u4ee5\u7ef4\u62a4\u53cc\u6307\u9488\u548c 2 \u4e2a\u6700\u5927\u503c(\u8868\u793a\u53cc\u6307\u9488\u5de6\u53f3\u4e24\u4fa7\u7684\u6700\u5927\u503c) \u8fed\u4ee3\u8fc7\u7a0b\u4e2d, \u6700\u5927\u503c\u8f83\u5c0f\u7684\u4e00\u4fa7\u53ef\u4ee5\u8ba1\u7b97\u8be5\u6307\u9488\u6240\u6307\u5411\u67f1\u5b50\u7684\u79ef\u6c34; \u76f8\u53cd\u7684\u4e00\u4fa7\u56e0\u4e3a\u4e0d\u77e5\u9053\u4e2d\u95f4\u662f\u5426\u6709\u66f4\u9ad8\u7684\u67f1\u5b50, \u6240\u4ee5\u4e0d\u80fd\u8ba1\u7b97</p> <pre><code>class Solution {\n    public int trap(int[] arr) {\n        int n = arr.length;\n        int res = 0;\n        int l = 1, r = n - 2;\n        int lmax = arr[0], rmax = arr[n - 1];\n        while (l &lt;= r) {\n            if (lmax &lt; rmax) {\n                res += Math.max(0, lmax - arr[l]);\n                lmax = Math.max(lmax, arr[l]);\n                l++;\n            } else {\n                res += Math.max(0, rmax - arr[r]);\n                rmax = Math.max(rmax, arr[r]);\n                r--;\n            }\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%9F%B1%E5%AD%90/#_3","title":"\u67f1\u5b50\u9762\u79ef","text":""},{"location":"leetcode/new/%E6%9F%B1%E5%AD%90/#84-hard","title":"84. \u67f1\u72b6\u56fe\u4e2d\u6700\u5927\u7684\u77e9\u5f62 hard","text":"<p>\u7ed9\u5b9a n \u4e2a\u975e\u8d1f\u6574\u6570, \u7528\u6765\u8868\u793a\u67f1\u72b6\u56fe\u4e2d\u5404\u4e2a\u67f1\u5b50\u7684\u9ad8\u5ea6\u3002\u6bcf\u4e2a\u67f1\u5b50\u5f7c\u6b64\u76f8\u90bb, \u4e14\u5bbd\u5ea6\u4e3a 1\u3002</p> <p>\u6c42\u5728\u8be5\u67f1\u72b6\u56fe\u4e2d, \u80fd\u591f\u52fe\u52d2\u51fa\u6765\u7684\u77e9\u5f62\u7684\u6700\u5927\u9762\u79ef\u3002</p> <p>\u89e3\u6cd5 \u5355\u8c03\u6808</p> <p>\u627e\u5230\u5143\u7d20 i \u524d\u540e\u6bd4 i \u4f4e\u7684\u5143\u7d20\u7d22\u5f15</p> <pre><code>class Solution {\n    public int largestRectangleArea(int[] h) {\n        int n = h.length;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        // pop \u7684\u65f6\u5019\u8bbe\u5b9a right, \u5355\u8c03\u589e\n        Deque&lt;Integer&gt; stack = new ArrayDeque&lt;&gt;();\n        // \u5982\u679c\u6ca1 pop, \u8bf4\u660e right[i] = n-1\n        Arrays.fill(right, n - 1);\n        for (int i = 0; i &lt; n; i++) {\n            while (!stack.isEmpty() &amp;&amp; h[i] &lt; h[stack.element()]) {\n                right[stack.pop()] = i - 1;\n            }\n            if (!stack.isEmpty()) left[i] = stack.element() + 1;\n            stack.push(i);\n        }\n        int max = 0;\n        for (int i = 0; i &lt; n; i++) {\n            max = Math.max(max, h[i] * (right[i] - left[i] + 1));\n        }\n        return max;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%9F%B1%E5%AD%90/#85-hard","title":"85. \u6700\u5927\u77e9\u5f62 hard","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b 0 \u548c 1, \u5927\u5c0f\u4e3a rows x cols \u7684\u4e8c\u7ef4\u4e8c\u8fdb\u5236\u77e9\u9635, \u627e\u51fa\u53ea\u5305\u542b 1 \u7684\u6700\u5927\u77e9\u5f62, \u5e76\u8fd4\u56de\u5176\u9762\u79ef\u3002</p> <pre><code>class Solution {\n    public int maximalRectangle(char[][] matrix) {\n        int r = matrix.length, c = matrix[0].length;\n        // \u6a2a\u5411\u7684\u6761\u5f62\u56fe\n        int[][] len = new int[r][c];\n        for (int i = 0; i &lt; r; i++) {\n            len[i][0] = matrix[i][0] == '1' ? 1 : 0;\n            for (int j = 1; j &lt; c; j++) {\n                if (matrix[i][j] == '1') {\n                    len[i][j] = len[i][j - 1] + 1;\n                }\n            }\n        }\n        int res = 0;\n        for (int j = 0; j &lt; c; j++) {\n            int[] up = new int[r];\n            int[] down = new int[r];\n            Arrays.fill(down, r - 1);\n            // \u5355\u8c03\u589e\n            Deque&lt;Integer&gt; stack = new ArrayDeque&lt;&gt;();\n            for (int i = 0; i &lt; r; i++) {\n                while (!stack.isEmpty() &amp;&amp; len[i][j] &lt; len[stack.element()][j]) {\n                    down[stack.pop()] = i - 1;\n                }\n                if (!stack.isEmpty()) up[i] = stack.element() + 1;\n                stack.push(i);\n            }\n\n            for (int i = 0; i &lt; r; i++) {\n                int height = down[i] - up[i] + 1;\n                res = Math.max(res, height * len[i][j]);\n            }\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%88/","title":"\u6808","text":""},{"location":"leetcode/new/%E6%A0%88/#_2","title":"\u5339\u914d","text":""},{"location":"leetcode/new/%E6%A0%88/#20-easy","title":"20. \u6709\u6548\u7684\u62ec\u53f7 easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec<code>'(' ')' '{' '}' '[' ']'</code>\u7684\u5b57\u7b26\u4e32 s \uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002 Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.</p> <pre><code>class Solution {\n    public boolean isValid(String s) {\n        int n = s.length();\n        if ((n &amp; 1) != 0) return false;\n\n        Deque&lt;Character&gt; stack = new LinkedList&lt;&gt;();\n        Map&lt;Character, Character&gt; map = Map.of(\n                ')', '(',\n                ']', '[',\n                '}', '{'\n        );\n        for (char c : s.toCharArray()) {\n            if (map.containsKey(c)) {\n                if (stack.isEmpty() || map.get(c) != stack.pop()) return false;\n            } else {\n                stack.push(c);\n            }\n        }\n        return stack.isEmpty();\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%88/#150-mid","title":"150. \u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u6c42\u503c mid","text":"<p>\u5251\u6307 Offer II 036. \u540e\u7f00\u8868\u8fbe\u5f0f</p> <p>\u6839\u636e \u9006\u6ce2\u5170\u8868\u793a\u6cd5\uff0c\u6c42\u8868\u8fbe\u5f0f\u7684\u503c\u3002</p> <p>\u6709\u6548\u7684\u7b97\u7b26\u5305\u62ec +\u3001-\u3001*\u3001/ \u3002\u6bcf\u4e2a\u8fd0\u7b97\u5bf9\u8c61\u53ef\u4ee5\u662f\u6574\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u53e6\u4e00\u4e2a\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u3002</p> <p>\u6ce8\u610f \u4e24\u4e2a\u6574\u6570\u4e4b\u95f4\u7684\u9664\u6cd5\u53ea\u4fdd\u7559\u6574\u6570\u90e8\u5206\u3002</p> <p>\u53ef\u4ee5\u4fdd\u8bc1\u7ed9\u5b9a\u7684\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u603b\u662f\u6709\u6548\u7684\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u8868\u8fbe\u5f0f\u603b\u4f1a\u5f97\u51fa\u6709\u6548\u6570\u503c\u4e14\u4e0d\u5b58\u5728\u9664\u6570\u4e3a 0 \u7684\u60c5\u51b5\u3002</p> <pre><code>class Solution {\n    public int evalRPN(String[] tokens) {\n        Deque&lt;Integer&gt; stack = new ArrayDeque&lt;&gt;();\n        for (String token : tokens) {\n            if (isNumber(token)) stack.push(Integer.parseInt(token));\n            else {\n                int num2 = stack.pop();\n                int num1 = stack.pop();\n                switch (token) {\n                    case \"+\" -&gt; stack.push(num1 + num2);\n                    case \"-\" -&gt; stack.push(num1 - num2);\n                    case \"*\" -&gt; stack.push(num1 * num2);\n                    case \"/\" -&gt; stack.push(num1 / num2);\n                }\n            }\n        }\n        return stack.pop();\n    }\n\n    public boolean isNumber(String token) {\n        return !(\"+\".equals(token) || \"-\".equals(token) || \"*\".equals(token) || \"/\".equals(token));\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/","title":"\u6811","text":""},{"location":"leetcode/new/%E6%A0%91/#_2","title":"\u4ece\u6839\u5230\u53f6","text":"<p>\u501f\u52a9\u6808\u53ef\u4ee5\u5b9e\u73b0\u4efb\u610f\u987a\u5e8f\u8fed\u4ee3\u904d\u5386, \u540e\u5e8f\u9ebb\u70e6\u4e00\u70b9</p>"},{"location":"leetcode/new/%E6%A0%91/#94-easy","title":"94. \u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386 easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root\uff0c\u8fd4\u56de \u5b83\u7684 \u4e2d\u5e8f \u904d\u5386\u3002</p> <p>\u89e3\u6cd5 1 \u9012\u5f52</p> <pre><code>class Solution {\n    public List&lt;Integer&gt; inorderTraversal(TreeNode root) {\n        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();\n        dfs(root, res);\n        return res;\n    }\n\n    private void dfs(TreeNode root, List&lt;Integer&gt; res) {\n        if (root == null) return;\n        dfs(root.left, res);\n        res.add(root.val);\n        dfs(root.right, res);\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2 \u6808</p> <p>\u6808\u53ef\u4ee5\u901a\u8fc7\u5165\u6808\u987a\u5e8f\u968f\u610f\u5b8c\u6210\u904d\u5386\u987a\u5e8f \u5de6-\u6839-\u53f3, \u987a\u5e8f: \u6839\u5165\u6808, \u5de6\u5165\u6808, \u51fa\u6808(visit), \u53f3\u5165\u6808</p> <pre><code>class Solution {\n    public List&lt;Integer&gt; inorderTraversal(TreeNode root) {\n        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();\n        Deque&lt;TreeNode&gt; stack = new LinkedList&lt;&gt;();\n        while (root != null || !stack.isEmpty()) {\n            if (root != null) {\n                stack.push(root);\n                root = root.left;\n                continue;\n            }\n            root = stack.pop();\n            res.add(root.val);\n            root = root.right;\n        }\n        return res;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 3 Morris</p>"},{"location":"leetcode/new/%E6%A0%91/#98-mid","title":"98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002</p> <p>\u81ea\u5e95\u5411\u4e0a, \u6240\u6709\u8282\u70b9\u5728[min,max]\u8303\u56f4\u5185 \u4e5f\u53ef\u4ee5\u901a\u8fc7\u6709\u5e8f\u904d\u5386\u8fdb\u884c\u5224\u65ad</p> <pre><code>class Solution {\n    public boolean isValidBST(TreeNode root) {\n        return isValidBST(root, Long.MIN_VALUE, Long.MAX_VALUE);\n    }\n\n    public boolean isValidBST(TreeNode root, long minVal, long maxVal) {\n        if (root == null) return true;\n        if (root.val &gt;= maxVal || root.val &lt;= minVal) return false;\n        //\u5de6\u5b50\u6811\u8303\u56f4[minval, val]\n        //\u53f3\u5b50\u6570\u8303\u56f4[val, maxval]\n        return isValidBST(root.left, minVal, root.val) &amp;&amp; isValidBST(root.right, root.val, maxVal);\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#101-easy","title":"101. \u5bf9\u79f0\u4e8c\u53c9\u6811 easy","text":"<p>\u5251\u6307 Offer 28. \u5bf9\u79f0\u7684\u4e8c\u53c9\u6811</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c \u68c0\u67e5\u5b83\u662f\u5426\u8f74\u5bf9\u79f0\u3002</p> <pre><code>class Solution {\n    public boolean isSymmetric(TreeNode root) {\n        return isSymmetric(root.left, root.right);\n    }\n\n    public boolean isSymmetric(TreeNode left, TreeNode right) {\n        if (left == null &amp;&amp; right == null) return true;\n        if (left == null || right == null) return false;\n        if (left.val != right.val) return false;\n        return isSymmetric(left.left, right.right) &amp;&amp; isSymmetric(left.right, right.left);\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#112-easy","title":"112. \u8def\u5f84\u603b\u548c easy","text":"<p>\u7ed9\u4f60\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \u548c\u4e00\u4e2a\u8868\u793a\u76ee\u6807\u548c\u7684\u6574\u6570 targetSum\u3002\u5224\u65ad\u8be5\u6811\u4e2d\u662f\u5426\u5b58\u5728 \u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9 \u7684\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u503c\u76f8\u52a0\u7b49\u4e8e\u76ee\u6807\u548c targetSum\u3002\u5982\u679c\u5b58\u5728\uff0c\u8fd4\u56de true\uff1b\u5426\u5219\uff0c\u8fd4\u56de false\u3002</p> <p>\u53f6\u5b50\u8282\u70b9 \u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002</p> <pre><code>class Solution {\n    public boolean hasPathSum(TreeNode root, int targetSum) {\n        if (root == null) return false;\n        if (root.left == null &amp;&amp; root.right == null &amp;&amp; root.val == targetSum) return true;\n        else if (root.left == null &amp;&amp; root.right == null) return false;\n        return hasPathSum(root.left, targetSum - root.val) || hasPathSum(root.right, targetSum - root.val);\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#129-mid","title":"129. \u6c42\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u6570\u5b57\u4e4b\u548c mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u90fd\u5b58\u653e\u6709\u4e00\u4e2a 0 \u5230 9 \u4e4b\u95f4\u7684\u6570\u5b57\u3002 \u6bcf\u6761\u4ece\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u7684\u8def\u5f84\u90fd\u4ee3\u8868\u4e00\u4e2a\u6570\u5b57\uff1a</p> <p>\u4f8b\u5982\uff0c\u4ece\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u7684\u8def\u5f84 1 -&gt; 2 -&gt; 3 \u8868\u793a\u6570\u5b57 123\u3002 \u8ba1\u7b97\u4ece\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u751f\u6210\u7684 \u6240\u6709\u6570\u5b57\u4e4b\u548c\u3002</p> <p>\u4ece\u6839\u5230\u53f6\u7684\u901a\u8fc7\u53c2\u6570\u4f20\u9012, \u4ece\u53f6\u5230\u6839\u901a\u8fc7 res \u4f20\u9012</p> <pre><code>class Solution {\n\n    public int sumNumbers(TreeNode root) {\n        return sum(0, root);\n    }\n\n    int sum(int pre, TreeNode node) {\n        if (node == null) return 0;\n        pre *= 10;\n        pre += node.val;\n        if (node.left == null &amp;&amp; node.right == null) return pre;\n        return sum(pre, node.left) + sum(pre, node.right);\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#144-easy","title":"144. \u4e8c\u53c9\u6811\u7684\u524d\u5e8f\u904d\u5386 easy","text":"<p>\u7ed9\u4f60\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root\uff0c\u8fd4\u56de\u5b83\u8282\u70b9\u503c\u7684 \u524d\u5e8f \u904d\u5386\u3002</p> <p>\u89e3\u6cd5 1 \u9012\u5f52</p> <pre><code>class Solution {\n    public List&lt;Integer&gt; preorderTraversal(TreeNode root) {\n        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();\n        dfs(root, res);\n        return res;\n    }\n\n    private void dfs(TreeNode root, List&lt;Integer&gt; res) {\n        if (root == null) return;\n        res.add(root.val);\n        dfs(root.left, res);\n        dfs(root.right, res);\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2 \u8fed\u4ee3</p> <p>\u6839-\u5de6-\u53f3 \u987a\u5e8f\u4e3a: \u6839\u5165\u6808, \u51fa\u6808(visit), \u53f3\u5165\u6808, \u5de6\u5165\u6808</p> <pre><code>class Solution {\n    public List&lt;Integer&gt; preorderTraversal(TreeNode root) {\n        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();\n        if (root == null) return res;\n        Deque&lt;TreeNode&gt; stack = new LinkedList&lt;&gt;();\n        stack.push(root);\n        while (!stack.isEmpty()) {\n            root = stack.pop();\n            res.add(root.val);\n            if (root.right != null) stack.push(root.right);\n            if (root.left != null) stack.push(root.left);\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#145-easy","title":"145. \u4e8c\u53c9\u6811\u7684\u540e\u5e8f\u904d\u5386 easy","text":"<p>\u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root\uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684 \u540e\u5e8f\u904d\u5386\u3002</p> <p>\u89e3\u6cd5 1 \u9012\u5f52</p> <pre><code>class Solution {\n    public List&lt;Integer&gt; postorderTraversal(TreeNode root) {\n        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();\n        dfs(root, res);\n        return res;\n    }\n\n    private void dfs(TreeNode root, List&lt;Integer&gt; res) {\n        if (root == null) return;\n        dfs(root.left, res);\n        dfs(root.right, res);\n        res.add(root.val);\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2 \u8fed\u4ee3</p> <p>\u5de6-\u53f3-\u6839, \u987a\u5e8f: \u6839\u5165\u6808, \u5de6\u5165\u6808, top \u672a\u5904\u7406\u53f3\u5165\u6808, \u5904\u7406\u8fc7\u51fa\u6808 \u6bd4\u8f83\u5de7\u5999\u7684\u662f\u6839\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u5904\u7406\u7684\u8282\u70b9\u5c31\u662f\u53f3\u5b50\u6811\u7684\u6839\u8282\u70b9</p> <pre><code>class Solution {\n    public List&lt;Integer&gt; postorderTraversal(TreeNode root) {\n        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();\n        Deque&lt;TreeNode&gt; stack = new LinkedList&lt;&gt;();\n        TreeNode pre = null;\n        while (root != null || !stack.isEmpty()) {\n            if (root != null) {\n                stack.push(root);\n                root = root.left;\n                continue;\n            }\n            root = stack.element();\n            if (root.right == null || root.right == pre) {\n                res.add(root.val);\n                pre = root;\n                stack.pop();\n            } else root = root.right;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#_3","title":"\u4ece\u53f6\u5230\u6839","text":""},{"location":"leetcode/new/%E6%A0%91/#104-easy","title":"104. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6 easy","text":"<p>\u5251\u6307 Offer 55 - I. \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5927\u6df1\u5ea6\u3002 \u4e8c\u53c9\u6811\u7684\u6df1\u5ea6\u4e3a\u6839\u8282\u70b9\u5230\u6700\u8fdc\u53f6\u5b50\u8282\u70b9\u7684\u6700\u957f\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u3002</p> <p>\u53ef\u4ee5 BFS, \u4f46\u9012\u5f52\u66f4\u7b80\u5355</p> <pre><code>class Solution {\n    public int maxDepth(TreeNode root) {\n        if (node == null) return 0;\n        return 1 + Math.max(maxDepth(node.left), maxDepth(node.right));\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#110-easy","title":"110. \u5e73\u8861\u4e8c\u53c9\u6811 easy","text":"<p>\u5251\u6307 Offer 55 - II. \u5e73\u8861\u4e8c\u53c9\u6811</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5b83\u662f\u5426\u662f\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u6811\u3002</p> <p>\u672c\u9898\u4e2d\uff0c\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u5b9a\u4e49\u4e3a\uff1a</p> <ul> <li>\u4e00\u4e2a\u4e8c\u53c9\u6811\u6bcf\u4e2a\u8282\u70b9 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1\u3002</li> </ul> <p>\u89e3\u6cd5 \u81ea\u5e95\u5411\u4e0a</p> <p>\u8981\u5c06\u5e95\u90e8\u7684\u7ed3\u679c\u900f\u51fa\u7ed9\u5230\u9876\u90e8, \u8fd8\u8981\u8fd4\u56de\u6811\u7684\u9ad8\u5ea6</p> <pre><code>class Solution {\n    public boolean isBalanced(TreeNode root) {\n        return deep(root) != -1;\n    }\n\n    private int deep(TreeNode node) {\n        if (node == null) return 0;\n        int left = deep(node.left);\n        int right = deep(node.right);\n        if (left == -1 || right == -1\n                || Math.abs(left - right) &gt; 1) return -1;\n        return 1 + Math.max(left, right);\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#111-easy","title":"111. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6 easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5c0f\u6df1\u5ea6\u3002</p> <p>\u6700\u5c0f\u6df1\u5ea6\u662f\u4ece\u6839\u8282\u70b9\u5230\u6700\u8fd1\u53f6\u5b50\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u91cf\u3002</p> <p>\u8bf4\u660e\uff1a\u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002</p> <p>\u89e3\u6cd5 1: DFS</p> <p>\u6ce8\u610f, \u6709\u5b50\u8282\u70b9\u7684\u4e0d\u662f\u53f6\u5b50\u8282\u70b9</p> <pre><code>class Solution {\n    public int minDepth(TreeNode root) {\n        if (root == null) return 0;\n        int l = minDepth(root.left);\n        int r = minDepth(root.right);\n        if (l == 0 || r == 0) return l + r + 1; // \u5355\u5b50\u6811\n        return Math.min(l, r) + 1;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2: BFS</p> <pre><code>class Solution {\n    public int minDepth(TreeNode root) {\n        //BFS\n        Queue&lt;TreeNode&gt; que = new LinkedList&lt;&gt;();\n        que.add(root);\n        int cnt = 1;\n        while (que.size() &gt; 0) {\n            int size = que.size();\n            while (size-- &gt; 0) {\n                TreeNode node = que.remove();\n                if (node == null) return 0;\n                if (node.left == null &amp;&amp; node.right == null) return cnt;\n                if (node.left != null) que.add(node.left);\n                if (node.right != null) que.add(node.right);\n            }\n            cnt++;\n        }\n        return cnt;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#124-hard","title":"124. \u4e8c\u53c9\u6811\u4e2d\u7684\u6700\u5927\u8def\u5f84\u548c hard","text":"<p>\u5168\u5c40 max \u4ece\u6bcf\u4e2a\u5b50\u6811\u5f97\u5230</p> <pre><code>class Solution {\n    int max;\n    public int maxPathSum(TreeNode root) {\n        max = root.val;\n        deep(root);\n        return max;\n    }\n    private int deep(TreeNode root) {\n        if (root == null) {\n            return 0;\n        }\n        int left = Math.max(0, deep(root.left));\n        int right = Math.max(0, deep(root.right));\n        max = Math.max(max, root.val + left + right);\n        return root.val + Math.max(left, right);\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#_4","title":"\u6784\u9020","text":""},{"location":"leetcode/new/%E6%A0%91/#105-mid","title":"105. \u4ece\u524d\u5e8f\u4e0e\u4e2d\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811 mid","text":"<p>\u5251\u6307 Offer 07. \u91cd\u5efa\u4e8c\u53c9\u6811</p> <p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\u6570\u7ec4 preorder \u548c inorder \uff0c\u5176\u4e2d preorder \u662f\u4e8c\u53c9\u6811\u7684\u5148\u5e8f\u904d\u5386\uff0c inorder \u662f\u540c\u4e00\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff0c\u8bf7\u6784\u9020\u4e8c\u53c9\u6811\u5e76\u8fd4\u56de\u5176\u6839\u8282\u70b9\u3002</p> <ul> <li>\u5747 \u65e0\u91cd\u590d \u5143\u7d20</li> </ul> <p>\u89e3\u6cd5 1 \u9012\u5f52</p> <p>\u524d\u5e8f\u53ef\u4ee5\u5c06\u4e2d\u5e8f\u4e8c\u5206, \u4e0d\u65ad\u5c06\u4e2d\u5e8f\u4e8c\u5206\u5efa\u6811</p> <pre><code>class Solution {\n\n    // \u524d\u5e8f\u7684\u7d22\u5f15, \u9700\u8981\u5171\u4eab\n    int p = 0;\n\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        // \u4e2d\u5e8f\u7684\u53cd\u5411\u7d22\u5f15\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n        for (int i = 0; i &lt; inorder.length; i++) {\n            map.put(inorder[i], i);\n        }\n        return build(map, preorder, inorder, 0, inorder.length - 1);\n    }\n\n    // l, r: \u4e2d\u5e8f\u7684\u7d22\u5f15\n    private TreeNode build(Map&lt;Integer, Integer&gt; map, int[] preorder, int[] inorder, int l, int r) {\n        if (l &gt; r) return null;\n        int val = preorder[p++];\n        // i: \u4e2d\u5e8f\u7684idx\n        int i = map.get(val);\n        // \u4e0b\u9762\u7684\u6784\u9020\u987a\u5e8f\u8981\u8ddf pre \u4fdd\u6301\u4e00\u81f4\n        TreeNode root = new TreeNode(val);\n        if (l == r) return root;\n        root.left  = build(map, preorder, inorder, l, i - 1);\n        root.right = build(map, preorder, inorder, i + 1, r);\n        return root;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2 \u8fed\u4ee3</p>"},{"location":"leetcode/new/%E6%A0%91/#114-mid","title":"114. \u4e8c\u53c9\u6811\u5c55\u5f00\u4e3a\u94fe\u8868 mid","text":"<p>\u7ed9\u4f60\u4e8c\u53c9\u6811\u7684\u6839\u7ed3\u70b9 root \uff0c\u8bf7\u4f60\u5c06\u5b83\u5c55\u5f00\u4e3a\u4e00\u4e2a\u5355\u94fe\u8868\uff1a</p> <ul> <li>\u5c55\u5f00\u540e\u7684\u5355\u94fe\u8868\u5e94\u8be5\u540c\u6837\u4f7f\u7528 TreeNode \uff0c\u5176\u4e2d right \u5b50\u6307\u9488\u6307\u5411\u94fe\u8868\u4e2d\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff0c\u800c\u5de6\u5b50\u6307\u9488\u59cb\u7ec8\u4e3a null\u3002</li> <li>\u5c55\u5f00\u540e\u7684\u5355\u94fe\u8868\u5e94\u8be5\u4e0e\u4e8c\u53c9\u6811 \u5148\u5e8f\u904d\u5386 \u987a\u5e8f\u76f8\u540c\u3002</li> </ul> <p>\u89e3\u6cd5 \u524d\u5e8f\u904d\u5386, \u628a\u53f3\u5b50\u6811\u63a5\u5728\u5de6\u5b50\u6811\u6700\u53f3</p> <p>\u524d\u5e8f\u904d\u5386; \u53f3\u5b50\u6811\u5b58\u4e0b\u6765, \u5de6\u5b50\u6811\u53d8\u4e3a\u53f3\u5b50\u6811, \u5de6\u5b50\u6811\u7f6e\u7a7a, \u627e\u5230\u53f3(\u4e4b\u524d\u7684\u5de6)\u5b50\u6811\u7684\u6700\u53f3\u8282\u70b9, \u628a\u4e4b\u524d\u7684\u53f3\u5b50\u6811\u63a5\u4e0a</p> <pre><code>class Solution {\n    public void flatten(TreeNode root) {\n        while (root != null) {\n            TreeNode l = root.left;\n            TreeNode r = root.right;\n            root.left = null;\n            root.right = l;\n            TreeNode pre = root;\n            while (pre.right != null) pre = pre.right;\n            pre.right = r;\n            root = root.right;\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#297-hard","title":"297. \u4e8c\u53c9\u6811\u7684\u5e8f\u5217\u5316\u4e0e\u53cd\u5e8f\u5217\u5316 hard","text":"<p>\u53ea\u8981\u5e8f\u5217\u5316\u7684\u987a\u5e8f\u8ddf\u53cd\u5e8f\u5217\u5316\u7684\u987a\u5e8f\u4e00\u81f4\u5c31\u884c, \u96be\u70b9\u5728\u4e8e\u5982\u4f55\u627e\u7236\u8282\u70b9\u8fde\u63a5</p> <p>\u89e3\u6cd5 1: \u5c42\u5e8f</p> <pre><code>public class Codec {\n    public String serialize(TreeNode root) {\n        if (root == null) return \"\";\n        StringBuilder sb = new StringBuilder();\n        Queue&lt;TreeNode&gt; que = new LinkedList&lt;&gt;();\n        que.add(root);\n        while (!que.isEmpty()) {\n            TreeNode node = que.remove();\n            if (node == null) {\n                sb.append(\"X,\");\n            } else {\n                sb.append(node.val).append(\",\");\n                que.add(node.left);\n                que.add(node.right);\n            }\n        }\n        return sb.toString();\n    }\n\n    public TreeNode deserialize(String data) {\n        if (\"\".equals(data)) return null;\n        Queue&lt;String&gt; nodes = new ArrayDeque&lt;&gt;(List.of(data.split(\",\")));\n        TreeNode root = new TreeNode(Integer.parseInt(nodes.remove()));\n        Queue&lt;TreeNode&gt; que = new ArrayDeque&lt;&gt;();\n        que.add(root);\n        while (!que.isEmpty()) {\n            TreeNode parent = que.remove();\n            String left = nodes.remove();\n            String right = nodes.remove();\n            if (!left.equals(\"X\")) {\n                parent.left = new TreeNode(Integer.parseInt(left));\n                que.add(parent.left);\n            }\n            if (!right.equals(\"X\")) {\n                parent.right = new TreeNode(Integer.parseInt(right));\n                que.add(parent.right);\n            }\n        }\n        return root;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2: \u524d\u5e8f</p> <pre><code>public class Codec {\n\n    public String serialize(TreeNode root) {\n        if (root == null) return \"X,\";\n        String left = serialize(root.left);\n        String right = serialize(root.right);\n        return root.val + \",\" + left + right;\n    }\n\n    public TreeNode deserialize(String data) {\n        Queue&lt;String&gt; queue = new ArrayDeque&lt;&gt;(List.of(data.split(\",\")));\n        return buildTree(queue);\n    }\n\n    private TreeNode buildTree(Queue&lt;String&gt; queue) {\n        String value = queue.remove();\n        if (\"X\".equals(value)) return null;\n        TreeNode node = new TreeNode(Integer.parseInt(value));\n        node.left = buildTree(queue);\n        node.right = buildTree(queue);\n        return node;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#bst","title":"\u6784\u9020 BST","text":""},{"location":"leetcode/new/%E6%A0%91/#108-easy","title":"108. \u4ece\u6709\u5e8f\u6570\u7ec4\u4e2d\u6784\u9020\u4e8c\u53c9\u67e5\u627e\u6811 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u5176\u4e2d\u5143\u7d20\u5df2\u7ecf\u6309 \u5347\u5e8f \u6392\u5217\uff0c\u8bf7\u4f60\u5c06\u5176\u8f6c\u6362\u4e3a\u4e00\u68f5 \u9ad8\u5ea6\u5e73\u8861 \u4e8c\u53c9\u641c\u7d22\u6811\u3002</p> <p>\u9ad8\u5ea6\u5e73\u8861 \u4e8c\u53c9\u6811\u662f\u4e00\u68f5\u6ee1\u8db3 \"\u6bcf\u4e2a\u8282\u70b9\u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1\" \u7684\u4e8c\u53c9\u6811\u3002</p> <p>\u4e2d\u5e8f\u904d\u5386, \u8f93\u5165\u6570\u7ec4\u8303\u56f4, \u9012\u5f52\u5de6\u53f3\u5b50\u6811, \u8fd4\u56de\u6839\u8282\u70b9</p> <pre><code>class Solution {\n    public TreeNode sortedArrayToBST(int[] nums) {\n        return sortedArrayToBST(nums, 0, nums.length - 1);\n    }\n\n    private TreeNode sortedArrayToBST(int[] nums, int l, int h) {\n        if (l &gt; h) return null;\n        int m = l + (h - l &gt;&gt; 1);\n        TreeNode node = new TreeNode(nums[m]);\n        node.left = sortedArrayToBST(nums, l, m - 1);\n        node.right = sortedArrayToBST(nums, m + 1, h);\n        return node;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#109-mid","title":"109. \u6709\u5e8f\u94fe\u8868\u8f6c\u6362\u4e8c\u53c9\u641c\u7d22\u6811 mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 head\uff0c\u5176\u4e2d\u7684\u5143\u7d20\u6309\u5347\u5e8f\u6392\u5e8f\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002</p> <p>\u672c\u9898\u4e2d\uff0c\u4e00\u4e2a\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u662f\u6307\u4e00\u4e2a\u4e8c\u53c9\u6811\u6bcf\u4e2a\u8282\u70b9 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u4e0d\u8d85\u8fc7 1\u3002</p> <p>\u89e3\u6cd5\u4e00: \u524d\u5e8f\u6784\u9020, \u5bfb\u627e\u4e2d\u8282\u70b9</p> <p>\u6c42\u4e2d\u70b9\u65f6, \u4e00\u4e2a\u524d\u95ed\u540e\u5f00\u7684\u533a\u95f4[)\u65b9\u4fbf\u5904\u7406, \u90a3 right \u8981\u504f\u5411\u53f3\u4fa7 \u590d\u6742\u5ea6\u5728\u5bfb\u627e\u4e2d\u95f4\u8282\u70b9 \u53ef\u4ee5\u7528\u6570\u7ec4\u7ef4\u62a4\u4e2d\u95f4\u8282\u70b9\u4f18\u5316</p> <pre><code>public class Solution {\n\n    public TreeNode sortedListToBST(ListNode head) {\n        return buildTree(head, null);\n    }\n\n    public TreeNode buildTree(ListNode left, ListNode right) {\n        // \u524d\u95ed\u540e\u5f00\n        if (left == right) return null;\n        // \u4e2d\u70b9\u504f\u53f3\n        ListNode mid = this.getMedian(left, right);\n        TreeNode root = new TreeNode(mid.val);\n        root.left = buildTree(left, mid);\n        root.right = buildTree(mid.next, right);\n        return root;\n    }\n\n    // \u5feb\u6162\u6307\u9488\n    public ListNode getMedian(ListNode left, ListNode right) {\n        ListNode fast = left;\n        ListNode slow = left;\n        while (fast != right &amp;&amp; fast.next != right) {\n            fast = fast.next;\n            fast = fast.next;\n            slow = slow.next;\n        }\n        return slow;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5\u4e8c: \u4e2d\u5e8f\u6784\u9020</p> <p>\u4e2d\u5e8f\u904d\u5386\u5c31\u662f\u94fe\u8868\u7684\u987a\u5e8f, \u638c\u63a7\u597d\u4e8c\u5206\u51fa\u6765\u7684\u6570\u91cf</p> <pre><code>class Solution {\n    ListNode globalHead;\n\n    public TreeNode sortedListToBST(ListNode head) {\n        globalHead = head;\n        int length = getLength(head);\n        return buildTree(0, length - 1);\n    }\n\n    public int getLength(ListNode node) {\n        int ret = 0;\n        while (node != null) {\n            ++ret;\n            node = node.next;\n        }\n        return ret;\n    }\n\n    // l,r \u5728\u8fd9\u53ef\u4ee5\u7406\u89e3\u4e3a\u7d22\u5f15, \u5b9e\u9645\u4e0a\u662f\u6570\u91cf\n    public TreeNode buildTree(int left, int right) {\n        if (left &gt; right) return null;\n        int mid = left + right &gt;&gt; 1;\n        TreeNode root = new TreeNode();\n        root.left = buildTree(left, mid - 1);\n        root.val = globalHead.val;\n        globalHead = globalHead.next;\n        root.right = buildTree(mid + 1, right);\n        return root;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#_5","title":"\u5c42\u5e8f\u904d\u5386","text":""},{"location":"leetcode/new/%E6%A0%91/#102-mid","title":"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 mid","text":"<p>\u5251\u6307 Offer 32 - I. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 \u5251\u6307 Offer 32 - II. \u4ece\u4e0a\u5230\u4e0b\u6253\u5370\u4e8c\u53c9\u6811 II</p> <p>\u7ed9\u4f60\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684 \u5c42\u5e8f\u904d\u5386</p> <pre><code>class Solution {\n    public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {\n        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\n        if (root == null) return res;\n        Deque&lt;TreeNode&gt; que = new LinkedList&lt;&gt;();\n        que.add(root);\n        while (!que.isEmpty()) {\n            int size = que.size();\n            List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n            while (size-- &gt; 0) {\n                TreeNode node = que.remove();\n                list.add(node.val);\n                if (node.left != null) que.add(node.left);\n                if (node.right != null) que.add(node.right);\n            }\n            res.add(list);\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#103-mid","title":"103. \u4e8c\u53c9\u6811\u7684\u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386 mid","text":"<p>\u7ed9\u4f60\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u8fd4\u56de\u5176\u8282\u70b9\u503c\u7684 \u952f\u9f7f\u5f62\u5c42\u5e8f\u904d\u5386 \u3002\uff08\u5373\u5148\u4ece\u5de6\u5f80\u53f3\uff0c\u518d\u4ece\u53f3\u5f80\u5de6\u8fdb\u884c\u4e0b\u4e00\u5c42\u904d\u5386\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5c42\u4e0e\u5c42\u4e4b\u95f4\u4ea4\u66ff\u8fdb\u884c\uff09\u3002</p> <pre><code>class Solution {\n    public List&lt;List&lt;Integer&gt;&gt; zigzagLevelOrder(TreeNode root) {\n        if (root == null) return List.of();\n        Queue&lt;TreeNode&gt; que = new LinkedList&lt;&gt;();\n        que.add(root);\n        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\n        boolean left = true;\n        while (!que.isEmpty()) {\n            int size = que.size();\n            List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n            while (size-- &gt; 0) {\n                TreeNode node = que.remove();\n                list.add(node.val);\n                if (node.left != null) que.add(node.left);\n                if (node.right != null) que.add(node.right);\n            }\n            res.add(list);\n            if (!left) Collections.reverse(list);\n            left ^= true;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#116-mid","title":"116. \u586b\u5145\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u6307\u9488 mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a \u5b8c\u7f8e\u4e8c\u53c9\u6811 \uff0c\u5176\u6240\u6709\u53f6\u5b50\u8282\u70b9\u90fd\u5728\u540c\u4e00\u5c42\uff0c\u6bcf\u4e2a\u7236\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u3002\u4e8c\u53c9\u6811\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>struct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n</code></pre> <p>\u586b\u5145\u5b83\u7684\u6bcf\u4e2a next \u6307\u9488\uff0c\u8ba9\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u5176\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u3002\u5982\u679c\u627e\u4e0d\u5230\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\uff0c\u5219\u5c06 next \u6307\u9488\u8bbe\u7f6e\u4e3a NULL\u3002</p> <p>\u521d\u59cb\u72b6\u6001\u4e0b\uff0c\u6240\u6709 next \u6307\u9488\u90fd\u88ab\u8bbe\u7f6e\u4e3a NULL\u3002</p> <p>\u89e3\u6cd5 1 BFS</p> <pre><code>class Solution {\n    public Node connect(Node root) {\n        if (root == null) return null;\n        Queue&lt;Node&gt; que = new LinkedList&lt;&gt;();\n        que.add(root);\n        while (!que.isEmpty()) {\n            int size = que.size();\n            while (size-- &gt; 0) {\n                Node node = que.remove();\n                if (node.left != null) que.add(node.left);\n                if (node.right != null) que.add(node.right);\n                if (size &gt; 0) node.next = que.element();\n            }\n        }\n        return root;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2 \u5229\u7528\u4e0a\u4e00\u5c42\u7684\u6a2a\u5411\u6307\u9488</p> <p>\u5728\u540c\u4e00\u884c\u4e2d, \u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\u6709\u53ef\u80fd\u5c5e\u4e8e\u540c\u4e00\u7236\u8282\u70b9, \u6709\u53ef\u80fd\u5c5e\u4e8e\u4e0d\u540c\u4f46\u76f8\u90bb\u7684\u7236\u8282\u70b9 \u5728\u5b8c\u7f8e\u4e8c\u53c9\u6811\u91cc\u53ef\u884c, \u5982\u679c\u4e0d\u6ee1\u5c31\u4e0d\u53ef\u884c</p> <pre><code>class Solution {\n    public Node connect(Node root) {\n        if (root == null) return root;\n        Node first = root;\n        // \u5904\u7406\u4e0b\u4e00\u5c42\n        while (first.left != null) {\n            Node head = first;\n            while (head != null) {\n                head.left.next = head.right;\n                if (head.next != null)\n                    head.right.next = head.next.left;\n                head = head.next;\n            }\n            first = first.left;\n        }\n        return root;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#199-mid","title":"199. \u4e8c\u53c9\u6811\u7684\u53f3\u89c6\u56fe mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684 \u6839\u8282\u70b9 root\uff0c\u60f3\u8c61\u81ea\u5df1\u7ad9\u5728\u5b83\u7684\u53f3\u4fa7\uff0c\u6309\u7167\u4ece\u9876\u90e8\u5230\u5e95\u90e8\u7684\u987a\u5e8f\uff0c\u8fd4\u56de\u4ece\u53f3\u4fa7\u6240\u80fd\u770b\u5230\u7684\u8282\u70b9\u503c\u3002</p> <pre><code>class Solution {\n    public List&lt;Integer&gt; rightSideView(TreeNode root) {\n        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();\n        if (root == null) return res;\n        Queue&lt;TreeNode&gt; que = new LinkedList&lt;&gt;();\n        que.add(root);\n        while (!que.isEmpty()) {\n            int size = que.size();\n            TreeNode node;\n            while (size-- &gt; 0) {\n                node = que.remove();\n                if (node.left != null) que.add(node.left);\n                if (node.right != null) que.add(node.right);\n            }\n            res.add(node.val);\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#_6","title":"\u679a\u4e3e\u6240\u6709\u6811","text":"<p>\u5206\u6cbb\u5de6\u53f3\u4e24\u8fb9</p>"},{"location":"leetcode/new/%E6%A0%91/#95-ii-mid","title":"95. \u4e0d\u540c\u7684\u4e8c\u53c9\u641c\u7d22\u6811 II mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 n\uff0c\u8bf7\u4f60\u751f\u6210\u5e76\u8fd4\u56de\u6240\u6709\u7531 n \u4e2a\u8282\u70b9\u7ec4\u6210\u4e14\u8282\u70b9\u503c\u4ece 1 \u5230 n \u4e92\u4e0d\u76f8\u540c\u7684\u4e0d\u540c \u4e8c\u53c9\u641c\u7d22\u6811\u3002\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u7b54\u6848\u3002</p> <p>\u6839\u8282\u70b9 i \u4ece 1==&gt;n, \u5de6\u53f3\u5b50\u6811\u9012\u5f52\u8fd4\u56de\u6811\u6839\u8282\u70b9\u5217\u8868\uff0c\u4e92\u76f8\u5339\u914d</p> <pre><code>class Solution {\n    public List&lt;TreeNode&gt; generateTrees(int n) {\n        // \u6839\u8282\u70b9\u786e\u5b9a\u540e \u5de6\u53f3\u5b50\u6811\u7684\u96c6\u5408\u786e\u5b9a\n        return generateTrees(1, n);\n    }\n\n    /**\n     * \u8f93\u5165\u5de6\u53f3\u8fb9\u754c, \u8fd4\u56de\u6839\u8282\u70b9\u5217\u8868\n     */\n    public List&lt;TreeNode&gt; generateTrees(int l, int r) {\n        List&lt;TreeNode&gt; res = new ArrayList&lt;&gt;();\n        if (l &gt; r) {\n            res.add(null);\n            return res;\n        }\n        for (int i = l; i &lt;= r; i++) {\n            List&lt;TreeNode&gt; left = generateTrees(l, i - 1);\n            List&lt;TreeNode&gt; right = generateTrees(i + 1, r);\n            for (TreeNode ol : left) {\n                for (TreeNode or : right) {\n                    res.add(new TreeNode(i, ol, or));\n                }\n            }\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#_7","title":"\u8def\u5f84\u641c\u7d22","text":""},{"location":"leetcode/new/%E6%A0%91/#113-ii-mid","title":"113. \u8def\u5f84\u603b\u548c II mid","text":"<p>\u5251\u6307 Offer 34. \u4e8c\u53c9\u6811\u4e2d\u548c\u4e3a\u67d0\u4e00\u503c\u7684\u8def\u5f84</p> <p>\u7ed9\u4f60\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \u548c\u4e00\u4e2a\u6574\u6570\u76ee\u6807\u548c target\uff0c\u627e\u51fa\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84\u603b\u548c\u7b49\u4e8e\u7ed9\u5b9a\u76ee\u6807\u548c\u7684\u8def\u5f84\u3002</p> <p>\u53f6\u5b50\u8282\u70b9 \u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002</p> <p>\u56de\u6eaf</p> <p>\u4ece\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9(\u4e25\u683c)</p> <pre><code>class Solution {\n    List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\n\n    public List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, int target) {\n        if (root == null) return res;\n        backtrace(root, target, new ArrayList&lt;&gt;());\n        return res;\n    }\n\n    void backtrace(TreeNode node, int diff, List&lt;Integer&gt; list) {\n        list.add(node.val);\n        if (node.left == null &amp;&amp; node.right == null) {\n            if (diff == node.val) res.add(new ArrayList&lt;&gt;(list));\n            list.remove(list.size() - 1);\n            return;\n        }\n        if (node.left != null) backtrace(node.left, diff - node.val, list);\n        if (node.right != null) backtrace(node.right, diff - node.val, list);\n        list.remove(list.size() - 1);\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#_8","title":"\u53cd\u8f6c","text":""},{"location":"leetcode/new/%E6%A0%91/#226-easy","title":"226. \u7ffb\u8f6c\u4e8c\u53c9\u6811 easy","text":"<p>\u5251\u6307 Offer 27. \u4e8c\u53c9\u6811\u7684\u955c\u50cf</p> <p>\u7ed9\u4f60\u4e00\u68f5\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u7ffb\u8f6c\u8fd9\u68f5\u4e8c\u53c9\u6811\uff0c\u5e76\u8fd4\u56de\u5176\u6839\u8282\u70b9\u3002</p> <p>\u4ece\u6839\u5230\u53f6\u548c\u4ece\u53f6\u5b50\u5230\u6839\u90fd\u884c, \u8ddf \u53cd\u8f6c\u4e8c\u8fdb\u5236\u6570\u5b57 \u7c7b\u4f3c\u5466</p> <pre><code>class Solution {\n    public TreeNode invertTree(TreeNode root) {\n        invert(root);\n        return root;\n    }\n\n    private void invert(TreeNode node) {\n        if (node == null) return;\n\n        invert(node.left);\n        invert(node.right);\n\n        TreeNode temp;\n        temp = node.left;\n        node.left = node.right;\n        node.right = temp;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#bst_1","title":"BST","text":""},{"location":"leetcode/new/%E6%A0%91/#173-mid","title":"173. \u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668 mid","text":"<p>\u5251\u6307 Offer II 055. \u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668</p> <p>\u5b9e\u73b0\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u8fed\u4ee3\u5668\u7c7b BSTIterator \uff0c\u8868\u793a\u4e00\u4e2a\u6309\u4e2d\u5e8f\u904d\u5386\u4e8c\u53c9\u641c\u7d22\u6811\uff08BST\uff09\u7684\u8fed\u4ee3\u5668\uff1a</p> <ul> <li>BSTIterator(TreeNode root) \u521d\u59cb\u5316 BSTIterator \u7c7b\u7684\u4e00\u4e2a\u5bf9\u8c61\u3002BST \u7684\u6839\u8282\u70b9 root \u4f1a\u4f5c\u4e3a\u6784\u9020\u51fd\u6570\u7684\u4e00\u90e8\u5206\u7ed9\u51fa\u3002\u6307\u9488\u5e94\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u4e0d\u5b58\u5728\u4e8e BST \u4e2d\u7684\u6570\u5b57\uff0c\u4e14\u8be5\u6570\u5b57\u5c0f\u4e8e BST \u4e2d\u7684\u4efb\u4f55\u5143\u7d20\u3002</li> <li>boolean hasNext() \u5982\u679c\u5411\u6307\u9488\u53f3\u4fa7\u904d\u5386\u5b58\u5728\u6570\u5b57\uff0c\u5219\u8fd4\u56de true\uff1b\u5426\u5219\u8fd4\u56de false\u3002</li> <li>int next()\u5c06\u6307\u9488\u5411\u53f3\u79fb\u52a8\uff0c\u7136\u540e\u8fd4\u56de\u6307\u9488\u5904\u7684\u6570\u5b57\u3002</li> </ul> <p>\u6ce8\u610f\uff0c\u6307\u9488\u521d\u59cb\u5316\u4e3a\u4e00\u4e2a\u4e0d\u5b58\u5728\u4e8e BST \u4e2d\u7684\u6570\u5b57\uff0c\u6240\u4ee5\u5bf9 next() \u7684\u9996\u6b21\u8c03\u7528\u5c06\u8fd4\u56de BST \u4e2d\u7684\u6700\u5c0f\u5143\u7d20\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe next() \u8c03\u7528\u603b\u662f\u6709\u6548\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u8c03\u7528 next() \u65f6\uff0cBST \u7684\u4e2d\u5e8f\u904d\u5386\u4e2d\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u4e0b\u4e00\u4e2a\u6570\u5b57\u3002</p> <p>\u5f88\u597d\u5730\u5c55\u793a\u4e86 BST \u7684 next \u5e94\u8be5\u600e\u6837\u5904\u7406 \u8981\u6c42\u662f\u4ece\u6700\u5c0f\u5230\u6700\u5927 \u53ef\u4ee5\u62c9\u5e73\u5904\u7406, \u4e5f\u53ef\u4ee5\u7528\u6808</p> <pre><code>class BSTIterator {\n    // \u5f88\u597d\u6a21\u62df\u4e86\u641c\u7d22\u6811\u7684\u641c\u7d22\u8fc7\u7a0b\n    private TreeNode p;\n    private final Deque&lt;TreeNode&gt; stack = new ArrayDeque&lt;&gt;();\n\n    public BSTIterator(TreeNode root) {\n        this.p = root;\n    }\n\n    public int next() {\n        // stack \u4e2d\u7684\u5143\u7d20\u4e0d\u662f\u6240\u6709\u7684\u5143\u7d20, \u4f46 stack \u9876\u90e8\u7684\u5143\u7d20\u4e00\u5b9a\u662f\u6700\u5c0f\u7684\n        while (p != null) {\n            stack.push(p);\n            p = p.left;\n        }\n        p = stack.pop();\n        int res = p.val;\n        // \u5982\u679c p \u4f5c\u4e3a root, \u6240\u6709\u7684\u5b50\u8282\u70b9\u90fd\u5c0f\u4e8e p \u5728\u6808\u91cc\u5e95\u4e0b\u8282\u70b9\n        p = p.right;\n        return res;\n    }\n\n    public boolean hasNext() {\n        return p != null || !stack.isEmpty();\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#230-k-mid","title":"230. \u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7b2c K \u5c0f\u7684\u5143\u7d20 mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6839\u8282\u70b9 root \uff0c\u548c\u4e00\u4e2a\u6574\u6570 k \uff0c\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u67e5\u627e\u5176\u4e2d\u7b2c k \u4e2a\u6700\u5c0f\u5143\u7d20\uff08\u4ece 1 \u5f00\u59cb\u8ba1\u6570\uff09\u3002</p> <p>\u89e3\u6cd5 1: \u8fed\u4ee3\u6cd5</p> <pre><code>class Solution {\n    // k \u4f5c\u4e3a\u8ba1\u6570\n    public int kthSmallest(TreeNode root, int k) {\n        Deque&lt;TreeNode&gt; stack = new LinkedList&lt;&gt;();\n        while (root != null || !stack.isEmpty()) {\n            // \u6808\u5e95-&gt; \u6808\u9876: root-&gt; leaf\n            while (root != null) {\n                stack.push(root);\n                root = root.left;\n            }\n            root = stack.pop();\n            if (--k == 0) break;\n            root = root.right;\n        }\n        return root.val;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2: \u9012\u5f52\u6cd5</p> <pre><code>class Solution {\n    int k;\n    TreeNode res = null;\n\n    public int kthSmallest(TreeNode root, int k) {\n        this.k = k;\n        search(root);\n        return res.val;\n    }\n\n    private void search(TreeNode root) {\n        if (root == null) return;\n        search(root.left);\n        if (res != null) return;\n        if (k == 1) {\n            res = root;\n            return;\n        }\n        k--;\n        search(root.right);\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#_9","title":"\u516c\u5171\u7956\u5148","text":""},{"location":"leetcode/new/%E6%A0%91/#235-mid","title":"235. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 mid","text":"<p>\u5251\u6307 Offer 68 - I. \u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002</p> <p>\u6ee1\u8db3\u5de6\u8fb9\u7684\u8282\u70b9\u5c0f\u4e8e\u7b49\u4e8e\u7956\u5148, \u53f3\u8fb9\u7684\u8282\u70b9\u5927\u4e8e\u7b49\u4e8e\u7956\u5148</p> <pre><code>class Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        if (q.val &lt; p.val) {\n            TreeNode t = p;\n            p = q;\n            q = t;\n        }\n        return find(root, p, q);\n    }\n\n    private TreeNode find(TreeNode root, TreeNode l, TreeNode r) {\n        if (r.val &lt; root.val) return find(root.left, l, r);\n        if (l.val &gt; root.val) return find(root.right, l, r);\n        return root;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E6%A0%91/#236-mid","title":"236. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148 mid","text":"<p>\u5251\u6307 Offer 68 - II. \u4e8c\u53c9\u6811\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811, \u627e\u5230\u8be5\u6811\u4e2d\u4e24\u4e2a\u6307\u5b9a\u8282\u70b9\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002</p> <p>\u603b\u4f53\u601d\u60f3\u5c31\u662f\u5de6\u53f3\u4e24\u8fb9\u627e, \u5982\u679c\u4e00\u5de6\u4e00\u53f3, \u90a3\u5c31\u662f\u6839\u8282\u70b9, \u6216\u8005\u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684\u5b50\u8282\u70b9</p> <p>\u89e3\u6cd5 1:</p> <p>\u53ea\u8981\u6ee1\u8db3: lson &amp;&amp; rson || (root.val == p.val || root.val == q.val) &amp;&amp; (lson || rson)</p> <pre><code>class Solution {\n    private TreeNode ans;\n\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        this.dfs(root, p, q);\n        return this.ans;\n    }\n\n    // \u53ea\u8981\u6709\u4e00\u4e2a\u5728\u6811\u4e2d\u5c31true\n    private boolean dfs(TreeNode root, TreeNode p, TreeNode q) {\n        if (root == null) return false;\n        // \u5de6\u5305\u542b\u4e00\u4e2a\u4ee5\u4e0a\n        boolean lson = dfs(root.left, p, q);\n        boolean rson = dfs(root.right, p, q);\n        // \u4e00\u4e2a\u5de6\u4e00\u4e2a\u53f3 || \u4e00\u4e2a\u662f\u53e6\u4e00\u4e2a\u7684\u5b50\u8282\u70b9\n        if ((lson &amp;&amp; rson) ||\n                (root.val == p.val || root.val == q.val) &amp;&amp; (lson || rson))\n            ans = root;\n        // \u53ea\u8981\u6709\u4e00\u4e2a\u5728\u6811\u4e2d\u5c31true\n        return lson || rson || (root.val == p.val || root.val == q.val);\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2:</p> <p>\u66f4\u7cbe\u5999\u4e00\u70b9, \u5de6\u53f3\u9012\u5f52, \u4ece\u53f6\u5230\u6839</p> <pre><code>class Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        // \u4e00\u4e2a\u4e5f\u6ca1\u627e\u5230 \u8fd4null\n        if (root == null || root == p || root == q) return root;\n        TreeNode left = lowestCommonAncestor(root.left, p, q);\n        TreeNode right = lowestCommonAncestor(root.right, p, q);\n        // \u5de6\u8fb9\u6ca1\u627e\u5230,\u53f3\u8fb9\u662f; \u53f3\u8fb9\u6ca1\u627e\u5230, \u5de6\u8fb9\u662f; \u90fd\u627e\u5230\u4e86root\u662f\n        return left == null\n                ? right : right == null\n                ? left\n                : root;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 3:</p> <p>\u7528 map \u8bb0\u5f55\u7236\u8282\u70b9</p>"},{"location":"leetcode/new/%E7%9F%A9%E9%98%B5/","title":"\u77e9\u9635","text":""},{"location":"leetcode/new/%E7%9F%A9%E9%98%B5/#_1","title":"\u65cb\u8f6c","text":""},{"location":"leetcode/new/%E7%9F%A9%E9%98%B5/#48-mid","title":"48. \u65cb\u8f6c\u56fe\u50cf mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a n \u00d7 n \u7684\u4e8c\u7ef4\u77e9\u9635 matrix \u8868\u793a\u4e00\u4e2a\u56fe\u50cf\u3002\u8bf7\u4f60\u5c06\u56fe\u50cf\u987a\u65f6\u9488\u65cb\u8f6c 90 \u5ea6\u3002</p> <p>\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u65cb\u8f6c\u56fe\u50cf\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u76f4\u63a5\u4fee\u6539\u8f93\u5165\u7684\u4e8c\u7ef4\u77e9\u9635\u3002\u8bf7\u4e0d\u8981 \u4f7f\u7528\u53e6\u4e00\u4e2a\u77e9\u9635\u6765\u65cb\u8f6c\u56fe\u50cf\u3002</p> <p>\u753b\u4e00\u4e2a <code>_|</code> \u770b\u770b\u600e\u4e48\u7ffb\u8f6c</p> <pre><code>class Solution {\n    public void rotate(int[][] matrix) {\n        int n = matrix.length;\n        // \u4e0a\u4e0b\u7ffb\u8f6c\n        for (int i = 0; i &lt; n / 2; ++i) {\n            for (int j = 0; j &lt; n; ++j) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[n - i - 1][j];\n                matrix[n - i - 1][j] = temp;\n            }\n        }\n        // y=x \u7ffb\u8f6c\n        for (int i = 0; i &lt; n; ++i) {\n            for (int j = 0; j &lt; i; ++j) {\n                int temp = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = temp;\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%9F%A9%E9%98%B5/#_2","title":"\u8f6c\u5708","text":""},{"location":"leetcode/new/%E7%9F%A9%E9%98%B5/#54-mid","title":"54. \u87ba\u65cb\u77e9\u9635 mid","text":"<p>\u5251\u6307 Offer 29. \u987a\u65f6\u9488\u6253\u5370\u77e9\u9635 easy</p> <p>\u8f93\u5165\u4e00\u4e2a\u77e9\u9635\uff0c\u6309\u7167\u4ece\u5916\u5411\u91cc\u4ee5\u987a\u65f6\u9488\u7684\u987a\u5e8f\u4f9d\u6b21\u6253\u5370\u51fa\u6bcf\u4e00\u4e2a\u6570\u5b57\u3002</p> <p>\u63a7\u5236\u597d 4 \u4e2a\u65b9\u5411\u7684\u8fb9\u754c</p> <pre><code>class Solution {\n    public List&lt;Integer&gt; spiralOrder(int[][] matrix) {\n        int m = matrix.length, n = matrix[0].length;\n        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();\n        int u = 0, d = m - 1, l = 0, r = n - 1;\n        while (true) {\n            for (int i = l; i &lt;= r; i++) res.add(matrix[u][i]);\n            if (++u &gt; d) break;\n            for (int i = u; i &lt;= d; i++) res.add(matrix[i][r]);\n            if (--r &lt; l) break;\n            for (int i = r; i &gt;= l; i--) res.add(matrix[d][i]);\n            if (--d &lt; u) break;\n            for (int i = d; i &gt;= u; i--) res.add(matrix[i][l]);\n            if (++l &gt; r) break;\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%9F%A9%E9%98%B5/#_3","title":"\u4fee\u6539","text":""},{"location":"leetcode/new/%E7%9F%A9%E9%98%B5/#73-mid","title":"73. \u77e9\u9635\u7f6e\u96f6 mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a m x n \u7684\u77e9\u9635\uff0c\u5982\u679c\u4e00\u4e2a\u5143\u7d20\u4e3a 0\uff0c\u5219\u5c06\u5176\u6240\u5728\u884c\u548c\u5217\u7684\u6240\u6709\u5143\u7d20\u90fd\u8bbe\u4e3a 0\u3002\u8bf7\u4f7f\u7528 \u539f\u5730 \u7b97\u6cd5\u3002</p> <p>\u89e3\u6cd5 1: 2 \u4e2a\u6570\u7ec4\u6807\u8bb0</p> <p>\u4e8c\u8fdb\u5236\u538b\u7f29</p> <pre><code>class Solution {\n    public void setZeroes(int[][] matrix) {\n        BitSet ir = new BitSet();\n        BitSet ic = new BitSet();\n        int r = matrix.length;\n        int c = matrix[0].length;\n        for (int i = 0; i &lt; r; i++) {\n            for (int j = 0; j &lt; c; j++) {\n                if (matrix[i][j] == 0) {\n                    ir.set(i);\n                    ic.set(j);\n                }\n            }\n        }\n        for (int i = 0; i &lt; r; i++) {\n            if (ir.get(i)) Arrays.fill(matrix[i], 0);\n        }\n        for (int j = 0; j &lt; c; j++) {\n            if (ic.get(j)) {\n                for (int i = 0; i &lt; r; i++) {\n                    matrix[i][j] = 0;\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2: 2 \u4e2a\u989d\u5916\u6807\u8bb0+\u6570\u7ec4\u81ea\u8eab\u6807\u8bb0</p> <pre><code>class Solution {\n    public void setZeroes(int[][] m) {\n        int r = m.length, c = m[0].length;\n        boolean flagCol0 = false, flagRow0 = false;\n\n        for (int i = 0; i &lt; r; i++) {\n            if (m[i][0] == 0) {\n                flagCol0 = true;\n                break;\n            }\n        }\n        for (int j = 0; j &lt; c; j++) {\n            if (m[0][j] == 0) {\n                flagRow0 = true;\n                break;\n            }\n        }\n        for (int i = 1; i &lt; r; i++) {\n            for (int j = 1; j &lt; c; j++) {\n                if (m[i][j] == 0) m[i][0] = m[0][j] = 0;\n            }\n        }\n        for (int i = 1; i &lt; r; i++) {\n            for (int j = 1; j &lt; c; j++) {\n                if (m[i][0] == 0 || m[0][j] == 0) m[i][j] = 0;\n            }\n        }\n        if (flagCol0) for (int i = 0; i &lt; r; i++) m[i][0] = 0;\n        if (flagRow0) for (int j = 0; j &lt; c; j++) m[0][j] = 0;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 3: 1 \u4e2a\u989d\u5916\u6807\u8bb0+\u6570\u7ec4\u81ea\u8eab\u6807\u8bb0</p> <p>\u7528 m[0][0] \u6807\u8bb0\u9996\u884c</p> <pre><code>class Solution {\n    public void setZeroes(int[][] m) {\n        int r = m.length, c = m[0].length;\n        // \u7b2c0\u5217\u542b0\u6807\u8bb0\n        boolean flagCol0 = false;\n        for (int i = 0; i &lt; r; i++) {\n            if (m[i][0] == 0) flagCol0 = true;\n            for (int j = 1; j &lt; c; j++) { // \u7b2c0\u5217\u672c\u8eab\u5c31\u662f\u6807\u8bb0\n                if (m[i][j] == 0) m[i][0] = m[0][j] = 0;\n            }\n        }\n        // \u9996\u884c\u9996\u5217\u8981\u6700\u540e\u66f4\u65b0\n        for (int i = r - 1; i &gt;= 0; i--) {\n            for (int j = 1; j &lt; c; j++) {\n                if (m[i][0] == 0 || m[0][j] == 0) m[i][j] = 0;\n            }\n            if (flagCol0) m[i][0] = 0;\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%9F%A9%E9%98%B5/#_4","title":"\u627e\u503c","text":""},{"location":"leetcode/new/%E7%9F%A9%E9%98%B5/#240-ii-mid","title":"240. \u641c\u7d22\u4e8c\u7ef4\u77e9\u9635 II mid","text":"<p>\u5251\u6307 Offer 04. \u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u67e5\u627e</p> <p>\u7f16\u5199\u4e00\u4e2a\u9ad8\u6548\u7684\u7b97\u6cd5\u6765\u641c\u7d22 m x n \u77e9\u9635 matrix \u4e2d\u7684\u4e00\u4e2a\u76ee\u6807\u503c target\u3002\u8be5\u77e9\u9635\u5177\u6709\u4ee5\u4e0b\u7279\u6027\uff1a</p> <ul> <li>\u6bcf\u884c\u7684\u5143\u7d20\u4ece\u5de6\u5230\u53f3\u5347\u5e8f\u6392\u5217\u3002</li> <li>\u6bcf\u5217\u7684\u5143\u7d20\u4ece\u4e0a\u5230\u4e0b\u5347\u5e8f\u6392\u5217\u3002</li> </ul> <pre><code>class Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int r = matrix.length, c = matrix[0].length;\n\n        int i = 0, j = c - 1;\n        while (i &lt; r &amp;&amp; j &gt;= 0) {\n            if (matrix[i][j] == target) return true;\n            else if (matrix[i][j] &lt; target) i++;\n            else j--;\n        }\n        return false;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%9F%A9%E9%98%B5/#_5","title":"\u9762\u79ef","text":""},{"location":"leetcode/new/%E7%9F%A9%E9%98%B5/#304-mid","title":"304. \u4e8c\u7ef4\u533a\u57df\u548c\u68c0\u7d22 - \u77e9\u9635\u4e0d\u53ef\u53d8 mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u77e9\u9635 matrix\uff0c\u4ee5\u4e0b\u7c7b\u578b\u7684\u591a\u4e2a\u8bf7\u6c42\uff1a</p> <ul> <li>\u8ba1\u7b97\u5176\u5b50\u77e9\u5f62\u8303\u56f4\u5185\u5143\u7d20\u7684\u603b\u548c\uff0c\u8be5\u5b50\u77e9\u9635\u7684 \u5de6\u4e0a\u89d2 \u4e3a (row1, col1) \uff0c\u53f3\u4e0b\u89d2 \u4e3a (row2, col2) \u3002</li> </ul> <p>\u5b9e\u73b0 NumMatrix \u7c7b\uff1a</p> <ul> <li>NumMatrix(int[][] matrix)\u7ed9\u5b9a\u6574\u6570\u77e9\u9635 matrix \u8fdb\u884c\u521d\u59cb\u5316</li> <li>sumRegion \u8fd4\u56de \u5de6\u4e0a\u89d2 (row1, col1)\u3001\u53f3\u4e0b\u89d2(row2, col2) \u6240\u63cf\u8ff0\u7684\u5b50\u77e9\u9635\u7684\u5143\u7d20 \u603b\u548c \u3002</li> </ul> <p>\u89e3\u6cd5 1: \u5355\u884c\u524d\u7f00\u548c</p> <pre><code>class NumMatrix {\n    int[][] arr;\n\n    public NumMatrix(int[][] matrix) {\n        int r = matrix.length, c = matrix[0].length;\n        arr = new int[r][c];\n        for (int i = 0; i &lt; r; i++) {\n            for (int j = 0; j &lt; c; j++) {\n                if (j == 0)\n                    arr[i][j] = matrix[i][j];\n                else\n                    arr[i][j] = arr[i][j - 1] + matrix[i][j];\n            }\n        }\n    }\n\n    public int sumRegion(int row1, int col1, int row2, int col2) {\n        int sum = 0;\n        for (int i = row1; i &lt;= row2; i++) {\n            if (col1 &gt; 0)\n                sum += arr[i][col2] - arr[i][col1 - 1];\n            else\n                sum += arr[i][col2];\n        }\n        return sum;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2: \u4e8c\u7ef4\u524d\u7f00\u548c</p> <pre><code>class NumMatrix {\n    private int[][] sum;\n\n    public NumMatrix(int[][] matrix) {\n        if (matrix.length == 0 || matrix[0].length == 0) return;\n        int r = matrix.length, c = matrix[0].length;\n        sum = new int[r + 1][c + 1];\n        for (int i = 0; i &lt; r; i++) {\n            int row = 0;\n            for (int j = 0; j &lt; c; j++) {\n                row += matrix[i][j];\n                sum[i + 1][j + 1] = sum[i][j + 1] + row;\n            }\n        }\n    }\n\n    public int sumRegion(int row1, int col1, int row2, int col2) {\n        return sum[row2 + 1][col2 + 1] + sum[row1][col1] - sum[row1][col2 + 1] - sum[row2 + 1][col1];\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%84%E5%90%88/","title":"\u7ec4\u5408","text":"<p>\u6c42\u6240\u6709\u53ef\u80fd\u6027\u7684\u5168\u96c6, \u4e00\u822c\u56de\u6eaf</p> <p>\u56de\u6eaf\u6709 2 \u79cd\u901a\u5e38\u7684\u505a\u6cd5:</p> <ul> <li>\u9012\u5f52\u4e2d\u904d\u5386\u9009\u62e9\u7b2c i \u4e2a\u5143\u7d20;</li> <li>\u5c06\u7b2c i \u4e2a\u5143\u7d20\u89c6\u4e3a\u9009\u62e9\u6216\u8005\u4e0d\u9009\u62e9\u8fdb\u884c\u9012\u5f52;</li> </ul>"},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#_2","title":"\u7ec4\u5408\u5168\u96c6","text":""},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#17-mid","title":"17. \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57 2-9 \u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5b83\u80fd\u8868\u793a\u7684\u5b57\u6bcd\u7ec4\u5408\u3002\u7b54\u6848\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u3002 Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.</p> <p>\u7ed9\u51fa\u6570\u5b57\u5230\u5b57\u6bcd\u7684\u6620\u5c04\u5982\u4e0b\uff08\u4e0e\u7535\u8bdd\u6309\u952e\u76f8\u540c\uff09\u3002\u6ce8\u610f 1 \u4e0d\u5bf9\u5e94\u4efb\u4f55\u5b57\u6bcd\u3002 A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p> <p>\u7ecf\u5178\u56de\u6eaf</p> <pre><code>public class Solution {\n    Map&lt;Character, String&gt; map = Map.of(\n            '2', \"abc\",\n            '3', \"def\",\n            '4', \"ghi\",\n            '5', \"jkl\",\n            '6', \"mno\",\n            '7', \"pqrs\",\n            '8', \"tuv\",\n            '9', \"wxyz\"\n    );\n\n    public List&lt;String&gt; letterCombinations(String digits) {\n        List&lt;String&gt; res = new ArrayList&lt;&gt;();\n        if (digits.isEmpty()) return res;\n        StringBuilder sb = new StringBuilder();\n        backtrace(res, sb, digits);\n        return res;\n    }\n\n    private void backtrace(List&lt;String&gt; res, StringBuilder sb, final String digits) {\n        if (sb.length() == digits.length()) {\n            res.add(sb.toString());\n            return;\n        }\n        int curIdx = sb.length();\n        String s = map.get(digits.charAt(curIdx));\n        for (char c : s.toCharArray()) {\n            sb.append(c);\n            backtrace(res, sb, digits);\n            sb.deleteCharAt(sb.length() - 1);\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#22-mid","title":"22. \u62ec\u53f7\u751f\u6210 mid","text":"<p>\u6570\u5b57 n \u4ee3\u8868\u751f\u6210\u62ec\u53f7\u7684\u5bf9\u6570\uff0c\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u80fd\u591f\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u5e76\u4e14 \u6709\u6548\u7684 \u62ec\u53f7\u7ec4\u5408\u3002 Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p> <p>\u56de\u6eaf, countdown \u8ba1\u6570\u6bd4\u8f83\u65b9\u4fbf</p> <pre><code>class Solution {\n    public List&lt;String&gt; generateParenthesis(int n) {\n        List&lt;String&gt; res = new ArrayList&lt;&gt;();\n        backtrack(n, n, new StringBuilder(), res);\n        return res;\n    }\n\n    private void backtrack(int n, int m, StringBuilder sb, List&lt;String&gt; res) {\n        if (n &gt; m) return;\n        if (n == 0 &amp;&amp; m == 0) {\n            res.add(sb.toString());\n            return;\n        }\n        // \u8bd5\u8bd5 \"(\"\n        if (n &gt; 0) {\n            sb.append('(');\n            backtrack(n - 1, m, sb, res);\n            sb.deleteCharAt(sb.length() - 1);\n        }\n        // \")\" \u80af\u5b9a\u8fd8\u5269, \u8bd5\u8bd5 \")\"\n        sb.append(')');\n        backtrack(n, m - 1, sb, res);\n        sb.deleteCharAt(sb.length() - 1);\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#39-mid","title":"39. \u7ec4\u5408\u603b\u548c mid","text":"<p>\u5251\u6307 Offer II 081. \u5141\u8bb8\u91cd\u590d\u9009\u62e9\u5143\u7d20\u7684\u7ec4\u5408</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u65e0\u91cd\u590d\u5143\u7d20\u7684\u6574\u6570\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6574\u6570 target\uff0c\u627e\u51fa candidates \u4e2d\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a\u76ee\u6807\u6570 target \u7684 \u6240\u6709\u4e0d\u540c\u7ec4\u5408\uff0c\u5e76\u4ee5\u5217\u8868\u5f62\u5f0f\u8fd4\u56de\u3002 \u4f60\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u8fd9\u4e9b\u7ec4\u5408\u3002</p> <p>candidates \u4e2d\u7684 \u540c\u4e00\u4e2a \u6570\u5b57\u53ef\u4ee5 \u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u3002\u5982\u679c\u81f3\u5c11\u4e00\u4e2a\u6570\u5b57\u7684\u88ab\u9009\u6570\u91cf\u4e0d\u540c\uff0c\u5219\u4e24\u79cd\u7ec4\u5408\u662f\u4e0d\u540c\u7684\u3002</p> <ul> <li>\u4e0d\u5305\u542b 0</li> </ul> <pre><code>class Solution {\n\n    public List&lt;List&lt;Integer&gt;&gt; combinationSum(int[] arr, int target) {\n        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\n        Arrays.sort(arr);\n        this.backtrack(res, arr, target, new LinkedList&lt;&gt;(), 0);\n        return res;\n    }\n\n    private void backtrack(List&lt;List&lt;Integer&gt;&gt; res, int[] arr, int target, Deque&lt;Integer&gt; list, int start) {\n        if (target == 0) {\n            res.add(new ArrayList&lt;&gt;(list));\n            return;\n        }\n        for (int i = start; i &lt; arr.length; i++) {\n            int e = arr[i];\n            if (target &lt; e) return;\n            list.addLast(e);\n            this.backtrack(res, arr, target - e, list, i);\n            list.removeLast();\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#40-ii-mid","title":"40. \u7ec4\u5408\u603b\u548c II mid","text":"<p>\u5251\u6307 Offer II 082. \u542b\u6709\u91cd\u590d\u5143\u7d20\u96c6\u5408\u7684\u7ec4\u5408</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u5019\u9009\u4eba\u7f16\u53f7\u7684\u96c6\u5408 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002</p> <p>candidates \u4e2d\u7684\u6bcf\u4e2a\u6570\u5b57\u5728\u6bcf\u4e2a\u7ec4\u5408\u4e2d\u53ea\u80fd\u4f7f\u7528 \u4e00\u6b21\u3002</p> <p>\u6ce8\u610f\uff1a\u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002</p> <p>\u4e00\u4e2a\u89e3\u4e2d\u53ef\u4ee5\u6709\u91cd\u590d\u6570\u5b57, \u4f46\u4e0d\u80fd\u6709\u4e24\u4e2a\u76f8\u540c\u7684\u89e3</p> <pre><code>class Solution {\n\n    public List&lt;List&lt;Integer&gt;&gt; combinationSum2(int[] arr, int target) {\n        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\n        Arrays.sort(arr);\n        this.backtrack(res, arr, new ArrayList&lt;&gt;(), 0, target);\n        return res;\n    }\n\n    private void backtrack(List&lt;List&lt;Integer&gt;&gt; res, int[] arr, List&lt;Integer&gt; list, int start, int target) {\n        if (target == 0) {\n            res.add(new ArrayList&lt;&gt;(list));\n            return;\n        }\n        for (int i = start; i &lt; arr.length; i++) {\n            if (target &lt; arr[i]) return;\n            // \u8d77\u59cb\u5143\u7d20\u53ea\u9009\u4e00\u6b21\n            if (i &gt; start &amp;&amp; arr[i] == arr[i - 1]) continue;\n            list.add(arr[i]);\n            backtrack(res, arr, list, i + 1, target - arr[i]);\n            list.removeLast();\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#77-mid","title":"77. \u7ec4\u5408 mid","text":"<p>\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570 n \u548c k\uff0c\u8fd4\u56de\u533a\u95f4\u8303\u56f4 [1, n] \u4e2d\u6240\u6709\u53ef\u80fd\u7684 k \u4e2a\u6570\u7684\u7ec4\u5408\u3002</p> <pre><code>class Solution {\n\n    public List&lt;List&lt;Integer&gt;&gt; combine(int n, int k) {\n        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\n        backtracking(res, new ArrayDeque&lt;&gt;(), 1, k, n);\n        return res;\n    }\n\n    private void backtracking(List&lt;List&lt;Integer&gt;&gt; res, Deque&lt;Integer&gt; ele, int start, int cnt, final int n) {\n        if (cnt == 0) {\n            res.add(new ArrayList&lt;&gt;(ele));\n            return;\n        }\n        // \u4ece [i, n] \u4e2d\u8981\u6709 cnt \u4e2a, \u6240\u4ee5 max(i) \u6ee1\u8db3: n-(i)+1 == cnt, \u5373 i = n-cnt+1\n        for (int i = start; i &lt;= n - cnt + 1; i++) {\n            ele.add(i);\n            backtracking(res, ele, i + 1, cnt - 1, n);\n            ele.removeLast();\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#216-iii-mid","title":"216. \u7ec4\u5408\u603b\u548c III mid","text":"<p>\u627e\u51fa\u6240\u6709\u76f8\u52a0\u4e4b\u548c\u4e3a n \u7684 k \u4e2a\u6570\u7684\u7ec4\u5408\uff0c\u4e14\u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6\uff1a</p> <ul> <li>\u53ea\u4f7f\u7528\u6570\u5b57 1 \u5230 9</li> <li>\u6bcf\u4e2a\u6570\u5b57 \u6700\u591a\u4f7f\u7528\u4e00\u6b21</li> </ul> <p>\u8fd4\u56de \u6240\u6709\u53ef\u80fd\u7684\u6709\u6548\u7ec4\u5408\u7684\u5217\u8868\u3002\u8be5\u5217\u8868\u4e0d\u80fd\u5305\u542b\u76f8\u540c\u7684\u7ec4\u5408\u4e24\u6b21\uff0c\u7ec4\u5408\u53ef\u4ee5\u4ee5\u4efb\u4f55\u987a\u5e8f\u8fd4\u56de\u3002</p> <pre><code>class Solution {\n    List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\n    List&lt;Integer&gt; elements = new ArrayList&lt;&gt;();\n\n    public List&lt;List&lt;Integer&gt;&gt; combinationSum3(int k, int n) {\n        backtrack(k, 1, n);\n        return res;\n    }\n\n    // k \u51e0\u4e2a\u6570\u5012\u6570\n    // start \u9012\u5f52\u4e2d\u7684\u8d77\u59cb\u4f4d\n    // target \u9012\u5f52\u4e2d\u7684\u76ee\u6807\u503c\n    private void backtrack(int k, int start, int target) {\n        if (target &lt; 0) return;\n        if (k == 0 &amp;&amp; target == 0) {\n            res.add(new ArrayList&lt;&gt;(elements));\n            return;\n        }\n        for (int i = start; i &lt; 10; i++) {\n            elements.add(i);\n            backtrack(k - 1, i + 1, target - i);\n            elements.remove(elements.size() - 1);\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#_3","title":"\u5168\u6392\u5217","text":""},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#46-mid","title":"46. \u5168\u6392\u5217 mid","text":"<p>\u5251\u6307 Offer II 083. \u6ca1\u6709\u91cd\u590d\u5143\u7d20\u96c6\u5408\u7684\u5168\u6392\u5217</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u4e0d\u542b\u91cd\u590d\u6570\u5b57\u7684\u6570\u7ec4 nums\uff0c\u8fd4\u56de\u5176\u6240\u6709\u53ef\u80fd\u7684\u5168\u6392\u5217\u3002\u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002</p> <p>\u901a\u8fc7\u4ea4\u6362\u5143\u7d20\u4f4d\u7f6e\u8fdb\u884c\u56de\u6eaf \u65f6\u95f4\u590d\u6742\u5ea6: \u6bcf\u6b21\u9012\u5f52 $n!$ \u8fdb\u884c $n$ \u6b21\u9012\u5f52; $O(n) = n*n!$</p> <pre><code>class Solution {\n    private final List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\n\n    public List&lt;List&lt;Integer&gt;&gt; permute(int[] nums) {\n        Integer[] arr = IntStream.of(nums).boxed().toArray(Integer[]::new);\n        backtrack(arr, 0);\n        return res;\n    }\n\n    private void backtrack(Integer[] arr, int start) {\n        if (start == arr.length) {\n            res.add(List.of(arr));\n            return;\n        }\n        for (int i = start; i &lt; arr.length; i++) {\n            swap(arr, start, i);\n            backtrack(arr, start + 1);\n            swap(arr, start, i);\n        }\n    }\n\n    private void swap(Integer[] arr, int i, int j) {\n        int t = arr[i];\n        arr[i] = arr[j];\n        arr[j] = t;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#47-ii-mid","title":"47. \u5168\u6392\u5217 II mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u53ef\u5305\u542b\u91cd\u590d\u6570\u5b57\u7684\u5e8f\u5217 nums\uff0c\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u6240\u6709\u4e0d\u91cd\u590d\u7684\u5168\u6392\u5217\u3002</p> <p>\u89e3\u6cd5 1 \u4ea4\u6362\u6cd5</p> <p>\u4ea4\u6362\u6cd5\u5728\u4ea4\u6362\u8fc7\u7a0b\u4e2d\u4f1a\u4e71\u5e8f, \u6392\u5e8f\u7136\u540e\u6bd4\u8f83\u524d\u4e00\u4e2a\u7684\u53bb\u91cd\u4e0d\u9002\u7528</p> <pre><code>class Solution {\n    private final List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\n\n    public List&lt;List&lt;Integer&gt;&gt; permuteUnique(int[] nums) {\n        Integer[] arr = IntStream.of(nums).boxed().toArray(Integer[]::new);\n        backtrack(arr, 0);\n        return res;\n    }\n\n    private void backtrack(Integer[] arr, int start) {\n        if (arr.length == start) {\n            res.add(List.of(arr));\n            return;\n        }\n        // \u540c\u4e00\u5c42\u6b21\u9009\u62e9\u5217\u8868\u4e2d\u53ea\u9009\u4e00\u6b21\n        Set&lt;Integer&gt; set = new HashSet&lt;&gt;();\n        for (int i = start; i &lt; arr.length; i++) {\n            if (set.contains(arr[i])) continue;\n            set.add(arr[i]);\n            swap(arr, i, start);\n            backtrack(arr, start + 1);\n            swap(arr, i, start);\n        }\n    }\n\n    private void swap(Integer[] arr, int i, int j) {\n        int t = arr[i];\n        arr[i] = arr[j];\n        arr[j] = t;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2 \u679a\u4e3e\u6cd5</p> <p>\u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u4ece\u5269\u4f59\u5217\u8868\u91cc\u9762\u904d\u5386, \u9700\u8981\u5148\u6392\u5e8f; \u8bb0\u5f55\u524d\u4e00\u4e2a\u76f8\u540c\u5143\u7d20\u6709\u6ca1\u6709\u88ab\u9009\u62e9, \u9009\u62e9\u4e86\u624d\u80fd\u9009\u8fd9\u4e00\u4e2a</p> <pre><code>class Solution {\n    private boolean[] visit;\n    private int[] nums;\n    private List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\n\n    public List&lt;List&lt;Integer&gt;&gt; permuteUnique(int[] nums) {\n        visit = new boolean[nums.length];\n        this.nums = nums;\n        Arrays.sort(this.nums);\n        backtrace(0, new Integer[nums.length]);\n        return res;\n    }\n\n    private void backtrace(int idx, Integer[] output) {\n        if (idx == nums.length) {\n            res.add(List.of(output));\n            return;\n        }\n        for (int i = 0; i &lt; nums.length; i++) {\n            if (visit[i]) continue;\n            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; !visit[i - 1]) continue;\n            output[idx] = nums[i];\n            visit[i] = true;\n            backtrace(idx + 1, output);\n            visit[i] = false;\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#_4","title":"\u5168\u90e8\u5b50\u96c6","text":""},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#78-mid","title":"78. \u5b50\u96c6 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u6570\u7ec4\u4e2d\u7684\u5143\u7d20 \u4e92\u4e0d\u76f8\u540c\u3002\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002</p> <p>\u89e3\u96c6 \u4e0d\u80fd \u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002\u4f60\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u89e3\u96c6\u3002</p> <pre><code>class Solution {\n    public List&lt;List&lt;Integer&gt;&gt; subsets(int[] nums) {\n        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\n        List&lt;Integer&gt; ele = new ArrayList&lt;&gt;();\n        res.add(ele);// \u7a7a\u96c6\n        for (int i = 1; i &lt;= nums.length; i++) {\n            ele.clear();\n            backtrack(res, ele, nums, 0, i);\n        }\n        return res;\n    }\n\n    private void backtrack(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; ele, int[] nums, int idx, int cnt) {\n        if (cnt == 0) {\n            res.add(new ArrayList&lt;&gt;(ele));\n            return;\n        }\n        // \u4ece [i, n-1] \u4e2d\u8981\u6709 cnt \u4e2a, \u6240\u4ee5 max(i) \u6ee1\u8db3: n-1-(i)+1 == cnt, \u5373 i = n-cnt\n        for (int i = idx; i &lt;= nums.length - cnt; i++) {\n            ele.add(nums[i]);\n            backtrack(res, ele, nums, i + 1, cnt - 1);\n            ele.removeLast();\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#90-ii-mid","title":"90. \u5b50\u96c6 II mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u5176\u4e2d\u53ef\u80fd\u5305\u542b\u91cd\u590d\u5143\u7d20\uff0c\u8bf7\u4f60\u8fd4\u56de\u8be5\u6570\u7ec4\u6240\u6709\u53ef\u80fd\u7684\u5b50\u96c6\uff08\u5e42\u96c6\uff09\u3002</p> <p>\u89e3\u96c6 \u4e0d\u80fd \u5305\u542b\u91cd\u590d\u7684\u5b50\u96c6\u3002\u8fd4\u56de\u7684\u89e3\u96c6\u4e2d\uff0c\u5b50\u96c6\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u6392\u5217\u3002</p> <p>\u4e0d\u5305\u542b\u91cd\u590d\u7684\u610f\u601d\u662f, \u91cd\u590d\u6570\u91cf\u4e0d\u540c\u53ef\u4ee5\u7b97\u4e0d\u540c\u5b50\u96c6, \u91cd\u590d\u6570\u91cf\u76f8\u540c\u4e0d\u884c</p> <p>\u89e3\u6cd5 1 \u9012\u5f52\u4e2d\u5faa\u73af</p> <pre><code>class Solution {\n\n    boolean[] visit;\n\n    public List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(int[] nums) {\n        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\n        List&lt;Integer&gt; ele = new ArrayList&lt;&gt;();\n        res.add(ele);\n        Arrays.sort(nums);\n        visit = new boolean[nums.length];\n        for (int i = 1; i &lt;= nums.length; i++) {\n            ele.clear();\n            backtrack(res, ele, nums, 0, i);\n        }\n        return res;\n    }\n\n    private void backtrack(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; ele, int[] nums, int idx, int cnt) {\n        if (cnt == 0) {\n            res.add(new ArrayList&lt;&gt;(ele));\n            return;\n        }\n        // \u4ece [i, n-1] \u4e2d\u8981\u6709 cnt \u4e2a, \u6240\u4ee5 max(i) \u6ee1\u8db3: n-1-(i)+1 == cnt, \u5373 i = n-cnt\n        for (int i = idx; i &lt; nums.length + 1 - cnt; i++) {\n            if (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; !visit[i - 1]) continue;\n            ele.add(nums[i]);\n            visit[i] = true;\n            backtrack(res, ele, nums, i + 1, cnt - 1);\n            visit[i] = false;\n            ele.removeLast();\n        }\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2 \u9012\u5f52\u4e2d\u5206\u7c7b</p> <pre><code>class Solution {\n\n    public List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(int[] nums) {\n        List&lt;Integer&gt; ele = new ArrayList&lt;&gt;();\n        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\n        Arrays.sort(nums);\n        dfs(res, ele, 0, nums);\n        return res;\n    }\n\n    public void dfs(List&lt;List&lt;Integer&gt;&gt; res, List&lt;Integer&gt; ele, int i, int[] nums) {\n        if (i == nums.length) {\n            res.add(new ArrayList&lt;&gt;(ele));\n            return;\n        }\n        ele.add(nums[i]);\n        dfs(res, ele, i + 1, nums);\n        ele.removeLast();\n\n        // \u4e0d\u9009\u5c31\u8df3\u8fc7\u540e\u9762\u4e00\u6837\u7684\u6570\n        while (i + 1 &lt; nums.length &amp;&amp; nums[i + 1] == nums[i]) i++;\n        dfs(res, ele, i + 1, nums);\n\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#_5","title":"\u5206\u5272","text":""},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#93-ip-mid","title":"93. \u590d\u539f IP \u5730\u5740 mid","text":"<p>\u6709\u6548 IP \u5730\u5740 \u6b63\u597d\u7531\u56db\u4e2a\u6574\u6570\uff08\u6bcf\u4e2a\u6574\u6570\u4f4d\u4e8e 0 \u5230 255 \u4e4b\u95f4\u7ec4\u6210\uff0c\u4e14\u4e0d\u80fd\u542b\u6709\u524d\u5bfc 0\uff09\uff0c\u6574\u6570\u4e4b\u95f4\u7528 '.' \u5206\u9694\u3002</p> <ul> <li>\u4f8b\u5982\uff1a\"0.1.2.201\" \u548c \"192.168.1.1\" \u662f \u6709\u6548 IP \u5730\u5740\uff0c\u4f46\u662f \"0.011.255.245\"\u3001\"192.168.1.312\" \u548c \"192.168@1.1\" \u662f \u65e0\u6548 IP \u5730\u5740\u3002</li> </ul> <p>\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u542b\u6570\u5b57\u7684\u5b57\u7b26\u4e32 s \uff0c\u7528\u4ee5\u8868\u793a\u4e00\u4e2a IP \u5730\u5740\uff0c\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7684\u6709\u6548 IP \u5730\u5740\uff0c\u8fd9\u4e9b\u5730\u5740\u53ef\u4ee5\u901a\u8fc7\u5728 s \u4e2d\u63d2\u5165 '.' \u6765\u5f62\u6210\u3002\u4f60 \u4e0d\u80fd \u91cd\u65b0\u6392\u5e8f\u6216\u5220\u9664 s \u4e2d\u7684\u4efb\u4f55\u6570\u5b57\u3002\u4f60\u53ef\u4ee5\u6309 \u4efb\u4f55 \u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002</p> <p>\u7528 '.' \u5206\u9694, \u7ec8\u6b62\u6761\u4ef6 cnt('.')=3</p> <p>\u89e3\u6cd5 1: \u5206\u9694</p> <pre><code>class Solution {\n    public List&lt;String&gt; restoreIpAddresses(String s) {\n        List&lt;String&gt; res = new ArrayList&lt;&gt;();\n        backtrack(res, s, new StringBuilder(), 3, 0);\n        return res;\n    }\n\n    /**\n     * \u4e00\u90e8\u5206\u6307\u5411\u539f\u5b57\u7b26\u4e32s, \u4e00\u90e8\u5206\u5904\u7406\u65b0\u5b57\u7b26\u4e32sb\n     *\n     * @param cnt   '.'\u5269\u4f59\u6570\u91cf\n     * @param start \u4e00\u6bb5\u7684\u8d77\u59cb\u4f4d\u7f6e\n     */\n    private void backtrack(List&lt;String&gt; res, String s, StringBuilder sb, int cnt, int start) {\n        if (cnt == 0) {\n            String tail = s.substring(start);\n            if (valid(tail)) res.add(sb.append(tail).toString());\n            return;\n        }\n        // i:\u5b50\u6bb5\u7684\u957f\u5ea6\n        for (int i = 1; i &lt;= 3 &amp;&amp; start + i &lt;= s.length(); i++) {\n            String sub = s.substring(start, start + i);\n            if (!valid(sub)) continue;\n            int sbStart = sb.length();\n            sb.append(sub).append(\".\");\n            backtrack(res, s, sb, cnt - 1, start + i);\n            sb.delete(sbStart, sb.length());\n        }\n    }\n\n    private boolean valid(String s) {\n        int n = s.length();\n        if (n == 0 || n &gt; 3) return false;\n        int num = Integer.parseInt(s);\n        return switch (n) {\n            case 1 -&gt; true;\n            case 2 -&gt; num &gt;= 10;\n            case 3 -&gt; num &gt;= 100 &amp;&amp; num &lt;= 255;\n            default -&gt; false;\n        };\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#131-mid","title":"131. \u5206\u5272\u56de\u6587\u4e32 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u8bf7\u4f60\u5c06 s \u5206\u5272\u6210\u4e00\u4e9b\u5b50\u4e32\uff0c\u4f7f\u6bcf\u4e2a\u5b50\u4e32\u90fd\u662f \u56de\u6587\u4e32\u3002\u8fd4\u56de s \u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u65b9\u6848\u3002</p> <p>\u56de\u6587\u4e32 \u662f\u6b63\u7740\u8bfb\u548c\u53cd\u7740\u8bfb\u90fd\u4e00\u6837\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u9884\u5904\u7406\u5224\u65ad [i,j] \u80fd\u4e0d\u80fd\u5206\u5272 \u4ece\u5934\u5230\u5c3e, \u5faa\u73af\u5c1d\u8bd5\u5206\u5272, \u9012\u5f52\u5206\u5272\u4e0b\u4e00\u4e2a\u5b57\u4e32</p> <pre><code>class Solution {\n    List&lt;List&lt;String&gt;&gt; res = new ArrayList&lt;&gt;();\n    List&lt;String&gt; ele = new ArrayList&lt;&gt;();\n    boolean[][] f;\n\n    public List&lt;List&lt;String&gt;&gt; partition(String s) {\n        int n = s.length();\n        f = new boolean[n][n];\n\n        for (int i = n - 1; i &gt;= 0; i--) {\n            f[i][i] = true;\n            for (int j = i + 1; j &lt; n; j++) {\n                boolean equal = s.charAt(i) == s.charAt(j);\n                if (j - i == 1) f[i][j] = equal;\n                else f[i][j] = equal &amp;&amp; f[i + 1][j - 1];\n            }\n        }\n        backtrack(0, s);\n        return res;\n    }\n\n    private void backtrack(int start, String s) {\n        if (start == s.length()) {\n            res.add(new ArrayList&lt;&gt;(ele));\n            return;\n        }\n        for (int i = start; i &lt; s.length(); i++) {\n            if (f[start][i]) {\n                ele.add(s.substring(start, i + 1));\n                backtrack(i + 1, s);\n                ele.removeLast();\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#140-ii-hard","title":"140. \u5355\u8bcd\u62c6\u5206 II hard","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5b57\u5178 wordDict\uff0c\u5728\u5b57\u7b26\u4e32 s \u4e2d\u589e\u52a0\u7a7a\u683c\u6765\u6784\u5efa\u4e00\u4e2a\u53e5\u5b50\uff0c\u4f7f\u5f97\u53e5\u5b50\u4e2d\u6240\u6709\u7684\u5355\u8bcd\u90fd\u5728\u8bcd\u5178\u4e2d\u3002\u4ee5\u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u6240\u6709\u8fd9\u4e9b\u53ef\u80fd\u7684\u53e5\u5b50\u3002</p> <p>\u6ce8\u610f\uff1a\u8bcd\u5178\u4e2d\u7684\u540c\u4e00\u4e2a\u5355\u8bcd\u53ef\u80fd\u5728\u5206\u6bb5\u4e2d\u88ab\u91cd\u590d\u4f7f\u7528\u591a\u6b21\u3002</p> <p>\u89e3\u6cd5 DFS</p> <p>\u5339\u914d\u5230\u7b2c 1 \u4e2a\u540e\u9012\u5f52\u4e0b\u4e00\u4e2a \u526a\u679d, \u9700\u8981\u8bb0\u5fc6\u5316\u4e0d\u53ef\u884c\u7684\u8def\u7ebf substring \u592a\u6162, startWith \u5feb</p> <pre><code>class Solution {\n    public List&lt;String&gt; wordBreak(String s, List&lt;String&gt; wordDict) {\n        List&lt;String&gt; res = new ArrayList&lt;&gt;();\n        boolean[] memo = new boolean[s.length() + 1];\n        Arrays.fill(memo, true); // \u4e50\u89c2\n        dfs(s, wordDict, new ArrayList&lt;&gt;(), res, 0, memo);\n        return res;\n    }\n\n    private boolean dfs(String s, List&lt;String&gt; wordDict,\n                        List&lt;String&gt; list, List&lt;String&gt; res,\n                        int start, boolean[] memo) {\n        if (start == s.length()) {\n            StringBuilder sb = new StringBuilder();\n            for (String e : list) {\n                sb.append(e).append(' ');\n            }\n            res.add(sb.toString().trim());\n            return true;\n        }\n        if (!memo[start]) return memo[start];\n        boolean ok = false;\n        for (String word : wordDict) {\n            if (s.startsWith(word, start)) {\n                list.add(word);\n                if (dfs(s, wordDict, list, res, start + word.length(), memo)) ok = true;\n                list.removeLast();\n            }\n        }\n        memo[start] = ok;\n        return ok;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#_6","title":"\u6240\u6709\u8def\u5f84","text":""},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#241-mid","title":"241. \u4e3a\u8fd0\u7b97\u8868\u8fbe\u5f0f\u8bbe\u8ba1\u4f18\u5148\u7ea7 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u7531\u6570\u5b57\u548c\u8fd0\u7b97\u7b26\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 expression \uff0c\u6309\u4e0d\u540c\u4f18\u5148\u7ea7\u7ec4\u5408\u6570\u5b57\u548c\u8fd0\u7b97\u7b26\uff0c\u8ba1\u7b97\u5e76\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7ec4\u5408\u7684\u7ed3\u679c\u3002\u4f60\u53ef\u4ee5 \u6309\u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u7b54\u6848\u3002 expression \u7531\u6570\u5b57\u548c\u7b97\u7b26 '+'\u3001'-' \u548c '*' \u7ec4\u6210\u3002</p> <p>\u64cd\u4f5c\u7b26\u5de6\u53f3\u5206\u6cbb, \u5982\u679c\u53ea\u6709\u6570\u5b57, \u8fd4\u56de\u6570\u5b57; \u5982\u679c\u6709\u64cd\u4f5c\u7b26, \u5de6\u53f3\u7684\u7ed3\u679c\u7b1b\u5361\u5c14\u79ef</p> <pre><code>class Solution {\n    public List&lt;Integer&gt; diffWaysToCompute(String expression) {\n        List&lt;Integer&gt; res = new ArrayList&lt;&gt;();\n\n        for (int i = 0; i &lt; expression.length(); i++) {\n            char c = expression.charAt(i);\n            if (c == '+' || c == '-' || c == '*') {\n                List&lt;Integer&gt; left = diffWaysToCompute(expression.substring(0, i));\n                List&lt;Integer&gt; right = diffWaysToCompute(expression.substring(i + 1));\n                // \u7b1b\u5361\u5c14\u79ef\n                for (int l : left) {\n                    for (int r : right) {\n                        switch (c) {\n                            case '+':\n                                res.add(l + r);\n                                break;\n\n                            case '-':\n                                res.add(l - r);\n                                break;\n\n                            case '*':\n                                res.add(l * r);\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        // \u53ea\u6709\u6570\u5b57\n        if (res.size() == 0) res.add(Integer.valueOf(expression));\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#257-easy","title":"257. \u4e8c\u53c9\u6811\u7684\u6240\u6709\u8def\u5f84 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 root\uff0c\u6309\u4efb\u610f\u987a\u5e8f\uff0c\u8fd4\u56de\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u3002 \u53f6\u5b50\u8282\u70b9 \u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002 \u8f93\u5165\uff1aroot = [1,2,3,null,5] \u8f93\u51fa\uff1a[\"1-&gt;2-&gt;5\",\"1-&gt;3\"]</p> <pre><code>class Solution {\n    private List&lt;String&gt; res = new ArrayList&lt;&gt;();\n\n    public List&lt;String&gt; binaryTreePaths(TreeNode root) {\n        StringBuilder sb = new StringBuilder();\n        backtrace(sb, root);\n        return res;\n    }\n\n    private void backtrace(StringBuilder sb, TreeNode n) {\n        int len = sb.length();\n\n        if (sb.length() != 0) sb.append(\"-&gt;\");\n        sb.append(n.val);\n\n        if (n.left == null &amp;&amp; n.right == null) {\n            res.add(sb.toString());\n            return;\n        }\n\n        if (n.left != null) {\n            int len1 = sb.length();\n            backtrace(sb, n.left);\n            // \u6062\u590d1\n            sb.delete(len1, sb.length());\n        }\n        if (n.right != null)\n            backtrace(sb, n.right);\n\n        // \u6062\u590d2\n        sb.delete(len, sb.length());\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#_7","title":"\u7ec4\u5408\u662f\u5426\u6210\u7acb","text":"<p>\u57fa\u672c\u4e0a\u5c31\u662f\u56de\u6eaf\u5904\u7406, \u6709\u65f6\u5019\u9012\u5f52</p>"},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#37-hard","title":"37. \u89e3\u6570\u72ec hard","text":"<p>\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u901a\u8fc7\u586b\u5145\u7a7a\u683c\u6765\u89e3\u51b3\u6570\u72ec\u95ee\u9898\u3002</p> <p>\u6570\u72ec\u7684\u89e3\u6cd5\u9700 \u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a</p> <ol> <li>\u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002</li> <li>\u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002</li> <li>\u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684 3x3 \u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002\uff08\u8bf7\u53c2\u8003\u793a\u4f8b\u56fe\uff09</li> </ol> <p>\u6570\u72ec\u90e8\u5206\u7a7a\u683c\u5185\u5df2\u586b\u5165\u4e86\u6570\u5b57\uff0c\u7a7a\u767d\u683c\u7528 '.'\u8868\u793a\u3002</p> <p>\u89e3\u6570\u72ec\u6700\u5feb\u7684\u662f\u821e\u8e48\u94fe\u7b97\u6cd5; \u56de\u6eaf\u53ef\u4ee5\u7528\u72b6\u6001\u538b\u7f29; \u56de\u6eaf\u53ef\u4ee5\u7528\u9012\u5f52</p> <pre><code>class Solution {\n    public void solveSudoku(char[][] board) {\n        this.solveSudokuHelper(board);\n    }\n\n    private boolean solveSudokuHelper(char[][] board) {\n        for (int i = 0; i &lt; 9; i++) {\n            for (int j = 0; j &lt; 9; j++) {\n                if (board[i][j] != '.') continue;\n                for (char k = '1'; k &lt;= '9'; k++) {\n                    // \u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u62ff 0-9 \u8bd5\u4e00\u8bd5\n                    if (this.isValidSudoku(i, j, k, board)) {\n                        board[i][j] = k;\n                        // \u9012\u5f52\n                        if (this.solveSudokuHelper(board)) return true;\n                        board[i][j] = '.';\n                    }\n                }\n                // \u586b\u4e0d\u4e86\n                return false;\n            }\n        }\n        // \u586b\u6ee1\u4e86\n        return true;\n    }\n\n    private boolean isValidSudoku(int row, int col, char val, char[][] board) {\n        for (int i = 0; i &lt; 9; i++) {\n            if (board[row][i] == val) return false;\n        }\n        for (int i = 0; i &lt; 9; i++) {\n            if (board[i][col] == val) return false;\n        }\n        // 9\u5bab\u683c\u91cc\u662f\u5426\u91cd\u590d\n        int startRow = (row / 3) * 3;\n        int startCol = (col / 3) * 3;\n        for (int i = startRow; i &lt; startRow + 3; i++) {\n            for (int j = startCol; j &lt; startCol + 3; j++) {\n                if (board[i][j] == val) return false;\n            }\n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%84%E5%90%88/#301-hard","title":"301. \u5220\u9664\u65e0\u6548\u7684\u62ec\u53f7 hard","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u7531\u82e5\u5e72\u62ec\u53f7\u548c\u5b57\u6bcd\u7ec4\u6210\u7684\u5b57\u7b26\u4e32 s\uff0c\u5220\u9664\u6700\u5c0f\u6570\u91cf\u7684\u65e0\u6548\u62ec\u53f7\uff0c\u4f7f\u5f97\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u6709\u6548\u3002</p> <p>\u8fd4\u56de\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\u3002\u7b54\u6848\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u3002</p> <p>\u89e3\u6cd5 1: \u56de\u6eaf</p> <p>\u5148\u5206\u522b\u7edf\u8ba1\u9700\u8981\u5220\u51cf\u7684\u5de6\u53f3\u62ec\u53f7\u6570\u91cf, \u6839\u636e\u8fd9\u4e24\u4e2a\u6570\u91cf\u5c1d\u8bd5\u5220\u9664\u4e14\u56de\u6eaf</p> <pre><code>class Solution {\n    private List&lt;String&gt; res = new ArrayList&lt;&gt;();\n\n    public List&lt;String&gt; removeInvalidParentheses(String s) {\n        int lremove = 0;\n        int rremove = 0;\n        for (int i = 0; i &lt; s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                lremove++;\n            } else if (s.charAt(i) == ')') {\n                if (lremove == 0) rremove++;\n                else lremove--;\n            }\n        }\n        backtrace(s, 0, lremove, rremove);\n        return res;\n    }\n\n    // \u9700\u8981\u65b0\u7684\u5b50\u4e32 \u8d77\u59cb\u4f4d\u7f6e\n    private void backtrace(String s, int start, int lremove, int rremove) {\n        if (lremove == 0 &amp;&amp; rremove == 0) {\n            if (isValid(s)) res.add(s);\n            return;\n        }\n        for (int i = start; i &lt; s.length(); i++) {\n            // \u91cd\u590d\u7684\u8df3\u8fc7\n            if (i &gt; start &amp;&amp; s.charAt(i) == s.charAt(i - 1)) continue;\n            // \u4e0d\u80fd\u5220\u9664 \u526a\u679d\n            if (lremove + rremove &gt; s.length() - i) return;\n            // \u5c1d\u8bd5\u5220\u9664\n            if (lremove &gt; 0 &amp;&amp; s.charAt(i) == '(')\n                backtrace(s.substring(0, i) + s.substring(i + 1), i, lremove - 1, rremove);\n            else if (rremove &gt; 0 &amp;&amp; s.charAt(i) == ')')\n                backtrace(s.substring(0, i) + s.substring(i + 1), i, lremove, rremove - 1);\n        }\n    }\n\n    private boolean isValid(String s) {\n        int cnt = 0;\n        for (int i = 0; i &lt; s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                cnt++;\n            } else if (s.charAt(i) == ')') {\n                cnt--;\n                if (cnt &lt; 0) return false;\n            }\n        }\n        return cnt == 0;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2: BFS \u672a\u8bfb</p> <p>\u679a\u4e3e\u5220\u9664\u6bcf\u4e2a\u5143\u7d20\u4f5c\u4e3a\u4e00\u6b65</p> <pre><code>class Solution {\n    public List&lt;String&gt; removeInvalidParentheses(String s) {\n        List&lt;String&gt; res = new ArrayList&lt;&gt;();\n        Set&lt;String&gt; currSet = new HashSet&lt;&gt;();\n        currSet.add(s);\n        while (true) {\n            for (String str : currSet) {\n                if (isValid(str)) res.add(str);\n            }\n            if (!res.isEmpty()) return res;\n            Set&lt;String&gt; nextSet = new HashSet&lt;&gt;();\n            for (String str : currSet) {\n                for (int i = 0; i &lt; str.length(); i++) {\n                    if (i &gt; 0 &amp;&amp; str.charAt(i) == str.charAt(i - 1))\n                        continue;\n                    if (str.charAt(i) == '(' || str.charAt(i) == ')')\n                        nextSet.add(str.substring(0, i) + str.substring(i + 1));\n                }\n            }\n            currSet = nextSet;\n        }\n    }\n\n    private boolean isValid(String s) {\n        int cnt = 0;\n        for (char c : s.toCharArray()) {\n            if (c == '(') {\n                cnt++;\n            } else if (c == ')') {\n                cnt--;\n                if (cnt &lt; 0) return false;\n            }\n        }\n        return cnt == 0;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%93%E6%9E%84/","title":"\u7ed3\u6784","text":""},{"location":"leetcode/new/%E7%BB%93%E6%9E%84/#lru","title":"LRU","text":""},{"location":"leetcode/new/%E7%BB%93%E6%9E%84/#146-lru","title":"146. LRU \u7f13\u5b58","text":"<p>\u8bf7\u4f60\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e00\u4e2a\u6ee1\u8db3 LRU (\u6700\u8fd1\u6700\u5c11\u4f7f\u7528) \u7f13\u5b58 \u7ea6\u675f\u7684\u6570\u636e\u7ed3\u6784\u3002 \u5b9e\u73b0 LRUCache \u7c7b\uff1a</p> <ul> <li>LRUCache(int capacity) \u4ee5 \u6b63\u6574\u6570 \u4f5c\u4e3a\u5bb9\u91cf capacity \u521d\u59cb\u5316 LRU \u7f13\u5b58</li> <li>int get(int key) \u5982\u679c\u5173\u952e\u5b57 key \u5b58\u5728\u4e8e\u7f13\u5b58\u4e2d\uff0c\u5219\u8fd4\u56de\u5173\u952e\u5b57\u7684\u503c\uff0c\u5426\u5219\u8fd4\u56de -1 \u3002</li> <li>void put(int key, int value)\u5982\u679c\u5173\u952e\u5b57 key \u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u53d8\u66f4\u5176\u6570\u636e\u503c value \uff1b\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u5411\u7f13\u5b58\u4e2d\u63d2\u5165\u8be5\u7ec4 key-value \u3002\u5982\u679c\u63d2\u5165\u64cd\u4f5c\u5bfc\u81f4\u5173\u952e\u5b57\u6570\u91cf\u8d85\u8fc7 capacity \uff0c\u5219\u5e94\u8be5 \u9010\u51fa \u6700\u4e45\u672a\u4f7f\u7528\u7684\u5173\u952e\u5b57\u3002</li> </ul> <p>\u51fd\u6570 get \u548c put \u5fc5\u987b\u4ee5 O(1) \u7684\u5e73\u5747\u65f6\u95f4\u590d\u6742\u5ea6\u8fd0\u884c\u3002</p> <p>\u89e3\u6cd5 1: \u624b\u5199</p> <pre><code>class LRUCache {\n\n    private final Map&lt;Integer, Node&gt; map = new HashMap&lt;&gt;();\n    private final int capacity;\n    private final Node first, last;\n\n\n    private static class Node {\n        int key;\n        int value;\n        Node pre;\n        Node next;\n\n        public Node() {\n        }\n\n        public Node(int key, int value) {\n            this.key = key;\n            this.value = value;\n        }\n    }\n\n\n    public LRUCache(int capacity) {\n        this.capacity = capacity;\n        // \u4f7f\u7528\u4f2a\u5934\u90e8\u548c\u4f2a\u5c3e\u90e8\u8282\u70b9\n        first = new Node();\n        last = new Node();\n        first.next = last;\n        last.pre = first;\n    }\n\n    public int get(int key) {\n        Node node = map.get(key);\n        if (node == null) return -1;\n        moveToHead(node);\n        return node.value;\n    }\n\n    public void put(int key, int value) {\n        Node node = map.get(key);\n        if (node != null) {\n            node.value = value;\n            moveToHead(node);\n        } else {\n            Node newNode = new Node(key, value);\n            addToHead(newNode);\n            if (map.size() == capacity) {\n                Node tail = removeTail();\n                map.remove(tail.key);\n            }\n            map.put(key, newNode);\n        }\n    }\n\n    private void moveToHead(Node node) {\n        removeNode(node);\n        addToHead(node);\n    }\n\n    private void addToHead(Node node) {\n        Node lastNext = first.pre;\n        first.next = node;\n        node.pre = first;\n        node.next = lastNext;\n        lastNext.pre = node;\n    }\n\n    private Node removeTail() {\n        Node res = last.pre;\n        removeNode(res);\n        return res;\n    }\n\n    private void removeNode(Node node) {\n        node.pre.next = node.next;\n        node.next.pre = node.pre;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2: API</p> <pre><code>class LRUCache extends LinkedHashMap&lt;Integer, Integer&gt; {\n    private final int capacity;\n\n    public LRUCache(int capacity) {\n        super(capacity, 0.75F, true);\n        this.capacity = capacity;\n    }\n\n    public int get(int key) {\n        return getOrDefault(key, -1);\n    }\n\n    public void put(int key, int value) {\n        super.put(key, value);\n    }\n\n    // \u6761\u4ef6\n    @Override\n    protected boolean removeEldestEntry(Map.Entry&lt;Integer, Integer&gt; eldest) {\n        return size() &gt; capacity;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%93%E6%9E%84/#_1","title":"\u6700\u5c0f\u6808","text":""},{"location":"leetcode/new/%E7%BB%93%E6%9E%84/#155-mid","title":"155. \u6700\u5c0f\u6808 mid","text":"<p>\u5251\u6307 Offer 30. \u5305\u542b min \u51fd\u6570\u7684\u6808</p> <p>\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301 push \uff0cpop \uff0ctop \u64cd\u4f5c\uff0c\u5e76\u80fd\u5728\u5e38\u6570\u65f6\u95f4\u5185\u68c0\u7d22\u5230\u6700\u5c0f\u5143\u7d20\u7684\u6808\u3002</p> <p>\u5b9e\u73b0 MinStack \u7c7b:</p> <ul> <li>MinStack() \u521d\u59cb\u5316\u5806\u6808\u5bf9\u8c61\u3002</li> <li>void push(int val) \u5c06\u5143\u7d20 val \u63a8\u5165\u5806\u6808\u3002</li> <li>void pop() \u5220\u9664\u5806\u6808\u9876\u90e8\u7684\u5143\u7d20\u3002</li> <li>int top() \u83b7\u53d6\u5806\u6808\u9876\u90e8\u7684\u5143\u7d20\u3002</li> <li>int getMin() \u83b7\u53d6\u5806\u6808\u4e2d\u7684\u6700\u5c0f\u5143\u7d20\u3002</li> </ul> <p>\u89e3\u6cd5 1: \u53cc\u6808</p> <pre><code>class MinStack {\n    Deque&lt;Integer&gt; xStack;\n    // \u91cc\u9762\u653e\u7684\u662f\u6700\u5c0f\n    Deque&lt;Integer&gt; minStack;\n\n    public MinStack() {\n        xStack = new LinkedList&lt;&gt;();\n        minStack = new LinkedList&lt;&gt;();\n    }\n\n    public void push(int x) {\n        xStack.push(x);\n        int e;\n        if (minStack.isEmpty())\n            e = x;\n        else\n            e = Math.min(minStack.element(), x);\n        minStack.push(e);\n    }\n\n    public void pop() {\n        xStack.pop();\n        minStack.pop();\n    }\n\n    public int top() {\n        return xStack.element();\n    }\n\n    public int getMin() {\n        return minStack.element();\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2: \u4fdd\u5b58\u5dee\u503c\u6cd5</p> <pre><code>/*\n    stack \u6c38\u8fdc\u4fdd\u5b58 e-min\n    \u5148 push \u518d\u66f4\u65b0 min\n*/\nclass MinStack {\n    private final Deque&lt;Long&gt; que = new LinkedList&lt;&gt;();\n    int min;\n\n    /*\n    \u5165\u6808:\n    e = x - oldmin\n    if e&lt;0:\n        newmin = x\n    */\n    public void push(int val) {\n        if (que.isEmpty()) min = val;\n        long e = (long) val - min;\n        // \u5148 push, \u518d\u66f4\u65b0 min\n        que.push(e);\n        if (val &lt; min) min = val;\n    }\n\n    /*\n    \u51fa\u6808:\n    if e&lt;0:\n        min = oldmin = x - e = newmin - e\n    */\n    public void pop() {\n        if (que.isEmpty()) return;\n        long e = que.pop();\n        // \u5f39\u51fa\u7684\u662f\u8d1f\u503c\uff0c\u8981\u66f4\u65b0 min\n        if (e &lt; 0) min = (int) (min - e);\n    }\n\n    public int top() {\n        long e = que.element();\n        if (e &lt; 0) return min;\n        else return (int) (min + e);\n    }\n\n    public int getMin() {\n        return min;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%93%E6%9E%84/#_2","title":"\u7528\u961f\u5217\u5b9e\u73b0\u6808","text":"<p>\u5c31\u662f\u628a\u65b0\u7684\u5143\u7d20\u653e\u5230\u961f\u9996, \u53ef\u4ee5\u7528\u4e24\u4e2a\u961f\u5217, \u4e5f\u53ef\u4ee5\u7528 1 \u4e2a\u961f\u5217 2 \u4e2a\u961f\u5217\u5c31\u662f\u65b0\u7684\u5143\u7d20\u5165\u961f, \u7136\u540e\u518d\u628a\u975e\u7a7a\u961f\u5217\u5165\u961f, \u6700\u540e\u4ea4\u6362\u961f\u5217 1 \u4e2a\u961f\u5217\u5c31\u662f\u65b0\u5143\u7d20\u653e\u8fdb\u53bb\u540e, \u4e4b\u524d\u7684\u51fa\u961f\u518d\u5165\u961f</p>"},{"location":"leetcode/new/%E7%BB%93%E6%9E%84/#225-easy","title":"225. \u7528\u961f\u5217\u5b9e\u73b0\u6808 easy","text":"<p>\u8bf7\u4f60\u4ec5\u4f7f\u7528\u4e24\u4e2a\u961f\u5217\u5b9e\u73b0\u4e00\u4e2a\u540e\u5165\u5148\u51fa\uff08LIFO\uff09\u7684\u6808\uff0c\u5e76\u652f\u6301\u666e\u901a\u6808\u7684\u5168\u90e8\u56db\u79cd\u64cd\u4f5c\uff08push\u3001top\u3001pop \u548c empty\uff09</p> <p>\u5b9e\u73b0 MyStack \u7c7b\uff1a</p> <ul> <li>void push(int x) \u5c06\u5143\u7d20 x \u538b\u5165\u6808\u9876\u3002</li> <li>int pop() \u79fb\u9664\u5e76\u8fd4\u56de\u6808\u9876\u5143\u7d20\u3002</li> <li>int top() \u8fd4\u56de\u6808\u9876\u5143\u7d20\u3002</li> <li>boolean empty() \u5982\u679c\u6808\u662f\u7a7a\u7684\uff0c\u8fd4\u56de true\uff1b\u5426\u5219\uff0c\u8fd4\u56de false\u3002</li> </ul> <pre><code>class MyStack {\n    private Queue&lt;Integer&gt; que = new LinkedList&lt;&gt;();\n\n    public void push(int x) {\n        int size = que.size();\n        que.add(x);\n        for (int i = 0; i &lt; size; i++) {\n            que.add(que.remove());\n        }\n    }\n\n    public int pop() {\n        return que.remove();\n    }\n\n    public int top() {\n        return que.element();\n    }\n\n    public boolean empty() {\n        return que.isEmpty();\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%93%E6%9E%84/#_3","title":"\u7528\u6808\u5b9e\u73b0\u961f\u5217","text":"<p>in \u662f\u9006\u5e8f, out \u662f\u518d\u9006\u5e8f. out \u7a7a\u4e86\u628a in \u653e\u8fdb out</p>"},{"location":"leetcode/new/%E7%BB%93%E6%9E%84/#232-easy","title":"232. \u7528\u6808\u5b9e\u73b0\u961f\u5217 easy","text":"<p>\u5251\u6307 Offer 09. \u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u961f\u5217</p> <p>\u8bf7\u4f60\u4ec5\u4f7f\u7528\u4e24\u4e2a\u6808\u5b9e\u73b0\u5148\u5165\u5148\u51fa\u961f\u5217\u3002\u961f\u5217\u5e94\u5f53\u652f\u6301\u4e00\u822c\u961f\u5217\u652f\u6301\u7684\u6240\u6709\u64cd\u4f5c\uff08push\u3001pop\u3001peek\u3001empty\uff09\uff1a</p> <p>\u5b9e\u73b0 MyQueue \u7c7b\uff1a</p> <ul> <li>void push(int x) \u5c06\u5143\u7d20 x \u63a8\u5230\u961f\u5217\u7684\u672b\u5c3e</li> <li>int pop() \u4ece\u961f\u5217\u7684\u5f00\u5934\u79fb\u9664\u5e76\u8fd4\u56de\u5143\u7d20</li> <li>int peek() \u8fd4\u56de\u961f\u5217\u5f00\u5934\u7684\u5143\u7d20</li> <li>boolean empty() \u5982\u679c\u961f\u5217\u4e3a\u7a7a\uff0c\u8fd4\u56de true \uff1b\u5426\u5219\uff0c\u8fd4\u56de false</li> </ul> <p>\u8bf4\u660e\uff1a</p> <ul> <li>\u4f60 \u53ea\u80fd \u4f7f\u7528\u6807\u51c6\u7684\u6808\u64cd\u4f5c \u2014\u2014 \u4e5f\u5c31\u662f\u53ea\u6709 push to top, peek/pop from top, size, \u548c is empty \u64cd\u4f5c\u662f\u5408\u6cd5\u7684\u3002</li> <li>\u4f60\u6240\u4f7f\u7528\u7684\u8bed\u8a00\u4e5f\u8bb8\u4e0d\u652f\u6301\u6808\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 list \u6216\u8005 deque\uff08\u53cc\u7aef\u961f\u5217\uff09\u6765\u6a21\u62df\u4e00\u4e2a\u6808\uff0c\u53ea\u8981\u662f\u6807\u51c6\u7684\u6808\u64cd\u4f5c\u5373\u53ef\u3002</li> </ul> <pre><code>class MyQueue {\n\n    private Deque&lt;Integer&gt; in = new LinkedList&lt;&gt;();\n    private Deque&lt;Integer&gt; out = new LinkedList&lt;&gt;();\n\n    public void push(int x) {\n        in.push(x);\n    }\n\n    public int pop() {\n        if (out.isEmpty()) in2out();\n        return out.pop();\n    }\n\n    public int peek() {\n        if (out.isEmpty()) in2out();\n        return out.element();\n    }\n\n    public boolean empty() {\n        return in.isEmpty() &amp;&amp; out.isEmpty();\n    }\n\n    private void in2out() {\n        while (!in.isEmpty()) {\n            out.push(in.pop());\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E7%BB%93%E6%9E%84/#_4","title":"\u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570","text":""},{"location":"leetcode/new/%E7%BB%93%E6%9E%84/#295-hard","title":"295. \u6570\u636e\u6d41\u7684\u4e2d\u4f4d\u6570 hard","text":"<p>\u5251\u6307 Offer 41. \u6570\u636e\u6d41\u4e2d\u7684\u4e2d\u4f4d\u6570</p> <p>\u4e2d\u4f4d\u6570\u662f\u6709\u5e8f\u5217\u8868\u4e2d\u95f4\u7684\u6570\u3002\u5982\u679c\u5217\u8868\u957f\u5ea6\u662f\u5076\u6570\uff0c\u4e2d\u4f4d\u6570\u5219\u662f\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\u3002</p> <p>\u4f8b\u5982\uff0c</p> <p>[2,3,4]\u7684\u4e2d\u4f4d\u6570\u662f 3</p> <p>[2,3] \u7684\u4e2d\u4f4d\u6570\u662f (2 + 3) / 2 = 2.5</p> <p>\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301\u4ee5\u4e0b\u4e24\u79cd\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\uff1a</p> <ul> <li>void addNum(int num) - \u4ece\u6570\u636e\u6d41\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u6574\u6570\u5230\u6570\u636e\u7ed3\u6784\u4e2d\u3002</li> <li>double findMedian() - \u8fd4\u56de\u76ee\u524d\u6240\u6709\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\u3002</li> </ul> <p>\u89e3\u6cd5 1: \u4e8c\u5206\u67e5\u627e\u7ef4\u62a4\u6709\u5e8f\u6570\u7ec4</p> <pre><code>class MedianFinder {\n    private final List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n\n    public void addNum(int num) {\n        if (list.size() == 0) {\n            list.add(num);\n            return;\n        }\n        int idx = biSearch(num);\n        if (idx == list.size())\n            list.add(num);\n        else\n            list.add(idx, num);\n    }\n\n    public double findMedian() {\n        int len = list.size() - 1;\n        if (len % 2 == 0)\n            return list.get(len / 2);\n        else\n            return (list.get(len / 2) + list.get(len / 2 + 1)) / 2.0;\n    }\n\n    private int biSearch(int target) {\n        // \u5927\u4e8e target \u7684\u5de6\u8fb9\u754c\n        int l = 0, h = list.size();\n        while (l &lt; h) {\n            int m = l + (h - l &gt;&gt; 1);\n            if (list.get(m) &lt;= target) l = m + 1;\n            else h = m;\n        }\n        return l;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2: \u4e24\u4e2a\u5806</p> <pre><code>class MedianFinder {\n    // 1 2 3  4 5\n    private final PriorityQueue&lt;Integer&gt; heap1 = new PriorityQueue&lt;&gt;((a, b) -&gt; b - a);\n    private final PriorityQueue&lt;Integer&gt; heap2 = new PriorityQueue&lt;&gt;();\n\n    public double findMedian() {\n        if (heap1.size() &gt; heap2.size())\n            return heap1.element();\n        else\n            return (heap1.element() + heap2.element()) / 2.0;\n    }\n\n    // \u4e8c\u5206\u7684\u7b2c1\u79cd\u65b9\u6cd5 \u6bd4\u8f83\u597d\u60f3\n    public void addNum(int num) {\n        if (heap1.isEmpty() || num &lt;= heap1.element())\n            heap1.add(num);\n        else\n            heap2.add(num);\n        adjust();\n    }\n\n    private void adjust() {\n        while (heap2.size() &gt; heap1.size()) {\n            heap1.add(heap2.remove());\n        }\n        while (heap1.size() - heap2.size() &gt; 1) {\n            heap2.add(heap1.remove());\n        }\n    }\n\n    // \u4e8c\u5206\u7684\u7b2c2\u79cd\u65b9\u6cd5 \u66f4\u7cbe\u5999\n    public void addNum2(int num) {\n        // \u957f\u5ea6\u4e3a\u5947\u6570\u65f6\u5148\u653e\u5165heap1,\u8fc7\u4e00\u4e0b\u540e\u653e\u5165heap2\n        if (heap1.size() != heap2.size()) {\n            heap1.add(num);\n            heap2.add(heap1.remove());\n        }\n        // \u957f\u5ea6\u4e3a\u5076\u6570\u65f6\u5148\u653e\u5165heap2,\u8fc7\u4e00\u4e0b\u540e\u653e\u5165heap1\n        else {\n            heap2.add(num);\n            heap1.add(heap2.remove());\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/","title":"\u94fe\u8868","text":"<p>\u94fe\u8868\u5e38\u7528\u865a\u62df\u5934\u8282\u70b9:</p> <pre><code>ListNode zero = new ListNode();\nreturn zero.next;\n</code></pre>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#_2","title":"\u5f52\u5e76","text":""},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#2-mid","title":"2. \u4e24\u6570\u76f8\u52a0 mid","text":"<p>\u7ed9\u4f60\u4e24\u4e2a \u975e\u7a7a \u7684\u94fe\u8868\uff0c\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5b83\u4eec\u6bcf\u4f4d\u6570\u5b57\u90fd\u662f\u6309\u7167 \u9006\u5e8f \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \u4e00\u4f4d \u6570\u5b57\u3002 You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit.</p> <p>\u8bf7\u4f60\u5c06\u4e24\u4e2a\u6570\u76f8\u52a0\uff0c\u5e76\u4ee5\u76f8\u540c\u5f62\u5f0f\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u548c\u7684\u94fe\u8868\u3002 Add the two numbers and return the sum as a linked list.</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002 You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p> JavaGo <pre><code>class Solution {\n    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n        ListNode zero = new ListNode();\n        ListNode p = zero;\n        int carry = 0;\n        while (l1 != null || l2 != null || carry &gt; 0) {\n            int a = 0, b = 0;\n            if (l1 != null) {\n                a = l1.val;\n                l1 = l1.next;\n            }\n            if (l2 != null) {\n                b = l2.val;\n                l2 = l2.next;\n            }\n            int sum = a + b + carry;\n            carry = sum / 10;\n            p = p.next = new ListNode(sum % 10);\n        }\n        return zero.next;\n    }\n}\n</code></pre> <pre><code>func addTwoNumbers(l1 *ListNode, l2 *ListNode) *ListNode {\n    carry := 0\n    zero := ListNode{}\n    p := &amp;zero\n    for ; l1 != nil || l2 != nil || carry != 0; p = p.Next {\n        a, b := 0, 0\n        if l1 != nil {\n            a = l1.Val\n            l1 = l1.Next\n        }\n        if l2 != nil {\n            b = l2.Val\n            l2 = l2.Next\n        }\n        sum := a + b + carry\n        p.Next = &amp;ListNode{Val: (a + b + carry) % 10}\n        carry = sum / 10\n    }\n    return zero.Next\n}\n</code></pre>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#21-easy","title":"21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 easy","text":"<p>\u5251\u6307 Offer 25. \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u7684\u94fe\u8868</p> <p>\u5c06\u4e24\u4e2a\u5347\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684 \u5347\u5e8f \u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002 You are given the heads of two sorted linked lists list1 and list2. Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.</p> <p>\u89e3\u6cd5 1 \u8fed\u4ee3</p> <pre><code>class Solution {\n    public ListNode mergeTwoLists(ListNode n1, ListNode n2) {\n        if (n1 == null) return n2;\n        if (n2 == null) return n1;\n\n        ListNode zero = new ListNode();\n        ListNode curr = zero;\n\n        while (true) {\n            if (n1 == null) {\n                curr.next = n2;\n                break;\n            }\n            if (n2 == null) {\n                curr.next = n1;\n                break;\n            }\n\n            if (n1.val &lt;= n2.val) {\n                curr.next = n1;\n                n1 = n1.next;\n            } else {\n                curr.next = n2;\n                n2 = n2.next;\n            }\n\n            curr = curr.next;\n        }\n\n        return zero.next;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2 \u9012\u5f52</p> <p>\u4e24\u4e2a\u94fe\u8868\u5934\u90e8\u503c\u8f83\u5c0f\u7684\u4e00\u4e2a\u8282\u70b9\u7684 next = merge \u5269\u4e0b\u5143\u7d20\u7684\u7ed3\u679c</p> <pre><code>class Solution {\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        if (l1 == null) return l2;\n        if (l2 == null) return l1;\n        if (l1.val &lt; l2.val) {\n            l1.next = mergeTwoLists(l1.next, l2);\n            return l1;\n        } else {\n            l2.next = mergeTwoLists(l2.next, l1);\n            return l2;\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#23-k-hard","title":"23. \u5408\u5e76 K \u4e2a\u5347\u5e8f\u94fe\u8868 hard","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u6570\u7ec4\uff0c\u6bcf\u4e2a\u94fe\u8868\u90fd\u5df2\u7ecf\u6309\u5347\u5e8f\u6392\u5217\u3002 You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.</p> <p>\u8bf7\u4f60\u5c06\u6240\u6709\u94fe\u8868\u5408\u5e76\u5230\u4e00\u4e2a\u5347\u5e8f\u94fe\u8868\u4e2d\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u94fe\u8868\u3002 Merge all the linked-lists into one sorted linked-list and return it.</p> <p>\u987a\u5e8f\u5408\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(n*k^2)$, \u56e0\u4e3a\u7b2c i \u6b21\u5408\u5e76\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(i * n)$, \u5171\u5408\u5e76 k-1 \u6b21;</p> <p>\u89e3\u6cd5 1 \u4f18\u5148\u961f\u5217</p> <p>\u627e\u4e00\u6a2a\u622a\u9762\u4e2d\u7684\u6700\u5c0f\u503c $O(nk*logk)$, \u6240\u6709\u8282\u70b9\u6570\u91cf nk, \u5806\u5927\u5c0f\u4e3a k</p> <pre><code>class Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        PriorityQueue&lt;ListNode&gt; queue = new PriorityQueue&lt;&gt;(Comparator.comparingInt(a -&gt; a.val));\n\n        for (ListNode node : lists) {\n            if (node != null) queue.add(node);\n        }\n\n        ListNode zero = new ListNode();\n        ListNode p = zero;\n        while (!queue.isEmpty()) {\n            ListNode min = queue.remove();\n            p.next = min;\n            p = p.next;\n            if (min.next != null) {\n                queue.add(min.next);\n            }\n        }\n        return zero.next;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2 \u5f52\u5e76</p> <p>\u5f52\u5e76 \u65f6\u95f4\u590d\u6742\u5ea6 $O(nk*logk)$, \u56e0\u4e3a\u6bcf\u4e00\u5c42\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a \u5408\u5e76\u6b21\u6570\u4e58\u5408\u5e76\u5f00\u9500, \u6700\u4e0b\u5c42\u53f6\u5b50\u8282\u70b9\u5408\u5e76\u6b21\u6570=k/2, \u5408\u5e76\u5f00\u9500=2n, \u6bcf\u4e00\u5c42\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5176\u5b9e\u662f\u76f8\u540c\u7684;</p> <pre><code>class Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        if (lists.length == 0) return null;\n        return merge(lists, 0, lists.length - 1);\n    }\n\n    public ListNode merge(ListNode[] lists, int l, int r) {\n        if (l == r) return lists[l];\n        int mid = l + (r - l &gt;&gt; 1);\n        return mergeTwoLists(merge(lists, l, mid), merge(lists, mid + 1, r));\n    }\n\n    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {\n        if (l1 == null) return l2;\n        if (l2 == null) return l1;\n        if (l1.val &lt; l2.val) {\n            l1.next = mergeTwoLists(l1.next, l2);\n            return l1;\n        } else {\n            l2.next = mergeTwoLists(l2.next, l1);\n            return l2;\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#_3","title":"\u5220\u9664\u8282\u70b9","text":"<p>\u5220\u9664\u5c31\u662f\u627e\u5230\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9, \u5220\u6389\u8282\u70b9</p>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#19-n-mid","title":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c N \u4e2a\u7ed3\u70b9 mid","text":"<p>\u5251\u6307 Offer 22. \u94fe\u8868\u4e2d\u5012\u6570\u7b2c k \u4e2a\u8282\u70b9 \u5251\u6307 Offer II 021. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u7ed3\u70b9</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u7ed3\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 Given the head of a linked list, remove the nth node from the end of the list and return its head.</p> <p>\u89e3\u6cd5 \u672c\u9898\u6709\u591a\u79cd\u89e3\u6cd5:</p> <ul> <li>\u53ef\u4ee5\u76f4\u63a5\u6c42\u5f97\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\u7684\u7d22\u5f15(L-n+1);</li> <li>\u53ef\u4ee5\u7528\u6808, pop \u7b2c n \u4e2a\u65f6, \u5220\u6389;</li> <li>\u53ef\u4ee5\u53cc\u6307\u9488;</li> </ul> <p>\u53cc\u6307\u9488\u7684\u95f4\u9694\u662f\u56fa\u5b9a\u7684, \u53ef\u4ee5\u6839\u636e\u4e00\u4e2a\u6307\u9488\u7684\u7ed3\u675f\u6761\u4ef6\u5b9a\u4f4d\u5230\u53e6\u4e00\u4e2a\u7684\u4f4d\u7f6e; \u8fd9\u91cc\u9700\u8981\u5173\u6ce8 2 \u4e2a\u70b9: \u5f53\u5feb\u6307\u9488\u7b2c\u4e00\u6b21\u505c\u6b62\u7684\u65f6\u5019, \u505c\u5728\u54ea; \u5f53\u7ed3\u675f\u7684\u65f6\u5019, \u5feb\u6307\u9488\u505c\u5728\u54ea; \u7ed3\u675f\u7684\u65f6\u5019, \u6162\u6307\u9488\u505c\u5728\u5012\u6570\u7b2c n+1 \u4f4d, \u5feb\u6307\u9488\u505c\u5728\u7b2c 0 \u4f4d(null)</p> <pre><code>class Solution {\n    public ListNode removeNthFromEnd(ListNode head, int n) {\n        ListNode zero = new ListNode();\n        zero.next = head;\n        ListNode n1 = zero;\n        // \u5feb\u6307\u9488\u505c\u5728\u7b2cn+1\u4f4d, \u6162\u6307\u9488\u505c\u5728\u7b2c0\u4f4d\n        for (int i = 0; i &lt;= n; i++) {\n            n1 = n1.next;\n        }\n        ListNode n2 = zero;\n        // \u5feb\u6307\u9488\u505c\u5728\u7b2c0\u4f4d, \u6162\u6307\u9488\u505c\u5728\u7b2cn+1\u4f4d\n        while (n1 != null) {\n            n1 = n1.next;\n            n2 = n2.next;\n        }\n        n2.next = n2.next.next;\n        return zero.next;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#83-mid","title":"83. \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5df2\u6392\u5e8f\u7684\u94fe\u8868\u7684\u5934 head\uff0c \u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21 \u3002\u8fd4\u56de \u5df2\u6392\u5e8f\u7684\u94fe\u8868 \u3002</p> <p>\u591a\u4e2a\u91cd\u590d\u7684\u591a\u6b21\u5220\u9664</p> <pre><code>class Solution {\n    public ListNode deleteDuplicates(ListNode head) {\n        ListNode cur = head;\n        while (cur != null &amp;&amp; cur.next != null) {\n            if (cur.val == cur.next.val) cur.next = cur.next.next;\n            else cur = cur.next;\n        }\n        return head;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#203-easy","title":"203. \u79fb\u9664\u94fe\u8868\u5143\u7d20 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 head \u548c\u4e00\u4e2a\u6574\u6570 val \uff0c\u8bf7\u4f60\u5220\u9664\u94fe\u8868\u4e2d\u6240\u6709\u6ee1\u8db3 Node.val == val \u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de \u65b0\u7684\u5934\u8282\u70b9\u3002</p> <pre><code>class Solution {\n    public ListNode removeElements(ListNode head, int val) {\n        ListNode zero = new ListNode();\n        zero.next = head;\n        ListNode p = zero;\n        while (p.next != null) {\n            if (p.next.val == val) p.next = p.next.next;\n            else p = p.next;\n        }\n        return zero.next;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#237-mid","title":"237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9 mid","text":"<p>\u6709\u4e00\u4e2a\u5355\u94fe\u8868\u7684 head\uff0c\u6211\u4eec\u60f3\u5220\u9664\u5b83\u5176\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9 node\u3002</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u9700\u8981\u5220\u9664\u7684\u8282\u70b9 node \u3002\u4f60\u5c06 \u65e0\u6cd5\u8bbf\u95ee \u7b2c\u4e00\u4e2a\u8282\u70b9 head\u3002</p> <p>\u94fe\u8868\u7684\u6240\u6709\u503c\u90fd\u662f \u552f\u4e00\u7684\uff0c\u5e76\u4e14\u4fdd\u8bc1\u7ed9\u5b9a\u7684\u8282\u70b9 node \u4e0d\u662f\u94fe\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u3002</p> <p>\u5220\u9664\u7ed9\u5b9a\u7684\u8282\u70b9\u3002\u6ce8\u610f\uff0c\u5220\u9664\u8282\u70b9\u5e76\u4e0d\u662f\u6307\u4ece\u5185\u5b58\u4e2d\u5220\u9664\u5b83\u3002\u8fd9\u91cc\u7684\u610f\u601d\u662f\uff1a</p> <ul> <li>\u7ed9\u5b9a\u8282\u70b9\u7684\u503c\u4e0d\u5e94\u8be5\u5b58\u5728\u4e8e\u94fe\u8868\u4e2d\u3002</li> <li>\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u6570\u5e94\u8be5\u51cf\u5c11 1\u3002</li> <li>node \u524d\u9762\u7684\u6240\u6709\u503c\u987a\u5e8f\u76f8\u540c\u3002</li> <li>node \u540e\u9762\u7684\u6240\u6709\u503c\u987a\u5e8f\u76f8\u540c\u3002</li> </ul> <pre><code>class Solution {\n    public void deleteNode(ListNode node) {\n        // \u6709\u75c5\n        node.val = node.next.val;\n        node.next = node.next.next;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#_4","title":"\u91cd\u6392","text":"<p>\u5206\u6790\u4e00\u4e0b\u6bcf\u6b21\u64cd\u4f5c\u7684\u5173\u7cfb\u5373\u53ef \u8bbe\u7f6e\u591a\u4e2a temp \u6307\u9488\u4f1a\u6bd4\u8f83\u65b9\u4fbf</p>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#24-mid","title":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u94fe\u8868\u7684\u5934\u8282\u70b9\u3002\u4f60\u5fc5\u987b\u5728\u4e0d\u4fee\u6539\u8282\u70b9\u5185\u90e8\u7684\u503c\u7684\u60c5\u51b5\u4e0b\u5b8c\u6210\u672c\u9898\uff08\u5373\uff0c\u53ea\u80fd\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\uff09\u3002 Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)</p> <p>\u89e3\u6cd5 1 \u8fed\u4ee3</p> <pre><code>class Solution {\n    public ListNode swapPairs(ListNode p) {\n        ListNode zero = new ListNode();\n        zero.next = p;\n        ListNode n0 = zero;\n        // p \u662f\u8fed\u4ee3\u8fc7\u7a0b\u4e2d\u7684\u5b9a\u4f4d\u6307\u9488\n        while (p != null &amp;&amp; p.next != null) {\n            ListNode n1 = p;\n            ListNode n2 = p.next;\n            ListNode n3 = p.next.next;\n            n0.next = n2;\n            n1.next = n3;\n            n2.next = n1;\n\n            n0 = n1;\n            p = n3;\n        }\n        return zero.next;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2 \u9012\u5f52</p> <p>\u4ece\u6700\u5934\u90e8\u7684 2 \u5bf9\u5f00\u59cb\u9012\u5f52</p> <pre><code>class Solution {\n    public ListNode swapPairs(ListNode head) {\n        if (head == null || head.next == null) return head;\n        ListNode newHead = head.next;\n        head.next = this.swapPairs(newHead.next);\n        newHead.next = head;\n        return newHead;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#143-mid","title":"143. \u91cd\u6392\u94fe\u8868 mid","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u5355\u94fe\u8868 L \u7684\u5934\u8282\u70b9 head\uff0c\u5355\u94fe\u8868 L \u8868\u793a\u4e3a\uff1a</p> <p>0, 1, ... n-1, n</p> <p>\u8bf7\u5c06\u5176\u91cd\u65b0\u6392\u5217\u540e\u53d8\u4e3a\uff1a</p> <p>0, n, 1, n-1, L2, n-2 ...</p> <p>\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002</p> <p>\u9700\u8981\u627e\u5230\u4e2d\u70b9, \u53cd\u8f6c\u540e\u534a\u6bb5, \u518d\u5f52\u5e76</p> <p>\u89e3\u6cd5 1: \u6808\u505a\u6cd5</p> <pre><code>class Solution {\n    public void reorderList(ListNode head) {\n        ListNode p1 = head, p2 = head;\n        // \u4e2d\u70b9 \u6216 \u504f\u53f3\n        while (p1 != null &amp;&amp; p1.next != null) {\n            p1 = p1.next.next;\n            p2 = p2.next;\n        }\n        Deque&lt;ListNode&gt; stack = new ArrayDeque&lt;&gt;();\n        while (p2 != null) {\n            stack.push(p2);\n            p2 = p2.next;\n        }\n        ListNode zero = new ListNode();\n        ListNode n = zero;\n        // \u540e\u534a\u6bb5\u4e00\u5b9a\u4e0d\u77ed\u4e8e\u524d\u534a\u6bb5\n        while (!stack.isEmpty()) {\n            n.next = head;\n            head = head.next;\n            n = n.next;\n            n.next = stack.pop();\n            n = n.next;\n        }\n        n.next = null;\n        head = zero.next;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2: \u53cd\u8f6c \u5408\u5e76</p> <p>\u5408\u5e76\u90e8\u5206\u597d\u597d\u770b\u770b</p> <pre><code>class Solution {\n    public void reorderList(ListNode head) {\n        ListNode p1 = head, p2 = head;\n        ListNode p0 = null;\n        // \u627e\u4e2d\u70b9\n        while (p1 != null &amp;&amp; p1.next != null) {\n            p1 = p1.next.next;\n            p0 = p2;\n            p2 = p2.next;\n        }\n        if (p0 == null) return;\n        // \u65ad\u5f00\n        p0.next = null;\n        // p2: \u4e2d\u70b9 \u6216 \u504f\u53f3\n        // \u53cd\u8f6c\n        ListNode pre = null;\n        ListNode n = p2;\n        while (n != null) {\n            ListNode next = n.next;\n            n.next = pre;\n            pre = n;\n            n = next;\n        }\n\n        ListNode a = head;\n        ListNode b = pre;\n        // \u5408\u5e76 head, pre\n        // \u5c06\u526f\u94fe\u8868\u7684\u5934\u63d2\u5165\u5230\u4e3b\u94fe\u8868\u7684next\n        while (a != null) {\n            ListNode aNext = a.next;\n            a.next = b;\n            ListNode bNext = b.next;\n            if (aNext != null) b.next = aNext;\n            a = aNext;\n            b = bNext;\n        }\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#148-mid","title":"148. \u6392\u5e8f\u94fe\u8868 mid","text":"<p>\u7ed9\u4f60\u94fe\u8868\u7684\u5934\u7ed3\u70b9 head\uff0c\u8bf7\u5c06\u5176\u6309\u5347\u5e8f\u6392\u5217\u5e76\u8fd4\u56de\u6392\u5e8f\u540e\u7684\u94fe\u8868\u3002</p> <p>\u53ea\u6709\u5feb\u6392 \u5806\u6392 \u5f52\u5e76 \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nlogn)$</p> <p>\u5f52\u5e76\u6392\u5e8f \u53ef\u4ee5\u81ea\u9876\u5411\u4e0b\u5f52\u5e76\u6216\u8005\u81ea\u5e95\u5411\u4e0a\u5f52\u5e76, \u81ea\u9876\u5411\u4e0b, \u9700\u8981\u5c06\u94fe\u8868\u4e8c\u5206\u9012\u5f52, \u7136\u540e merge; \u7a7a\u95f2\u590d\u6742\u5ea6 $O(nlogn)$ \u81ea\u5e95\u5411\u4e0a, \u5c06\u94fe\u8868\u62c6\u6210\u82e5\u5e72\u4e2a\u957f\u5ea6\u4e3a subLen \u5b50\u94fe\u8868, \u521d\u59cb subLen = 1, \u7136\u540e\u4e24\u4e24 merge;</p> <pre><code>class Solution {\n    public ListNode sortList(ListNode head) {\n        if (head == null) return head;\n        int length = 0;\n        ListNode node = head;\n        while (node != null) {\n            length++;\n            node = node.next;\n        }\n        ListNode zero = new ListNode(0, head);\n        for (int subLength = 1; subLength &lt; length; subLength &lt;&lt;= 1) {\n            ListNode pre = zero, curr = zero.next;\n            // \u7b2c1\u6b65, \u62c6; \u7b2c2\u6b65, merge;\n            while (curr != null) { // \u5206\u6bb5\u64cd\u4f5c\n            // subLen1, subLen2, merge\n                ListNode head1 = curr;\n                for (int i = 1; i &lt; subLength &amp;&amp; curr.next != null; i++) {\n                    curr = curr.next;\n                }\n                ListNode head2 = curr.next;\n                // \u65ad\u5f00\n                curr.next = null;\n                curr = head2;\n                for (int i = 1; i &lt; subLength &amp;&amp; curr != null &amp;&amp; curr.next != null; i++) {\n                    curr = curr.next;\n                }\n                ListNode nxt = null;\n                if (curr != null) {\n                    nxt = curr.next;\n                    // \u65ad\u5f00\n                    curr.next = null;\n                }\n                ListNode merged = merge(head1, head2);\n                pre.next = merged;\n                // \u5c3e\u90e8,\u7b28\u505a\u6cd5\n                while (pre.next != null) {\n                    pre = pre.next;\n                }\n                curr = nxt;\n            }\n        }\n        return zero.next;\n    }\n\n    public ListNode merge(ListNode head1, ListNode head2) {\n        ListNode zero = new ListNode(0);\n        ListNode p0 = zero, p1 = head1, p2 = head2;\n        while (p1 != null &amp;&amp; p2 != null) {\n            if (p1.val &lt;= p2.val) {\n                p0.next = p1;\n                p1 = p1.next;\n            } else {\n                p0.next = p2;\n                p2 = p2.next;\n            }\n            p0 = p0.next;\n        }\n        if (p1 != null) {\n            p0.next = p1;\n        } else if (p2 != null) {\n            p0.next = p2;\n        }\n        return zero.next;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#328-mid","title":"328. \u5947\u5076\u94fe\u8868 mid","text":"<p>\u7ed9\u5b9a\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 head\uff0c\u5c06\u6240\u6709\u7d22\u5f15\u4e3a\u5947\u6570\u7684\u8282\u70b9\u548c\u7d22\u5f15\u4e3a\u5076\u6570\u7684\u8282\u70b9\u5206\u522b\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u7136\u540e\u8fd4\u56de\u91cd\u65b0\u6392\u5e8f\u7684\u5217\u8868\u3002</p> <p>\u7b2c\u4e00\u4e2a\u8282\u70b9\u7684\u7d22\u5f15\u88ab\u8ba4\u4e3a\u662f \u5947\u6570\uff0c \u7b2c\u4e8c\u4e2a\u8282\u70b9\u7684\u7d22\u5f15\u4e3a \u5076\u6570\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002</p> <p>\u8bf7\u6ce8\u610f\uff0c\u5076\u6570\u7ec4\u548c\u5947\u6570\u7ec4\u5185\u90e8\u7684\u76f8\u5bf9\u987a\u5e8f\u5e94\u8be5\u4e0e\u8f93\u5165\u65f6\u4fdd\u6301\u4e00\u81f4\u3002</p> <p>\u4f60\u5fc5\u987b\u5728 O(1) \u7684\u989d\u5916\u7a7a\u95f4\u590d\u6742\u5ea6\u548c O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0b\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002</p> <p>\u5982\u4f55\u5728\u4e00\u6b21\u5faa\u73af\u4e2d\u5904\u7406\u4e24\u6761\u94fe\u8868? \u5148\u62c6\u6210\u4e24\u6761, \u7136\u540e\u5728\u8fde\u8d77\u6765 \u6ce8\u610f: while \u6761\u4ef6\u662f even \u5982\u679c while \u6761\u4ef6\u4e2d\u662f odd, \u4ee5 odd \u7ed3\u5c3e\u65f6, \u5faa\u73af\u4e2d\u4f1a\u7a7a\u6307\u9488</p> <pre><code>class Solution {\n    public ListNode oddEvenList(ListNode head) {\n        if (head == null) return head;\n        ListNode evenHead = head.next;\n        ListNode odd = head, even = head.next;\n\n        while (even != null &amp;&amp; even.next != null) {\n            // o -&gt; e -&gt; o -&gt; e\n            odd.next = even.next;\n            odd = odd.next;\n            even.next = odd.next;\n            even = even.next;\n        }\n        odd.next = evenHead;\n        return head;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#_5","title":"\u6784\u9020","text":""},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#138-mid","title":"138. \u968f\u673a\u94fe\u8868\u7684\u590d\u5236 mid","text":"<p>\u5251\u6307 Offer 35. \u590d\u6742\u94fe\u8868\u7684\u590d\u5236</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u94fe\u8868\uff0c\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e00\u4e2a\u989d\u5916\u589e\u52a0\u7684\u968f\u673a\u6307\u9488 random \uff0c\u8be5\u6307\u9488\u53ef\u4ee5\u6307\u5411\u94fe\u8868\u4e2d\u7684\u4efb\u4f55\u8282\u70b9\u6216\u7a7a\u8282\u70b9\u3002</p> <p>\u6784\u9020\u8fd9\u4e2a\u94fe\u8868\u7684 \u6df1\u62f7\u8d1d\u3002 \u6df1\u62f7\u8d1d\u5e94\u8be5\u6b63\u597d\u7531 n \u4e2a \u5168\u65b0 \u8282\u70b9\u7ec4\u6210\uff0c\u5176\u4e2d\u6bcf\u4e2a\u65b0\u8282\u70b9\u7684\u503c\u90fd\u8bbe\u4e3a\u5176\u5bf9\u5e94\u7684\u539f\u8282\u70b9\u7684\u503c\u3002\u65b0\u8282\u70b9\u7684 next \u6307\u9488\u548c random \u6307\u9488\u4e5f\u90fd\u5e94\u6307\u5411\u590d\u5236\u94fe\u8868\u4e2d\u7684\u65b0\u8282\u70b9\uff0c\u5e76\u4f7f\u539f\u94fe\u8868\u548c\u590d\u5236\u94fe\u8868\u4e2d\u7684\u8fd9\u4e9b\u6307\u9488\u80fd\u591f\u8868\u793a\u76f8\u540c\u7684\u94fe\u8868\u72b6\u6001\u3002\u590d\u5236\u94fe\u8868\u4e2d\u7684\u6307\u9488\u90fd\u4e0d\u5e94\u6307\u5411\u539f\u94fe\u8868\u4e2d\u7684\u8282\u70b9\u3002</p> <p>\u9012\u5f52, \u7528 map \u6620\u5c04\u65b0\u8001\u94fe\u8868</p> <pre><code>class Solution {\n    Map&lt;Node, Node&gt; cache = new HashMap&lt;&gt;();\n\n    public Node copyRandomList(Node head) {\n        if (head == null) return null;\n        if (!cache.containsKey(head)) {\n            Node newNode = new Node(head.val);\n            cache.put(head, newNode);\n            newNode.next = copyRandomList(head.next);\n            newNode.random = copyRandomList(head.random);\n        }\n        return cache.get(head);\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#_6","title":"\u627e\u4ea4\u70b9","text":""},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#141-easy","title":"141. \u73af\u5f62\u94fe\u8868 easy","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 head \uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002</p> <p>\u5982\u679c\u94fe\u8868\u4e2d\u6709\u67d0\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fde\u7eed\u8ddf\u8e2a next \u6307\u9488\u518d\u6b21\u5230\u8fbe\uff0c\u5219\u94fe\u8868\u4e2d\u5b58\u5728\u73af\u3002</p> <ul> <li>\u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u8bc4\u6d4b\u7cfb\u7edf\u5185\u90e8\u4f7f\u7528\u6574\u6570 pos \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002\u5982\u679c pos \u662f -1\uff0c\u5219\u5728\u8be5\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002\u6ce8\u610f\uff1apos \u4e0d\u4f5c\u4e3a\u53c2\u6570\u8fdb\u884c\u4f20\u9012\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u6807\u8bc6\u94fe\u8868\u7684\u5b9e\u9645\u60c5\u51b5\u3002</li> </ul> <p>\u5982\u679c\u94fe\u8868\u4e2d\u5b58\u5728\u73af\uff0c\u5219\u8fd4\u56de true \u3002 \u5426\u5219\uff0c\u8fd4\u56de false \u3002</p> <p>\u89e3\u6cd5 \u5feb\u6162\u6307\u9488</p> <p>\u4e0d\u7528\u62c5\u5fc3\u4f1a\u9519\u8fc7, \u5b83\u4eec\u5fc5\u7136\u76f8\u9047</p> <pre><code>public class Solution {\n    public boolean hasCycle(ListNode head) {\n        ListNode n1 = head;\n        ListNode n2 = head;\n        do {\n            if (n1 == null || n1.next == null) return false;\n            n1 = n1.next.next;\n            n2 = n2.next;\n        } while (n1 != n2);\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#142-ii-mid","title":"142. \u73af\u5f62\u94fe\u8868 II mid","text":"<p>\u5251\u6307 Offer II 022. \u94fe\u8868\u4e2d\u73af\u7684\u5165\u53e3\u8282\u70b9</p> <p>\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u8fd4\u56de\u94fe\u8868\u5f00\u59cb\u5165\u73af\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u3002 \u5982\u679c\u94fe\u8868\u65e0\u73af\uff0c\u5219\u8fd4\u56de null\u3002</p> <p>\u5982\u679c\u94fe\u8868\u4e2d\u6709\u67d0\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fde\u7eed\u8ddf\u8e2a next \u6307\u9488\u518d\u6b21\u5230\u8fbe\uff0c\u5219\u94fe\u8868\u4e2d\u5b58\u5728\u73af\u3002</p> <p>\u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u8bc4\u6d4b\u7cfb\u7edf\u5185\u90e8\u4f7f\u7528\u6574\u6570 pos \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002\u5982\u679c pos \u662f -1\uff0c\u5219\u5728\u8be5\u94fe\u8868\u4e2d\u6ca1\u6709\u73af\u3002\u6ce8\u610f\uff1apos \u4e0d\u4f5c\u4e3a\u53c2\u6570\u8fdb\u884c\u4f20\u9012\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u6807\u8bc6\u94fe\u8868\u7684\u5b9e\u9645\u60c5\u51b5\u3002</p> <p>\u4e0d\u5141\u8bb8\u4fee\u6539 \u94fe\u8868\u3002</p> <p>\u89e3\u6cd5 \u5feb\u6162\u6307\u9488</p> <p>a--b--c \u662f\u6b65\u6570 a: \u67c4 b+c: \u73af a+b+n(b+c) = 2(a+b) a+b = n(b+c) a = n(cycle) - b \u5728 b \u70b9\u7b2c 1 \u6b21\u76f8\u9047, \u5728 a \u7684\u672b\u7aef\u7b2c 2 \u6b21\u76f8\u9047</p> <pre><code>public class Solution {\n    public ListNode detectCycle(ListNode head) {\n        ListNode n1 = head;\n        ListNode n2 = head;\n        do {\n            if (n1 == null || n1.next == null) return null;\n            n1 = n1.next.next;\n            n2 = n2.next;\n        } while (n1 != n2);\n        // \u4ed6\u4eec\u5c06\u5728\u67c4\u73af\u4ea4\u754c\u5904\u91cd\u9022\n        n2 = head;\n        while (n1 != n2) {\n            n1 = n1.next;\n            n2 = n2.next;\n        }\n        return n1;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#160-easy","title":"160. \u76f8\u4ea4\u94fe\u8868 easy","text":"<p>\u5251\u6307 Offer 52. \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u516c\u5171\u8282\u70b9 \u5251\u6307 Offer II 023. \u4e24\u4e2a\u94fe\u8868\u7684\u7b2c\u4e00\u4e2a\u91cd\u5408\u8282\u70b9</p> <p>\u7ed9\u4f60\u4e24\u4e2a\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 headA \u548c headB\uff0c\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u4e0d\u5b58\u5728\u76f8\u4ea4\u8282\u70b9\uff0c\u8fd4\u56de null\u3002 \u89e3\u6cd5 1</p> <p>\u4ea4\u6362\u6307\u9488 \u4e0d\u4f1a\u51fa\u73b0\u6b7b\u5faa\u73af, \u6700\u540e\u4f1a\u540c\u65f6\u5230\u8fbe\u5404\u81ea\u7684\u5c3e\u7aef</p> <pre><code>class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        ListNode p1 = headA;\n        ListNode p2 = headB;\n        while (p1 != p2) {\n            p1 = p1 != null ? p1.next : headB;\n            p2 = p2 != null ? p2.next : headA;\n        }\n        return p1;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2</p> <p>\u8bb0\u5f55\u5dee\u503c \u627e\u5230\u4e24\u6761\u94fe\u8868\u7684\u5dee\u503c, \u518d\u4ece\u5934\u5f00\u59cb\u904d\u5386</p> <pre><code>class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        if (headA == null || headB == null) return null;\n        ListNode nodeA = headA;\n        ListNode nodeB = headB;\n        ListNode p1 = headA;\n        ListNode p2 = headB;\n\n        while (nodeA.next != null || nodeB.next != null) {\n            if (nodeA.next != null) nodeA = nodeA.next;\n            else p2 = p2.next;\n\n            if (nodeB.next != null) nodeB = nodeB.next;\n            else p1 = p1.next;\n        }\n        if (nodeA != nodeB) return null;\n\n        while (p1 != p2) {\n            p1 = p1.next;\n            p2 = p2.next;\n        }\n        return p1;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#_7","title":"\u53cd\u8f6c","text":""},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#206-easy","title":"206. \u53cd\u8f6c\u94fe\u8868 easy","text":"<p>\u5251\u6307 Offer 24. \u53cd\u8f6c\u94fe\u8868 \u5251\u6307 Offer II 024. \u53cd\u8f6c\u94fe\u8868</p> <pre><code>class Solution {\n    public ListNode reverseList(ListNode node) {\n        ListNode pre = null;\n        while (node != null) {\n            ListNode next = node.next;\n            node.next = pre;\n\n            pre = node;\n            node = next;\n        }\n        return pre;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%93%BE%E8%A1%A8/#234-easy","title":"234. \u56de\u6587\u94fe\u8868 easy","text":"<p>\u5251\u6307 Offer II 027. \u56de\u6587\u94fe\u8868</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 head\uff0c\u8bf7\u4f60\u5224\u65ad\u8be5\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u94fe\u8868\u3002</p> <p>\u8fdb\u9636\uff1a\u4f60\u80fd\u5426\u7528 O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) \u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u6b64\u9898\uff1f</p> <p>\u89e3\u6cd5 1: \u7b80\u5355\u7684, \u590d\u5236\u5230\u6570\u7ec4; \u89e3\u6cd5 2: \u7ef4\u62a4\u5168\u5c40\u5f15\u7528, \u9012\u5f52\u8fdb\u53bb\u6bd4\u8f83; (\u4e0d\u597d\u60f3) \u89e3\u6cd5 3: \u53cd\u8f6c\u94fe\u8868; \u8bb0\u5f97\u4e2d\u70b9\u504f\u53f3</p> <pre><code>class Solution {\n    public boolean isPalindrome(ListNode head) {\n        if (head.next == null) return true;\n        ListNode p1 = head;\n        ListNode p2 = head;\n        // \u6b65\u6570\n        int cnt = 0;\n        // \u94fe\u8868\u8282\u70b9\u4e3a\u5947\u6570, \u505c\u5728last, \u8d70n-1\u6b65, \u505c\u5728\u4e2d\u70b9; \u8282\u70b9\u6570\u4e3a\u5076\u6570, \u505c\u5728null, \u8d70n\u6b65, \u505c\u5728\u4e2d\u70b9\u504f\u53f3;\n        // \u5947\u602a\u7684\u662fp2\u4f1a\u505c\u5728\u4e2d\u70b9\u5904\n        while (p1 != null &amp;&amp; p1.next != null) {\n            p1 = p1.next.next;\n            p2 = p2.next;\n            cnt++;\n        }\n        // 1 -&gt; 2 -&gt; 3  ==&gt;  1 -&gt; 2 &lt;- 3\n        // 1 -&gt; 2 -&gt; 3 -&gt; 4 ==&gt; 1 -&gt; 2 -&gt; 3 &lt;- 4\n        ListNode head2 = revert(p2);\n\n        for (int i = 0; i &lt; cnt; i++) {\n            if (head.val == head2.val) {\n                head2 = head2.next;\n                head = head.next;\n            } else {\n                revert(head2);\n                return false;\n            }\n        }\n        revert(head2);\n        return true;\n    }\n\n    // \u53cd\u8f6c\n    private ListNode revert(ListNode head) {\n        ListNode node = head;\n        ListNode pre = null;\n        while (node != null) {\n            ListNode temp = node.next;\n            node.next = pre;\n            pre = node;\n            node = temp;\n        }\n        return pre;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/","title":"\u96c6\u5408\u4e2d\u7684\u5143\u7d20","text":""},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/#_2","title":"\u4e8c\u5143\u7ec4","text":"<p>\u4e8c\u5143\u7ec4\u5e38\u7528 Map</p> <p>Map \u53ef\u4ee5\u7528 array \u5b9e\u73b0</p>"},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/#1-easy","title":"1. \u4e24\u6570\u4e4b\u548c easy","text":"<p>\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570\u76ee\u6807\u503c target\uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u548c\u4e3a\u76ee\u6807\u503c target \u7684\u90a3 2 \u4e2a\u6574\u6570\uff0c\u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u5728\u7b54\u6848\u91cc\u4e0d\u80fd\u91cd\u590d\u51fa\u73b0\u3002 You may assume that each input would have exactly one solution, and you may not use the same element twice.</p> <p>\u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002 You can return the answer in any order.</p> JavaGo <pre><code>class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n        for (int i = 0; i &lt; nums.length; i++) {\n            int complement = target - nums[i];\n            Integer j = map.get(complement);\n            if (j != null) return new int[]{j, i};\n            map.put(nums[i], i);\n        }\n        return null;\n    }\n}\n</code></pre> <pre><code>func twoSum(nums []int, target int) []int {\n    m := map[int]int{}\n    for i := 0; i &lt; len(nums); i++ {\n        gap := target - nums[i]\n        j, ok := m[gap]\n        if ok {\n            return []int{i, j}\n        }\n        m[nums[i]] = i\n    }\n    return nil\n}\n</code></pre>"},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/#167-ii-mid","title":"167. \u4e24\u6570\u4e4b\u548c II - \u8f93\u5165\u6709\u5e8f\u6570\u7ec4 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u4e0b\u6807\u4ece 1 \u5f00\u59cb\u7684\u6574\u6570\u6570\u7ec4 numbers\uff0c\u8be5\u6570\u7ec4\u5df2\u6309 \u975e\u9012\u51cf\u987a\u5e8f\u6392\u5217\uff0c\u8bf7\u4f60\u4ece\u6570\u7ec4\u4e2d\u627e\u51fa\u6ee1\u8db3\u76f8\u52a0\u4e4b\u548c\u7b49\u4e8e\u76ee\u6807\u6570 target \u7684\u4e24\u4e2a\u6570\u3002\u5982\u679c\u8bbe\u8fd9\u4e24\u4e2a\u6570\u5206\u522b\u662f numbers[index1] \u548c numbers[index2] \uff0c\u5219 1 &lt;= index1 &lt; index2 &lt;= numbers.length\u3002</p> <p>\u4ee5\u957f\u5ea6\u4e3a 2 \u7684\u6574\u6570\u6570\u7ec4 [index1, index2] \u7684\u5f62\u5f0f\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6574\u6570\u7684\u4e0b\u6807 index1 \u548c index2\u3002</p> <p>\u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u4e2a\u8f93\u5165 \u53ea\u5bf9\u5e94\u552f\u4e00\u7684\u7b54\u6848 \uff0c\u800c\u4e14\u4f60 \u4e0d\u53ef\u4ee5 \u91cd\u590d\u4f7f\u7528\u76f8\u540c\u7684\u5143\u7d20\u3002</p> <p>\u4f60\u6240\u8bbe\u8ba1\u7684\u89e3\u51b3\u65b9\u6848\u5fc5\u987b\u53ea\u4f7f\u7528\u5e38\u91cf\u7ea7\u7684\u989d\u5916\u7a7a\u95f4\u3002</p> <pre><code>class Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        int[] res = new int[2];\n        int p1 = 0;\n        int p2 = numbers.length - 1;\n        while (true) {\n            if ((numbers[p1] + numbers[p2]) == target) break;\n            if ((numbers[p1] + numbers[p2]) &lt; target) p1++;\n            if ((numbers[p1] + numbers[p2]) &gt; target) p2--;\n        }\n        res[0] = p1 + 1;\n        res[1] = p2 + 1;\n        return res;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/#_3","title":"\u4e09\u5143\u7ec4","text":""},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/#15-mid","title":"15. \u4e09\u6570\u4e4b\u548c mid","text":"<p>\u5251\u6307 Offer II 007. \u6570\u7ec4\u4e2d\u548c\u4e3a 0 \u7684\u4e09\u4e2a\u6570</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e09\u5143\u7ec4 [nums[i], nums[j], nums[k]] \u6ee1\u8db3 i != j\u3001i != k \u4e14 j != k \uff0c\u540c\u65f6\u8fd8\u6ee1\u8db3 nums[i] + nums[j] + nums[k] == 0\u3002\u8bf7\u4f60\u8fd4\u56de\u6240\u6709\u548c\u4e3a 0 \u7684\u4e09\u5143\u7ec4\u3002 Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.</p> <p>\u6ce8\u610f\uff1a\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 Notice that the solution set must not contain duplicate triplets.</p> <p>\u5148\u6392\u5e8f, \u7136\u540e\u4ece\u5934\u5230\u5c3e\u904d\u5386\u9009\u5b9a\u7b2c 0 \u4e2a\u5143\u7d20, \u7136\u540e\u53cc\u6307\u9488\u9009\u62e9\u53e6\u5916 2 \u4e2a\u5143\u7d20 \u53cc\u6307\u9488\u53ea\u9009\u7b2c\u4e00\u4e2a\u8fdb\u884c\u53bb\u91cd, \u8ddf\u524d\u4e00\u4e2a\u76f8\u7b49\u7684\u8df3\u8fc7</p> JavaGo <pre><code>class Solution {\n    public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] nums) {\n        int n = nums.length;\n        Arrays.sort(nums);\n        List&lt;List&lt;Integer&gt;&gt; res = new ArrayList&lt;&gt;();\n        // nums[i] &lt;= 0 \u53ef\u4ee5\u51cf\u5c11\u626b\u63cf\u6570\u91cf\n        for (int i = 0; i &lt; n &amp;&amp; nums[i] &lt;= 0; i++) {\n            if (i &gt; 0 &amp;&amp; nums[i - 1] == nums[i]) continue;\n            int j = i + 1;\n            int k = n - 1;\n            while (j &lt; k) {\n                int sum = nums[i] + nums[j] + nums[k];\n                if (sum == 0) {\n                    res.add(List.of(nums[i], nums[j], nums[k]));\n                    // j &lt; k \u5b8c\u5168\u80fd\u591f\u4fdd\u8bc1\u4e0d\u4f1a\u8d8a\u754c\n                    while (j &lt; k &amp;&amp; nums[j] == nums[j + 1]) j++;\n                    while (j &lt; k &amp;&amp; nums[k] == nums[k - 1]) k--;\n                    j++;\n                    k--;\n                } else if (sum &lt; 0)\n                    j++;\n                else\n                    k--;\n            }\n        }\n        return res;\n    }\n}\n</code></pre> <pre><code>func threeSum(nums []int) [][]int {\n    sort.Ints(nums)\n    var res [][]int\n    for i, e := range nums {\n        if e &gt; 0 {\n            break\n        }\n        if i &gt; 0 &amp;&amp; e == nums[i-1] {\n            continue\n        }\n        l, r := i+1, len(nums)-1\n        for l &lt; r {\n            sum := e + nums[l] + nums[r]\n            if sum == 0 {\n                res = append(res, []int{e, nums[l], nums[r]})\n                for ; l+1 &lt; r &amp;&amp; nums[l] == nums[l+1]; l++ {}\n                for ; l &lt; r-1 &amp;&amp; nums[r] == nums[r-1]; r-- {}\n                l++\n                r--\n            } else if sum &lt; 0 {\n                l++\n            } else {\n                r--\n            }\n        }\n    }\n    return res\n}\n</code></pre>"},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/#_4","title":"\u91cd\u590d\u5143\u7d20","text":""},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/#36-mid","title":"36. \u6709\u6548\u7684\u6570\u72ec mid","text":"<p>\u8bf7\u4f60\u5224\u65ad\u4e00\u4e2a 9 x 9 \u7684\u6570\u72ec\u662f\u5426\u6709\u6548\u3002\u53ea\u9700\u8981 \u6839\u636e\u4ee5\u4e0b\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002</p> <ul> <li>\u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002</li> <li>\u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002</li> <li>\u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684 3x3 \u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002\uff08\u8bf7\u53c2\u8003\u793a\u4f8b\u56fe\uff09</li> </ul> <p>\u5c31\u662f\u8ba9\u4f60\u9009\u6570\u636e\u7ed3\u6784, Set[], \u8fd8\u6709\u5bab\u683c\u600e\u4e48\u6c42\u7d22\u5f15 <pre><code>class Solution {\n    public boolean isValidSudoku(char[][] board) {\n        Set&lt;Character&gt;[] row = new Set[9];\n        Set&lt;Character&gt;[] col = new Set[9];\n        Set&lt;Character&gt;[] fan = new Set[9];\n        for (int i = 0; i &lt; 9; i++) {\n            row[i] = new HashSet&lt;&gt;();\n            col[i] = new HashSet&lt;&gt;();\n            fan[i] = new HashSet&lt;&gt;();\n        }\n\n        for (int i = 0; i &lt; board.length; i++) {\n            for (int j = 0; j &lt; board[0].length; j++) {\n                char c;\n                if ((c = board[i][j]) != '.') {\n                    if (row[i].contains(c)) return false;\n                    else row[i].add(c);\n\n                    if (col[j].contains(c)) return false;\n                    else col[j].add(c);\n\n                    int idx = getIdx(i, j);\n                    if (fan[idx].contains(c)) return false;\n                    else fan[idx].add(c);\n                }\n            }\n        }\n        return true;\n    }\n\n    private int getIdx(int r, int c) {\n        return r / 3 * 3 + c / 3;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/#220-iii-hard","title":"220. \u5b58\u5728\u91cd\u590d\u5143\u7d20 III hard","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e24\u4e2a\u6574\u6570 k \u548c t\u3002\u8bf7\u4f60\u5224\u65ad\u662f\u5426\u5b58\u5728 \u4e24\u4e2a\u4e0d\u540c\u4e0b\u6807 i \u548c j\uff0c\u4f7f\u5f97 abs(nums[i] - nums[j]) &lt;= t\uff0c\u540c\u65f6\u53c8\u6ee1\u8db3 abs(i - j) &lt;= k\u3002</p> <p>\u5982\u679c\u5b58\u5728\u5219\u8fd4\u56de true\uff0c\u4e0d\u5b58\u5728\u8fd4\u56de false\u3002</p> <p>\u6ed1\u52a8\u7a97\u53e3\u5185\u7684\u6700\u5c0f\u5dee, \u8ddf \"\u6ed1\u52a8\u7a97\u53e3\u5185\u7684\u6700\u5927\u503c\" \u4e0d\u4e00\u6837\u54e6</p> <p>\u89e3\u6cd5 1: TreeSet</p> <pre><code>class Solution {\n    public boolean containsNearbyAlmostDuplicate(int[] nums,\n                                                 int indexDiff,\n                                                 int valueDiff) {\n        int n = nums.length;\n        TreeSet&lt;Long&gt; set = new TreeSet&lt;&gt;();\n        // \u7a97\u53e3\u5c0f\u4e8e indexDoff\n        for (int i = 0; i &lt; n; i++) {\n            // ceiling: \u5927\u4e8e\u76ee\u6807\u503c\u7684\u6700\u5c0f\u503c\n            // \u533a\u95f4 [a-valueDiff, a+valueDiff] \u6709\u503c\u5373\u53ef\n            Long ceiling = set.ceiling((long) nums[i] - valueDiff);\n            if (ceiling != null &amp;&amp; ceiling &lt;= (long) nums[i] + valueDiff)\n                return true;\n            set.add((long) nums[i]);\n            // \u7a97\u53e3set\u5185\u4e0d\u4f1a\u6709\u91cd\u590d\u5143\u7d20\u7684\n            if (i - indexDiff &gt;= 0) set.remove((long) nums[i - indexDiff]);\n        }\n        return false;\n    }\n}\n</code></pre> <p>\u89e3\u6cd5 2: \u6309\u503c\u5206\u6876 + \u6ed1\u7a97</p> <pre><code>class Solution {\n    // \u6876\u5bbd\u5ea6, num \u503c\u7684\u7a97\u53e3\n    private long width;\n\n    public boolean containsNearbyAlmostDuplicate(int[] nums,\n                                                 int indexDiff,\n                                                 int valueDiff) {\n        // 0, 0+valDiff \u5728\u540c\u4e00\u4e2a\u6876\u91cc\n        width = (long) valueDiff + 1;\n        int n = nums.length;\n        Map&lt;Long, Integer&gt; map = new HashMap&lt;&gt;();\n\n        for (int i = 0; i &lt; n; i++) {\n            long id = getId(nums[i]);\n            Integer val;\n            if (map.containsKey(id)\n            || (val = map.get(id + 1)) != null &amp;&amp; Math.abs(nums[i] - val) &lt;= valueDiff\n            || (val = map.get(id - 1)) != null &amp;&amp; Math.abs(nums[i] - val) &lt;= valueDiff)\n                return true;\n            map.put(id, nums[i]);\n            // \u5e72\u6389 left\n            if (i - indexDiff &gt;= 0) map.remove(getId(nums[i - indexDiff]));\n        }\n        return false;\n    }\n\n    private long getId(long x) {\n        // \u4e3a\u4e86\u8ba9\u8d1f\u6570\u7684\u5546\u504f\u5de6\n        x -= Integer.MIN_VALUE;\n        return x / width;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/#_5","title":"\u96c6\u5408\u76f8\u7b49","text":""},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/#242-easy","title":"242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd easy","text":"<p>\u5251\u6307 Offer II 032. \u6709\u6548\u7684\u53d8\u4f4d\u8bcd</p> <p>\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad t \u662f\u5426\u662f s \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002</p> <p>\u6ce8\u610f\uff1a\u82e5 s \u548c t \u4e2d\u6bcf\u4e2a\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u90fd\u76f8\u540c\uff0c\u5219\u79f0 s \u548c t \u4e92\u4e3a\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002</p> <pre><code>class Solution {\n    public boolean isAnagram(String s, String t) {\n        if (s.length() != t.length()) return false;\n\n        int[] arr = new int[26];\n\n        for (int i = 0; i &lt; s.length(); i++) {\n            arr[s.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i &lt; t.length(); i++) {\n            if (--arr[t.charAt(i) - 'a'] &lt; 0) return false;\n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/#_6","title":"\u5206\u7ec4","text":""},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/#49-mid","title":"49. \u5b57\u6bcd\u5f02\u4f4d\u8bcd\u5206\u7ec4 mid","text":"<p>\u5251\u6307 Offer II 033. \u53d8\u4f4d\u8bcd\u7ec4</p> <p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u8bf7\u4f60\u5c06 \u5b57\u6bcd\u5f02\u4f4d\u8bcd \u7ec4\u5408\u5728\u4e00\u8d77\u3002\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7ed3\u679c\u5217\u8868\u3002</p> <p>\u5b57\u6bcd\u5f02\u4f4d\u8bcd \u662f\u7531\u91cd\u65b0\u6392\u5217\u6e90\u5355\u8bcd\u7684\u5b57\u6bcd\u5f97\u5230\u7684\u4e00\u4e2a\u65b0\u5355\u8bcd\uff0c\u6240\u6709\u6e90\u5355\u8bcd\u4e2d\u7684\u5b57\u6bcd\u901a\u5e38\u6070\u597d\u53ea\u7528\u4e00\u6b21\u3002</p> <pre><code>class Solution {\n    public List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) {\n        Map&lt;String, List&lt;String&gt;&gt; m = new HashMap&lt;&gt;();\n        for (String str : strs) {\n            m.computeIfAbsent(sign(str), o -&gt; new ArrayList&lt;&gt;()).add(str);\n        }\n        return new ArrayList&lt;&gt;(m.values());\n    }\n\n    String sign(String s) {\n        int[] arr = new int[26];\n        for (char c : s.toCharArray()) {\n            arr[c - 'a']++;\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i &lt; arr.length; i++) {\n            int e = arr[i];\n            if (e &gt; 0) sb.append((char) ('a' + i)).append(e);\n        }\n        return sb.toString();\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/#_7","title":"\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u7684\u96c6\u5408","text":""},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/#318-mid","title":"318. \u6700\u5927\u5355\u8bcd\u957f\u5ea6\u4e58\u79ef mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4 words \uff0c\u627e\u51fa\u5e76\u8fd4\u56de length(words[i]) * length(words[j])\u7684\u6700\u5927\u503c\uff0c\u5e76\u4e14\u8fd9\u4e24\u4e2a\u5355\u8bcd\u4e0d\u542b\u6709\u516c\u5171\u5b57\u6bcd\u3002\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u4e24\u4e2a\u5355\u8bcd\uff0c\u8fd4\u56de 0\u3002</p> <p>\u7528\u4e8c\u8fdb\u5236\u8868\u793a\u96c6\u5408</p> <pre><code>class Solution {\n    public int maxProduct(String[] words) {\n\n        int[] arr = new int[words.length];\n        int idx = 0;\n        for (String word : words) {\n            for (char c : word.toCharArray()) {\n                arr[idx] |= (1 &lt;&lt; c - 'a');\n            }\n            idx++;\n        }\n        int max = 0;\n        for (int i = 0; i &lt; words.length; i++) {\n            for (int j = i + 1; j &lt; words.length; j++) {\n                if ((arr[i] &amp; arr[j]) == 0)\n                    max = Math.max(max, words[i].length() * words[j].length());\n            }\n        }\n        return max;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/#k","title":"\u7b2c K \u5927","text":""},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/#215-k-mid","title":"215. \u6570\u7ec4\u4e2d\u7684\u7b2c K \u4e2a\u6700\u5927\u5143\u7d20 mid","text":"<p>\u7ed9\u5b9a\u6574\u6570\u6570\u7ec4 nums \u548c\u6574\u6570 k\uff0c\u8bf7\u8fd4\u56de\u6570\u7ec4\u4e2d\u7b2c k \u5927\u7684\u5143\u7d20\u3002</p> <p>1 \u6392\u5e8f</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6 O(NlogN)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(1)</p> <pre><code>class Solution {\n    public int findKthLargest(int[] nums, int k) {\n        Arrays.sort(nums);\n        return nums[nums.length - k];\n    }\n}\n</code></pre> <p>2 \u5806</p> <p>PriorityQueue \u64cd\u4f5c\u90fd\u662f\u5904\u7406\u961f\u5934\u5143\u7d20, \u5c0f\u7684\u6dfb\u52a0\u8fdb\u53bb, remove \u6389\u5373\u53ef \u65f6\u95f4\u590d\u6742\u5ea6 O(NlogK)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(K)\u3002</p> <pre><code>class Solution {\n    public int findKthLargest(int[] nums, int k) {\n        PriorityQueue&lt;Integer&gt; heap = new PriorityQueue&lt;&gt;();\n        for (int val : nums) {\n            heap.add(val);\n            if (heap.size() &gt; k) heap.remove();\n        }\n        return heap.element();\n    }\n}\n</code></pre> <p>3 \u5feb\u901f\u9009\u62e9</p> <p>\u65f6\u95f4\u590d\u6742\u5ea6 O(N)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u9700\u8981\u4e3b\u5b9a\u7406\u8fdb\u884c\u5206\u6790</p> <pre><code>class Solution {\n    public int findKthLargest(int[] nums, int k) {\n        int l = 0, h = nums.length - 1;\n        int kIndex = nums.length - k;\n        int pivotIdx;\n        while (true) {\n            pivotIdx = partition(nums, l, h);\n            if (pivotIdx &lt; kIndex)\n                l = pivotIdx + 1;\n            else if (pivotIdx &gt; kIndex)\n                h = pivotIdx - 1;\n            else\n                return nums[pivotIdx];\n        }\n    }\n\n    // \u552f\u4e00\u91cd\u70b9\n    private int partition(int[] arr, int l, int h) {\n        int pivot = arr[l];\n        // int pivot = findPivot(arr, l, h);\n        int i = l;// \u4f5c\u4e3apivot, \u4ece i+1 \u771f\u6b63\u5f00\u59cb\n        int j = h + 1;// \u4ece h \u771f\u6b63\u5f00\u59cb\n        while (true) {\n            while (i &lt; h &amp;&amp; arr[++i] &lt; pivot) ;\n            while (j &gt; l &amp;&amp; arr[--j] &gt; pivot) ;\n            // \u6ca1\u6709\u5c31\u4e0d\u4ea4\u6362\n            if (i &gt;= j) break;\n            swap(arr, i, j);\n        }\n        // arr[l] \u662f pivot, \u6700\u7ec8 arr[j] &lt;= pivot, j \u53f3\u8fb9\u7684\u5143\u7d20\u90fd\u5927\u4e8e pivot\n        swap(arr, l, j);\n        return j;\n    }\n\n    // \u53ef\u9009\n    private int findPivot(int[] arr, int l, int h) {\n        if (h - l &gt; 1) {\n            int m = l + h &gt;&gt; 1;\n            if ((arr[l] &gt; arr[h] &amp;&amp; arr[h] &lt; arr[m])\n            || (arr[m] &gt; arr[h] &amp;&amp; arr[h] &lt; arr[l]))\n                swap(arr, h, l);\n            else if ((arr[h] &gt; arr[m] &amp;&amp; arr[m] &lt; arr[l])\n            || (arr[l] &gt; arr[m] &amp;&amp; arr[m] &lt; arr[h]))\n                swap(arr, m, l);\n        }\n        return arr[l];\n    }\n\n    private void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/#k_1","title":"\u524d K \u4e2a","text":""},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/#347-k-mid","title":"347. \u524d K \u4e2a\u9ad8\u9891\u5143\u7d20 mid","text":"<p>\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570 k \uff0c\u8bf7\u4f60\u8fd4\u56de\u5176\u4e2d\u51fa\u73b0\u9891\u7387\u524d k \u9ad8\u7684\u5143\u7d20\u3002</p> <pre><code>class Solution {\n    public int[] topKFrequent(int[] nums, int k) {\n        Map&lt;Integer, Integer&gt; map = new HashMap&lt;&gt;();\n        for (int num : nums) {\n            map.merge(num, 1, Integer::sum);\n        }\n        PriorityQueue&lt;Integer&gt; pq = new PriorityQueue&lt;&gt;(Comparator.comparingInt(map::get));\n        map.forEach((key, value) -&gt; {\n            pq.add(key);\n            if (pq.size() &gt; k) pq.remove();\n        });\n        return pq.stream().mapToInt(o -&gt; o).toArray();\n    }\n}\n</code></pre>"},{"location":"leetcode/new/%E9%9B%86%E5%90%88%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0/#373-k-mid","title":"373. \u67e5\u627e\u548c\u6700\u5c0f\u7684 K \u5bf9\u6570\u5b57 mid","text":"<p>\u5251\u6307 Offer II 061. \u548c\u6700\u5c0f\u7684 k \u4e2a\u6570\u5bf9</p> <p>\u7ed9\u5b9a\u4e24\u4e2a\u4ee5 \u5347\u5e8f\u6392\u5217 \u7684\u6574\u6570\u6570\u7ec4 nums1 \u548c nums2 , \u4ee5\u53ca\u4e00\u4e2a\u6574\u6570 k\u3002</p> <p>\u5b9a\u4e49\u4e00\u5bf9\u503c(u,v)\uff0c\u5176\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u6765\u81ea nums1\uff0c\u7b2c\u4e8c\u4e2a\u5143\u7d20\u6765\u81ea nums2\u3002</p> <p>\u8bf7\u627e\u5230\u548c\u6700\u5c0f\u7684 k \u4e2a\u6570\u5bf9(u1,v1),(u2,v2)...(uk,vk)\u3002</p> <p>\u591a\u8def\u5f52\u5e76\u7b97\u6cd5 top k \u53ea\u51fa\u73b0\u5728 nums1 \u548c nums 2 \u7684\u524d k \u4e2a\u5143\u7d20\u4e2d, \u79bb\u7ebf\u641c\u7d22 O(K^2 * logK) \u52a8\u6001\u641c\u7d22\u53ef\u4ee5\u505a\u5230 O(K * logK), \u6700\u5c0f\u5806 remove() k \u6b21</p> <pre><code>class Solution {\n    public List&lt;List&lt;Integer&gt;&gt; kSmallestPairs(int[] nums1, int[] nums2, int k) {\n        List&lt;List&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;(k);\n        // \u6700\u5c0f\u5806\n        PriorityQueue&lt;int[]&gt; pq = new PriorityQueue&lt;&gt;(k, Comparator.comparingInt(o -&gt; nums1[o[0]] + nums2[o[1]]));\n        // \u76f4\u63a5\u5efa\u5806, (0,0) -&gt; (k,0) \u5143\u7d20\u5bf9\u90fd\u5728\u91cc\u9762\u4f5c\u4e3a\u5019\u9009\n        for (int i = 0; i &lt; Math.min(k, nums1.length); i++) { // \u5224\u65ad\u6761\u4ef6\u9632\u6b62\u8d8a\u754c\n            pq.add(new int[]{i, 0});\n        }\n        while (k-- &gt; 0 &amp;&amp; !pq.isEmpty()) { // \u5224\u65ad\u6761\u4ef6\u9632\u6b62\u8d8a\u754c\n            // remove \u6389\u6700\u5c0f\u503c(i,j), \u5c06 (i,j+1) \u653e\u8fdb\u5806\n            int[] idx = pq.remove();\n            list.add(List.of(nums1[idx[0]], nums2[idx[1]]));\n            if (idx[1] + 1 &lt; nums2.length) // \u5224\u65ad\u6761\u4ef6\u9632\u6b62\u8d8a\u754c\n                pq.add(new int[]{idx[0], idx[1] + 1});\n        }\n        return list;\n    }\n}\n</code></pre>"},{"location":"mysql/mysql-lock/","title":"\u9501","text":"<p>\u5bf9\u6570\u636e\u5e93\u7684\u5e76\u53d1\u8bbf\u95ee\u548c\u6570\u636e\u4e00\u81f4\u6027\u4e4b\u95f4\u5b58\u5728\u5929\u7136\u7684\u77db\u76fe, \u56e0\u6b64\u6709\u4e86\u9501\u673a\u5236\u3002\u8fd9\u4e5f\u662f\u6570\u636e\u5e93\u7cfb\u7edf\u533a\u522b\u4e8e\u6587\u4ef6\u7cfb\u7edf\u7684\u91cd\u8981\u539f\u56e0\u4e4b\u4e00\u3002</p>"},{"location":"mysql/mysql-lock/#_2","title":"\u4ec0\u4e48\u662f\u9501","text":"<p>\u5982\u679c\u7ed9\u9501\u4e00\u4e2a\u5b9a\u4e49\u7684\u8bdd: \u9501\u673a\u5236\u662f\u4e3a\u4e86\u652f\u6301\u5bf9\u5171\u4eab\u8d44\u6e90\u8fdb\u884c\u5e76\u53d1\u8bbf\u95ee\u3002  </p> <p>\u503c\u5f97\u4e00\u63d0\u7684\u662f, \u6570\u636e\u5e93\u4e2d\u7684\u9501\u4e0d\u4ec5\u5305\u62ec\u9762\u5411\u4e8b\u52a1\u7684lock, \u4e5f\u5305\u62ec\u9762\u5411\u5176\u4ed6\u5171\u4eab\u8d44\u6e90\u7684latch. \u5982\u64cd\u4f5c\u7f13\u51b2\u6c60\u4e2d\u7684LRU\u5217\u8868\u7684\u5143\u7d20\u65f6\u5c31\u9700\u8981\u9501(latch)\u4fdd\u8bc1\u4e00\u81f4\u6027\u3002</p> <p>\u53e6\u5916, \u6570\u636e\u5e93\u4e4b\u95f4\u3001\u5b58\u50a8\u5f15\u64ce\u4e4b\u95f4\u5bf9\u4e8e\u9501\u7684\u5b9e\u73b0\u5b8c\u5168\u4e0d\u540c\u3002\u672c\u6587\u4e3b\u8981\u4ecb\u7ecdInnoDB\u5bf9\u4e8e\u9501\u7684\u5b9e\u73b0\u3002</p>"},{"location":"mysql/mysql-lock/#latch-lock","title":"latch \u548c lock","text":"<p>latch\u7684\u5bf9\u8c61\u662f\u5185\u5b58\u4e2d\u7684\u5171\u4eab\u8d44\u6e90, \u4ee5\u4fdd\u8bc1\u5e76\u53d1\u7ebf\u7a0b\u6b63\u786e\u64cd\u4f5c\u4e34\u754c\u8d44\u6e90\u3002latch\u53ef\u4ee5\u5206\u4e3amutex(\u4e92\u65a5\u9501)\u548crwlock(\u8bfb\u5199\u9501)\u3002</p> <p>lock\u7684\u5bf9\u8c61\u662f\u4e8b\u52a1, \u4ee5\u9501\u5b9a\u6570\u636e\u5e93\u4e2d\u7684\u5bf9\u8c61(\u5982\u8868\u3001\u9875\u3001\u884c)\u3002lock\u901a\u5e38\u4ec5\u5728\u4e8b\u52a1\u63d0\u4ea4\u6216\u56de\u6eda\u540e\u8fdb\u884c\u91ca\u653e, \u4e14\u6709\u6b7b\u9501\u68c0\u6d4b\u673a\u5236\u3002</p> <p>\u901a\u8fc7\u5982\u4e0b\u547d\u4ee4\u53ef\u4ee5\u67e5\u770bInnoDB\u4e2d\u7684latch: <pre><code>SHOW ENGINE INNODB MUTEX;\n</code></pre></p>"},{"location":"mysql/mysql-lock/#innodb-lock","title":"InnoDB \u4e2d\u7684 lock","text":"<p>\u6309\u9501\u7c92\u5ea6\u53ef\u5206\u4e3a:  - \u884c\u9501   - \u5171\u4eab\u9501(S Lock): \u5141\u8bb8\u4e8b\u52a1\u8bfb\u4e00\u884c\u6570\u636e; \u53ef\u4ee5\u4e0e\u5176\u4ed6S\u9501\u517c\u5bb9\u3002   - \u6392\u4ed6\u9501(X Lock): \u5141\u8bb8\u4e8b\u52a1\u66f4\u65b0\u6216\u5220\u9664\u4e00\u6761\u6570\u636e; \u4e0d\u4e0e\u5176\u4ed6\u884c\u9501\u517c\u5bb9\u3002 - \u8868\u9501 - \u610f\u5411\u9501   - \u610f\u5411\u5171\u4eab\u9501(IS Lock): \u4e8b\u52a1\u60f3\u8981\u83b7\u5f97\u4e00\u5f20\u8868\u4e2d\u67d0\u51e0\u884c\u7684\u5171\u4eab\u9501   - \u610f\u5411\u6392\u4ed6\u9501(IX Lock): \u4e8b\u52a1\u60f3\u8981\u83b7\u5f97\u4e00\u5f20\u8868\u4e2d\u67d0\u51e0\u884c\u7684\u6392\u4ed6\u9501</p> <p>\u610f\u5411\u9501 InnoDB\u652f\u6301\u591a\u7c92\u5ea6(granular)\u9501\u5b9a, \u5141\u8bb8\u4e8b\u52a1\u5728\u884c\u7ea7\u548c\u8868\u7ea7\u4e0a\u7684\u9501\u540c\u65f6\u5b58\u5728\u3002 \u4e3a\u4e86\u652f\u6301\u5728\u4e0d\u540c\u7c92\u5ea6\u4e0a\u8fdb\u884c\u52a0\u9501\u64cd\u4f5c, InnoDB\u4f7f\u7528\u4e86\u610f\u5411\u9501(Intention Lock): \u5982\u679c\u60f3\u8981\u5bf9\u6700\u7ec6\u7c92\u5ea6\u7684\u5bf9\u8c61(\u4f8b\u5982\u884c)\u4e0a\u9501, \u90a3\u4e48\u9700\u8981\u5148\u5bf9\u6570\u636e\u5e93\u3001\u8868\u3001\u9875\u4e0a\u610f\u5411\u9501, \u7136\u540e\u624d\u80fd\u5bf9\u884c\u4e0a\u9501\u3002 InnoDB\u4e2d\u7684\u610f\u5411\u9501\u662f\u8868\u7ea7\u9501\u3002</p> <p>InnoDB\u4e2d\u9501\u4e0d\u517c\u5bb9\u60c5\u51b5 \u56e0\u4e3a\u884c\u7ea7\u9501\u7684\u5b58\u5728, \u6240\u4ee5\u610f\u5411\u9501\u4e0d\u4f1a\u963b\u585e\u9664\u5168\u8868\u626b\u63cf\u610f\u5916\u7684\u4efb\u4f55\u8bf7\u6c42\u3002</p> <p>\u610f\u5411\u9501\u4e4b\u95f4\u662f\u4e92\u76f8\u517c\u5bb9\u7684\u3002 IX\u548cS\u4e0d\u517c\u5bb9, \u6709X\u7684\u5168\u90fd\u4e0d\u517c\u5bb9\u3002</p> IS IX S X IS N IX N N S N N X N N N N <p>\u53ef\u4ee5\u901a\u8fc7\u547d\u4ee4\u67e5\u770b\u5f53\u524d\u6709\u5173\u9501\u7684\u4fe1\u606f:  <pre><code>SHOW ENGINE INNODB STATUS \\G;\n</code></pre> \u4eceInnoDB 1.0\u4e4b\u540e\uff0c\u901a\u8fc7 INFORMATION SCHEMA \u4e2d\u7684\u4e09\u5f20\u8868\u53ef\u4ee5\u66f4\u597d\u5730\u76d1\u63a7\u5f53\u524d\u4e8b\u52a1, \u5e76\u5206\u6790\u53ef\u80fd\u5b58\u5728\u7684\u9501\u95ee\u9898: - INNODB_TRX - INNODB_LOCKS - INNODB_LOCK_WAITS</p>"},{"location":"mysql/mysql-lock/#_3","title":"\u4e00\u81f4\u6027\u8bfb","text":"<p>\u4e00\u81f4\u6027\u975e\u9501\u5b9a\u8bfb \u5728read committed\u548crepeatable read\u9694\u79bb\u7ea7\u522b\u4e0b\uff0c\u4e00\u81f4\u6027\u975e\u9501\u5b9a\u8bfb\u662fInnoDB\u9ed8\u8ba4\u7684\u8bfb\u53d6\u65b9\u5f0f\uff0c\u5176\u5b9e\u73b0\u65b9\u5f0f\u662fMVCC\u3002 \u8fd9\u79cd\u8bfb\u53d6\u65b9\u5f0f\u901a\u8fc7\u8bfb\u53d6undo\u7684\u5feb\u7167\u6570\u636e\uff0c\u907f\u514d\u4e86\u52a0\u9501\u64cd\u4f5c\uff0c\u540c\u6837\u4e5f\u4e0d\u9700\u8981\u7b49\u5f85\u9501\u7684\u91ca\u653e\u3002 \u5728 read committed \u548c repeatable read \u9694\u79bb\u7ea7\u522b\u4e0b\uff0c\u90fd\u662f\u4f7f\u7528\u4e00\u81f4\u6027\u975e\u9501\u5b9a\u8bfb\uff0c\u4f46\u662f\u5bf9\u4e8e\u7248\u672c\u7684\u5b9a\u4e49\u662f\u4e0d\u540c\u7684\u3002 - read committed: \u8bfb\u53d6\u88ab\u9501\u5b9a\u884c\u7684\u6700\u65b0\u7248\u672c (\u5176\u5b9e\u662f\u8fdd\u53cd\u4e86 I \u9694\u79bb\u6027) - repeatable read\uff1a\u8bfb\u53d6\u4e8b\u52a1\u5f00\u59cb\u65f6\u7684\u7248\u672c</p> <p>\u4e00\u81f4\u6027\u9501\u5b9a\u8bfb \u9664\u4e86\u975e\u9501\u5b9a\u8bfb\u5916\uff0c\u53ef\u4ee5\u663e\u5f0f\u5730\u5bf9\u6570\u636e\u5e93\u8bfb\u53d6\u64cd\u4f5c\u8fdb\u884c\u52a0\u9501\u3002 InnoDB\u5bf9SELECT\u8bed\u53e5\u652f\u6301\u4e24\u79cd\u4e00\u81f4\u6027\u9501\u5b9a\u8bfb\u64cd\u4f5c\uff1a - SELECT ... FOR UPDATE     &gt; \u52a0\uff38\u9501 - SELECT ... LOCK IN SHARE MODE     &gt; \u52a0\uff33\u9501</p> <p>\u4f7f\u7528\u4ee5\u4e0a\u4e24\u79cd\u9501\u5b9a\u8bed\u53e5\u7684\u65f6\u5019\u5fc5\u987b\u4fdd\u8bc1\u5728\u4e00\u4e2a\u4e8b\u52a1\u4e2d\u8fdb\u884c\uff0c\u4e8b\u52a1\u7684\u63d0\u4ea4\u4f1a\u91ca\u653e\u9501\u3002</p>"},{"location":"mysql/mysql-lock/#_4","title":"\u9501\u7684\u7b97\u6cd5","text":"<p>InnoDB\u6709\u4e09\u79cd\u884c\u9501\u7684\u7b97\u6cd5 - Record Lock: \u5355\u4e2a\u884c\u8bb0\u5f55\u4e0a\u9501\uff0c\u9501\u4f4f\u7d22\u5f15\u8bb0\u5f55 - Gap Lock: \u95f4\u9699\u9501 - Next-Key Lock: Record Lock + Gap Lock</p> <p>Next-Key Locking\u662f\u4e3a\u4e86\u89e3\u51b3\u5e7b\u5f71\u884c\u7684\u95ee\u9898\u3002\u8fd9\u91cc\u6ce8\u610f\uff0c\u5728repeatable read\u9694\u79bb\u7ea7\u522b\u4e0b\u975e\u9501\u5b9a\u8bfb\u4e5f\u89e3\u51b3\u4e86\u5e7b\u884c\u7684\u95ee\u9898\u3002\u56e0\u4e3aMVCC\u4e2dSELECT\u4f1a\u67e5\u627e\u884c\u7248\u672c\u53f7\u65e9\u4e8e\u5f53\u524d\u4e8b\u52a1\u7248\u672c\u53f7\u7684\u6570\u636e\u884c\uff0cINSERT\u4f1a\u8d4b\u4e88\u65b0\u63d2\u5165\u7684\u884c\u4ee5\u5f53\u524d\u4e8b\u52a1\u7248\u672c\u53f7\u4f5c\u4e3a\u884c\u7248\u672c\u53f7\u3002</p> <p>\u4e3e\u4f8b\u6765\u8bb2\uff0c\u4e8b\u52a1A\u5f00\u59cb\uff0c\u7248\u672c\u53f7A\uff1b\u7136\u540e\u4e8b\u52a1B\u5f00\u59cb\uff0c\u7248\u672c\u53f7B\uff0c\u4e8b\u52a1B\u63d2\u5165\u6570\u636e\u884c\uff0c\u7248\u672c\u53f7\u4e3aB\uff0c\u8fd9\u4e00\u884c\u5bf9A\u662f\u4e0d\u53ef\u89c1\u7684\u3002</p> <p>\u9664\u4e86next-key\u8fd8\u6709previous-key\uff0cNext-Key\u662f\u524d\u5f00\u540e\u95ed\u533a\u95f4\uff0cprevious-key\u662f\u524d\u95ed\u540e\u5f00\u533a\u95f4\u3002\u5f53\u6267\u884cINSERT\u64cd\u4f5c\u7684\u65f6\u5019\u4f1a\u68c0\u6d4b\u4e0b\u4e00\u4e2a\u7d22\u5f15\u6709\u6ca1\u6709\u9501\u5b9a\uff0c\u5982\u679c\u9501\u5b9a\u5219\u963b\u585e\u3002 \u5f53\u6709\u552f\u4e00\u7d22\u5f15\u7684\u65f6\u5019\uff0cnext-key Lock\u4f1a\u964d\u7ea7\u4e3aRecord Lock\u3002</p> <p>\u5e7b\u884c\u6307\u7684\u662f\u540c\u4e00\u4e8b\u7269\u4e2d\uff0c\u8fde\u7eed\u4e24\u6b21\u67e5\u8be2\u4f1a\u8fd4\u56de\u4e0d\u540c\u7684\u7ed3\u679c\u3002 \u5173\u4e8e\u5e7b\u884c\uff0c\u6839\u636e\u4e0a\u8ff0\u7684\u610f\u601d\u5e94\u8be5\u53ef\u4ee5\u5f97\u51fa\uff0c\u884c\u6307\u7684\u662f\u7d22\u5f15\u5217\u76f8\u540c\u7684\u884c\u8bb0\u5f55\u3002</p> <p>Gap Lock\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u663e\u5f0f\u5173\u95ed\uff1a - read committed \u9694\u79bb\u7ea7\u522b - \u53c2\u6570 innodb_locks_unsafe_for_binlog \u8bbe\u4e3a 1</p> <p>\u8fd9\u6837\u9664\u4e86\u552f\u4e00\u6027\u68c0\u67e5\u4e4b\u5916(\u8fd8\u6709\u5916\u952e)\u5c31\u6ca1\u6709\u5176\u4ed6\u7684Gap Lock\u4e86\u3002 \u5173\u95edGap Lock\u4f1a\u7834\u574f\u4e8b\u52a1\u7684\u9694\u79bb\u6027\uff0c\u5e76\u4e14\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e3b\u4ece\u6570\u636e\u4e0d\u4e00\u81f4\u3002\u6b64\u5916\uff0c\u6027\u80fd\u4e0a\u4e5f\u6ca1\u6709\u4f18\u52bf\u3002 \u53ef\u4ee5\u5229\u7528 Next-key Lock \u53ef\u4ee5\u8fdb\u884c\u552f\u4e00\u6027\u68c0\u67e5\u3002  </p> <p>\u6709\u8bfb\u8005\u53ef\u80fd\u4f1a\u6709\u7591\u95ee\uff0cSELECT ... LOCK IN SHARE MODE \u4f1a\u52a0S\u9501\uff0c\u8fd9\u65f6\u5019\u5e76\u53d1\u64cd\u4f5c\uff0cinsert\u7684\u65f6\u5019\u4f1a\u4e0d\u4f1a\u6709\u95ee\u9898\uff1f \u5176\u5b9e\u4e0d\u4f1a\u7684\uff0c\u53ea\u6709\u4e00\u4e2ainsert\u80fd\u6210\u529f\uff0c\u5176\u4ed6\u7684\u90fd\u4f1a\u629b\u51fa\u6b7b\u9501\u7684\u9519\u8bef\u3002</p>"},{"location":"mysql/mysql-lock/#_5","title":"\u9501\u95ee\u9898","text":"<p>\u53e4\u5178\u7684\u4e09\u79cd\u95ee\u9898\u5206\u522b\u662f \u810f\u8bfb\u3001\u4e0d\u53ef\u91cd\u590d\u8bfb\u3001\u4e22\u5931\u66f4\u65b0</p>"},{"location":"mysql/mysql-lock/#_6","title":"\u810f\u8bfb","text":"<p>\u8981\u7406\u89e3\u810f\u8bfb\u9996\u5148\u8981\u660e\u786e\u810f\u6570\u636e\u7684\u6982\u5ff5\uff0c\u8fd9\u91cc\u7684\u810f\u6570\u636e\u8ddf\u810f\u9875\u662f\u4e0d\u540c\u7684\u4e24\u79cd\u6982\u5ff5\u3002\u810f\u9875\u6307\u7684\u662f\u7f13\u51b2\u6c60\u4e2d\u5df2\u7ecf\u88ab\u4fee\u6539\u7684\u9875\uff0c\u8fd8\u6ca1\u6709\u5237\u5199\u5230\u78c1\u76d8(\u5f53\u7136redo\u65e5\u5fd7\u5df2\u7ecf\u8bb0\u5f55\u4e86)\uff1b\u800c\u810f\u6570\u636e\u662f\u4e8b\u7269\u5bf9\u7f13\u51b2\u6c60\u4e2d\u884c\u8bb0\u5f55\u7684\u4fee\u6539\uff0c\u5e76\u4e14\u8fd8\u672a\u63d0\u4ea4\u3002 read uncomitted \u4f1a\u76f4\u63a5\u5bfc\u81f4\u810f\u8bfb\uff0c\u8fd9\u8fdd\u53cd\u4e86\u9694\u79bb\u6027\u3002</p> <p>read uncomitted \u5728\u4e00\u4e9b\u6bd4\u8f83\u7279\u6b8a\u7684\u573a\u666f\u8fd8\u662f\u6709\u7528\u7684\uff0c\u4f8b\u5982 replication \u73af\u5883\u4e2d\u7684slave\u8282\u70b9\uff0c\u5e76\u4e14slave\u4e0a\u7684\u67e5\u8be2\u4e0d\u9700\u8981\u7cbe\u786e\u7684\u8fd4\u56de\u503c\u3002</p>"},{"location":"mysql/mysql-lock/#_7","title":"\u4e0d\u53ef\u91cd\u590d\u8bfb","text":"<p>\u4e0d\u53ef\u91cd\u590d\u8bfb\u6307\u7684\u662f\u4e00\u4e2a\u4e8b\u7269\u5185\u591a\u6b21\u8bfb\u540c\u4e00\u6570\u636e\u96c6\u5408\uff0c\u5728\u8be5\u4e8b\u52a1\u7684\u8fc7\u7a0b\u4e2d\u5176\u4ed6\u4e8b\u52a1\u7684DML\u64cd\u4f5c\u4f1a\u5bfc\u81f4\u8be5\u4e8b\u52a1\u7684\u8bfb\u53d6\u4ea7\u751f\u4e0d\u4e00\u81f4\u3002 read commited \u4f1a\u5bfc\u81f4\u4e0d\u53ef\u91cd\u590d\u8bfb\uff0c\u8fd9\u4e5f\u662f\u8fdd\u53cd\u4e86\u9694\u79bb\u6027\u3002 \u5728MySQL\u5b98\u65b9\u6587\u6863\u4e2d\u4e0d\u53ef\u91cd\u590d\u8bfb\u88ab\u5b9a\u4e49\u4e3a\u4e86Phantom Problem\u3002\u5728InnoDB\u4e2d\uff0c\u901a\u8fc7\u4e34\u952e\u9501\u89e3\u51b3\u4e86\u4e0d\u53ef\u91cd\u590d\u8bfb\u95ee\u9898\u3002  </p> <p>\u300a\u9ad8\u6027\u80fdMySQL\u300b\u548c\u300aMySQL\u6280\u672f\u5185\u5e55-InnoDB\u5b58\u50a8\u5f15\u64ce\u300b\u5bf9\u8be5\u90e8\u5206\u7684\u89e3\u91ca\u6709\u6240\u5dee\u5f02\uff0c\u6211\u503e\u5411\u4e8e\u300aMySQL\u6280\u672f\u5185\u5e55\u300b\u4e2d\u7684\u89e3\u91ca\uff0c\u8bf7\u67e5\u9605MySQL\u5b98\u65b9\u6587\u6863\u81ea\u5df1\u660e\u8fa8\u3002</p>"},{"location":"mysql/mysql-lock/#_8","title":"\u4e22\u5931\u66f4\u65b0","text":"<p>\u4e5f\u662f\u7ecf\u5178\u7684ABA\u95ee\u9898\uff0c\u4e0d\u8fc7\u5728\u6570\u636e\u5e93\u4e2d\u6709\u9501\u673a\u5236\uff0c\u66f4\u65b0\u64cd\u4f5c\u662f\u4e0d\u4f1a\u51fa\u73b0ABA\u95ee\u9898\u7684\u3002 \u4f46\u662f\u5728\u4e1a\u52a1\u903b\u8f91\u4e2d\u5374\u53ef\u80fd\u4ea7\u751f\u8fd9\u6837\u7684\u60c5\u51b5\uff0c\u5148\u67e5\u8be2\u518d\u4fee\u6539\u7684\u573a\u666f\u5982\u679c\u67e5\u8be2\u64cd\u4f5c\u6ca1\u52a0X\u9501\uff0c\u4f1a\u5bfc\u81f4\u6570\u636e\u4e0d\u4e00\u81f4\uff0c\u4e5f\u5c31\u662f\u4e1a\u52a1\u610f\u4e49\u4e0a\u7684\u201c\u5e10\u4e0d\u5e73\u201d\u3002</p>"},{"location":"mysql/mysql-lock/#_9","title":"\u963b\u585e","text":"<p>\u9996\u5148\u7ed9\u51fa\u963b\u585e\u7684\u5b9a\u4e49\uff1a\u56e0\u4e3a\u9501\u4e4b\u95f4\u7684\u517c\u5bb9\u6027\uff0c\u9501\u7684\u7b49\u5f85\u5176\u4ed6\u9501\u91ca\u653e\u8be5\u9501\u9700\u8981\u7684\u8d44\u6e90\u5c31\u662f\u963b\u585e\u3002 InnoDB\u4e2d\uff0c\u53c2\u6570 innodb_lock_wait_timeout \u63a7\u5236\u7b49\u5f85\u65f6\u95f4(\u9ed8\u8ba450s), innodb_rollback_on_timeout \u8bbe\u5b9a\u7b49\u5f85\u8d85\u65f6\u662f\u5426\u8fdb\u884c\u56de\u6eda(\u9ed8\u8ba4OFF)\u3002 \u7b49\u5f85\u65f6\u95f4\u662f\u52a8\u6001\u751f\u6548\u7684\uff0c\u662f\u5426\u56de\u6eda\u8bbe\u7f6e\u662f\u9759\u6001\u7684\uff0c\u542f\u52a8\u540e\u53ea\u8bfb\u3002\u8d85\u65f6\u629b\u51fa ERROR 1205\u3002  </p> <p>\u9700\u8981\u6ce8\u610f\u7684\u4e00\u70b9\u662f\uff0cInnoDB\u5728\u5f88\u591a\u65f6\u5019\u90fd\u4e0d\u4f1a\u5bf9\u5f02\u5e38\u8fdb\u884c\u56de\u6eda\uff0c\u800c\u4e14\u65e2\u4e0dcommit\u4e5f\u4e0drollback\uff0c\u6bd4\u5982\u4e00\u4e2a\u4e8b\u52a1\u4e2d\u63d2\u5165\u4e24\u6761\u6570\u636e\uff0c\u7b2c\u4e8c\u6761\u7531\u4e8e\u963b\u585e\u8d85\u65f6\u4e86\uff0c\u7b2c\u4e00\u6761\u662f\u4e0d\u56de\u6eda\u7684\u3002</p>"},{"location":"mysql/mysql-lock/#_10","title":"\u6b7b\u9501","text":"<p>\u6b7b\u9501\u6307\u7684\u662f\u4e24\u4e2a\u4ee5\u4e0a\u4e8b\u52a1\u5728\u6267\u884c\u8fc7\u7a0b\u4e2d\uff0c\u56e0\u4e89\u593a\u9501\u8d44\u6e90\u800c\u9020\u6210\u7684\u76f8\u4e92\u7b49\u5f85\u7684\u73b0\u8c61\u3002 \u89e3\u6b7b\u9501\u7684\u601d\u8def\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u8ba9\u5176\u4e2d\u4e00\u4e2a\u4e8b\u52a1\u5148\u91ca\u653e\u9501\u8d44\u6e90\uff0c\u901a\u5e38\u662f\u4e8b\u52a1\u56de\u6eda\u3002 \u6700\u7b80\u5355\u7684\u89e3\u51b3\u65b9\u6848\u662f\u6839\u636e\u7b49\u5f85\u65f6\u95f4\u8d85\u65f6\u56de\u6eda\uff0c\u8fd9\u672c\u8d28\u4e0a\u662f\u6839\u636eFIFO\u987a\u5e8f\u8fdb\u884c\u56de\u6eda\uff0c\u5982\u679c\u8d85\u65f6\u7684\u4e8b\u52a1\u64cd\u4f5c\u5f88\u91cd\uff0c\u66f4\u65b0\u4e86\u5f88\u591a\u884c\uff0c\u5360\u7528\u4e86\u5f88\u591a\u7684undo log, \u8fd9\u79cd\u65b9\u5f0f\u53ef\u80fd\u5c31\u662f\u5f88\u4e0d\u6070\u5f53\u4e86\u3002 \u56e0\u6b64\uff0c\u6570\u636e\u5e93\u666e\u904d\u91c7\u7528\u7b49\u5f85\u56fe(wait for graph)\u8fdb\u884c\u6b7b\u9501\u68c0\u6d4b\u3002\u7b49\u5f85\u56fe\u9700\u8981\u4fdd\u5b58\u4e24\u79cd\u4fe1\u606f\uff1a - \u9501\u7684\u4fe1\u606f\u94fe\u8868 - \u4e8b\u52a1\u7b49\u5f85\u94fe\u8868</p> <p>\u94fe\u8868\u90fd\u662f\u6709\u5148\u540e\u987a\u5e8f\u7684\uff0c\u4e8b\u52a1\u95f4\u7684\u7b49\u5f85\u4f1a\u753b\u51fa\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u7b49\u5f85\u56fe\u6709\u73af\uff0c\u90a3\u4e48\u5c31\u5b58\u5728\u6b7b\u9501\u3002</p> \u4e8b\u52a1\u7b49\u5f85\u94fe\u8868 row1\u9501 \u94fe\u8868 row2\u9501 \u94fe\u8868 t1 t2:x t1:s t2 t1:s t4:s t3 t2:x t4 t3:x <p>\u7b49\u5f85\u56fe\u5982\u4e0b\uff1a <pre><code>graph LR\nt1--&gt;t2\nt2--&gt;t1\nt2--&gt;t4\nt3--&gt;t1\nt3--&gt;t2\nt3--&gt;t4</code></pre></p> <p>\u663e\u7136\uff0ct1\u548ct2\u4e2d\u6709\u73af\uff0c\u5b58\u5728\u6b7b\u9501\uff0c\u901a\u5e38InnoDB\u4f1a\u56de\u6edaundo\u91cf\u6700\u5c0f\u7684\u4e8b\u52a1\u3002</p> <p>\u6b7b\u9501\u9519\u8befERROR 1213, InnoDB\u4f1a\u9a6c\u4e0a\u56de\u6eda\u3002</p>"},{"location":"mysql/mysql-lock/#_11","title":"\u9501\u5f00\u9500","text":"<p>InnoDB\u5bf9\u4e8e\u9501\u7684\u5b9e\u73b0\u662f\u91c7\u7528\u4f4d\u56fe\u5b9e\u73b0\u7684\u3002\u6bcf\u4e2a\u9875\u90fd\u6709\u4f4d\u56fe\uff0c\u4e00\u4e2a\u4e8b\u52a1\u5bf9\u4e00\u6761\u8bb0\u5f55\u52a0\u9501\u548c\u5bf9\u4e00\u6574\u9875\u7684\u4e8b\u52a1\u52a0\u9501\u5f00\u9500\u662f\u4e00\u6837\u7684\u3002</p>"},{"location":"mysql/mysql/","title":"2. MySQL","text":""},{"location":"mysql/mysql/#sql","title":"SQL \u8c03\u4f18","text":"<p>\u601d\u8def: \u9762\u5411\u54cd\u5e94\u65f6\u95f4\u7684\u4f18\u5316, \u9996\u5148\u8981\u660e\u786e\u65f6\u95f4\u82b1\u5728\u4ec0\u4e48\u5730\u65b9, \u505a\u5256\u6790(profiling)  <pre><code>set profiling=1;\nshow profiles;\nshow profile cpu for query 1;\n\n    +--------------------------------+----------+\n    | Status                         | Duration |\n    +--------------------------------+----------+\n    | starting                       | 0.000053 |\n    | Executing hook on transaction  | 0.000003 |\n    | starting                       | 0.000006 |\n    | checking permissions           | 0.000003 |\n    | Opening tables                 | 0.000139 |\n    | init                           | 0.000003 |\n    | System lock                    | 0.000005 |\n    | optimizing                     | 0.000003 |\n    | statistics                     | 0.000008 |\n    | preparing                      | 0.000011 |\n    | executing                      | 0.000032 |\n    | end                            | 0.000002 |\n    | query end                      | 0.000002 |\n    | waiting for handler commit     | 0.000005 |\n    | closing tables                 | 0.000004 |\n    | freeing items                  | 0.000027 |\n    | cleaning up                    | 0.000010 |\n    +--------------------------------+----------+\n</code></pre> \u670d\u52a1\u5668\u5c42\u7ed3\u6784: - \u8fde\u63a5\u5668: \u8eab\u4efd\u8ba4\u8bc1\u548c\u6743\u9650\u76f8\u5173(\u767b\u5f55 MySQL \u7684\u65f6\u5019)\u3002 - \u67e5\u8be2\u7f13\u5b58: \u6267\u884c\u67e5\u8be2\u8bed\u53e5\u7684\u65f6\u5019\uff0c\u4f1a\u5148\u67e5\u8be2\u7f13\u5b58\uff08MySQL 8.0 \u7248\u672c\u540e\u79fb\u9664\uff0c\u56e0\u4e3a\u6b64\u529f\u80fd\u4e0d\u5b9e\u7528\uff09\u3002 - \u5206\u6790\u5668: SQL \u8bed\u53e5\u4f1a\u7ecf\u8fc7\u5206\u6790\u5668\uff0c\u5206\u6790\u5668\u8bf4\u767d\u4e86\u5c31\u662f\u8981\u5148\u770b\u4f60\u7684 SQL \u8bed\u53e5\u8981\u5e72\u561b\uff0c\u518d\u68c0\u67e5\u4f60\u7684 SQL \u8bed\u53e5\u8bed\u6cd5\u662f\u5426\u6b63\u786e\u3002 - \u4f18\u5316\u5668: \u6309\u7167 MySQL \u8ba4\u4e3a\u6700\u4f18\u7684\u65b9\u6848\u53bb\u6267\u884c\u3002 - \u6267\u884c\u5668: \u6267\u884c\u8bed\u53e5\uff0c\u7136\u540e\u4ece\u5b58\u50a8\u5f15\u64ce\u8fd4\u56de\u6570\u636e\u3002</p> <p>\u66f4\u65b0\u8bed\u53e5\u6267\u884c\u8fc7\u7a0b: 1. \u4ece\u78c1\u76d8\u6587\u4ef6\u4e2d\u627e\u5230\u5bf9\u5e94\u67e5\u8be2\u6761\u4ef6\u7684\u6574\u9875\u6570\u636e\uff0c\u52a0\u8f7d\u5230buffer pool 2. \u5c06\u66f4\u65b0\u6570\u636e\u7684\u65e7\u503c\u5199\u5165\u5230undo log\u6587\u4ef6\u5907\u4efd 3. \u66f4\u65b0buffer pool\u5185\u7684\u6570\u636e\uff0c\u5199redo log buffer 4. \u51c6\u5907\u63d0\u4ea4\u4e8b\u52a1, \u51c6\u5907\u5c06redo log\u5199\u5165\u78c1\u76d8\uff0credo log prepared 5. \u6267\u884c\u5668\u751f\u6210binlog, \u5e76\u51c6\u5907\u5c06binlog\u5199\u5165\u78c1\u76d8 6. \u6267\u884c\u5668\u8c03\u7528\u5b58\u50a8\u5f15\u64ce\u63a5\u53e3\uff0c\u5199\u5165commit\u6807\u8bb0\u5230redo log\u91cc\uff0credo log commit\uff0c\u63d0\u4ea4\u4e8b\u52a1\u5b8c\u6210\uff0cbuffer pool\u968f\u673a\u5199\u5165\u78c1\u76d8\u3002</p> <p>\u4e8c\u9636\u6bb5\u63d0\u4ea4: \u5148redo log prepared, \u7136\u540e\u8bb0\u5f55 binlog, \u6700\u540eredo log commit</p>"},{"location":"mysql/mysql/#_1","title":"\u7d22\u5f15\u6ca1\u6709\u88ab\u4f7f\u7528","text":"<ul> <li>\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362</li> <li>\u5982\u679cwhere\u6761\u4ef6\u4e2d\u542b\u6709or, \u9664\u975eor\u6761\u4ef6\u4e2d\u7684\u6240\u6709\u5217\u90fd\u662f\u7d22\u5f15\u5217\uff0c\u5426\u5219\u4e0d\u8d70</li> <li>\u5bf9\u4e8e\u591a\u5217\u7d22\u5f15\uff0c\u5982\u679c\u6ca1\u6709\u4f7f\u7528\u524d\u5bfc\u5217</li> <li>\u5982\u679c\u5bf9\u7d22\u5f15\u5b57\u6bb5\u4f7f\u7528\u51fd\u6570\u7b97\u6570\u8fd0\u7b97\u6216\u8005\u5176\u4ed6\u8868\u8fbe\u5f0f\u64cd\u4f5c</li> <li>\u6570\u91cf\u5c11\uff0c\u89c9\u5f97\u5168\u8868\u626b\u63cf\u6bd4\u7528\u7d22\u5f15\u5feb</li> <li>like\u4ee5%\u5f00\u5934</li> </ul>"},{"location":"mysql/mysql/#_2","title":"\u9690\u5f0f\u7c7b\u578b\u8f6c\u6362","text":"<ul> <li>varchar \u7c7b\u578b\u7684\u4f1a\u9690\u5f0f\u8f6c\u6362\u4e3a\u6570\u503c\u578b</li> <li>\u4f8b\u5982 varchar \u7c7b\u578b\u7684\u7d22\u5f15, \u67e5\u8be2\u6761\u4ef6\u7528 int \u7d22\u5f15\u5931\u6548  </li> <li>\u9690\u5f0f\u8f6c\u6362 varchar -&gt; int \u622a\u53d6\u524dn\u4e2a\u6570\u5b57\u5f62\u5f0f\u7684\u5b57\u7b26\uff0c\u5982\u679cn=0\uff0c\u5219\u8f6c\u6362\u4e3a0;  </li> </ul>"},{"location":"mysql/mysql/#innodb-acid","title":"InnoDB \u5982\u4f55\u5b9e\u73b0\u4e8b\u52a1\u7684 ACID","text":"<ul> <li>\u4f7f\u7528 undo log(\u56de\u6eda\u65e5\u5fd7) \u6765\u4fdd\u8bc1\u4e8b\u52a1\u7684\u539f\u5b50\u6027\u3002</li> <li>\u4f7f\u7528 redo log(\u91cd\u505a\u65e5\u5fd7) \u4fdd\u8bc1\u4e8b\u52a1\u7684\u6301\u4e45\u6027\u3002</li> <li>InnoDB \u901a\u8fc7 \u9501\u673a\u5236\u3001MVCC \u7b49\u624b\u6bb5\u6765\u4fdd\u8bc1\u4e8b\u52a1\u7684\u9694\u79bb\u6027\uff08 \u9ed8\u8ba4\u652f\u6301\u7684\u9694\u79bb\u7ea7\u522b\u662f REPEATABLE-READ \uff09\u3002</li> <li>\u4fdd\u8bc1\u4e86\u4e8b\u52a1\u7684\u6301\u4e45\u6027\u3001\u539f\u5b50\u6027\u3001\u9694\u79bb\u6027\u4e4b\u540e\uff0c\u4e00\u81f4\u6027\u624d\u80fd\u5f97\u5230\u4fdd\u969c\u3002</li> </ul>"},{"location":"mysql/mysql/#innodb","title":"InnoDB \u884c\u7ea7\u9501\u7684\u5b9e\u73b0","text":"<ul> <li>Record lock\uff1a\u5355\u4e2a\u884c\u8bb0\u5f55\u4e0a\u7684\u9501</li> <li>Gap lock\uff1a\u95f4\u9699\u9501\uff0c\u9501\u5b9a\u4e00\u4e2a\u8303\u56f4\uff0c\u4e0d\u5305\u62ec\u8bb0\u5f55\u672c\u8eab</li> <li>Next-key lock\uff1arecord+gap \u9501\u5b9a\u4e00\u4e2a\u8303\u56f4\uff0c\u5305\u542b\u8bb0\u5f55\u672c\u8eab</li> </ul>"},{"location":"mysql/mysql/#mysql","title":"MySQL \u7f13\u5b58\u95ee\u9898","text":"<ul> <li>MySQL 8.0\u540e\u79fb\u9664; </li> <li>\u53ef\u4ee5\u624b\u52a8\u5f00\u542f; </li> <li>\u53ef\u4ee5\u8bbe\u7f6e\u5927\u5c0f(\u51e0\u5341MB\u6bd4\u8f83\u5408\u9002); </li> <li>\u53ef\u4ee5\u63a7\u5236\u67d0\u4e2a\u5177\u4f53\u67e5\u8be2\u8bed\u53e5\u662f\u5426\u9700\u8981\u7f13\u5b58;</li> </ul>"},{"location":"mysql/mysql/#acid","title":"\u4e8b\u52a1\u7684ACID","text":"<ul> <li>\u539f\u5b50\u6027(Atomicit):     \u4e8b\u52a1\u662f\u6700\u5c0f\u7684\u6267\u884c\u5355\u4f4d\uff0c\u4e0d\u5141\u8bb8\u5206\u5272\u3002\u4e8b\u52a1\u7684\u539f\u5b50\u6027\u786e\u4fdd\u52a8\u4f5c\u8981\u4e48\u5168\u90e8\u5b8c\u6210\uff0c\u8981\u4e48\u5b8c\u5168\u4e0d\u8d77\u4f5c\u7528\uff1b</li> <li>\u4e00\u81f4\u6027(Consistency):  \u6267\u884c\u4e8b\u52a1\u524d\u540e\uff0c\u6570\u636e\u4fdd\u6301\u4e00\u81f4\uff0c\u4f8b\u5982\u8f6c\u8d26\u4e1a\u52a1\u4e2d\uff0c\u65e0\u8bba\u4e8b\u52a1\u662f\u5426\u6210\u529f\uff0c\u8f6c\u8d26\u8005\u548c\u6536\u6b3e\u4eba\u7684\u603b\u989d\u5e94\u8be5\u662f\u4e0d\u53d8\u7684\uff1b</li> <li>\u9694\u79bb\u6027(Isolation):    \u5e76\u53d1\u8bbf\u95ee\u6570\u636e\u5e93\u65f6\uff0c\u4e8b\u52a1\u4e0d\u88ab\u5176\u4ed6\u4e8b\u52a1\u6240\u5e72\u6270\uff0c\u5404\u5e76\u53d1\u4e8b\u52a1\u4e4b\u95f4\u662f\u72ec\u7acb\u7684\uff1b</li> <li>\u6301\u4e45\u6027(Durabilily):   \u4e00\u4e2a\u4e8b\u52a1\u88ab\u63d0\u4ea4\u4e4b\u540e\u3002\u5b83\u5bf9\u6570\u636e\u5e93\u4e2d\u6570\u636e\u7684\u6539\u53d8\u662f\u6301\u4e45\u7684\uff0c\u5373\u4f7f\u6570\u636e\u5e93\u53d1\u751f\u6545\u969c\u4e5f\u4e0d\u5e94\u8be5\u5bf9\u5176\u6709\u4efb\u4f55\u5f71\u54cd\u3002</li> </ul>"},{"location":"mysql/mysql/#_3","title":"\u4e8b\u52a1\u9694\u79bb\u7ea7\u522b","text":"<ul> <li>READ UNCOMMITIED\uff08\u8bfb\u672a\u63d0\u4ea4\uff09</li> <li>\u4e00\u4e2a\u4e8b\u52a1\u672a\u63d0\u4ea4\u65f6\uff0c\u5bf9\u5176\u4ed6\u4e8b\u52a1\u4e5f\u662f\u53ef\u89c1\u7684</li> <li>\u810f\u8bfb</li> <li>READ COMMITIED\uff08\u8bfb\u5df2\u63d0\u4ea4\uff09 </li> <li>\u7b2c\u4e00\u4e2a\u4e8b\u52a1\u4e2d\u7684\u4e24\u6b21\u8bfb\u6570\u636e\u4e4b\u95f4\uff0c\u7531\u4e8e\u7b2c\u4e8c\u4e2a\u4e8b\u52a1\u7684\u63d0\u4ea4\u5bfc\u81f4\u7b2c\u4e00\u4e2a\u4e8b\u52a1\u4e24\u6b21\u8bfb\u53d6\u7684\u6570\u636e\u53ef\u80fd\u4e0d\u4e00\u6837</li> <li>\u4e0d\u53ef\u91cd\u590d\u8bfb</li> <li>\u5927\u591a\u6570DB\u7cfb\u7edf\u7684\u9ed8\u8ba4\u9694\u79bb\u7ea7\u522b\u3002</li> <li>REPEATABLE READ\uff08\u53ef\u91cd\u590d\u8bfb\uff09</li> <li>\u8bfb\u4e8b\u52a1\u5f00\u59cb\u65f6\u7684\u6570\u636e</li> <li>\u5e7b\u8bfb</li> <li>\u5176\u4ed6\u4e8b\u52a1\u589e\u5220\u64cd\u4f5c\u4f1a\u4ea7\u751f\u5e7b\u884c\uff0cInnoDB\u548cXtraDB\u901a\u8fc7\u591a\u7248\u672c\u5e76\u53d1\u63a7\u5236(MVCC)\u89e3\u51b3\u4e86\u5e7b\u8bfb\u3002</li> <li>SERIALIZABLE\uff08\u4e32\u884c\u5316\uff09</li> <li>\u4e8b\u52a1\u4e32\u884c\uff0c\u8bfb\u53d6\u7684\u6bcf\u4e00\u884c\u6570\u636e\u4e0a\u90fd\u52a0\u9501\uff0c\u53ef\u80fd\u4f1a\u9020\u6210\u5927\u91cf\u7684\u8d85\u65f6\u548c\u9501\u4e89\u7528\u95ee\u9898\uff0c\u53ea\u6709\u975e\u5e38\u9700\u8981\u786e\u4fdd\u6570\u636e\u7684\u4e00\u81f4\u6027\u800c\u4e14\u53ef\u4ee5\u63a5\u53d7\u6ca1\u6709\u4e95\u53d1\u7684\u60c5\u51b5\u4e0b\u624d\u8003\u8651</li> </ul>"},{"location":"mysql/mysql/#innodb_1","title":"InnoDB\u600e\u4e48\u89e3\u51b3\u5e7b\u8bfb\u95ee\u9898","text":"<ul> <li>\u5728\u5f53\u524d\u8bfb\u573a\u666f\u4e0b\u901a\u8fc7LBCC(\u57fa\u4e8e\u9501\u7684\u5e76\u53d1\u63a7\u5236)   \u57fa\u4e8e\u9501\u7684\u5e76\u53d1\u63a7\u5236, \u8bfb\u53d6\u7684\u65f6\u5019\u52a0\u4e34\u952e\u9501(next-key).  <p>select for update || DELETE\\UPDATE\\INSERT INTO\\REPLACE INTO || SELECT LOCK IN SHARE MODE</p> </li> <li>\u5728\u5feb\u7167\u8bfb\u573a\u666f\u4e0b\u901a\u8fc7MVCC</li> </ul>"},{"location":"mysql/mysql/#mvcc","title":"MVCC","text":"<p>InnoDB MVCC \u7684\u5b9e\u73b0\u662f\u901a\u8fc7\u4fdd\u5b58\u6570\u636e\u5728\u67d0\u4e2a\u65f6\u95f4\u70b9\u7684\u5feb\u7167\u6765\u5b9e\u73b0\u7684\u3002 \u4e0d\u7ba1\u4e8b\u52a1\u9700\u8981\u6267\u884c\u591a\u957f\u65f6\u95f4\uff0c\u5b83\u770b\u5230\u7684\u6570\u636e\u662f\u4e00\u81f4\u7684\uff1b\u6839\u636e\u4e8b\u52a1\u7684\u5f00\u59cb\u65f6\u95f4\u4e0d\u540c\uff0c\u4e0d\u540c\u4e8b\u52a1\u5728\u540c\u4e00\u65f6\u523b\u770b\u5230\u7684\u6570\u636e\u53ef\u80fd\u662f\u4e0d\u4e00\u6837\u7684\u3002 \u53ea\u5728\u8bfb\u5df2\u63d0\u4ea4\u548c\u53ef\u91cd\u590d\u8bfb\u4e0b\u5de5\u4f5c InnoDB: - \u884c\u8bb0\u5f55\u7248\u672c\u53f7\uff1a\u6bcf\u4e2a\u884c\u8bb0\u5f55\u4fdd\u5b58\u4e24\u4e2a\u7248\u672c\u53f7(\u521b\u5efa\u3001\u5220\u9664) - \u4e8b\u52a1\u7248\u672c\u53f7\uff1a\u6bcf\u5f00\u59cb\u4e00\u4e2a\u65b0\u7684\u4e8b\u52a1\uff0c\u7248\u672c\u53f7\u81ea\u589e\u3002\u4e8b\u52a1\u5f00\u59cb\u65f6\u523b\u81ea\u589e\u7684\u7248\u672c\u53f7\u4f5c\u4e3a\u4e8b\u52a1\u7684\u7248\u672c\u53f7\u3002 - \u5728\u53ef\u91cd\u590d\u8bfb\u7684\u9694\u79bb\u7ea7\u522b\u4e0b\uff1a   - select (\u6838\u5fc3\uff1a\u4e8b\u52a1\u5f00\u542f\u7684\u65f6\u523b\uff0c\u8bb0\u5f55\u662f\u6700\u65b0\u5b58\u5728\u7684)     - \u53ea\u67e5\u627e\u7248\u672c\u65e9\u4e8e\u6216\u7b49\u4e8e\u5f53\u524d\u4e8b\u52a1\u7248\u672c\u7684\u6570\u636e\u884c\uff0c\u786e\u4fdd\u4e8b\u52a1\u8bfb\u53d6\u7684\u884c\u65e9\u4e8e\u4e8b\u52a1\u6216\u4e8b\u52a1\u672c\u8eab\u63d2\u5165\u6216\u4fee\u6539\u7684\u3002     - \u884c\u7684\u8fc7\u671f\u7248\u672c\u8981\u4e48\u672a\u5b9a\u4e49\uff0c\u8981\u4e48\u5927\u4e8e\u5f53\u524d\u4e8b\u52a1\u7248\u672c\u53f7\uff0c\u786e\u4fdd\u4e8b\u52a1\u8bfb\u53d6\u5230\u7684\u884c\uff0c\u5728\u4e8b\u52a1\u5f00\u59cb\u4e4b\u65f6\u672a\u8fc7\u671f\u3002     - \u53ea\u6709\u6761\u4ef61\u30012\u540c\u65f6\u6ee1\u8db3\u7684\u8bb0\u5f55\uff0c\u624d\u80fd\u8fd4\u56de\u4f5c\u4e3a\u67e5\u8be2\u7ed3\u679c.</p> <ul> <li> <p>insert</p> <ul> <li>\u65b0\u589e\u65f6\u4fdd\u5b58\u5f53\u524d\u7cfb\u7edf\u7248\u672c\u53f7\u4f5c\u4e3a\u65b0\u589e\u7248\u672c\u53f7\u3002</li> </ul> </li> <li> <p>delete</p> <ul> <li>\u5220\u9664\u65f6\u4fdd\u5b58\u7cfb\u7edf\u5f53\u524d\u7248\u672c\u53f7\u4f5c\u4e3a\u5220\u9664\u7248\u672c\u53f7\u3002</li> </ul> </li> <li> <p>update</p> <ul> <li>\u63d2\u5165\u4e00\u6761\u65b0\u7eaa\u5f55\uff0c\u5f53\u524d\u7cfb\u7edf\u7248\u672c\u53f7\u4f5c\u4e3a\u65b0\u589e\u7248\u672c\u53f7\uff0c\u540c\u65f6\u4fdd\u5b58\u5f53\u524d\u7cfb\u7edf\u7248\u672c\u53f7\u4f5c\u4e3a\u539f\u8bb0\u5f55\u7684\u5220\u9664\u7248\u672c\u53f7\u3002</li> </ul> </li> <li> <p>\u4e2a\u4eba\u7406\u89e3: \u5728\u5e76\u53d1\u6761\u4ef6\u4e0b, \u6bd4\u5982\u4e8b\u52a1A(\u7248\u672c1) \u4e8b\u52a1B(\u7248\u672c2):</p> </li> <li>(B\u7684\u589e\u5220\u64cd\u4f5c\u5f71\u54cd\u4e0d\u5230A) B\u5220\u9664\uff0cA\u4e5f\u80fd\u8bfb\u5230, \u4f46\u4e0d\u80fd\u8bfbB\u7684\u65b0\u589e, B\u66f4\u65b0, A\u8bfb\u5230\u539f\u7eaa\u5f55.</li> <li>(A\u7684\u589e\u5220\u64cd\u4f5c\u4f1a\u5f71\u54cdB) B\u80fd\u8bfbA\u7684\u65b0\u589e, A\u548c\u81ea\u5df1\u7684\u5220\u9664\u5c31\u8bfb\u4e0d\u5230\u4e86, A\u66f4\u65b0, B\u8bfb\u5230\u65b0\u8bb0\u5f55.</li> </ul>"},{"location":"mysql/mysql/#mysql_1","title":"MySQL\u7d22\u5f15\u4e24\u79cd\u4e3b\u8981\u7684\u6570\u636e\u7ed3\u6784","text":"<ul> <li>\u54c8\u5e0c\u7d22\u5f15   \u6700\u5927\u7684\u7f3a\u70b9\u662f\u4e0d\u652f\u6301\u987a\u5e8f\u548c\u8303\u56f4\u67e5\u8be2</li> <li>BTree   \u90fd\u662f\u4f7f\u7528\u7684B+Tree</li> <li>MyISAM     \u53f6\u8282\u70b9\u7684data\u57df\u5b58\u653e\u7684\u662f\u6570\u636e\u6587\u4ef6\u7684\u5730\u5740; \u975e\u805a\u7c07\u7d22\u5f15</li> <li>InnoDB     \u4e3b\u952e\u7d22\u5f15\u672c\u8eab\u5305\u542b\u4e86\u5168\u90e8\u6570\u636e\uff0c\u5176\u4ed6\u7684\u8f85\u52a9\u7d22\u5f15\u7684\u53f6\u8282\u70b9\u5b58\u50a8\u7684\u662f\u4e3b\u952e; \u805a\u7c07\u7d22\u5f15</li> <li>\u7a7a\u95f4\u6570\u636e\u7d22\u5f15</li> <li>\u5168\u6587\u7d22\u5f15</li> </ul>"},{"location":"mysql/mysql/#_4","title":"\u8986\u76d6\u7d22\u5f15","text":"<p>\u5305\u542b\u67e5\u8be2\u4e2d\u6240\u6709\u5b57\u6bb5\u7684\u7d22\u5f15 \u4e0d\u9700\u8981\u56de\u8868, \u51cf\u5c11\u4e00\u6b21\u7d22\u5f15\u64cd\u4f5c, \u968f\u673aI/O\u6bd4\u987a\u5e8fI/O\u6162</p>"},{"location":"mysql/mysql/#todo","title":"\u6ce8\u610f\u533a\u5206\u6570\u636e\u7684\u7269\u7406\u7ed3\u6784\u548c\u903b\u8f91\u7ed3\u6784 todo","text":"<p>\u7269\u7406\u7ed3\u6784\uff1a\uff08\u6bb5segment \u533aextent \u9875 \u884c\uff09 \u903b\u8f91\u7ed3\u6784\uff1a </p>"},{"location":"mysql/mysql/#_5","title":"\u7d22\u5f15\u4e3a\u4ec0\u4e48\u5feb","text":"<p>MySQL\u57fa\u672c\u5b58\u50a8\u7ed3\u6784 (InnoDB\u5f15\u64ce) \u5c06\u6570\u636e\u5212\u5206\u4e3a\u82e5\u5e72\u4e2a\u78c1\u76d8\u9875\uff0c\u4ee5\u9875\u4f5c\u4e3a\u78c1\u76d8\u548c\u5185\u5b58\u4e4b\u95f4\u4ea4\u4e92\u7684\u57fa\u672c\u5355\u4f4d\uff0cInnoDB\u4e2d\u9875\u7684\u5927\u5c0f\u4e00\u822c\u4e3a 16 KB\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e00\u6b21\u6700\u5c11\u4ece\u78c1\u76d8\u4e2d\u8bfb\u53d616KB\u7684\u5185\u5bb9\u5230\u5185\u5b58\u4e2d\uff0c\u4e00\u6b21\u6700\u5c11\u628a\u5185\u5b58\u4e2d\u768416KB\u5185\u5bb9\u5237\u65b0\u5230\u78c1\u76d8\u4e2d\u3002 - \u5404\u4e2a\u6570\u636e\u9875\u4e4b\u95f4\u53ef\u4ee5\u7ec4\u6210\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\uff08\u5c31\u662fB+\u6811\u7684\u5404\u4e2a\u9875\u4e4b\u95f4\u90fd\u6309\u7167\u7d22\u5f15\u503c\u987a\u5e8f\u7528\u53cc\u5411\u94fe\u8868\u8fde\u63a5\u8d77\u6765\uff09 - \u6bcf\u4e2a\u6570\u636e\u9875\u90fd\u4f1a\u4e3a\u5b58\u50a8\u5728\u5b83\u91cc\u8fb9\u7684\u8bb0\u5f55\u751f\u6210\u4e00\u4e2a\u9875\u76ee\u5f55\uff0c\u8be5\u76ee\u5f55\u662f\u7528\u6570\u7ec4\u8fdb\u884c\u7ba1\u7406\uff0c\u5728\u901a\u8fc7\u4e3b\u952e\u67e5\u627e\u67d0\u6761\u8bb0\u5f55\u7684\u65f6\u5019\u53ef\u4ee5\u5728\u9875\u76ee\u5f55\u4e2d\u4f7f\u7528\u4e8c\u5206\u6cd5\u5feb\u901f\u5b9a\u4f4d\u5230\u5bf9\u5e94\u7684\u69fd\uff0c\u7136\u540e\u518d\u904d\u5386\u8be5\u69fd\u5bf9\u5e94\u5206\u7ec4\u4e2d\u7684\u8bb0\u5f55\u5373\u53ef\u5feb\u901f\u627e\u5230\u6307\u5b9a\u7684\u8bb0\u5f55</p> <p>\u65e0\u7d22\u5f15\u6761\u4ef6\u4e0bO(n)\u590d\u6742\u5ea6\uff0c\u7d22\u5f15\u91cd\u65b0\u7ec4\u7ec7\u4e86\u903b\u8f91\u987a\u5e8f, \u4f7f\u67e5\u627e\u6570\u636e\u9875\u7684\u65f6\u5019\u590d\u6742\u5ea6\u53d8\u6210O(logN)</p>"},{"location":"mysql/mysql/#bb","title":"B\u6811\u548cB+\u6811\u7684\u533a\u522b","text":"<p>B: - \u6240\u6709\u8282\u70b9\u4e0d\u4ec5\u5b58\u653ekey,\u4e5f\u5b58\u653edata - \u6240\u6709\u7684\u53f6\u8282\u70b9\u90fd\u662f\u72ec\u7acb\u7684 - \u68c0\u7d22\u8fc7\u7a0b\u90fd\u662f\u7c7b\u4f3c\u4e8c\u5206\u67e5\u627e, \u6709\u65f6\u5019\u4e0d\u5230\u53f6\u5b50\u8282\u70b9\u5c31\u627e\u5230\u4e86</p> <p>B+: - \u53ea\u6709\u53f6\u5b50\u8282\u70b9\u5b58\u653ekey\u548cdata, \u5176\u4ed6\u53ea\u5b58\u653ekey - \u53f6\u5b50\u8282\u70b9\u6709\u4e00\u6761\u5f15\u7528\u94fe\u6307\u5411\u76f8\u90bb\u7684\u53f6\u8282\u70b9 - \u4efb\u4f55\u67e5\u627e\u90fd\u662f\u4ece\u6839\u5230\u9875, \u9875\u4e4b\u95f4\u987a\u5e8f\u68c0\u7d22\u5f88\u660e\u663e</p>"},{"location":"mysql/mysql/#binlog","title":"binlog","text":"<p>binlog \u8bb0\u5f55\u4e86\u6267\u884c\u66f4\u6539(\u53ea\u8981\u6267\u884c\u5c31\u4f1a\u8bb0\u5f55\uff0c\u5e76\u4e0d\u662f\u975e\u8981\u5b9e\u9645\u66f4\u6539)\u7684\u6240\u6709\u64cd\u4f5c - \u6062\u590d - \u590d\u5236 - \u5ba1\u8ba1\uff1a\u6838\u9a8c\u662f\u5426\u6709\u6ce8\u5165\u653b\u51fb</p> <p>\u4e8b\u52a1\u672a\u63d0\u4ea4\u7684\u65e5\u5fd7\u4f1a\u8bb0\u5f55\u5230\u7f13\u5b58\uff0c\u63d0\u4ea4\u65f6\u5c06\u7f13\u5b58\u5199\u5165\u65e5\u5fd7\u6587\u4ef6\u3002 sync_binlog \u6bcf\u591a\u5c11\u6b21\u4e8b\u52a1\u5c06\u7f13\u5b58\u5199\u5165\uff0c1\u662f\u5373\u65f6\u5199\uff0c\u4f46\u662f\u4f1a\u6709\u6027\u80fd\u5f71\u54cd\uff0c\u5e76\u4e14\u4e8b\u52a1\u672a\u63d0\u4ea4\u4f1a\u51fa\u73b0\u810f\u6570\u636e\u3002 binlog_format: STATEMENT / ROW / MIXED STATEMENT \u4e0d\u652f\u6301\u5e76\u53d1 \u65f6\u95f4\u51fd\u6570\u95ee\u9898 ROW \u652f\u6301\u5e76\u53d1</p>"},{"location":"mysql/mysql/#b","title":"\u8df3\u8868\u4e0eB+\u6811","text":"<p>MySQL\u7684\u6027\u80fd\u74f6\u9888\u901a\u5e38\u5728IO\u4e0a\uff0cB+\u6811\u53f6\u5b50\u8282\u70b9\u78c1\u76d8\u9875\u7684\u8bbe\u8ba1\u662f\u4e3a\u4e86\u6700\u5927\u9650\u5ea6\u5730\u964d\u4f4e\u78c1\u76d8IO Redis\u5185\u5b58\u8bfb\u5199\uff0c\u4f7f\u7528\u4e86\u8df3\u8868</p>"},{"location":"mysql/mysql/#bb_1","title":"B\u6811\u548cB+\u6811","text":"<p>\u6811\u9ad8\uff0c\u51cf\u5c11IO\u6b21\u6570\uff1b \u53f6\u5b50\u8282\u70b9\u6709\u53cc\u5411\u7684\u6307\u9488\uff0c\u65b9\u4fbf\u8303\u56f4\u67e5\u8be2</p>"},{"location":"mysql/mysql/#datetime-timestamp","title":"Datetime \u548c Timestamp","text":"<p>Datetime  - 8\u5b57\u8282 - \u65e0\u65f6\u533a</p> <p>Timestamp \u6709\u4e9b\u95ee\u9898\uff0c\u901a\u5e38\u7528int - 4\u5b57\u8282 - \u6709\u65f6\u533a - \u5b58\u50a8\u5230s, \u6beb\u79d2\u53ef\u7528MariaDB, \u6216\u989d\u5916\u7528\u5b57\u6bb5\u5b58</p>"},{"location":"mysql/mysql/#_6","title":"\u8bfb\u5199\u5206\u79bb","text":"<p>\u4e3b\u8981\u662f\u4e3a\u4e86\u5c06\u5bf9\u6570\u636e\u5e93\u7684\u8bfb\u5199\u64cd\u4f5c\u5206\u6563\u5230\u4e0d\u540c\u7684\u6570\u636e\u5e93\u8282\u70b9\u4e0a, \u5c0f\u5e45\u63d0\u5347\u5199\u6027\u80fd\uff0c\u5927\u5e45\u63d0\u5347\u8bfb\u6027\u80fd\u3002 \u5b9e\u73b0: - \u90e8\u7f72\u591a\u53f0\u6570\u636e\u5e93\uff0c\u9009\u62e9\u4e00\u79cd\u7684\u4e00\u53f0\u4f5c\u4e3a\u4e3b\u6570\u636e\u5e93\uff0c\u5176\u4ed6\u7684\u4e00\u53f0\u6216\u8005\u591a\u53f0\u4f5c\u4e3a\u4ece\u6570\u636e\u5e93\u3002 - \u4fdd\u8bc1\u4e3b\u6570\u636e\u5e93\u548c\u4ece\u6570\u636e\u5e93\u4e4b\u95f4\u7684\u6570\u636e\u662f\u5b9e\u65f6\u540c\u6b65\u7684\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e5f\u5c31\u662f\u6211\u4eec\u5e38\u8bf4\u7684\u4e3b\u4ece\u590d\u5236\u3002 - \u7cfb\u7edf\u5c06\u5199\u8bf7\u6c42\u4ea4\u7ed9\u4e3b\u6570\u636e\u5e93\u5904\u7406\uff0c\u8bfb\u8bf7\u6c42\u4ea4\u7ed9\u4ece\u6570\u636e\u5e93\u5904\u7406\u3002</p> <p>\u4e3b\u4ece\u540c\u6b65\u8fc7\u7a0b <pre><code>\u4e3b\u5e93\u5199binlog -&gt; \u4ece\u5e93\u8bf7\u6c42\u66f4\u65b0binlog -&gt; \u4e3b\u5e93\u53d1\u9001 -&gt; \u4ece\u5e93\u63a5\u6536 -&gt; \u5199\u5230relay log -&gt; \u6267\u884c\n</code></pre> - \u4e3b\u5e93\u5c06\u6570\u636e\u5e93\u4e2d\u6570\u636e\u7684\u53d8\u5316\u5199\u5165\u5230 binlog - \u4ece\u5e93\u8fde\u63a5\u4e3b\u5e93 - \u4ece\u5e93\u4f1a\u521b\u5efa\u4e00\u4e2a I/O \u7ebf\u7a0b\u5411\u4e3b\u5e93\u8bf7\u6c42\u66f4\u65b0\u7684 binlog - \u4e3b\u5e93\u4f1a\u521b\u5efa\u4e00\u4e2a binlog dump \u7ebf\u7a0b\u6765\u53d1\u9001 binlog \uff0c\u4ece\u5e93\u4e2d\u7684 I/O \u7ebf\u7a0b\u8d1f\u8d23\u63a5\u6536 - \u4ece\u5e93\u7684 I/O \u7ebf\u7a0b\u5c06\u63a5\u6536\u7684 binlog \u5199\u5165\u5230 relay log \u4e2d\u3002 - \u4ece\u5e93\u7684 SQL \u7ebf\u7a0b\u8bfb\u53d6 relay log \u540c\u6b65\u6570\u636e\u672c\u5730\uff08\u4e5f\u5c31\u662f\u518d\u6267\u884c\u4e00\u904d SQL \uff09\u3002</p> <p>\u4e3b\u4ece\u540c\u6b65\u5ef6\u8fdf\u89e3\u51b3: - \u628a\u4ece\u8def\u7531\u5230\u4e3b\u5e93 - \u5ef6\u8fdf\u8bfb\u53d6\u65f6\u95f4</p>"},{"location":"mysql/mysql/#_7","title":"\u5206\u5e93\u5206\u8868","text":"<ul> <li>\u5355\u8868\u6570\u636e\u5927 </li> <li>\u6570\u636e\u5e93\u592a\u5927 </li> <li>\u5e94\u7528\u5e76\u53d1\u592a\u5927</li> </ul> <p>\u89e3\u51b3\u65b9\u6848: Apache ShardingSphere </p>"},{"location":"mysql/mysql/#explain","title":"explain","text":"<pre><code>+----+-------------+---------+------------+-------+---------------+---------+---------+-------+------+----------+-------+\n| id | select_type | table   | partitions | type  | possible_keys | key     | key_len | ref   | rows | filtered | Extra |\n+----+-------------+---------+------------+-------+---------------+---------+---------+-------+------+----------+-------+\n|  1 | SIMPLE      | seckill | NULL       | const | PRIMARY       | PRIMARY | 8       | const |    1 |   100.00 | NULL  |\n+----+-------------+---------+------------+-------+---------------+---------+---------+-------+------+----------+-------+\n\n  id //\u8d8a\u5927\u4f18\u5148\u7ea7\u8d8a\u9ad8\n  select_type  \n  table  \n  partitions  //\u5206\u533a  \n  type  \n  possible_keys key key_len  //\u7cbe\u5ea6\u8d8a\u9ad8len\u8d8a\u5927\n  ref  \n  rows  \n  filtered  // \u662f\u4e00\u4e2a\u767e\u5206\u6bd4\u7684\u503c\uff0crows * filtered/100 \u53ef\u4ee5\u4f30\u7b97\u51fa\u5c06\u8981\u548c\u524d\u4e00\u4e2a\u8868\u8fdb\u884c\u8fde\u63a5\u7684\u884c\u6570\n  Extra  \n</code></pre> <p>select_type: - SIMPLE \u7b80\u5355\u7684select\u67e5\u8be2\uff0c\u67e5\u8be2\u4e2d\u4e0d\u5305\u542b\u5b50\u67e5\u8be2\u6216\u8005UNION - PRIMARY \u67e5\u8be2\u4e2d\u82e5\u5305\u542b\u4efb\u4f55\u590d\u6742\u7684\u5b50\u90e8\u5206\uff0c\u6700\u5916\u5c42\u67e5\u8be2\u5219\u88ab\u6807\u8bb0\u4e3aPRIMARY - SUBQUERY \u5728SELECT\u6216WHERE\u5217\u8868\u4e2d\u5305\u542b\u4e86\u5b50\u67e5\u8be2 - DERIVED \u5728FROM\u5217\u8868\u4e2d\u5305\u542b\u7684\u5b50\u67e5\u8be2\u88ab\u6807\u8bb0\u4e3aDERIVED\uff08\u884d\u751f\uff09\uff0cMySQL\u4f1a\u9012\u5f52\u6267\u884c\u8fd9\u4e9b\u5b50\u67e5\u8be2\uff0c\u628a\u7ed3\u679c\u653e\u5728\u4e34\u65f6\u8868\u4e2d - UNION \u82e5\u7b2c\u4e8c\u4e2aSELECT\u51fa\u73b0\u5728UNION\u4e4b\u540e\uff0c\u5219\u88ab\u6807\u8bb0\u4e3aUNION; \u82e5UNION\u5305\u542b\u5728FROM\u5b50\u53e5\u7684\u5b50\u67e5\u8be2\u4e2d\uff0c\u5916\u5c42SELECT\u5c06\u88ab\u6807\u8bb0\u4e3a\uff1aDERIVED - UNION RESULT \u4eceUNION\u8868\u83b7\u53d6\u7ed3\u679c\u7684SELECT</p> <p>type</p> <p>system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; all \u4e00\u822c\u6765\u8bf4\uff0c\u5f97\u4fdd\u8bc1\u67e5\u8be2\u81f3\u5c11\u8fbe\u5230range\u7ea7\u522b\uff0c\u6700\u597d\u80fd\u8fbe\u5230ref\u3002</p> <ul> <li>system \u8868\u53ea\u6709\u4e00\u884c\u8bb0\u5f55\uff08\u7b49\u4e8e\u7cfb\u7edf\u8868\uff09\uff0c\u8fd9\u662fconst\u7c7b\u578b\u7684\u7279\u5217\uff0c\u5e73\u65f6\u4e0d\u4f1a\u51fa\u73b0</li> <li>const \u8868\u793a\u901a\u8fc7\u7d22\u5f15\u4e00\u6b21\u5c31\u627e\u5230\u4e86</li> <li>eq_ref \u552f\u4e00\u6027\u7d22\u5f15\u626b\u63cf\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7d22\u5f15\u952e\uff0c\u8868\u4e2d\u53ea\u6709\u4e00\u6761\u8bb0\u5f55\u4e0e\u4e4b\u5339\u914d</li> <li>ref \u975e\u552f\u4e00\u6027\u7d22\u5f15\u626b\u63cf\uff0c\u8fd4\u56de\u5339\u914d\u67d0\u4e2a\u5355\u72ec\u503c\u7684\u6240\u6709\u884c</li> <li>range \u53ea\u68c0\u7d22\u7ed9\u5b9a\u8303\u56f4\u7684\u884c\uff0c\u4f7f\u7528\u4e00\u4e2a\u7d22\u5f15\u6765\u9009\u62e9\u884c</li> <li>index \u7d22\u5f15\u6811\u626b\u63cf, \u53ea\u904d\u5386\u7d22\u5f15\u6811</li> <li>ALL \u62c9\u8de8</li> </ul> <p>ref - \u54ea\u4e9b\u5217\u6216\u5e38\u91cf\u88ab\u7528\u4e8e\u67e5\u627e\u7d22\u5f15\u5217\u4e0a\u7684\u503c,\u6bd4\u5982id=1,\u90a3\u4e48ref:const; \u663e\u793a\u7d22\u5f15\u7684\u54ea\u4e00\u5217\u88ab\u4f7f\u7528\u4e86.</p> <p>rows - \u5927\u81f4\u4f30\u7b97\u51fa, \u627e\u5230\u6240\u9700\u7684\u8bb0\u5f55\u9700\u8981\u8bfb\u53d6\u7684\u884c\u6570</p> <p>Extra  - Backward index scan: \u4f18\u5316\u5668\u80fd\u5728InnoDB\u4e0a\u7528\u964d\u5e8f\u7d22\u5f15 - Using filesort: \u4f7f\u7528\u4e86\u5916\u90e8\u7d22\u5f15\u6587\u4ef6\u6392\u5e8f, \u6ca1\u6709\u6309\u7167\u8868\u5185\u7684\u7d22\u5f15\u987a\u5e8f - Using temporary: \u4f7f\u7528\u4e86\u7528\u4e34\u65f6\u8868\u4fdd\u5b58\u4e2d\u95f4\u7ed3\u679c\uff0cMySQL\u5728\u5bf9\u67e5\u8be2\u7ed3\u679c\u6392\u5e8f\u65f6\u4f7f\u7528\u4e34\u65f6\u8868\u3002</p> <p>\u5e38\u89c1\u4e8e order by\u548c group by</p> <ul> <li>Using where: \u8868\u793a\u5728Server\u8fdb\u884c\u4e86\u8fc7\u6ee4, where \u6761\u4ef6\u4e2d\u6709\u975e\u7d22\u5f15\u5b57\u6bb5</li> <li>Using index: \u8868\u793a\u4f7f\u7528\u4e86\u8986\u76d6\u7d22\u5f15 todo \u4e0b\u97622\u6761\u8bf4\u5f97\u4e0d\u5bf9</li> <li>\u6709 using where: \u7d22\u5f15\u7528\u4e8e\u67e5\u627e\uff0c\u9700\u8981\u56de\u8868\u67e5\u6570\u636e</li> <li>\u65e0 using where: \u7d22\u5f15\u7528\u4e8e\u8bfb\u53d6\u6570\u636e\u800c\u975e\u6267\u884c\u67e5\u627e\u52a8\u4f5c</li> <li>Using index condition: \u7d22\u5f15\u4e0b\u63a8</li> <li>Using join buffer: \u8868\u660e\u4f7f\u7528\u4e86\u8fde\u63a5\u7f13\u5b58. \u6bd4\u5982\u8bf4\u5728\u67e5\u8be2\u7684\u65f6\u5019\uff0c\u591a\u8868join\u7684\u6b21\u6570\u975e\u5e38\u591a\uff0c\u90a3\u4e48\u5c06\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u7f13\u51b2\u533a\u7684join buffer\u8c03\u5927\u4e00\u4e9b\u3002</li> </ul>"},{"location":"mysql/mysql/#_8","title":"\u5206\u5e93\u5206\u8868\u5206\u533a","text":"<ul> <li>\u5206\u533a\uff0c\u901a\u5e38\u6307\u7684\u662f\u5206\u533a\u8868\u7684\u6982\u5ff5 \u5c31\u662f\u628a\u4e00\u5f20\u8868\u7684\u6570\u636e\u5206\u6210N\u4e2a\u533a\u5757\uff0c\u5728\u903b\u8f91\u4e0a\u770b\u6700\u7ec8\u53ea\u662f\u4e00\u5f20\u8868\uff0c\u4f46\u5e95\u5c42\u662f\u7531N\u4e2a\u7269\u7406\u533a\u5757\u7ec4\u6210\u7684</li> <li>\u5206\u8868 \u5c06\u4e00\u5f20\u8868\u884c\u7ea7\u62c6\u5206\u6210\u591a\u5f20\u5b9e\u4f53\u8868</li> <li>\u5206\u5e93(tms_1,2,3,4,5) \u5355\u53f0DB\u6027\u80fd\u4e0d\u591f\u3002 \u5782\u76f4\u62c6\u5206\uff0c\u6309\u4e1a\u52a1\u62c6\u5206\uff0c\u8de8\u6570\u636e\u5e93\u4e8b\u52a1\u95ee\u9898 \u6c34\u5e73\u62c6\u5206\uff0c\u6309\u4e00\u4e9b\u89c4\u5219\u505a\u4e00\u4e9b\u8def\u7531 (\u5982cityId)</li> </ul>"},{"location":"mysql/mysql/#union-union-all","title":"Union Union All","text":"<p>Union \u6392\u5e8f\u4e14\u53bb\u91cd Union all \u4e0d\u6392\u5e8f\u4e0d\u53bb\u91cd</p>"},{"location":"mysql/mysql/#_9","title":"\u4ea4\u96c6\u5dee\u96c6\u5e76\u96c6","text":"<pre><code>DROP TABLE IF EXISTS t1 ;\nCREATE TABLE t1 (name VARCHAR(30) , age int) ENGINE=innodb;\ninsert into t1 VALUES ('\u5f20\u4e09',33);\ninsert into t1 VALUES ('\u674e\u56db',44);\ninsert into t1 VALUES ('\u738b\u4e94',55);\ninsert into t1 VALUES ('\u5b59\u516d',66);\n\nDROP TABLE IF EXISTS t2 ;\nCREATE TABLE t2 (name VARCHAR(30) , age int) ENGINE=innodb;\ninsert into t2 VALUES ('\u5f20\u4e09',33);\ninsert into t2 VALUES ('\u674e\u56db',44);\ninsert into t2 VALUES ('\u79e6\u4e03',77);\n\n\n-- \u4ea4\u96c6\nselect * from t1 \nUNION\nselect * from t2\n\n-- \u5e76\u96c6\n#\u65b9\u5f0f\u4e00\nselect * from t1 where  EXISTS (\n    select * from t2 where t1.name= t2.name and t1.age= t2.age\n);\n\n#\u65b9\u5f0f\u4e8c (\u4e0d\u63a8\u8350)\nselect * from t1 where (t1.name ,t1.age) in (\n    select * from t2\n)\n\n#\u65b9\u5f0f\u4e09 \u4ece\u5168\u96c6(\u5305\u62ec\u91cd\u590d)\u4e2d\u627e\u5230\u53ea\u51fa\u73b02\u6b21\u7684\nselect * from (\n    select * from t1\nunion all\n    select * from t2\n) t1 GROUP BY name,age HAVING COUNT(*)=2\n\n-- \u5dee\u96c6\n-- \u65b9\u5f0f1\nselect * from t1 where not EXISTS (\nselect * from t2 where t1.name = t2.name and t1.age = t2.age\n)\n\n-- \u65b9\u5f0f2 \u4ece\u5168\u96c6(\u5305\u62ec\u91cd\u590d)\u4e2d\u627e\u5230\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\nselect * from (\n    select * from t1\nunion all\n    select * from t2\n) t1 GROUP BY name,age HAVING COUNT(*)=1\n\n-- \u65b9\u5f0f3 \nselect * from t1 \nwhere (name,age) \nnot in ( select * from t2)\n\n-- \u65b9\u5f0f4 \u5b50\u96c6\u60c5\u51b5\nselect t1.* from t1 \nLEFT JOIN t2 \non t1.name = t2.name \nand t1.age = t2.age \nwhere t2.name is null \n</code></pre>"},{"location":"mysql/mysql/#_10","title":"\u9501","text":"<p>\u884c\u9501\u3001\u8868\u9501\u3001\u4e00\u81f4\u6027\u8bfb\uff08\u8fd8\u6709\u7ebf\u7a0blatch\uff09 \u884c\u9501\uff1a\u5171\u4eab\u9501 \u6392\u4ed6\u9501 \u8868\u9501\uff1a\u610f\u5411\u5171\u4eab\u9501 \u610f\u5411\u6392\u4ed6\u9501 \u5171\u4eab\u9501 \u6392\u4ed6\u9501 \u4e00\u81f4\u6027\u8bfb\uff1a\u5f53\u524d\u8bfbMVCC\u548c\u5feb\u7167\u8bfbLBCC</p>"},{"location":"redis/redis/","title":"3. Redis","text":""},{"location":"redis/redis/#_1","title":"\u5206\u5e03\u5f0f\u7f13\u5b58\u6280\u672f\u9009\u578b","text":"<p>Redis Memcached | \u7f13\u5b58      | \u6570\u636e\u7c7b\u578b | \u6301\u4e45\u5316 | \u96c6\u7fa4       | \u8fc7\u671f\u7b56\u7565          | | --------- | -------- | ------ | ---------- | ----------------- | | redis     | 5\u79cd      | \u652f\u6301   | \u539f\u751f\u652f\u6301   | \u60f0\u6027\u5220\u9664+\u5b9a\u671f\u5220\u9664 | | memcached | 1\u79cd      | \u4e0d\u652f\u6301 | \u539f\u751f\u4e0d\u652f\u6301 | \u60f0\u6027\u5220\u9664          |</p> <ul> <li>redis \u652f\u6301\u7684\u6570\u636e\u7c7b\u578b\u66f4\u4e30\u5bcc</li> <li>redis \u652f\u6301\u6570\u636e\u6301\u4e45\u5316, \u53ef\u4ee5\u4fdd\u5b58\u5728\u786c\u76d8, \u91cd\u542f\u7684\u65f6\u5019\u80fd\u518d\u6b21\u52a0\u8f7d</li> <li>memcached \u6ca1\u6709\u539f\u751f\u7684\u96c6\u7fa4\u6a21\u5f0f, redis\u539f\u751f\u652f\u6301\u96c6\u7fa4</li> <li>memcached \u8fc7\u671f\u53ea\u7528\u60f0\u6027\u5220\u9664, redis\u652f\u6301\u60f0\u6027\u5220\u9664\u548c\u5b9a\u671f\u5220\u9664</li> </ul>"},{"location":"redis/redis/#_2","title":"\u6570\u636e\u7ed3\u6784","text":"<p>\u5b57\u7b26\u4e32String\u3001\u5b57\u5178Hash\u3001\u5217\u8868List\u3001\u96c6\u5408Set\u3001\u6709\u5e8f\u96c6\u5408SortedSet \u4e14\u6bcf\u79cd\u7c7b\u578b\u90fd\u6709\u672c\u5730\u65b9\u6cd5</p>"},{"location":"redis/redis/#1-string","title":"1 String","text":"<p>\u52a8\u6001\u5b57\u7b26\u4e32\uff0c\u9884\u5206\u914d\u5197\u4f59\u7a7a\u95f4\u7684\u65b9\u5f0f\u6765\u51cf\u5c11\u5185\u5b58\u7684\u9891\u7e41\u5206\u914d\u3002\u5c0f\u4e8e1M\u76f4\u63a5\u52a0\u500d\uff0c\u8d85\u8fc71M\u518d\u52a01M\uff0c\u5b57\u7b26\u4e32\u6700\u5927512M\u3002 Redis \u7684 SDS(simple dynamic string) API \u662f\u5b89\u5168\u7684\uff0c\u4e0d\u4f1a\u9020\u6210\u7f13\u51b2\u533a\u6ea2\u51fa\u3002 <pre><code>struct sdsshdr{\n  int len;\n  int free;\n  char[] buf;\n}\n\nstring \u957f\u5ea6\n\u952e\u503c\u5bf9  \n\u5148\u9a8c\u65b0\u589e  \n\u6279\u91cf\u952e\u503c\u5bf9  \n\u8fc7\u671f\u548c\u591a\u4e45\u8fc7\u671f\n\u8ba1\u6570  \n</code></pre> bitmap: setbit mykey {offset} {value(1/0)}</p>"},{"location":"redis/redis/#2-list","title":"2 list\u5217\u8868","text":"<p>\u53cc\u5411\u94fe\u8868\uff0c\u63d2\u5165\u5220\u9664\u64cd\u4f5c\u5feb\uff0c\u7d22\u5f15\u5b9a\u4f4dO(n) \u5f53\u5217\u8868\u5f39\u51fa\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\uff0c\u8be5\u6570\u636e\u7ed3\u6784\u81ea\u52a8\u88ab\u5220\u9664\uff0c\u5185\u5b58\u88ab\u56de\u6536\u3002 \u901a\u5e38\u5f53\u4f5c\u5f02\u6b65\u961f\u5217\u4f7f\u7528\uff0c\u5c06\u9700\u8981\u5ef6\u540e\u5904\u7406\u7684\u4efb\u52a1\u7ed3\u6784\u4f53\u5e8f\u5217\u5316\u6210\u5b57\u7b26\u4e32\u585e\u8fdb\u5217\u8868\uff0c\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u4ece\u8fd9\u4e2a\u5217\u8868\u4e2d\u8f6e\u8be2\u6570\u636e\u8fdb\u884c\u5904\u7406\u3002 <pre><code>-   \u961f\u5217\n-   \u6808\n-   \u901a\u8fc7\u7d22\u5f15\u67e5\uff08\u6162\u64cd\u4f5c\uff09\n-   trim\uff08\u6162\u64cd\u4f5c\uff09  \n</code></pre> quicklist  \u65e9\u671f\u7248\u672c\u53cc\u5411\u94fe\u8868\u548cziplist\u914d\u5408\u4f7f\u7528\uff0c\u4f46\u662f\u6307\u9488\u5360\u7528\u7a7a\u95f4\u5927\uff0c\u540e\u671f\u6539\u6210\u5c06ziplist\u52a0\u4e0a\u524d\u540e\u6307\u9488\uff0c\u8282\u7701\u5b58\u50a8\u7a7a\u95f4\u3002  </p>"},{"location":"redis/redis/#3-hash","title":"3 hash(\u5b57\u5178)","text":"<p>\u5e95\u5c42\u7528\u54c8\u5e0c\u8868\u5b9e\u73b0. rehash\u662f\u6e10\u8fdb\u5f0f\u7684\uff0c\u4f1a\u4fdd\u7559\u65b0\u65e7\u4e24\u4e2ahash\u7ed3\u6784\uff0c\u540c\u65f6\u67e5\u8be2\uff0c\u7136\u540e\u5728\u540e\u7eed\u7684\u5b9a\u65f6\u4efb\u52a1\u4ee5\u53cahash\u7684\u5b50\u6307\u4ee4\u4e2d\uff0c\u6e10\u6e10\u5c06\u65e7hash\u8f6c\u5230\u65b0hash\u3002 hash\u53ef\u4ee5\u5bf9\u7ed3\u6784\u5355\u72ec\u5b58\u50a8\uff0c\u4e0d\u5fc5\u50cf\u5b57\u7b26\u4e32\u4e00\u6837\u5168\u90e8\u5b58\u53d6\u3002</p>"},{"location":"redis/redis/#4-set","title":"4 set","text":"<p>keyset \u6240\u6709val==null, \u53ef\u7528\u4e8e\u53bb\u91cd</p>"},{"location":"redis/redis/#5-zsetsorted-set","title":"5 zset(sorted set)","text":"<p>\u8df3\u8dc3\u5217\u8868 \u4ee5\u4e00\u5b9a\u6982\u7387(\u5b98\u65b9\u664b\u5347\u738725%)\u9009\u62e9\u4ee3\u8868\u5f62\u6210\u4e0a\u4e00\u5c42(\u6700\u9ad832\u5c42), \u6700\u5e95\u5c42\u662f\u53cc\u5411\u94fe\u8868, \u4e0a\u5c42\u90fd\u662f\u5355\u5411\u94fe\u8868 value+score(\u6743\u91cd)</p>"},{"location":"redis/redis/#-","title":"\u6587\u4ef6-\u4e8b\u4ef6\u5904\u7406\u5668","text":"<p>Redis \u57fa\u4e8e Reactor \u6a21\u5f0f\u5f00\u53d1\u4e86\u81ea\u5df1\u7684\u7f51\u7edc\u4e8b\u4ef6\u5904\u7406\u5668\uff1a\u8fd9\u4e2a\u5904\u7406\u5668\u88ab\u79f0\u4e3a\u6587\u4ef6\u4e8b\u4ef6\u5904\u7406\u5668\uff08file event handler\uff09\u3002 redis\u91c7\u7528epoll\u6765\u5b9e\u73b0I/O\u591a\u8def\u590d\u7528\uff08linux\u672c\u8eab\u7684\u5185\u6838\u6280\u672f\uff09\uff0c\u5c06\u8fde\u63a5\u4fe1\u606f\u548c\u4e8b\u4ef6\u653e\u5230\u961f\u5217\u4e2d\uff0c\u4f9d\u6b21\u653e\u5230\u6587\u4ef6\u4e8b\u4ef6\u5206\u6d3e\u5668\uff0c\u4e8b\u4ef6\u5206\u6d3e\u5668\u5c06\u4e8b\u4ef6\u53d1\u9001\u7ed9\u4e8b\u4ef6\u5904\u7406\u5668 \u6587\u4ef6\u4e8b\u4ef6\u5904\u7406\u5668\u4f7f\u7528 I/O \u591a\u8def\u590d\u7528\uff08multiplexing\uff09\u7a0b\u5e8f\u6765\u540c\u65f6\u76d1\u542c\u591a\u4e2a\u5957\u63a5\u5b57(Socket)\uff0c\u5e76\u6839\u636e\u5957\u63a5\u5b57\u76ee\u524d\u6267\u884c\u7684\u4efb\u52a1\u6765\u4e3a\u5957\u63a5\u5b57\u5173\u8054\u4e0d\u540c\u7684\u4e8b\u4ef6\u5904\u7406\u5668\u3002</p> <p>\u5f53\u88ab\u76d1\u542c\u7684\u5957\u63a5\u5b57\u51c6\u5907\u597d\u6267\u884c\u8fde\u63a5\u5e94\u7b54\uff08accept\uff09\u3001\u8bfb\u53d6\uff08read\uff09\u3001\u5199\u5165\uff08write\uff09\u3001\u5173 \u95ed\uff08close\uff09\u7b49\u64cd\u4f5c\u65f6\uff0c\u4e0e\u64cd\u4f5c\u76f8\u5bf9\u5e94\u7684\u6587\u4ef6\u4e8b\u4ef6\u5c31\u4f1a\u4ea7\u751f\uff0c\u8fd9\u65f6\u6587\u4ef6\u4e8b\u4ef6\u5206\u6d3e\u5668\u5c31\u4f1a\u8c03\u7528\u5957\u63a5\u5b57\u4e4b\u524d\u5173\u8054\u597d\u7684\u4e8b\u4ef6\u5904\u7406\u5668\u6765\u5904\u7406\u8fd9\u4e9b\u4e8b\u4ef6\u3002</p> <p>\u867d\u7136\u6587\u4ef6\u4e8b\u4ef6\u5904\u7406\u5668\u4ee5\u5355\u7ebf\u7a0b\u65b9\u5f0f\u8fd0\u884c\uff0c\u4f46\u901a\u8fc7\u4f7f\u7528 I/O \u591a\u8def\u590d\u7528\u7a0b\u5e8f\u6765\u76d1\u542c\u591a\u4e2a\u5957\u63a5\u5b57\uff0c\u6587\u4ef6\u4e8b\u4ef6\u5904\u7406\u5668\u65e2\u5b9e\u73b0\u4e86\u9ad8\u6027\u80fd\u7684\u7f51\u7edc\u901a\u4fe1\u6a21\u578b\uff0c\u53c8\u53ef\u4ee5\u5f88\u597d\u5730\u4e0e Redis \u670d\u52a1\u5668\u4e2d\u5176\u4ed6\u540c\u6837\u4ee5\u5355\u7ebf\u7a0b\u65b9\u5f0f\u8fd0\u884c\u7684\u6a21\u5757\u8fdb\u884c\u5bf9\u63a5\uff0c\u8fd9\u4fdd\u6301\u4e86 Redis \u5185\u90e8\u5355\u7ebf\u7a0b\u8bbe\u8ba1\u7684\u7b80\u5355\u6027\u3002</p>"},{"location":"redis/redis/#_3","title":"\u5355\u7ebf\u7a0b","text":"<p>\u4f8b\u5982\u5728\u79d2\u6740\u573a\u666f, \u843d\u5728DB\u5c42\u4e00\u5b9a\u662f\u4e32\u884c\u7684, \u800credis\u5355\u7ebf\u7a0b\u7684\u8bbe\u8ba1\u6070\u5982\u5176\u5206 4.0\u7248\u672c\u5728\u5f02\u6b65\u5220\u9664\u5927\u5bf9\u8c61\u52a0\u5165\u4e86\u591a\u7ebf\u7a0b 6.0\u4e3a\u4e86\u63d0\u9ad8\u7f51\u7edcIO\u8bfb\u5199\u6027\u80fd(\u6027\u80fd\u74f6\u9888\u5728\u5185\u5b58\u548c\u7f51\u7edc,\u800c\u4e0d\u662fCPU,\u8fd9\u662f\u4e0d\u4f7f\u7528\u591a\u7ebf\u7a0b\u7684\u4e3b\u8981\u539f\u56e0)</p>"},{"location":"redis/redis/#_4","title":"\u8fc7\u671f\u7b56\u7565","text":"<p>\u901a\u8fc7\u8fc7\u671f\u5b57\u5178(\u5b57\u5178key\u6307\u5411\u5177\u4f53\u7684\u6570\u636ekey, val\u662f\u6beb\u79d2\u7cbe\u5ea6\u7684\u65f6\u95f4\u6233long long\u7c7b\u578b\u7684\u6574\u6570)\u4fdd\u5b58\u6570\u636e\u8fc7\u671f\u65f6\u95f4. \u5b9a\u65f6\u904d\u5386\u5220\u9664+\u60f0\u6027\u5220\u9664 - \u5b9a\u65f6\u626b\u63cf\u7b56\u7565   \u6bcf\u79d210\u6b21\u8fc7\u671f\u626b\u63cf, \u8d2a\u5fc3\u7b56\u7565:\u968f\u673a\u900920\u4e2a, \u5982\u679c\u8fc7\u671f\u6bd4\u4f8b\u8d85\u8fc71/4, \u91cd\u590d; \u4e3a\u9632\u6b62\u7ebf\u7a0b\u5361\u6b7b\uff0c\u6bcf\u6b21\u4e0d\u8d85\u8fc725ms   \u8fd9\u6837\u4f1a\u5bfc\u81f4\u5361\u987f, \u4e0d\u8981\u8ba9\u5927\u6279key\u540c\u65f6\u8fc7\u671f - \u60f0\u6027\u5220\u9664   \u8bbf\u95ee\u65f6\u68c0\u67e5</p>"},{"location":"redis/redis/#_5","title":"\u5185\u5b58\u6dd8\u6c70\u673a\u5236","text":"<ol> <li>volatile-lru\uff08least recently used\uff09\uff1a\u4ece\u5df2\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\u7684\u6570\u636e\u96c6\uff08server.db[i].expires\uff09\u4e2d\u6311\u9009\u6700\u5c11\u4f7f\u7528\u7684\u6570\u636e\u6dd8\u6c70</li> <li>volatile-ttl\uff1a\u4ece\u5df2\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\u7684\u6570\u636e\u96c6\uff08server.db[i].expires\uff09\u4e2d\u6311\u9009\u5c06\u8981\u8fc7\u671f\u7684\u6570\u636e\u6dd8\u6c70</li> <li>volatile-random\uff1a\u4ece\u5df2\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\u7684\u6570\u636e\u96c6\uff08server.db[i].expires\uff09\u4e2d\u4efb\u610f\u9009\u62e9\u6570\u636e\u6dd8\u6c70</li> <li>allkeys-lru\uff08least recently used\uff09\uff1a\u5f53\u5185\u5b58\u4e0d\u8db3\u4ee5\u5bb9\u7eb3\u65b0\u5199\u5165\u6570\u636e\u65f6\uff0c\u5728\u952e\u7a7a\u95f4\u4e2d\uff0c\u79fb\u9664\u6700\u8fd1\u6700\u5c11\u4f7f\u7528\u7684 key\uff08\u8fd9\u4e2a\u662f\u6700\u5e38\u7528\u7684\uff09</li> <li>allkeys-random\uff1a\u4ece\u6570\u636e\u96c6\uff08server.db[i].dict\uff09\u4e2d\u4efb\u610f\u9009\u62e9\u6570\u636e\u6dd8\u6c70</li> <li>no-eviction\uff1a\u7981\u6b62\u9a71\u9010\u6570\u636e\uff0c\u4e5f\u5c31\u662f\u8bf4\u5f53\u5185\u5b58\u4e0d\u8db3\u4ee5\u5bb9\u7eb3\u65b0\u5199\u5165\u6570\u636e\u65f6\uff0c\u65b0\u5199\u5165\u64cd\u4f5c\u4f1a\u62a5\u9519\u3002  </li> </ol> <p>4.0 \u7248\u672c\u540e\u589e\u52a0\u4ee5\u4e0b\u4e24\u79cd\uff1a 1. volatile-lfu\uff08least frequently used\uff09\uff1a\u4ece\u5df2\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\u7684\u6570\u636e\u96c6(server.db[i].expires)\u4e2d\u6311\u9009\u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\u7684\u6570\u636e\u6dd8\u6c70 2. allkeys-lfu\uff08least frequently used\uff09\uff1a\u5f53\u5185\u5b58\u4e0d\u8db3\u4ee5\u5bb9\u7eb3\u65b0\u5199\u5165\u6570\u636e\u65f6\uff0c\u5728\u952e\u7a7a\u95f4\u4e2d\uff0c\u79fb\u9664\u6700\u4e0d\u7ecf\u5e38\u4f7f\u7528\u7684 key</p>"},{"location":"redis/redis/#_6","title":"\u6301\u4e45\u5316","text":"<p>\u901a\u5e38\u662f\u4ece\u8282\u70b9\u8fdb\u884c\u6301\u4e45\u5316\uff0c\u4ece\u8282\u70b9\u4f5c\u4e3a\u5907\u4efd\u8282\u70b9\uff0c\u6ca1\u6709\u5ba2\u6237\u7aef\u8bf7\u6c42\u7684\u538b\u529b 1. \u5feb\u7167\u6301\u4e45\u5316\uff08snapshotting\uff0cRDB\uff09    \u9ed8\u8ba4\u65b9\u5f0f, \u901a\u8fc7\u521b\u5efa\u5feb\u7167,\u83b7\u53d6\u6570\u636e\u67d0\u4e2a\u65f6\u95f4\u70b9\u7684\u526f\u672c, \u53ef\u4ee5\u590d\u5236\u5230\u4ece\u670d\u52a1\u5668\u6216\u8005\u7559\u5b58\u5230\u672c\u5730 //\u901a\u8fc7COW\u7684\u65b9\u5f0f    \u4e00\u6bb5\u65f6\u95f4\u5185\u8d85\u8fc7\u4e00\u5b9a\u6570\u91cf\u7684key\u53d1\u751f\u53d8\u5316\uff0c\u4f1a\u521b\u5efa\u5feb\u7167    Redis.conf     <pre><code>save 900 1           #\u5728900\u79d2(15\u5206\u949f)\u4e4b\u540e\uff0c\u5982\u679c\u81f3\u5c11\u67091\u4e2akey\u53d1\u751f\u53d8\u5316\uff0cRedis\u5c31\u4f1a\u81ea\u52a8\u89e6\u53d1BGSAVE\u547d\u4ee4\u521b\u5efa\u5feb\u7167\u3002\nsave 300 10          #\u5728300\u79d2(5\u5206\u949f)\u4e4b\u540e\uff0c\u5982\u679c\u81f3\u5c11\u670910\u4e2akey\u53d1\u751f\u53d8\u5316\uff0cRedis\u5c31\u4f1a\u81ea\u52a8\u89e6\u53d1BGSAVE\u547d\u4ee4\u521b\u5efa\u5feb\u7167\u3002\nsave 60 10000        #\u572860\u79d2(1\u5206\u949f)\u4e4b\u540e\uff0c\u5982\u679c\u81f3\u5c11\u670910000\u4e2akey\u53d1\u751f\u53d8\u5316\uff0cRedis\u5c31\u4f1a\u81ea\u52a8\u89e6\u53d1BGSAVE\u547d\u4ee4\u521b\u5efa\u5feb\u7167\u3002\n</code></pre> 2. \u53ea\u8ffd\u52a0\u6587\u4ef6\uff08append-only file, AOF\uff09    \u5f00\u542fAOF\u540e\u6267\u884c\u7684\u6bcf\u4e00\u6761\u66f4\u6539\u547d\u4ee4, redis\u90fd\u4f1a\u5c06\u8be5\u547d\u4ee4\u5199\u5165\u786c\u76d8\u91cc\u7684AOF\u6587\u4ef6. AOF\u6587\u4ef6\u548cRDB\u6587\u4ef6\u4f4d\u7f6e\u76f8\u540c, \u90fd\u662f\u901a\u8fc7dir\u53c2\u6570\u8bbe\u7f6e\u7684, \u9ed8\u8ba4\u7684\u6587\u4ef6\u540d\u662fappend only.aof    fsync: \u63a7\u5236\u5237\u5199\u786c\u76d8    appendfsync everysec  #\u6bcf\u79d2\u6267\u884c\u4e00\u6b21fsync\u64cd\u4f5c    appendfsync always    #\u6bcf\u6b21\u6709\u6570\u636e\u4fee\u6539\u53d1\u751f\u65f6\u90fd\u4f1a\u5199\u5165AOF\u6587\u4ef6,\u8fd9\u6837\u4f1a\u4e25\u91cd\u964d\u4f4eRedis\u7684\u901f\u5ea6. \u80fd\u4fdd\u8bc1\u5b8c\u6574\u6027    appendfsync no        #\u8ba9\u64cd\u4f5c\u7cfb\u7edf\u51b3\u5b9a\u4f55\u65f6\u8fdb\u884c\u540c\u6b65 \u4ea4\u7ed9\u5185\u6838 3. redis 4.0\u5f00\u59cb\u652f\u6301 RDB\u548cAOF\u7684\u6df7\u5408\u6301\u4e45\u5316(\u9ed8\u8ba4\u5173\u95ed, \u53ef\u901a\u8fc7\u914d\u7f6e\u9879 aof-use-rdb-preamble \u5f00\u542f)</p>"},{"location":"redis/redis/#key","title":"\u70edkey","text":"<p>https://dongzl.github.io/2021/01/14/03-Redis-Hot-Key/index.html</p>"},{"location":"redis/redis/#key_1","title":"\u70edkey\u5e26\u6765\u7684\u95ee\u9898","text":"<p>\u6d41\u91cf\u96c6\u4e2d\uff0c\u8fbe\u5230\u670d\u52a1\u5668\u5904\u7406\u4e0a\u9650 IO\u6253\u6ee1\uff0c\u5176\u4ed6key\u53d7\u5f71\u54cd \u843d\u5728\u67d0\u4e00\u4e2a\u5355\u5b9e\u4f8b\uff0c\u65e0\u6cd5\u901a\u8fc7\u6269\u5bb9\u89e3\u51b3 redis\u4e0d\u53ef\u7528\u5bfc\u81f4\u7f13\u5b58\u51fb\u7a7f\uff0cDB\u4e5f\u4f1a\u88ab\u6253\u7206</p>"},{"location":"redis/redis/#_7","title":"\u5982\u4f55\u53d1\u73b0","text":"<p>\u5ba2\u6237\u7aef\u4fa7\uff0c\u670d\u52a1\u5668\u8282\u70b9\u4fa7\uff0credis\u547d\u4ee4 - \u4e1a\u52a1\u7ecf\u9a8c\u9884\u4f30 - \u5ba2\u6237\u7aef\u6536\u96c6\u9a8c\u8bc1   \u5bf9\u5ba2\u6237\u7aef\u5de5\u5177\uff08SDK\uff0c\u5982Jedis\u3001Redisson\uff09\u8fdb\u884c\u5c01\u88c5\uff0c\u5728\u53d1\u9001\u8bf7\u6c42\u524d\u8fdb\u884c\u6536\u96c6\uff0c\u540c\u65f6\u5b9a\u65f6\u628a\u6536\u96c6\u5230\u7684\u6570\u636e\u4e0a\u62a5\u5230\u7edf\u4e00\u7684\u670d\u52a1\u8fdb\u884c\u805a\u5408\u8ba1\u7b97\u3002 - \u4ee3\u7406\u5c42\u6536\u96c6   \u8ddf\u4e0a\u9762\u7684\u5ba2\u6237\u7aef\u6536\u96c6\u7c7b\u4f3c - redis\u547d\u4ee4   - hotkeys   - monitor - \u8282\u70b9\u6293\u5305</p>"},{"location":"redis/redis/#_8","title":"\u89e3\u51b3\u65b9\u6848","text":"<p>\u6c34\u5e73\u6269\u5bb9\uff0c\u589e\u52a0\u5b9e\u4f8b\u526f\u672c\u6570\u91cf \u4e8c\u7ea7\u7f13\u5b58\uff0c\u672c\u5730\u7f13\u5b58 \u70edkey\u5907\u4efd</p>"},{"location":"redis/redis/#redis","title":"redis\u5e8f\u5217\u5316\u53cd\u5e8f\u5217\u5316","text":"<p>org.springframework.data.redis.serializer.RedisSerializer \u5bf9\u4e8ejson\u800c\u8a00, jackson \u662f\u5b98\u65b9\u5b9e\u73b0 fastjson\u4e5f\u6709\u76f8\u5e94\u5b9e\u73b0</p>"},{"location":"redis/redis/#_9","title":"\u5206\u5e03\u5f0f\u9501\u4f7f\u7528\u573a\u666f","text":"<p>\u8fdb\u7a0b\u4e4b\u95f4\u4fdd\u8bc1\u6709\u5e8f\u6027\uff0c\u5206\u5e03\u5f0f\u670d\u52a1\u4e0b\u9700\u8981\u987a\u5e8f\u6267\u884c</p>"},{"location":"redis/redis/#_10","title":"\u5206\u5e03\u5f0f\u9501","text":"<p>\u4f7f\u7528 setnx(set if not exists) \u6307\u4ee4\uff0c\u5904\u7406\u5b8c\u6210\u540edel\u3002\u4f46\u662f\u5982\u679c\u51fa\u73b0\u5f02\u5e38\u4f1a\u51fa\u73b0\u6b7b\u9501\uff0c\u90a3\u4e48\u9700\u8981\u52a0expire, \u4f46\u662fexpire\u4e0d\u662f\u539f\u5b50\u6307\u4ee4\u30022.8\u7248\u672c\u5b98\u65b9\u52a0\u4e86set\u6307\u4ee4\u7684\u6269\u5c55\u53c2\u6570\u3002</p>"},{"location":"redis/redis/#_11","title":"\u8d85\u65f6\u95ee\u9898","text":"<p>\u5206\u5e03\u5f0f\u9501\u4e0d\u80fd\u89e3\u51b3\u8d85\u65f6\u95ee\u9898\u3002\u4e00\u4e2a\u66f4\u5b89\u5168\u7684\u65b9\u6848\u662f\u7ed9set\u6307\u4ee4\u7684value\u53c2\u6570\u52a0\u4e00\u4e2a\u968f\u673a\u6570\uff0c\u91ca\u653e\u9501\u7684\u65f6\u5019\u5148\u5339\u914d\u968f\u673a\u6570\uff0c\u7136\u540e\u5220\u9664\u91ca\u653e\u9501\u3002\u4f46\u662f\u5339\u914dvalue\u548c\u5220\u9664\u64cd\u4f5c\u4e0d\u662f\u539f\u5b50\u64cd\u4f5c\u3002\u53ef\u4ee5\u7528lua\u811a\u672c\u5904\u7406\u3002</p>"},{"location":"redis/redis/#_12","title":"\u53ef\u91cd\u5165\u6027","text":"<p>\u4f7f\u7528threadLocal\u5b58\u50a8\u5f53\u524d\u6301\u6709\u9501\u7684\u8ba1\u6570\u3002</p>"},{"location":"redis/redis/#_13","title":"\u54e8\u5175\u96c6\u7fa4\u4e2d\uff0c\u4e3b\u8282\u70b9\u6302\u6389\uff0c\u9501\u5931\u6548\u95ee\u9898","text":"<p>Redlock\u7b97\u6cd5\uff0c\u52a0\u9501\u65f6\u5411\u8fc7\u534a\u7684\u8282\u70b9\u53d1\u9001\u6307\u4ee4\uff0c\u8fc7\u534a\u7684\u8282\u70b9\u6210\u529f\u5219\u8ba4\u4e3a\u52a0\u9501\u6210\u529f\uff0c\u91ca\u653e\u9501\u7684\u65f6\u5019\u5411\u6240\u6709\u8282\u70b9\u53d1\u9001del\u6307\u4ee4\u3002 \u4f7f\u7528\u65f6\u9700\u8981\u505a\u5f88\u591a\u7684\u989d\u5916\u7ec6\u8282\u5904\u7406\uff0c\u8fd0\u7ef4\uff0c\u51fa\u9519\u91cd\u8bd5\uff0c\u65f6\u949f\u6f02\u79fb\u7b49\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528</p>"},{"location":"redis/redis/#redis_1","title":"redis\u4e8b\u52a1","text":"<p>Redis \u53ef\u4ee5\u901a\u8fc7 MULTI\uff0cEXEC\uff0cDISCARD \u548c WATCH \u7b49\u547d\u4ee4\u6765\u5b9e\u73b0\u4e8b\u52a1\u529f\u80fd\u3002 DISCARD \u4e22\u5f03 MULTI \u5230 DISCARD \u4e4b\u95f4\u7684\u6240\u6709\u6307\u4ee4, \u5fc5\u987b\u5728 EXEC \u4e4b\u524d\u4f7f\u7528. WATCH \u5fc5\u987b\u5148\u4e8e MULTI \u4f7f\u7528. \u4e50\u89c2\u9501\u7684\u65b9\u5f0f, \u76ef\u4f4f\u4e00\u4e9b\u53d8\u91cf, \u5728\u6267\u884c\u7684\u65f6\u5019\u68c0\u67e5\u662f\u5426\u88ab\u4fee\u6539, \u5982\u679c\u88ab\u4fee\u6539\u8fd4\u56de\u9519\u8bef, \u5ba2\u6237\u7aef\u5904\u7406(\u901a\u5e38\u662f\u91cd\u8bd5) redis\u4e8b\u52a1\u4e0d\u652f\u6301rollback, \u6240\u4ee5\u4e0d\u6ee1\u8db3\u539f\u5b50\u6027. \u53ef\u4ee5\u7406\u89e3\u4e3a\u662f\u591a\u4e2a\u547d\u4ee4\u987a\u5e8f\u6253\u5305\u6267\u884c, \u4e14\u6267\u884c\u8fc7\u7a0b\u4e0d\u4f1a\u88ab\u4e2d\u65ad(\u5373\u4fbf\u524d\u9762\u6267\u884c\u5931\u8d25\u4e5f\u4f1a\u7ee7\u7eed\u6267\u884c\u540e\u7eed\u6307\u4ee4).</p>"},{"location":"redis/redis/#_14","title":"\u7f13\u5b58\u7a7f\u900f","text":"<p>\u7f13\u5b58\u4e2d\u548cDB\u4e2d\u90fd\u6ca1\u6709</p>"},{"location":"redis/redis/#_15","title":"\u7f13\u5b58\u51fb\u7a7f","text":"<p>\u7f13\u5b58\u4e2d\u6ca1\u6709, \u6ca1\u6709\u8d77\u5230\u7f13\u5b58\u7684\u6548\u679c, \u5168\u6253\u5230DB\u4e0a\u4e86; \u53ef\u4ee5\u5728\u7f13\u5b58\u4e4b\u540e\u52a0\u4e00\u5c42\u5e03\u9686\u8fc7\u6ee4\u5668;</p>"},{"location":"redis/redis/#_16","title":"\u5e03\u9686\u8fc7\u6ee4\u5668","text":"<p>\u7528\u4e00\u4e2aBitMap, \u4f7f\u7528n\u4e2a\u4e0d\u540c\u7684\u6563\u5217\u51fd\u6570\u5c06\u4e00\u4e2a\u5143\u7d20\u6620\u5c04\u5230n\u4e2a\u4f4d\u70b9\u4e0a \u4e00\u4e2a\u5143\u7d20\u5982\u679c\u5224\u65ad\u7ed3\u679c\u4e3a\u5b58\u5728\u7684\u65f6\u5019\u5143\u7d20\u4e0d\u4e00\u5b9a\u5b58\u5728\uff0c\u4f46\u662f\u5224\u65ad\u7ed3\u679c\u4e3a\u4e0d\u5b58\u5728\u7684\u65f6\u5019\u5219\u4e00\u5b9a\u4e0d\u5b58\u5728\u3002 \u53ef\u4ee5\u6dfb\u52a0\u5143\u7d20\uff0c\u4f46\u4e0d\u80fd\u5220\u9664\u5143\u7d20 \u5728\u4f7f\u7528bloom filter\u65f6\uff0c\u7ed5\u4e0d\u8fc7\u7684\u4e24\u70b9\u662f\u9884\u4f30\u6570\u636e\u91cfn\u4ee5\u53ca\u671f\u671b\u7684\u8bef\u5224\u7387fpp\uff0c \u5728\u5b9e\u73b0bloom filter\u65f6\uff0c\u7ed5\u4e0d\u8fc7\u7684\u4e24\u70b9\u5c31\u662fhash\u51fd\u6570\u7684\u9009\u53d6\u4ee5\u53cabit\u6570\u7ec4\u7684\u5927\u5c0f\u3002</p>"},{"location":"redis/redis/#_17","title":"\u7f13\u5b58\u96ea\u5d29","text":"<p>\u7f13\u5b58\u5728\u540c\u4e00\u65f6\u95f4\u5927\u9762\u79ef\u5931\u6548, \u5931\u53bb\u7f13\u5b58\u6548\u679c. \u9488\u5bf9redis\u670d\u52a1\u4e0d\u53ef\u7528\u7684\u60c5\u51b5: \u7528redis\u96c6\u7fa4, \u907f\u514d\u5355\u673a\u5b95\u673a\u5bfc\u81f4\u6574\u4e2a\u7f13\u5b58\u670d\u52a1\u4e0d\u53ef\u7528; \u9650\u6d41, \u907f\u514d\u540c\u65f6\u5904\u7406\u5927\u91cf\u8bf7\u6c42; \u9488\u5bf9\u70ed\u70b9\u7f13\u5b58\u5931\u6548\u7684\u60c5\u51b5: \u8bbe\u7f6e\u7f13\u5b58\u5931\u6548\u65f6\u95f4\u6dfb\u52a0\u968f\u673a\u503c;</p>"},{"location":"redis/redis/#db-todo","title":"\u7f13\u5b58\u4e0eDB\u4e00\u81f4\u6027 TODO","text":"<p>\u66f4\u65b0\u8fd8\u662f\u6dd8\u6c70\uff1a - \u66f4\u65b0\u64cd\u4f5c\u5728\u4e1a\u52a1\u903b\u8f91\u590d\u6742\u7684\u65f6\u5019\u5f00\u9500\u5927\uff0c\u6dd8\u6c70\u7684\u4ee3\u4ef7\u53ea\u662f\u4e00\u6b21miss; - \u66f4\u65b0\u64cd\u4f5c\u9700\u8981\u4e32\u884c\u5316\uff0c\u5426\u5219\u6709\u53ef\u80fd\u5f15\u8d77\u4e0d\u4e00\u81f4</p> <p>\u9996\u5148\u6539db\u548c\u6dd8\u6c70\u7f13\u5b58\u4e0d\u662f\u539f\u5b50\u7684\uff0c\u90a3\u4e48\u5c31\u6709\u5148\u540e\uff0c\u8003\u8651\u5230\u5148\u66f4\u65b0db\u540e\u6dd8\u6c70\u7f13\u5b58\u51fa\u73b0\u5931\u8d25\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u4e00\u5b9a\u8981\u5148\u6dd8\u6c70\u7f13\u5b58\uff1b \u518d\u8003\u8651\u5230\u66f4\u6539db\u8fc7\u7a0b\u4e2d\u6709\u53ef\u80fd\u8bfb\u5230\u7f13\u5b58\u4e2d\uff0c\u90a3\u5c31\u53ef\u4ee5\u91c7\u7528\u5ef6\u65f6\u53cc\u5220\uff0c\u5f02\u6b65\u53cc\u5220</p> <p>\u5982\u4e0b\u4e09\u79cd\u6a21\u5f0f\u80e1\u626f \u65c1\u8def\u7f13\u5b58\uff0c\u8bfb\u5199\u7a7f\u900f\uff0c\u5f02\u6b65\u7f13\u5b58\u5199\u5165 \u4e09\u79cd\u6a21\u5f0f: 1. Cache Aside Pattern\uff08\u65c1\u8def\u7f13\u5b58\u6a21\u5f0f\uff09    \u5931\u6548\uff1a\u5148\u4ececache\u53d6\u6570\u636e\uff0c\u6ca1\u53d6\u5230\u5219\u4ece\u6570\u636e\u5e93\u79cd\u53d6\u6570\u636e\uff0c\u6210\u529f\u540e\u653e\u5230\u7f13\u5b58\u4e2d\u3002    \u547d\u4e2d\uff1acache\u4e2d\u53d6\u5230\uff0c\u8fd4\u56de    \u66f4\u65b0\uff1a\u5148\u5b58\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u7136\u540e\u5220\u9664\u7f13\u5b58</p> <p>\u5199\u64cd\u4f5c\u9891\u7e41\u4f1a\u5bfc\u81f4\u7f13\u5b58\u6570\u636e\u9891\u7e41\u5220\u9664, \u5f71\u54cd\u547d\u4e2d\u7387.     \u89e3\u51b3:    - \u5f3a\u4e00\u81f4\u573a\u666f, \u5c06DB\u548c\u7f13\u5b58\u52a0\u9501\u540e\u540c\u65f6\u66f4\u65b0    - \u5f31\u4e00\u81f4\u573a\u666f, \u540c\u6837\u540c\u65f6\u66f4\u65b0, \u4e0d\u8fc7\u53ef\u4ee5\u4e0d\u52a0\u9501, \u6b64\u65f6\u5982\u679c\u66f4\u65b0DB\u5931\u8d25, \u4f1a\u9020\u6210\u4e0d\u4e00\u81f4, \u5e94\u5f53\u7f29\u51cf\u7f13\u5b58\u8fc7\u671f\u65f6\u95f4 2. Read/Write Through Pattern\uff08\u8bfb\u5199\u7a7f\u900f\uff09    \u5c06\u66f4\u65b0\u64cd\u4f5c\u4ea4\u7531\u7f13\u5b58\u5c42\u81ea\u5df1\u4ee3\u7406    \u5199:     - cache \u4e2d\u4e0d\u5b58\u5728\uff0c\u76f4\u63a5\u66f4\u65b0 DB\u3002    - cache \u4e2d\u5b58\u5728\uff0c\u5219\u5148\u66f4\u65b0 cache\uff0c\u7136\u540e cache \u670d\u52a1\u81ea\u5df1\u66f4\u65b0 DB\uff08\u540c\u6b65\u66f4\u65b0 cache \u548c DB\uff09\u3002</p> <p>\u8bfb:    - \u4ece cache \u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u8bfb\u53d6\u5230\u5c31\u76f4\u63a5\u8fd4\u56de.    - \u8bfb\u53d6\u4e0d\u5230\uff0c\u7531cache\u670d\u52a1\u4ece DB \u52a0\u8f7d\uff0c\u5199\u5165\u5230 cache \u540e\u8fd4\u56de\u54cd\u5e94\u3002</p> <ol> <li>Write Behind Pattern\uff08\u5f02\u6b65\u7f13\u5b58\u5199\u5165\uff09    \u8ddf\u8bfb\u5199\u7a7f\u900f\u7c7b\u4f3c, \u4e0d\u540c\u70b9\u662f\u5f02\u6b65\u6279\u91cf\u66f4\u65b0DB. \u7c7b\u4f3c\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u5237\u5199\u78c1\u76d8\u64cd\u4f5c</li> </ol>"},{"location":"redis/redis/#_18","title":"\u5206\u5e03\u5f0f\u89e3\u51b3\u65b9\u6848","text":"<p>CAP\u4e2dAP\u6ee1\u8db3</p>"},{"location":"redis/redis/#_19","title":"\u4e3b\u4ece\u540c\u6b65","text":"<p>\u589e\u91cf\u540c\u6b65 + \u5feb\u7167\u540c\u6b65 \u4e3b\u5907\u540c\u6b65 \u542f\u52a8\u521d\u59cb\u5316 rewrite</p>"},{"location":"redis/redis/#_20","title":"\u54e8\u5175","text":"<p>\u54e8\u5175\u96c6\u7fa4\uff0c\u5ba2\u6237\u7aef\u5148\u8bbf\u95ee\u54e8\u5175\uff0c\u54e8\u5175\u7ed9\u51fa\u8282\u70b9\u5730\u5740\uff1b\u8282\u70b9\u4e0d\u53ef\u7528\u5219\u7531\u54e8\u5175\u9009\u51fa\u4e0b\u4e00\u4e2a\u4e3b\u8282\u70b9 \u4e3b\u4ece\u590d\u5236\u662f\u5f02\u6b65\u590d\u5236\uff0c\u90a3\u4e48\u4e3b\u8282\u70b9\u6545\u969c\u65f6\u53ef\u80fd\u4f1a\u4e22\u5931\u6d88\u606f\uff1b\u89e3\u51b3\u65b9\u6848\u662f\u5fc5\u987b\u81f3\u5c11\u6709x\u4e2a\u4ece\u8282\u70b9y\u79d2\u5185\u6709\u5fc3\u8df3\uff0c\u5426\u5219\u4e0d\u53ef\u7528</p>"},{"location":"redis/redis/#_21","title":"\u538b\u529b\u8fc7\u5927","text":"<p>\u5206\u7247\u96c6\u7fa4 \u4ee3\u7406\u96c6\u7fa4</p>"},{"location":"redis/redis/#akf","title":"AKF","text":"<p>\u6269\u5c55\u95ee\u9898\uff0c\u53ef\u4ee5\u5206\u4e3a\u4e09\u4e2a\u7ef4\u5ea6\u6269\u5c55 X:\u4e3b\u4e3b \u4e3b\u4ece \u4e3b\u5907 Y:\u4e1a\u52a1\u3001\u6280\u672f\u670d\u52a1\u7ef4\u5ea6\u62c6\u5206 Z:\u6570\u636e\u7ef4\u5ea6\u62c6\u5206 \u5206\u7247\u600e\u4e48\u505a: redis\u505a\u81ea\u6709\u7684\u6cbb\u7406, \u8bf7\u6c42\u5230redis\u4e0a\u4e4b\u540eredis\u901a\u8fc7\u7b97\u6cd5\u51b3\u5b9a\u54ea\u4e2a\u69fd\u4f4d\u5904\u7406</p>"},{"location":"redis/redis/#copy-on-writecow","title":"copy-on-write(COW)","text":"<p>\u5982\u679c\u6709\u591a\u4e2a\u8c03\u7528\u8005\u540c\u65f6\u8bf7\u6c42\u76f8\u540c\u8d44\u6e90\uff08\u5982\u5185\u5b58\u6216\u78c1\u76d8\u4e0a\u7684\u6570\u636e\u5b58\u50a8\uff09\uff0c\u4ed6\u4eec\u4f1a\u5171\u540c\u83b7\u53d6\u76f8\u540c\u7684\u6307\u9488\u6307\u5411\u76f8\u540c\u7684\u8d44\u6e90\uff0c\u76f4\u5230\u67d0\u4e2a\u8c03\u7528\u8005\u8bd5\u56fe\u4fee\u6539\u8d44\u6e90\u7684\u5185\u5bb9\u65f6\uff0c\u7cfb\u7edf\u624d\u4f1a\u771f\u6b63\u590d\u5236\u4e00\u4efd\u4e13\u7528\u526f\u672c\uff08private copy\uff09\u7ed9\u8be5\u8c03\u7528\u8005\uff0c\u800c\u5176\u4ed6\u8c03\u7528\u8005\u6240\u89c1\u5230\u7684\u6700\u521d\u7684\u8d44\u6e90\u4ecd\u7136\u4fdd\u6301\u4e0d\u53d8\u3002</p>"},{"location":"redis/redis/#bio-nio","title":"BIO NIO \u95ee\u9898","text":"<p>socket -&gt; bind -&gt; listen</p> <p>\u5386\u53f2\u65f6\u671fBIO: \u56e0\u4e3aclient\u901a\u8fc7TCP\u8fde\u63a5kernel(\u5185\u6838), \u6bcf\u4e2a\u8fde\u63a5\u5c31\u662f\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26(\u5982fd8), \u5bfc\u81f4\u7ebf\u7a0b\u4ecekernel\u8bfb\u53d6fd8\u7684\u65f6\u5019\u4ea7\u751f\u963b\u585e, \u5fc5\u987b\u901a\u8fc7\u53e6\u5916\u7684\u7ebf\u7a0b\u7b49\u5f85\u8fde\u63a5. \u7ebf\u7a0b\u7684\u5f00\u9500\u5927 \u5386\u53f2\u65f6\u671fNIO: \u901a\u8fc7\u5faa\u73af\u8bfb\u53d6fd, \u7cfb\u7edf\u8c03\u7528\u4f1a\u6709\u7528\u6237\u6001\u5230\u5185\u6838\u6001\u5207\u6362\u7684\u8fc7\u7a0b, client\u591a\u7684\u65f6\u5019\u5faa\u73af\u6b21\u6570\u591a, \u65f6\u95f4\u5f00\u9500\u5927 \u5386\u53f2\u65f6\u671f\u591a\u8def\u590d\u7528: \u5185\u6838\u6539\u53d8, \u8c03\u7528select(), \u5185\u6838\u53bb\u904d\u5386. \u4f46\u662f\u6bcf\u6b21\u8c03\u7528select\u4f1a\u4f20\u9012\u6240\u6709\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26, \u5e76\u4e14\u6bcf\u6b21\u904d\u5386\u6240\u6709\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 epoll: I/O event notification facility epoll_create, epoll_ctl, epoll_</p>"},{"location":"redis/redis/#_22","title":"\u786c\u76d8\u541e\u5410","text":"<p>\u53ef\u8fbe\u767e\u5146/G  \u5185\u5b58 ns\u7ea7\u522b \u786c\u76d8 \u5bfb\u5740\u65f6\u95f4ms\u7ea7\u522b \u603b\u7ebf\u6807\u51c6\u901a\u5e38\u4e24\u79cd(\u6d88\u8d39\u7ea7): SATA PCIe SSD\u7684\u89c4\u683c\u534f\u8bae\u901a\u5e38\u4e24\u79cd(\u6d88\u8d39\u7ea7): AHCI NVMe (\u4e0e\u4e0a\u6587\u5bf9\u5e94</p>"},{"location":"redis/redis/#_23","title":"\u6b7b\u9501","text":"<ul> <li>\u8d85\u65f6\u56de\u6eda</li> <li>\u7b49\u5f85\u56fe\uff1a\u901a\u8fc7\u9501\u7684\u4fe1\u606f\u94fe\u8868\u548c\u4e8b\u52a1\u7b49\u5f85\u94fe\u8868</li> </ul>"}]}